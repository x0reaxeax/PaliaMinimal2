#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MusicManager

#include "Basic.hpp"

#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_MusicManager.BP_MusicManager_C.ExecuteUbergraph_BP_MusicManager
// 0x0030 (0x0030 - 0x0000)
struct BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAkCallbackType                               K2Node_CustomEvent_CallbackType;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        K2Node_CustomEvent_CallbackInfo;                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkMusicSyncCallbackInfo*               K2Node_DynamicCast_AsAk_Music_Sync_Callback_Info;  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451D[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostGlobalMusic_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager) == 0x000008, "Wrong alignment on BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager");
static_assert(sizeof(BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager) == 0x000030, "Wrong size on BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager");
static_assert(offsetof(BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager, EntryPoint) == 0x000000, "Member 'BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager, K2Node_CustomEvent_CallbackType) == 0x000004, "Member 'BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager::K2Node_CustomEvent_CallbackType' has a wrong offset!");
static_assert(offsetof(BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager, K2Node_CustomEvent_CallbackInfo) == 0x000008, "Member 'BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager::K2Node_CustomEvent_CallbackInfo' has a wrong offset!");
static_assert(offsetof(BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager, K2Node_DynamicCast_AsAk_Music_Sync_Callback_Info) == 0x000010, "Member 'BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager::K2Node_DynamicCast_AsAk_Music_Sync_Callback_Info' has a wrong offset!");
static_assert(offsetof(BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager, CallFunc_PostGlobalMusic_ReturnValue) == 0x00002C, "Member 'BP_MusicManager_C_ExecuteUbergraph_BP_MusicManager::CallFunc_PostGlobalMusic_ReturnValue' has a wrong offset!");

// Function BP_MusicManager.BP_MusicManager_C.GetIsSwitchingBetweenNightAndDay
// 0x0001 (0x0001 - 0x0000)
struct BP_MusicManager_C_GetIsSwitchingBetweenNightAndDay final
{
public:
	bool                                          Param_bSwitchingBetweenNightAndDay;                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicManager_C_GetIsSwitchingBetweenNightAndDay) == 0x000001, "Wrong alignment on BP_MusicManager_C_GetIsSwitchingBetweenNightAndDay");
static_assert(sizeof(BP_MusicManager_C_GetIsSwitchingBetweenNightAndDay) == 0x000001, "Wrong size on BP_MusicManager_C_GetIsSwitchingBetweenNightAndDay");
static_assert(offsetof(BP_MusicManager_C_GetIsSwitchingBetweenNightAndDay, Param_bSwitchingBetweenNightAndDay) == 0x000000, "Member 'BP_MusicManager_C_GetIsSwitchingBetweenNightAndDay::Param_bSwitchingBetweenNightAndDay' has a wrong offset!");

// Function BP_MusicManager.BP_MusicManager_C.GetMusAfterDayNightTransition
// 0x0008 (0x0008 - 0x0000)
struct BP_MusicManager_C_GetMusAfterDayNightTransition final
{
public:
	class UAkSwitchValue*                         Param_MusTriggerAfterDayNight;                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicManager_C_GetMusAfterDayNightTransition) == 0x000008, "Wrong alignment on BP_MusicManager_C_GetMusAfterDayNightTransition");
static_assert(sizeof(BP_MusicManager_C_GetMusAfterDayNightTransition) == 0x000008, "Wrong size on BP_MusicManager_C_GetMusAfterDayNightTransition");
static_assert(offsetof(BP_MusicManager_C_GetMusAfterDayNightTransition, Param_MusTriggerAfterDayNight) == 0x000000, "Member 'BP_MusicManager_C_GetMusAfterDayNightTransition::Param_MusTriggerAfterDayNight' has a wrong offset!");

// Function BP_MusicManager.BP_MusicManager_C.HandleUserCue
// 0x0010 (0x0010 - 0x0000)
struct BP_MusicManager_C_HandleUserCue final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicManager_C_HandleUserCue) == 0x000008, "Wrong alignment on BP_MusicManager_C_HandleUserCue");
static_assert(sizeof(BP_MusicManager_C_HandleUserCue) == 0x000010, "Wrong size on BP_MusicManager_C_HandleUserCue");
static_assert(offsetof(BP_MusicManager_C_HandleUserCue, CallbackType) == 0x000000, "Member 'BP_MusicManager_C_HandleUserCue::CallbackType' has a wrong offset!");
static_assert(offsetof(BP_MusicManager_C_HandleUserCue, CallbackInfo) == 0x000008, "Member 'BP_MusicManager_C_HandleUserCue::CallbackInfo' has a wrong offset!");

// Function BP_MusicManager.BP_MusicManager_C.OnMusUserCallback__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_MusicManager_C_OnMusUserCallback__DelegateSignature final
{
public:
	class FString                                 UserCueName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicManager_C_OnMusUserCallback__DelegateSignature) == 0x000008, "Wrong alignment on BP_MusicManager_C_OnMusUserCallback__DelegateSignature");
static_assert(sizeof(BP_MusicManager_C_OnMusUserCallback__DelegateSignature) == 0x000010, "Wrong size on BP_MusicManager_C_OnMusUserCallback__DelegateSignature");
static_assert(offsetof(BP_MusicManager_C_OnMusUserCallback__DelegateSignature, UserCueName) == 0x000000, "Member 'BP_MusicManager_C_OnMusUserCallback__DelegateSignature::UserCueName' has a wrong offset!");

// Function BP_MusicManager.BP_MusicManager_C.SetIsSwitchingBetweenNightAndDay
// 0x0001 (0x0001 - 0x0000)
struct BP_MusicManager_C_SetIsSwitchingBetweenNightAndDay final
{
public:
	bool                                          Param_bSwitchingBetweenNightAndDay;                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicManager_C_SetIsSwitchingBetweenNightAndDay) == 0x000001, "Wrong alignment on BP_MusicManager_C_SetIsSwitchingBetweenNightAndDay");
static_assert(sizeof(BP_MusicManager_C_SetIsSwitchingBetweenNightAndDay) == 0x000001, "Wrong size on BP_MusicManager_C_SetIsSwitchingBetweenNightAndDay");
static_assert(offsetof(BP_MusicManager_C_SetIsSwitchingBetweenNightAndDay, Param_bSwitchingBetweenNightAndDay) == 0x000000, "Member 'BP_MusicManager_C_SetIsSwitchingBetweenNightAndDay::Param_bSwitchingBetweenNightAndDay' has a wrong offset!");

// Function BP_MusicManager.BP_MusicManager_C.SetMusAfterDayNightTransition
// 0x0008 (0x0008 - 0x0000)
struct BP_MusicManager_C_SetMusAfterDayNightTransition final
{
public:
	class UAkSwitchValue*                         Param_MusTriggerAfterDayNight;                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicManager_C_SetMusAfterDayNightTransition) == 0x000008, "Wrong alignment on BP_MusicManager_C_SetMusAfterDayNightTransition");
static_assert(sizeof(BP_MusicManager_C_SetMusAfterDayNightTransition) == 0x000008, "Wrong size on BP_MusicManager_C_SetMusAfterDayNightTransition");
static_assert(offsetof(BP_MusicManager_C_SetMusAfterDayNightTransition, Param_MusTriggerAfterDayNight) == 0x000000, "Member 'BP_MusicManager_C_SetMusAfterDayNightTransition::Param_MusTriggerAfterDayNight' has a wrong offset!");

// Function BP_MusicManager.BP_MusicManager_C.SetSkipTODTransition
// 0x0001 (0x0001 - 0x0000)
struct BP_MusicManager_C_SetSkipTODTransition final
{
public:
	bool                                          Param_ShouldSkipTODTransition;                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MusicManager_C_SetSkipTODTransition) == 0x000001, "Wrong alignment on BP_MusicManager_C_SetSkipTODTransition");
static_assert(sizeof(BP_MusicManager_C_SetSkipTODTransition) == 0x000001, "Wrong size on BP_MusicManager_C_SetSkipTODTransition");
static_assert(offsetof(BP_MusicManager_C_SetSkipTODTransition, Param_ShouldSkipTODTransition) == 0x000000, "Member 'BP_MusicManager_C_SetSkipTODTransition::Param_ShouldSkipTODTransition' has a wrong offset!");

}

