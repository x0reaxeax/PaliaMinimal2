#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnvironmentManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_WindStates_structs.hpp"
#include "Engine_structs.hpp"
#include "Palia_classes.hpp"
#include "S6Core_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnvironmentManager.BP_EnvironmentManager_C
// 0x02B0 (0x0958 - 0x06A8)
class ABP_EnvironmentManager_C final : public AValEnvironmentManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   MoonB_Path_Preview_Mesh;                           // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MoonA_Path_Preview_Mesh;                           // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sun_Path_Preview_Mesh;                             // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_StarySky;                                       // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sky_Clouds_Overcast1;                              // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sky_CloudBelt_01;                                  // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sky_CloudBelt_02;                                  // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   East;                                              // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   South;                                             // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   North;                                             // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   West;                                              // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MoonSmall_Mesh;                                    // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow_MoonB;                                       // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SkySphere;                                         // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MoonBig_Mesh;                                      // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow_Sun_Mesh;                                    // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sun_Mesh;                                          // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow_MoonA;                                       // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PlanetRoot;                                        // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         WindUVTimeline_Value_A6D2F3D2493F11745B2075A107F6FC9B; // 0x0770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WindUVTimeline__Direction_A6D2F3D2493F11745B2075A107F6FC9B; // 0x0774(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6025[0x3];                                     // 0x0775(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     WindUVTimeline;                                    // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         WindIntensityTimeline_lerp_D50B532D43F87E18CB64BC80EEE1B332; // 0x0780(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WindIntensityTimeline__Direction_D50B532D43F87E18CB64BC80EEE1B332; // 0x0784(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6026[0x3];                                     // 0x0785(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     WindIntensityTimeline;                             // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Clear_Transition_Value_A61599534D0E6A5DD5A4A6A3E27AEFCA; // 0x0790(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Clear_Transition__Direction_A61599534D0E6A5DD5A4A6A3E27AEFCA; // 0x0794(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6027[0x3];                                     // 0x0795(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Clear_Transition;                                  // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Overcast_Transition_Value_D69B036840F0862E72E639B8FEF71EEE; // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Overcast_Transition__Direction_D69B036840F0862E72E639B8FEF71EEE; // 0x07A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6028[0x3];                                     // 0x07A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Overcast_Transition;                               // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SunRiseTime;                                       // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SunSetTime;                                        // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoonARiseTime;                                     // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoonASetTime;                                      // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoonBRiseTime;                                     // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoonBSetTime;                                      // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SunInitialForward;                                 // 0x07E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SunInitialRight;                                   // 0x07F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoonAInitialForward;                               // 0x0810(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoonAIniitalRight;                                 // 0x0828(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoonBInitialForward;                               // 0x0840(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoonBIniitalRight;                                 // 0x0858(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindIntensitySource;                               // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindIntensityTarget;                               // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WindStates                                  CurrentWindState;                                  // 0x0880(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6029[0x7];                                     // 0x0881(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WindElapsedTime;                                   // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindUVLastUpdateTime;                              // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             WindTexture;                                       // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bPauseWindIntensityUpdates;                        // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602A[0x7];                                     // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewAssetName;                                      // 0x08A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 NewAssetSubfolder;                                 // 0x08B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<uint8>                                 WindTextureValues;                                 // 0x08C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        WindSize;                                          // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindTargetX;                                       // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindTargetY;                                       // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LastWeatherStateName;                              // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousCloudiness;                                // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CloudinessClearRand;                               // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindDelayRand;                                     // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindIntensity;                                     // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WindTextureUpdateTimer;                            // 0x0918(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        WindPreviousX;                                     // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindPreviousY;                                     // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAudioInitialized;                                 // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602B[0x7];                                     // 0x0931(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                WindRandWeights;                                   // 0x0938(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          WindOverrideActive;                                // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviewSkyPaths;                                   // 0x0949(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_602C[0x6];                                     // 0x094A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FreezeTime;                                        // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateIntensityOfWind(double WindDelta, class UTimelineComponent* Timeline, bool bSkipWindIntensityUpdate, double WindScale, double MaxWindSpeed, double MinWindSpeed, double PreviousWindY, double PreviousWindX, double WindOffsetUpdateFreq, double CallFunc_Lerp_ReturnValue);
	void WindUVTimeline__UpdateFunc();
	void WindUVTimeline__FinishedFunc();
	void WindIntensityTimeline__UpdateFunc();
	void WindIntensityTimeline__FinishedFunc();
	void WeatherPendingChange(struct FWeatherStateProperties& PendingState, int32 CountdownTime);
	void WeatherChangeEvent(struct FWeatherStateProperties& PendingState, double Time, class FName CurrentWeatherStateName, class FName OverrideName, double TransitionTime, bool K2Node_SwitchName_CmpSuccess, bool CallFunc_NotEqual_NameName_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue, class UValeriaWeather* CallFunc_GetWorldSubsystem_ReturnValue, bool GameplayTagsK2Node_SwitchGameplayTagContainer_CmpSuccess, class FName CallFunc_GetWeatherStateOverride_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue_1, bool CallFunc_NotEqual_NameName_ReturnValue_1, class UValeriaWeather* CallFunc_GetWorldSubsystem_ReturnValue_1, const struct FWeatherStateProperties& CallFunc_GetCurrentWorldWeatherState_ReturnValue);
	void UserConstructionScript(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_2);
	void UpdateWindUVTargets(bool* bTargetIsZero, double WindSpeedMax, double WindSpeedMin, int32 CallFunc_Blueprint_GetSizeY_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_Blueprint_GetSizeX_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, int32 CallFunc_Blueprint_GetSizeY_ReturnValue_1, int32 CallFunc_Blueprint_GetSizeX_ReturnValue_1, double CallFunc_Conv_IntToDouble_ReturnValue, double CallFunc_Conv_IntToDouble_ReturnValue_1, float CallFunc_GetScalarParameterValue_ReturnValue, double CallFunc_Lerp_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue, const struct FLinearColor& CallFunc_GetVectorParameterValue_ReturnValue, const struct FVector& CallFunc_Conv_LinearColorToVector_ReturnValue, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, double CallFunc_Multiply_DoubleDouble_ReturnValue, double CallFunc_Multiply_DoubleDouble_ReturnValue_1, double CallFunc_Subtract_DoubleDouble_ReturnValue, double CallFunc_Subtract_DoubleDouble_ReturnValue_1, double CallFunc_Percent_FloatFloat_ReturnValue, double CallFunc_Percent_FloatFloat_ReturnValue_1, double CallFunc_Lerp_Alpha_ImplicitCast);
	void UpdateWindUVOffsets(float InputPin, const struct FLinearColor& CallFunc_GetVectorParameterValue_ReturnValue, class UNiagaraParameterCollectionInstance* CallFunc_GetNiagaraParameterCollection_ReturnValue, const struct FVector& CallFunc_Conv_LinearColorToVector_ReturnValue, double CallFunc_Lerp_ReturnValue, double CallFunc_Lerp_ReturnValue_1, const struct FVector2D& CallFunc_MakeVector2D_ReturnValue, double CallFunc_Lerp_Alpha_ImplicitCast, double CallFunc_Lerp_Alpha_ImplicitCast_1, float CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast, float CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_1);
	void UpdateWindState(E_WindStates CallFunc_GetWindStateRandomWeighted_ReturnValue);
	void UpdateEnvMPC(double Time, const struct FVector& CallFunc_Conv_DoubleToVector_ReturnValue, const struct FVector& CallFunc_GetForwardVector_ReturnValue, const struct FVector& CallFunc_Multiply_VectorVector_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FLinearColor& CallFunc_Conv_VectorToLinearColor_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_1, bool CallFunc_InRange_FloatFloat_ReturnValue, const struct FLinearColor& CallFunc_GetLightColor_ReturnValue, const struct FVector& CallFunc_SelectVector_ReturnValue, const struct FLinearColor& CallFunc_Conv_VectorToLinearColor_ReturnValue_1, float CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast);
	void UpdateEnvAudio(double Time, double WindStrength, double AudioTimeScale, double CallFunc_Multiply_DoubleDouble_ReturnValue);
	void ToggleStars();
	void TestThingy();
	void StartWindTextureUpdate();
	void SetWindIntensity(double NewIntensity, class UNiagaraParameterCollectionInstance* CallFunc_GetNiagaraParameterCollection_ReturnValue, float CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast, float CallFunc_SetFloatParameter_InValue_ImplicitCast);
	void SetInitialMusic(class UBP_MusicManager_C* CallFunc_GetMusicManager_AsBP_Music_Manager, class UValeriaTimeManager* CallFunc_GetGameInstanceSubsystem_ReturnValue, const struct FTimeOfDayFilter& K2Node_MakeStruct_TimeOfDayFilter, bool CallFunc_IsWithinTimeOfDayFilter_ReturnValue);
	void RotatePlanetMeshes(double Time);
	void RefreshWindParams(float CallFunc_GetTimelineLength_ReturnValue, double CallFunc_Get_Wind_State_Value_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue, double CallFunc_Divide_DoubleDouble_A_ImplicitCast, float CallFunc_SetPlayRate_NewRate_ImplicitCast);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void PlayWindTextureUpdate();
	void PlayWind();
	void OverrideWindIntensity(double Intensity);
	void OvercastWeather2(double TransitionTime, double Amount);
	void Overcast_Transition__UpdateFunc();
	void Overcast_Transition__FinishedFunc();
	void OnNight();
	void OnMorning();
	void OnEvening();
	void OnDay();
	void MusicCallback(const class FString& UserCueName);
	void InitializeEnvAudio(TDelegate<void(const class FString& UserCueName)>& DayNightMusicCallback, class UBP_MusicManager_C* CallFunc_GetMusicManager_AsBP_Music_Manager, bool CallFunc_IsValid_ReturnValue);
	void IgnoreMusTransition(bool* IgnoreDayNightTransition, class UBP_MusicManager_C* CallFunc_GetMusicManager_AsBP_Music_Manager, bool CallFunc_IsValid_ReturnValue);
	E_WindStates GetWindStateRandomWeighted(double CurrentWeight, int32 Param_Index, double Rand, E_WindStates Temp_byte_Variable, E_WindStates Temp_byte_Variable_1, E_WindStates Temp_byte_Variable_2, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_DoubleDouble_ReturnValue, int32 Temp_int_Variable, E_WindStates K2Node_Select_Default, double CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, double CallFunc_Add_DoubleDouble_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, double CallFunc_RandomFloat_ReturnValue);
	void GetInitialArrowRotations(const struct FVector& CallFunc_GetRightVector_ReturnValue, const struct FVector& CallFunc_GetRightVector_ReturnValue_1, const struct FVector& CallFunc_GetForwardVector_ReturnValue, const struct FVector& CallFunc_GetForwardVector_ReturnValue_1, const struct FVector& CallFunc_GetForwardVector_ReturnValue_2, const struct FVector& CallFunc_GetRightVector_ReturnValue_2);
	double Get_Wind_State_Value(const struct FS_WindRanges& EnvWindRanges, E_WindStates Temp_byte_Variable, double CallFunc_RandomFloatInRange_ReturnValue, double CallFunc_RandomFloatInRange_ReturnValue_1, double CallFunc_RandomFloatInRange_ReturnValue_2, double CallFunc_RandomFloatInRange_ReturnValue_3, double K2Node_Select_Default, double CallFunc_RandomFloatInRange_Max_ImplicitCast, double CallFunc_RandomFloatInRange_Max_ImplicitCast_1, double CallFunc_RandomFloatInRange_Min_ImplicitCast, double CallFunc_RandomFloatInRange_Min_ImplicitCast_1, double CallFunc_RandomFloatInRange_Max_ImplicitCast_2, double CallFunc_RandomFloatInRange_Max_ImplicitCast_3, double CallFunc_RandomFloatInRange_Min_ImplicitCast_2, double CallFunc_RandomFloatInRange_Min_ImplicitCast_3);
	void ForceTickUpdate();
	void ExecuteUbergraph_BP_EnvironmentManager(int32 EntryPoint, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GetIsNightTime_ReturnValue, bool CallFunc_GetIsTimeFrozen_ReturnValue, float CallFunc_GetEnvManagerTimeOfDay_ReturnValue, bool Temp_bool_Variable, bool CallFunc_GetIsTimeFrozen_ReturnValue_1, const struct FLinearColor& K2Node_MakeStruct_LinearColor, const struct FLinearColor& K2Node_MakeStruct_LinearColor_1, const struct FLinearColor& K2Node_MakeStruct_LinearColor_2, const struct FLinearColor& K2Node_MakeStruct_LinearColor_3, bool Temp_bool_Has_Been_Initd_Variable, float K2Node_Event_DeltaSeconds, bool Temp_bool_IsClosed_Variable, struct FWeatherStateProperties& K2Node_CustomEvent_pendingState, int32 K2Node_CustomEvent_countdownTime, double CallFunc_Conv_IntToDouble_ReturnValue, class APlayerController* CallFunc_GetPlayerController_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue, class APawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, double K2Node_CustomEvent_TransitionTime_1, double K2Node_CustomEvent_TransitionTime, double K2Node_CustomEvent_Amount, float CallFunc_GetTimelineLength_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue_1, float CallFunc_GetScalarParameterValue_ReturnValue, TDelegate<void(const class FString& UserCueName)> K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetScalarParameterValue_ReturnValue_1, float CallFunc_GetTimelineLength_ReturnValue_1, class UValeriaWeather* CallFunc_GetWorldSubsystem_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue_2, const struct FWeatherPatternConfig& CallFunc_GetCurrentWeatherData_ReturnValue, double CallFunc_RandomFloatInRange_ReturnValue, class UValeriaWeather* CallFunc_GetWorldSubsystem_ReturnValue_1, const struct FWeatherStateProperties& CallFunc_GetCurrentWorldWeatherState_ReturnValue, double CallFunc_Lerp_ReturnValue, const class FString& K2Node_CustomEvent_UserCueName, double CallFunc_Lerp_ReturnValue_1, bool CallFunc_EqualEqual_StrStr_ReturnValue, TDelegate<void(struct FWeatherStateProperties& PendingState, int32 CountdownTime)> K2Node_CreateDelegate_OutputDelegate_1, double CallFunc_RandomFloatInRange_ReturnValue_1, double CallFunc_Add_DoubleDouble_ReturnValue, bool CallFunc_UpdateWindUVTargets_bTargetIsZero, class UBP_MusicManager_C* CallFunc_GetMusicManager_AsBP_Music_Manager, bool CallFunc_IsValid_ReturnValue_2, class UValeriaWeather* CallFunc_GetWorldSubsystem_ReturnValue_2, const struct FWeatherPatternConfig& CallFunc_GetCurrentWeatherData_ReturnValue_1, class UBP_MusicManager_C* CallFunc_GetMusicManager_AsBP_Music_Manager_1, double K2Node_CustomEvent_Time, class UAkSwitchValue* CallFunc_GetMusAfterDayNightTransition_MusTriggerAfterDayNight, bool CallFunc_IsValid_ReturnValue_3, bool CallFunc_IgnoreMusTransition_IgnoreDayNightTransition, bool CallFunc_IgnoreMusTransition_IgnoreDayNightTransition_1, bool CallFunc_DisableIfServer_ReturnValue, ERedirectsPlatform CallFunc_GetPlatformType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float K2Node_Select_Default, float CallFunc_FreezeLightingAtTime_Time_ImplicitCast, float CallFunc_Delay_Duration_ImplicitCast, double CallFunc_Divide_DoubleDouble_A_ImplicitCast, float CallFunc_SetPlayRate_NewRate_ImplicitCast, float CallFunc_Delay_Duration_ImplicitCast_1, double K2Node_VariableSet_PreviousCloudiness_ImplicitCast, double K2Node_VariableSet_PreviousCloudiness_ImplicitCast_1, double CallFunc_Divide_DoubleDouble_A_ImplicitCast_1, float CallFunc_SetPlayRate_NewRate_ImplicitCast_1, double CallFunc_Lerp_Alpha_ImplicitCast, float CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast, double CallFunc_Lerp_Alpha_ImplicitCast_1, float CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_1, double CallFunc_UpdateIntensityOfWind_WindDelta_ImplicitCast, float CallFunc_Delay_Duration_ImplicitCast_2, float K2Node_Select_Option_1_ImplicitCast, double CallFunc_RotatePlanetMeshes_Time_ImplicitCast, double CallFunc_UpdateEnvMPC_Time_ImplicitCast, double CallFunc_UpdateEnvAudio_Time_ImplicitCast);
	void DisableWind(bool CallFunc_K2_IsValidTimerHandle_ReturnValue);
	void CreateNewLightingState(int32 SuffixCount, const class FString& Suffix, const class FString& FullAssetPath, const class FString& BasePath, const class FString& Param_Name, const class FString& Subfolder, const class FString& CallFunc_Concat_StrStr_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue_1, class ULightingBaseState* CallFunc_CreateNewLightingStateFromCurrentSettings_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue_2, const class FString& CallFunc_Concat_StrStr_ReturnValue_3, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_FileExists_ReturnValue, int32 Temp_int_Variable, const class FString& CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_IsEmpty_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue_4, const class FString& CallFunc_MakeValidFileName_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue_5, const class FString& CallFunc_Split_LeftS, const class FString& CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, const class FString& CallFunc_SelectString_ReturnValue, const class FString& CallFunc_MakeValidFileName_ReturnValue_1, const class FString& CallFunc_Trim_ReturnValue, bool CallFunc_IsEmpty_ReturnValue_1, const class FString& CallFunc_TrimTrailing_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue_6, const class FString& CallFunc_Concat_StrStr_ReturnValue_7, const class FString& CallFunc_Concat_StrStr_ReturnValue_8, const class FString& CallFunc_Concat_StrStr_ReturnValue_9, const class FString& CallFunc_Concat_StrStr_ReturnValue_10, const class FString& CallFunc_Concat_StrStr_ReturnValue_11);
	void ClearWeather2(double TransitionTime);
	void Clear_Transition__UpdateFunc();
	void Clear_Transition__FinishedFunc();
	void CinematicFreezeTime(double Time);
	void CinematicEndFreezeTime();
	void CheckWindEnabled();
	void BeginWindUpdates(const struct FTimerHandle& CallFunc_K2_SetTimer_ReturnValue, const struct FTimerHandle& CallFunc_K2_SetTimer_ReturnValue_1, float CallFunc_GetScalarParameterValue_ReturnValue, TArray<uint8>& CallFunc_GetValuesFromGrayscaleTexture_ReturnValue, double K2Node_VariableSet_WindSize_ImplicitCast);

	float GetWindIntensityAtPos(const struct FVector& Pos, const struct FVector& CallFunc_Divide_VectorInt_ReturnValue, int32 CallFunc_Blueprint_GetSizeY_ReturnValue, const struct FVector& CallFunc_Vector_GetAbs_ReturnValue, double CallFunc_Conv_IntToDouble_ReturnValue, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, double CallFunc_Conv_IntToDouble_ReturnValue_1, double CallFunc_Percent_FloatFloat_ReturnValue, double CallFunc_Percent_FloatFloat_ReturnValue_1, double CallFunc_Divide_DoubleDouble_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue_1, double CallFunc_Multiply_DoubleDouble_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, int32 CallFunc_Blueprint_GetSizeY_ReturnValue_1, int32 CallFunc_Blueprint_GetSizeX_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, int32 CallFunc_Blueprint_GetSizeX_ReturnValue_1, double CallFunc_Multiply_IntFloat_ReturnValue, double CallFunc_Add_DoubleDouble_ReturnValue, double CallFunc_Percent_FloatFloat_ReturnValue_2, int32 CallFunc_Blueprint_GetSizeX_ReturnValue_2, int32 CallFunc_Round_ReturnValue, double CallFunc_Conv_IntToDouble_ReturnValue_2, double CallFunc_Multiply_IntFloat_ReturnValue_1, double CallFunc_Conv_IntToDouble_ReturnValue_3, double CallFunc_Multiply_DoubleDouble_ReturnValue_1, double CallFunc_Add_DoubleDouble_ReturnValue_1, double CallFunc_Percent_FloatFloat_ReturnValue_3, int32 CallFunc_Round_ReturnValue_1, uint8 CallFunc_GetValueFromFlattened2DArray_ReturnValue, double CallFunc_Conv_ByteToDouble_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue_2, float K2Node_FunctionResult_ReturnValue_ImplicitCast) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnvironmentManager_C">();
	}
	static class ABP_EnvironmentManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EnvironmentManager_C>();
	}
};
static_assert(alignof(ABP_EnvironmentManager_C) == 0x000008, "Wrong alignment on ABP_EnvironmentManager_C");
static_assert(sizeof(ABP_EnvironmentManager_C) == 0x000958, "Wrong size on ABP_EnvironmentManager_C");
static_assert(offsetof(ABP_EnvironmentManager_C, UberGraphFrame) == 0x0006A8, "Member 'ABP_EnvironmentManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonB_Path_Preview_Mesh) == 0x0006B0, "Member 'ABP_EnvironmentManager_C::MoonB_Path_Preview_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonA_Path_Preview_Mesh) == 0x0006B8, "Member 'ABP_EnvironmentManager_C::MoonA_Path_Preview_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Sun_Path_Preview_Mesh) == 0x0006C0, "Member 'ABP_EnvironmentManager_C::Sun_Path_Preview_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, NS_StarySky) == 0x0006C8, "Member 'ABP_EnvironmentManager_C::NS_StarySky' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Sky_Clouds_Overcast1) == 0x0006D0, "Member 'ABP_EnvironmentManager_C::Sky_Clouds_Overcast1' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Sky_CloudBelt_01) == 0x0006D8, "Member 'ABP_EnvironmentManager_C::Sky_CloudBelt_01' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Sky_CloudBelt_02) == 0x0006E0, "Member 'ABP_EnvironmentManager_C::Sky_CloudBelt_02' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, East) == 0x0006E8, "Member 'ABP_EnvironmentManager_C::East' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, South) == 0x0006F0, "Member 'ABP_EnvironmentManager_C::South' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, North) == 0x0006F8, "Member 'ABP_EnvironmentManager_C::North' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, West) == 0x000700, "Member 'ABP_EnvironmentManager_C::West' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, DirectionalLight) == 0x000708, "Member 'ABP_EnvironmentManager_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonSmall_Mesh) == 0x000710, "Member 'ABP_EnvironmentManager_C::MoonSmall_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Arrow_MoonB) == 0x000718, "Member 'ABP_EnvironmentManager_C::Arrow_MoonB' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, ExponentialHeightFog) == 0x000720, "Member 'ABP_EnvironmentManager_C::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, PostProcess) == 0x000728, "Member 'ABP_EnvironmentManager_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, SkySphere) == 0x000730, "Member 'ABP_EnvironmentManager_C::SkySphere' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonBig_Mesh) == 0x000738, "Member 'ABP_EnvironmentManager_C::MoonBig_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Arrow_Sun_Mesh) == 0x000740, "Member 'ABP_EnvironmentManager_C::Arrow_Sun_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Sun_Mesh) == 0x000748, "Member 'ABP_EnvironmentManager_C::Sun_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Arrow_MoonA) == 0x000750, "Member 'ABP_EnvironmentManager_C::Arrow_MoonA' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, PlanetRoot) == 0x000758, "Member 'ABP_EnvironmentManager_C::PlanetRoot' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, SkyLight) == 0x000760, "Member 'ABP_EnvironmentManager_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, DefaultSceneRoot) == 0x000768, "Member 'ABP_EnvironmentManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindUVTimeline_Value_A6D2F3D2493F11745B2075A107F6FC9B) == 0x000770, "Member 'ABP_EnvironmentManager_C::WindUVTimeline_Value_A6D2F3D2493F11745B2075A107F6FC9B' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindUVTimeline__Direction_A6D2F3D2493F11745B2075A107F6FC9B) == 0x000774, "Member 'ABP_EnvironmentManager_C::WindUVTimeline__Direction_A6D2F3D2493F11745B2075A107F6FC9B' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindUVTimeline) == 0x000778, "Member 'ABP_EnvironmentManager_C::WindUVTimeline' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindIntensityTimeline_lerp_D50B532D43F87E18CB64BC80EEE1B332) == 0x000780, "Member 'ABP_EnvironmentManager_C::WindIntensityTimeline_lerp_D50B532D43F87E18CB64BC80EEE1B332' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindIntensityTimeline__Direction_D50B532D43F87E18CB64BC80EEE1B332) == 0x000784, "Member 'ABP_EnvironmentManager_C::WindIntensityTimeline__Direction_D50B532D43F87E18CB64BC80EEE1B332' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindIntensityTimeline) == 0x000788, "Member 'ABP_EnvironmentManager_C::WindIntensityTimeline' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Clear_Transition_Value_A61599534D0E6A5DD5A4A6A3E27AEFCA) == 0x000790, "Member 'ABP_EnvironmentManager_C::Clear_Transition_Value_A61599534D0E6A5DD5A4A6A3E27AEFCA' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Clear_Transition__Direction_A61599534D0E6A5DD5A4A6A3E27AEFCA) == 0x000794, "Member 'ABP_EnvironmentManager_C::Clear_Transition__Direction_A61599534D0E6A5DD5A4A6A3E27AEFCA' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Clear_Transition) == 0x000798, "Member 'ABP_EnvironmentManager_C::Clear_Transition' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Overcast_Transition_Value_D69B036840F0862E72E639B8FEF71EEE) == 0x0007A0, "Member 'ABP_EnvironmentManager_C::Overcast_Transition_Value_D69B036840F0862E72E639B8FEF71EEE' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Overcast_Transition__Direction_D69B036840F0862E72E639B8FEF71EEE) == 0x0007A4, "Member 'ABP_EnvironmentManager_C::Overcast_Transition__Direction_D69B036840F0862E72E639B8FEF71EEE' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, Overcast_Transition) == 0x0007A8, "Member 'ABP_EnvironmentManager_C::Overcast_Transition' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, SunRiseTime) == 0x0007B0, "Member 'ABP_EnvironmentManager_C::SunRiseTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, SunSetTime) == 0x0007B8, "Member 'ABP_EnvironmentManager_C::SunSetTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonARiseTime) == 0x0007C0, "Member 'ABP_EnvironmentManager_C::MoonARiseTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonASetTime) == 0x0007C8, "Member 'ABP_EnvironmentManager_C::MoonASetTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonBRiseTime) == 0x0007D0, "Member 'ABP_EnvironmentManager_C::MoonBRiseTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonBSetTime) == 0x0007D8, "Member 'ABP_EnvironmentManager_C::MoonBSetTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, SunInitialForward) == 0x0007E0, "Member 'ABP_EnvironmentManager_C::SunInitialForward' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, SunInitialRight) == 0x0007F8, "Member 'ABP_EnvironmentManager_C::SunInitialRight' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonAInitialForward) == 0x000810, "Member 'ABP_EnvironmentManager_C::MoonAInitialForward' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonAIniitalRight) == 0x000828, "Member 'ABP_EnvironmentManager_C::MoonAIniitalRight' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonBInitialForward) == 0x000840, "Member 'ABP_EnvironmentManager_C::MoonBInitialForward' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, MoonBIniitalRight) == 0x000858, "Member 'ABP_EnvironmentManager_C::MoonBIniitalRight' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindIntensitySource) == 0x000870, "Member 'ABP_EnvironmentManager_C::WindIntensitySource' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindIntensityTarget) == 0x000878, "Member 'ABP_EnvironmentManager_C::WindIntensityTarget' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, CurrentWindState) == 0x000880, "Member 'ABP_EnvironmentManager_C::CurrentWindState' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindElapsedTime) == 0x000888, "Member 'ABP_EnvironmentManager_C::WindElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindUVLastUpdateTime) == 0x000890, "Member 'ABP_EnvironmentManager_C::WindUVLastUpdateTime' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindTexture) == 0x000898, "Member 'ABP_EnvironmentManager_C::WindTexture' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, bPauseWindIntensityUpdates) == 0x0008A0, "Member 'ABP_EnvironmentManager_C::bPauseWindIntensityUpdates' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, NewAssetName) == 0x0008A8, "Member 'ABP_EnvironmentManager_C::NewAssetName' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, NewAssetSubfolder) == 0x0008B8, "Member 'ABP_EnvironmentManager_C::NewAssetSubfolder' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindTextureValues) == 0x0008C8, "Member 'ABP_EnvironmentManager_C::WindTextureValues' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindSize) == 0x0008D8, "Member 'ABP_EnvironmentManager_C::WindSize' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindTargetX) == 0x0008E0, "Member 'ABP_EnvironmentManager_C::WindTargetX' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindTargetY) == 0x0008E8, "Member 'ABP_EnvironmentManager_C::WindTargetY' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, LastWeatherStateName) == 0x0008F0, "Member 'ABP_EnvironmentManager_C::LastWeatherStateName' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, PreviousCloudiness) == 0x0008F8, "Member 'ABP_EnvironmentManager_C::PreviousCloudiness' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, CloudinessClearRand) == 0x000900, "Member 'ABP_EnvironmentManager_C::CloudinessClearRand' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindDelayRand) == 0x000908, "Member 'ABP_EnvironmentManager_C::WindDelayRand' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindIntensity) == 0x000910, "Member 'ABP_EnvironmentManager_C::WindIntensity' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindTextureUpdateTimer) == 0x000918, "Member 'ABP_EnvironmentManager_C::WindTextureUpdateTimer' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindPreviousX) == 0x000920, "Member 'ABP_EnvironmentManager_C::WindPreviousX' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindPreviousY) == 0x000928, "Member 'ABP_EnvironmentManager_C::WindPreviousY' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, bAudioInitialized) == 0x000930, "Member 'ABP_EnvironmentManager_C::bAudioInitialized' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindRandWeights) == 0x000938, "Member 'ABP_EnvironmentManager_C::WindRandWeights' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, WindOverrideActive) == 0x000948, "Member 'ABP_EnvironmentManager_C::WindOverrideActive' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, PreviewSkyPaths) == 0x000949, "Member 'ABP_EnvironmentManager_C::PreviewSkyPaths' has a wrong offset!");
static_assert(offsetof(ABP_EnvironmentManager_C, FreezeTime) == 0x000950, "Member 'ABP_EnvironmentManager_C::FreezeTime' has a wrong offset!");

}

