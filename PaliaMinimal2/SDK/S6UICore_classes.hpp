#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S6UICore

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "CommonWidgetInputExtended_classes.hpp"
#include "CommonUI_classes.hpp"
#include "S6UICore_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "EnhancedInput_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "ModelViewViewModel_structs.hpp"
#include "ModelViewViewModel_classes.hpp"
#include "S6EnhancedInputExtended_structs.hpp"


namespace SDK
{

// Class S6UICore.S6UI_AsyncAction_OpenModal
// 0x0050 (0x0080 - 0x0030)
class US6UI_AsyncAction_OpenModal final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnOpened;                                          // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailed;                                          // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E64[0x8];                                     // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ModalClass;                                        // 0x0058(0x0028)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class US6UI_AsyncAction_OpenModal* OpenModal(class APlayerController* PC, TSoftClassPtr<class UClass> WidgetClass);

	void OnFailed__DelegateSignature();
	void OnOpened__DelegateSignature(class US6UI_ModalWidgetBase* ModalWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_AsyncAction_OpenModal">();
	}
	static class US6UI_AsyncAction_OpenModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_AsyncAction_OpenModal>();
	}
};
static_assert(alignof(US6UI_AsyncAction_OpenModal) == 0x000008, "Wrong alignment on US6UI_AsyncAction_OpenModal");
static_assert(sizeof(US6UI_AsyncAction_OpenModal) == 0x000080, "Wrong size on US6UI_AsyncAction_OpenModal");
static_assert(offsetof(US6UI_AsyncAction_OpenModal, OnOpened) == 0x000030, "Member 'US6UI_AsyncAction_OpenModal::OnOpened' has a wrong offset!");
static_assert(offsetof(US6UI_AsyncAction_OpenModal, OnFailed) == 0x000040, "Member 'US6UI_AsyncAction_OpenModal::OnFailed' has a wrong offset!");
static_assert(offsetof(US6UI_AsyncAction_OpenModal, ModalClass) == 0x000058, "Member 'US6UI_AsyncAction_OpenModal::ModalClass' has a wrong offset!");

// Class S6UICore.S6UI_InputActionHandlingUserWidget
// 0x0010 (0x0520 - 0x0510)
class US6UI_InputActionHandlingUserWidget : public UCommonActivatableWidgetInputExtended
{
public:
	uint8                                         Pad_1E65[0x8];                                     // 0x0510(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class US6UI_InputActionHandlingWidgetComponent* InputActionHandlingWidgetComponent;                // 0x0518(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_InputActionHandlingUserWidget">();
	}
	static class US6UI_InputActionHandlingUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_InputActionHandlingUserWidget>();
	}
};
static_assert(alignof(US6UI_InputActionHandlingUserWidget) == 0x000008, "Wrong alignment on US6UI_InputActionHandlingUserWidget");
static_assert(sizeof(US6UI_InputActionHandlingUserWidget) == 0x000520, "Wrong size on US6UI_InputActionHandlingUserWidget");
static_assert(offsetof(US6UI_InputActionHandlingUserWidget, InputActionHandlingWidgetComponent) == 0x000518, "Member 'US6UI_InputActionHandlingUserWidget::InputActionHandlingWidgetComponent' has a wrong offset!");

// Class S6UICore.S6UI_ModalWidgetBase
// 0x0038 (0x0558 - 0x0520)
class US6UI_ModalWidgetBase : public US6UI_InputActionHandlingUserWidget
{
public:
	uint8                                         Pad_1E66[0x10];                                    // 0x0520(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStartedClosing;                                  // 0x0530(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFinishedClosing;                                 // 0x0540(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bWantsCursor;                                      // 0x0550(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E67[0x7];                                     // 0x0551(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanClose();
	void FinishClosing();
	void FinishOpening();
	void HandleClosed_BP();
	void HandleInputAction_UIBack_Triggered(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, class UInputAction* SourceAction);
	void HandleOpened_BP();
	void HandleStartClosing_BP(bool bPermitLatentClosing, bool* bOutHasLatentClosingLogic);
	void HandleStartOpening_BP(bool* bOutHasLatentOpeningLogic);
	void OnFinishedClosing__DelegateSignature(class UWidget* Widget);
	void OnFinishedOpening__DelegateSignature(class UWidget* Widget);
	void OnStartedClosing__DelegateSignature(class UWidget* Widget);
	void SetWantsCursor(bool bValue);

	ES6UI_ModalWidgetState GetModalWidgetState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_ModalWidgetBase">();
	}
	static class US6UI_ModalWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_ModalWidgetBase>();
	}
};
static_assert(alignof(US6UI_ModalWidgetBase) == 0x000008, "Wrong alignment on US6UI_ModalWidgetBase");
static_assert(sizeof(US6UI_ModalWidgetBase) == 0x000558, "Wrong size on US6UI_ModalWidgetBase");
static_assert(offsetof(US6UI_ModalWidgetBase, OnStartedClosing) == 0x000530, "Member 'US6UI_ModalWidgetBase::OnStartedClosing' has a wrong offset!");
static_assert(offsetof(US6UI_ModalWidgetBase, OnFinishedClosing) == 0x000540, "Member 'US6UI_ModalWidgetBase::OnFinishedClosing' has a wrong offset!");
static_assert(offsetof(US6UI_ModalWidgetBase, bWantsCursor) == 0x000550, "Member 'US6UI_ModalWidgetBase::bWantsCursor' has a wrong offset!");

// Class S6UICore.S6UI_CommandMenu
// 0x0090 (0x05E8 - 0x0558)
class US6UI_CommandMenu final : public US6UI_ModalWidgetBase
{
public:
	TArray<class FName>                           NamespacesToHaveFirst;                             // 0x0558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UNativeWidgetHost*                      MenuHost;                                          // 0x0568(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E68[0x78];                                    // 0x0570(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_CommandMenu">();
	}
	static class US6UI_CommandMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_CommandMenu>();
	}
};
static_assert(alignof(US6UI_CommandMenu) == 0x000008, "Wrong alignment on US6UI_CommandMenu");
static_assert(sizeof(US6UI_CommandMenu) == 0x0005E8, "Wrong size on US6UI_CommandMenu");
static_assert(offsetof(US6UI_CommandMenu, NamespacesToHaveFirst) == 0x000558, "Member 'US6UI_CommandMenu::NamespacesToHaveFirst' has a wrong offset!");
static_assert(offsetof(US6UI_CommandMenu, MenuHost) == 0x000568, "Member 'US6UI_CommandMenu::MenuHost' has a wrong offset!");

// Class S6UICore.S6UI_CustomNavigationGroup
// 0x0108 (0x02A0 - 0x0198)
class US6UI_CustomNavigationGroup final : public UPanelWidget
{
public:
	uint8                                         Pad_1E69[0x10];                                    // 0x0198(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	ES6UI_NavGroupType                            NavGroupType;                                      // 0x01A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsGroupEnabled;                                   // 0x01A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsNullableNavGroup;                               // 0x01AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E6A[0x5];                                     // 0x01AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        UINavWidgets;                                      // 0x01B0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FS6UI_NavExplicitData>          NavExplicitDatas;                                  // 0x01C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         FirstSelectIndex;                                  // 0x01D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GridDimensionX;                                    // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWrapHorizontalNavigation;                         // 0x01D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoEdgeEscape;                                   // 0x01D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E6B[0x6];                                     // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EUINavigation>                         EdgeEscapeDirections;                              // 0x01E0(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsFocusable;                                      // 0x01F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E6C[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnNavigationGroupInitialized;                   // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             BP_FOnNavigated;                                   // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             BP_OnGroupEnableChanged;                           // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(EUINavigation InNavigationType, class US6UI_CustomNavigationGroup* InOriginNavigationGroup, int32 InOriginWidgetIndex, int32 InTargetWidgetIndex)> BP_OnNavigationGroupTransition;                    // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(class UObject* NavObject)>     BP_OnIsWidgetValiedToNavigate;                     // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                        InternalUINavWidgets;                              // 0x0248(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E6D[0x8];                                     // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS6UI_NavigationGroupTranstionData> DynamicTransitionDatas;                            // 0x0260(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FS6UI_NavigationGroupTranstionData> DynamicBoundaryTransitionDatas;                    // 0x0270(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E6E[0x20];                                    // 0x0280(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActiveNavigationGroup(bool bDelayActive, int32 InAutoSelectNavWidgetID);
	void AddNavExplicitData(struct FS6UI_NavExplicitData& InNavExplicitData);
	void AddNavigationGroupTransitionData(const struct FS6UI_NavigationGroupTranstionData& InTransitionData, bool bInBidirectional, bool bClearMatchingGroupNavigations);
	void AddNavWidgets(TArray<class UWidget*>& InWidgetArray, bool bInBuildNavigationImmediately);
	void BuildNavigation(bool bInImmediately);
	void ClearNavigationData(bool bInClearNavWidgets);
	void ClearNavigationGroupTransitionDatas();
	void DelayExcuteNavigationFromParentGroup(struct FFocusEvent& InFocusEvent);
	void EnableAutoEdgeEscape(bool bInAutoEdgeEscape);
	void ExcuteNavigationFromParentGroup();
	void NavigateToTargetWidget(int32 InTargetWidgetIndex, bool bDelayActive);
	void OnCustomNavigationGroupInitialized__DelegateSignature(class US6UI_CustomNavigationGroup* NavGroup);
	bool OnCustomNavigationGroupTransitionEvent__DelegateSignature(EUINavigation InNavigationType, class US6UI_CustomNavigationGroup* InOriginNavigationGroup, int32 InOriginWidgetIndex, int32 InTargetWidgetIndex);
	void OnGroupEnableChanged__DelegateSignature(class US6UI_CustomNavigationGroup* InNavGroup, bool InbIsEnabled);
	bool OnIsWidgetValiedToNavigate__DelegateSignature(class UObject* NavObject);
	void OnNavigated__DelegateSignature(class US6UI_CustomNavigationGroup* NavGroup);
	void SetAutoEdgeEscapeDirections(TArray<EUINavigation>& InEdgeEscapeDirections);
	void SetIsFocusable(bool bInIsFocusable);
	void SetIsGroupEnabled(bool bInIsEnabled);

	bool GetIsGroupEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_CustomNavigationGroup">();
	}
	static class US6UI_CustomNavigationGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_CustomNavigationGroup>();
	}
};
static_assert(alignof(US6UI_CustomNavigationGroup) == 0x000008, "Wrong alignment on US6UI_CustomNavigationGroup");
static_assert(sizeof(US6UI_CustomNavigationGroup) == 0x0002A0, "Wrong size on US6UI_CustomNavigationGroup");
static_assert(offsetof(US6UI_CustomNavigationGroup, NavGroupType) == 0x0001A8, "Member 'US6UI_CustomNavigationGroup::NavGroupType' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, bIsGroupEnabled) == 0x0001A9, "Member 'US6UI_CustomNavigationGroup::bIsGroupEnabled' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, bIsNullableNavGroup) == 0x0001AA, "Member 'US6UI_CustomNavigationGroup::bIsNullableNavGroup' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, UINavWidgets) == 0x0001B0, "Member 'US6UI_CustomNavigationGroup::UINavWidgets' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, NavExplicitDatas) == 0x0001C0, "Member 'US6UI_CustomNavigationGroup::NavExplicitDatas' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, FirstSelectIndex) == 0x0001D0, "Member 'US6UI_CustomNavigationGroup::FirstSelectIndex' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, GridDimensionX) == 0x0001D4, "Member 'US6UI_CustomNavigationGroup::GridDimensionX' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, bWrapHorizontalNavigation) == 0x0001D8, "Member 'US6UI_CustomNavigationGroup::bWrapHorizontalNavigation' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, bAutoEdgeEscape) == 0x0001D9, "Member 'US6UI_CustomNavigationGroup::bAutoEdgeEscape' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, EdgeEscapeDirections) == 0x0001E0, "Member 'US6UI_CustomNavigationGroup::EdgeEscapeDirections' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, bIsFocusable) == 0x0001F0, "Member 'US6UI_CustomNavigationGroup::bIsFocusable' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, BP_OnNavigationGroupInitialized) == 0x0001F8, "Member 'US6UI_CustomNavigationGroup::BP_OnNavigationGroupInitialized' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, BP_FOnNavigated) == 0x000208, "Member 'US6UI_CustomNavigationGroup::BP_FOnNavigated' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, BP_OnGroupEnableChanged) == 0x000218, "Member 'US6UI_CustomNavigationGroup::BP_OnGroupEnableChanged' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, BP_OnNavigationGroupTransition) == 0x000228, "Member 'US6UI_CustomNavigationGroup::BP_OnNavigationGroupTransition' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, BP_OnIsWidgetValiedToNavigate) == 0x000238, "Member 'US6UI_CustomNavigationGroup::BP_OnIsWidgetValiedToNavigate' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, InternalUINavWidgets) == 0x000248, "Member 'US6UI_CustomNavigationGroup::InternalUINavWidgets' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, DynamicTransitionDatas) == 0x000260, "Member 'US6UI_CustomNavigationGroup::DynamicTransitionDatas' has a wrong offset!");
static_assert(offsetof(US6UI_CustomNavigationGroup, DynamicBoundaryTransitionDatas) == 0x000270, "Member 'US6UI_CustomNavigationGroup::DynamicBoundaryTransitionDatas' has a wrong offset!");

// Class S6UICore.S6UI_CustomNavigationWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class IS6UI_CustomNavigationWidgetInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_CustomNavigationWidgetInterface">();
	}
	static class IS6UI_CustomNavigationWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IS6UI_CustomNavigationWidgetInterface>();
	}
};
static_assert(alignof(IS6UI_CustomNavigationWidgetInterface) == 0x000008, "Wrong alignment on IS6UI_CustomNavigationWidgetInterface");
static_assert(sizeof(IS6UI_CustomNavigationWidgetInterface) == 0x000028, "Wrong size on IS6UI_CustomNavigationWidgetInterface");

// Class S6UICore.S6UI_GameViewportClient
// 0x0000 (0x03F0 - 0x03F0)
class US6UI_GameViewportClient : public UCommonGameViewportClient
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_GameViewportClient">();
	}
	static class US6UI_GameViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_GameViewportClient>();
	}
};
static_assert(alignof(US6UI_GameViewportClient) == 0x000008, "Wrong alignment on US6UI_GameViewportClient");
static_assert(sizeof(US6UI_GameViewportClient) == 0x0003F0, "Wrong size on US6UI_GameViewportClient");

// Class S6UICore.S6UI_InputActionHandlingWidgetComponent
// 0x0048 (0x0070 - 0x0028)
class US6UI_InputActionHandlingWidgetComponent final : public UObject
{
public:
	bool                                          bIsEnabled;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockAllUnhandledInputActions;                    // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E77[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FS6UI_RegisteredInputMappingContext> RegisteredInputMappingContexts;                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInputActionBindingsChanged;                      // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEnabledStateChanged;                             // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FS6UI_RegisteredInputActionBinding> InputActionBindings;                               // 0x0060(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void OnEnabledStateChanged__DelegateSignature(class US6UI_InputActionHandlingWidgetComponent* AffectedComponent);
	void OnInputActionBindingsChanged__DelegateSignature(class US6UI_InputActionHandlingWidgetComponent* AffectedComponent);
	struct FGuid RegisterInputActionBinding(class UInputAction* InputAction, ETriggerEvent TriggerEventType, TDelegate<void(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, class UInputAction* SourceAction)>& Delegate);
	void SetIsEnabled(bool bValue);
	void UnregisterInputActionBinding(struct FGuid& BindingId);

	TArray<struct FS6UI_RegisteredInputActionBinding> GetRegisteredInputActionBindings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_InputActionHandlingWidgetComponent">();
	}
	static class US6UI_InputActionHandlingWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_InputActionHandlingWidgetComponent>();
	}
};
static_assert(alignof(US6UI_InputActionHandlingWidgetComponent) == 0x000008, "Wrong alignment on US6UI_InputActionHandlingWidgetComponent");
static_assert(sizeof(US6UI_InputActionHandlingWidgetComponent) == 0x000070, "Wrong size on US6UI_InputActionHandlingWidgetComponent");
static_assert(offsetof(US6UI_InputActionHandlingWidgetComponent, bIsEnabled) == 0x000028, "Member 'US6UI_InputActionHandlingWidgetComponent::bIsEnabled' has a wrong offset!");
static_assert(offsetof(US6UI_InputActionHandlingWidgetComponent, bBlockAllUnhandledInputActions) == 0x000029, "Member 'US6UI_InputActionHandlingWidgetComponent::bBlockAllUnhandledInputActions' has a wrong offset!");
static_assert(offsetof(US6UI_InputActionHandlingWidgetComponent, Priority) == 0x00002C, "Member 'US6UI_InputActionHandlingWidgetComponent::Priority' has a wrong offset!");
static_assert(offsetof(US6UI_InputActionHandlingWidgetComponent, RegisteredInputMappingContexts) == 0x000030, "Member 'US6UI_InputActionHandlingWidgetComponent::RegisteredInputMappingContexts' has a wrong offset!");
static_assert(offsetof(US6UI_InputActionHandlingWidgetComponent, OnInputActionBindingsChanged) == 0x000040, "Member 'US6UI_InputActionHandlingWidgetComponent::OnInputActionBindingsChanged' has a wrong offset!");
static_assert(offsetof(US6UI_InputActionHandlingWidgetComponent, OnEnabledStateChanged) == 0x000050, "Member 'US6UI_InputActionHandlingWidgetComponent::OnEnabledStateChanged' has a wrong offset!");
static_assert(offsetof(US6UI_InputActionHandlingWidgetComponent, InputActionBindings) == 0x000060, "Member 'US6UI_InputActionHandlingWidgetComponent::InputActionBindings' has a wrong offset!");

// Class S6UICore.S6UI_InputActionHandlingWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class IS6UI_InputActionHandlingWidgetInterface final : public IInterface
{
public:
	class US6UI_InputActionHandlingWidgetComponent* GetInputActionHandlingComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_InputActionHandlingWidgetInterface">();
	}
	static class IS6UI_InputActionHandlingWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IS6UI_InputActionHandlingWidgetInterface>();
	}
};
static_assert(alignof(IS6UI_InputActionHandlingWidgetInterface) == 0x000008, "Wrong alignment on IS6UI_InputActionHandlingWidgetInterface");
static_assert(sizeof(IS6UI_InputActionHandlingWidgetInterface) == 0x000028, "Wrong size on IS6UI_InputActionHandlingWidgetInterface");

// Class S6UICore.S6UI_InputActionRouter
// 0x0000 (0x0158 - 0x0158)
class US6UI_InputActionRouter final : public UCommonUIActionRouterBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_InputActionRouter">();
	}
	static class US6UI_InputActionRouter* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_InputActionRouter>();
	}
};
static_assert(alignof(US6UI_InputActionRouter) == 0x000008, "Wrong alignment on US6UI_InputActionRouter");
static_assert(sizeof(US6UI_InputActionRouter) == 0x000158, "Wrong size on US6UI_InputActionRouter");

// Class S6UICore.S6UI_InputRouterSubsystem
// 0x01D0 (0x0200 - 0x0030)
class US6UI_InputRouterSubsystem final : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_1E7A[0x70];                                    // 0x0030(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UInputMappingContext*>           AppliedInputMappingContexts;                       // 0x00A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E7B[0x150];                                   // 0x00B0(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleInputActionHandlingComponentBindingsChanged(class US6UI_InputActionHandlingWidgetComponent* AffectedComponent);
	void HandleInputActionHandlingComponentEnabledStateChanged(class US6UI_InputActionHandlingWidgetComponent* AffectedComponent);
	void RegisterInputActionHandler(class US6UI_InputActionHandlingWidgetComponent* InputActionHandler);
	void UnregisterInputActionHandler(class US6UI_InputActionHandlingWidgetComponent* InputActionHandler);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_InputRouterSubsystem">();
	}
	static class US6UI_InputRouterSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_InputRouterSubsystem>();
	}
};
static_assert(alignof(US6UI_InputRouterSubsystem) == 0x000008, "Wrong alignment on US6UI_InputRouterSubsystem");
static_assert(sizeof(US6UI_InputRouterSubsystem) == 0x000200, "Wrong size on US6UI_InputRouterSubsystem");
static_assert(offsetof(US6UI_InputRouterSubsystem, AppliedInputMappingContexts) == 0x0000A0, "Member 'US6UI_InputRouterSubsystem::AppliedInputMappingContexts' has a wrong offset!");

// Class S6UICore.S6UI_StateUserWidget
// 0x0038 (0x0558 - 0x0520)
class US6UI_StateUserWidget : public US6UI_InputActionHandlingUserWidget
{
public:
	struct FMVVMViewModelContext                  ViewModelContext;                                  // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class US6UI_StateViewModel*                   ViewModel;                                         // 0x0530(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftClassPtr<class UClass>>           WidgetClassesToPreload;                            // 0x0538(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UWidget>>            LoadedWidgetClasses;                               // 0x0548(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	struct FS6UI_InputMode GetInputMode() const;
	class US6UI_StateViewModel* GetViewModel() const;
	const struct FMVVMViewModelContext GetViewModelContext() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_StateUserWidget">();
	}
	static class US6UI_StateUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_StateUserWidget>();
	}
};
static_assert(alignof(US6UI_StateUserWidget) == 0x000008, "Wrong alignment on US6UI_StateUserWidget");
static_assert(sizeof(US6UI_StateUserWidget) == 0x000558, "Wrong size on US6UI_StateUserWidget");
static_assert(offsetof(US6UI_StateUserWidget, ViewModelContext) == 0x000520, "Member 'US6UI_StateUserWidget::ViewModelContext' has a wrong offset!");
static_assert(offsetof(US6UI_StateUserWidget, ViewModel) == 0x000530, "Member 'US6UI_StateUserWidget::ViewModel' has a wrong offset!");
static_assert(offsetof(US6UI_StateUserWidget, WidgetClassesToPreload) == 0x000538, "Member 'US6UI_StateUserWidget::WidgetClassesToPreload' has a wrong offset!");
static_assert(offsetof(US6UI_StateUserWidget, LoadedWidgetClasses) == 0x000548, "Member 'US6UI_StateUserWidget::LoadedWidgetClasses' has a wrong offset!");

// Class S6UICore.S6UI_StateViewModel
// 0x0010 (0x0078 - 0x0068)
class US6UI_StateViewModel : public UMVVMViewModelBase
{
public:
	struct FS6UI_InputMode                        InputMode;                                         // 0x0068(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_StateViewModel">();
	}
	static class US6UI_StateViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_StateViewModel>();
	}
};
static_assert(alignof(US6UI_StateViewModel) == 0x000008, "Wrong alignment on US6UI_StateViewModel");
static_assert(sizeof(US6UI_StateViewModel) == 0x000078, "Wrong size on US6UI_StateViewModel");
static_assert(offsetof(US6UI_StateViewModel, InputMode) == 0x000068, "Member 'US6UI_StateViewModel::InputMode' has a wrong offset!");

// Class S6UICore.S6UI_ToolTipWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class IS6UI_ToolTipWidgetInterface final : public IInterface
{
public:
	void HandleOnClosed();
	void HandleOnOpening();
	void UpdateToolTipText(class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_ToolTipWidgetInterface">();
	}
	static class IS6UI_ToolTipWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IS6UI_ToolTipWidgetInterface>();
	}
};
static_assert(alignof(IS6UI_ToolTipWidgetInterface) == 0x000008, "Wrong alignment on IS6UI_ToolTipWidgetInterface");
static_assert(sizeof(IS6UI_ToolTipWidgetInterface) == 0x000028, "Wrong size on IS6UI_ToolTipWidgetInterface");

// Class S6UICore.S6UI_InputAction
// 0x0030 (0x00B0 - 0x0080)
class US6UI_InputAction final : public UInputAction
{
public:
	class FText                                   DisplayName;                                       // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_InputAction">();
	}
	static class US6UI_InputAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_InputAction>();
	}
};
static_assert(alignof(US6UI_InputAction) == 0x000008, "Wrong alignment on US6UI_InputAction");
static_assert(sizeof(US6UI_InputAction) == 0x0000B0, "Wrong size on US6UI_InputAction");
static_assert(offsetof(US6UI_InputAction, DisplayName) == 0x000080, "Member 'US6UI_InputAction::DisplayName' has a wrong offset!");
static_assert(offsetof(US6UI_InputAction, Description) == 0x000098, "Member 'US6UI_InputAction::Description' has a wrong offset!");

// Class S6UICore.S6UI_UIManagerWidgetBase
// 0x00B8 (0x05D8 - 0x0520)
class US6UI_UIManagerWidgetBase : public US6UI_InputActionHandlingUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnInputModeRefreshed;                              // 0x0520(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChildWidgetLoadComplete;                         // 0x0530(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UOverlay*                               Overlay_ModalWidgetLayer;                          // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               SizeBox_StateWidget;                               // 0x0548(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FInputMappingPriorityData              DefaultModalInputMappingData;                      // 0x0550(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   DefaultStateWidgetType;                            // 0x0588(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class US6UI_UIManagerCrossPlatformHelper> CrossPlatformHelperType;                           // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class US6UI_UIManagerCrossPlatformHelper*     CrossPlatformHelper;                               // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class US6UI_StateUserWidget*                  DefaultStateWidgetInstance;                        // 0x05C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class US6UI_StateUserWidget*                  CurrentStateWidget;                                // 0x05C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class US6UI_WidgetPoolManager*                WidgetPoolManager;                                 // 0x05D0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class US6UI_UIManagerWidgetBase* GetUIManagerWidget(class APlayerController* PC);

	void ActivateModalWidget(class UWidget* Widget);
	void AddLoadingScreenWidget(class UUserWidget* Widget);
	void CloseModalWidget(class UWidget* Widget, bool bShouldForceClose, bool bPermitLatentClosing);
	bool CloseTopModalWidget(bool bShouldForceClose, bool bPermitLatentClosing);
	void CreateDefaultStateWidget();
	void DeactivateModalWidget(class UWidget* Widget);
	void DeactivateTopModalWidget();
	void ForceCloseAllModalWidgets();
	void HandleOnStateInputModeChanged(class UObject* Object, const struct FFieldNotificationId& Field);
	void OpenModalWidget(class UWidget* Widget);
	void PopState(class US6UI_StateUserWidget* StateWidget);
	void PushState(class US6UI_StateUserWidget* StateWidget);
	void RemoveLoadingScreenWidget(class UUserWidget* Widget);
	void RemoveModalWidget(class UWidget* Widget);

	class US6UI_StateViewModel* GetCurrentStateViewModel() const;
	class US6UI_StateUserWidget* GetCurrentStateWidget() const;
	class US6UI_WidgetPoolManager* GetWidgetPoolManager() const;
	bool IsModalWidgetActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_UIManagerWidgetBase">();
	}
	static class US6UI_UIManagerWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_UIManagerWidgetBase>();
	}
};
static_assert(alignof(US6UI_UIManagerWidgetBase) == 0x000008, "Wrong alignment on US6UI_UIManagerWidgetBase");
static_assert(sizeof(US6UI_UIManagerWidgetBase) == 0x0005D8, "Wrong size on US6UI_UIManagerWidgetBase");
static_assert(offsetof(US6UI_UIManagerWidgetBase, OnInputModeRefreshed) == 0x000520, "Member 'US6UI_UIManagerWidgetBase::OnInputModeRefreshed' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerWidgetBase, OnChildWidgetLoadComplete) == 0x000530, "Member 'US6UI_UIManagerWidgetBase::OnChildWidgetLoadComplete' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerWidgetBase, Overlay_ModalWidgetLayer) == 0x000540, "Member 'US6UI_UIManagerWidgetBase::Overlay_ModalWidgetLayer' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerWidgetBase, SizeBox_StateWidget) == 0x000548, "Member 'US6UI_UIManagerWidgetBase::SizeBox_StateWidget' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerWidgetBase, DefaultModalInputMappingData) == 0x000550, "Member 'US6UI_UIManagerWidgetBase::DefaultModalInputMappingData' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerWidgetBase, DefaultStateWidgetType) == 0x000588, "Member 'US6UI_UIManagerWidgetBase::DefaultStateWidgetType' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerWidgetBase, CrossPlatformHelperType) == 0x0005B0, "Member 'US6UI_UIManagerWidgetBase::CrossPlatformHelperType' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerWidgetBase, CrossPlatformHelper) == 0x0005B8, "Member 'US6UI_UIManagerWidgetBase::CrossPlatformHelper' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerWidgetBase, DefaultStateWidgetInstance) == 0x0005C0, "Member 'US6UI_UIManagerWidgetBase::DefaultStateWidgetInstance' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerWidgetBase, CurrentStateWidget) == 0x0005C8, "Member 'US6UI_UIManagerWidgetBase::CurrentStateWidget' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerWidgetBase, WidgetPoolManager) == 0x0005D0, "Member 'US6UI_UIManagerWidgetBase::WidgetPoolManager' has a wrong offset!");

// Class S6UICore.S6UI_UIManagerHUDBase
// 0x0030 (0x03C8 - 0x0398)
class AS6UI_UIManagerHUDBase : public AHUD
{
public:
	TSoftClassPtr<class UClass>                   RootHUDWidgetType;                                 // 0x0398(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class US6UI_UIManagerWidgetBase*              RootHUDWidgetInstance;                             // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class US6UI_UIManagerWidgetBase* GetUIManagerWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_UIManagerHUDBase">();
	}
	static class AS6UI_UIManagerHUDBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AS6UI_UIManagerHUDBase>();
	}
};
static_assert(alignof(AS6UI_UIManagerHUDBase) == 0x000008, "Wrong alignment on AS6UI_UIManagerHUDBase");
static_assert(sizeof(AS6UI_UIManagerHUDBase) == 0x0003C8, "Wrong size on AS6UI_UIManagerHUDBase");
static_assert(offsetof(AS6UI_UIManagerHUDBase, RootHUDWidgetType) == 0x000398, "Member 'AS6UI_UIManagerHUDBase::RootHUDWidgetType' has a wrong offset!");
static_assert(offsetof(AS6UI_UIManagerHUDBase, RootHUDWidgetInstance) == 0x0003C0, "Member 'AS6UI_UIManagerHUDBase::RootHUDWidgetInstance' has a wrong offset!");

// Class S6UICore.S6UI_UIManagerCrossPlatformHelper
// 0x0140 (0x0168 - 0x0028)
class US6UI_UIManagerCrossPlatformHelper : public UObject
{
public:
	TMap<TSoftClassPtr<class UClass>, struct FS6UI_UIManagerCrossPlatformStateTypeItem> RedirectPlatformStateTypes;                        // 0x0028(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<TSoftClassPtr<class UClass>, struct FS6UI_UIManagerCrossPlatformStateTypeItem> RedirectCommonUIStateTypes;                        // 0x0078(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<TSoftClassPtr<class UClass>, struct FS6UI_UIManagerCrossPlatformModalTypeItem> RedirectPlatformModalTypes;                        // 0x00C8(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<TSoftClassPtr<class UClass>, struct FS6UI_UIManagerCrossPlatformModalTypeItem> RedirectCommonUIModalTypes;                        // 0x0118(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	TSoftClassPtr<class UClass> RedirectModalType(TSoftClassPtr<class UClass> DefaultModalType);
	TSoftClassPtr<class UClass> RedirectStateType(TSoftClassPtr<class UClass> DefaultStateType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_UIManagerCrossPlatformHelper">();
	}
	static class US6UI_UIManagerCrossPlatformHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_UIManagerCrossPlatformHelper>();
	}
};
static_assert(alignof(US6UI_UIManagerCrossPlatformHelper) == 0x000008, "Wrong alignment on US6UI_UIManagerCrossPlatformHelper");
static_assert(sizeof(US6UI_UIManagerCrossPlatformHelper) == 0x000168, "Wrong size on US6UI_UIManagerCrossPlatformHelper");
static_assert(offsetof(US6UI_UIManagerCrossPlatformHelper, RedirectPlatformStateTypes) == 0x000028, "Member 'US6UI_UIManagerCrossPlatformHelper::RedirectPlatformStateTypes' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerCrossPlatformHelper, RedirectCommonUIStateTypes) == 0x000078, "Member 'US6UI_UIManagerCrossPlatformHelper::RedirectCommonUIStateTypes' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerCrossPlatformHelper, RedirectPlatformModalTypes) == 0x0000C8, "Member 'US6UI_UIManagerCrossPlatformHelper::RedirectPlatformModalTypes' has a wrong offset!");
static_assert(offsetof(US6UI_UIManagerCrossPlatformHelper, RedirectCommonUIModalTypes) == 0x000118, "Member 'US6UI_UIManagerCrossPlatformHelper::RedirectCommonUIModalTypes' has a wrong offset!");

// Class S6UICore.S6UI_Utils
// 0x0000 (0x0028 - 0x0028)
class US6UI_Utils final : public UBlueprintFunctionLibrary
{
public:
	static bool AreCapsLocked();
	static void DismissContextMenu(struct FS6UI_ContextMenu& ContextMenu);
	static bool DoesPlatformSupportTouchInput();
	static void FindDeltaAngleDegrees(float StartAngle, float TargetAngle, float* DeltaAngle);
	static class UUserWidget* GetContextMenuContentWidget(struct FS6UI_ContextMenu& ContextMenu);
	static class UUserWidget* GetWidgetFromPool(class UWidget* WidgetContext, TSoftClassPtr<class UClass> WidgetClassSoftPtr);
	static class US6UI_WidgetPoolManager* GetWidgetPoolManager(class UWidget* WidgetContext);
	static bool IsShowCommonUI();
	static void ReturnWidgetToPool(class UWidget* WidgetContext, class UUserWidget* Widget);
	static bool SummonContextMenu(class UObject* WorldContextObject, struct FPointerEvent& MouseEvent, TSubclassOf<class UUserWidget>& ContentWidgetClass, struct FS6UI_ContextMenu& OutContextMenu);
	static bool SummonContextMenuAtPosition(class UObject* WorldContextObject, class UWidget* ParentWidget, struct FVector2D& Position, TSubclassOf<class UUserWidget>& ContentWidgetClass, struct FS6UI_ContextMenu& OutContextMenu);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_Utils">();
	}
	static class US6UI_Utils* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_Utils>();
	}
};
static_assert(alignof(US6UI_Utils) == 0x000008, "Wrong alignment on US6UI_Utils");
static_assert(sizeof(US6UI_Utils) == 0x000028, "Wrong size on US6UI_Utils");

// Class S6UICore.S6UI_StateStatics
// 0x0000 (0x0028 - 0x0028)
class US6UI_StateStatics final : public UBlueprintFunctionLibrary
{
public:
	static struct FS6UI_InputMode CreateInputMode_GameAndUI(class UWidget* WidgetToFocus, ES6UI_MouseLockMode MouseLockMode, bool bHideCursorDuringCapture, bool bShowCursor);
	static struct FS6UI_InputMode CreateInputMode_GameOnly();
	static struct FS6UI_InputMode CreateInputMode_UIOnly(class UWidget* WidgetToFocus, ES6UI_MouseLockMode MouseLockMode, bool bShowCursor);
	static void PopState(class US6UI_StateUserWidget* Widget);
	static void PushState(class US6UI_StateUserWidget* Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_StateStatics">();
	}
	static class US6UI_StateStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_StateStatics>();
	}
};
static_assert(alignof(US6UI_StateStatics) == 0x000008, "Wrong alignment on US6UI_StateStatics");
static_assert(sizeof(US6UI_StateStatics) == 0x000028, "Wrong size on US6UI_StateStatics");

// Class S6UICore.S6UI_WidgetPoolManager
// 0x0050 (0x0078 - 0x0028)
class US6UI_WidgetPoolManager final : public UObject
{
public:
	TMap<TSubclassOf<class UUserWidget>, struct FUserWidgetPool> WidgetPools;                                       // 0x0028(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void DestroyAllWidgets();
	class UUserWidget* GetWidgetFromPool(class UObject* Context, TSoftClassPtr<class UClass> WidgetClass);
	void ProvisionPool(class UObject* Context, TSoftClassPtr<class UClass> WidgetClass, int32 TotalSizeOfWidgetsProvisioned);
	void ReturnWidgetToPool(class UUserWidget* WidgetToReturn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6UI_WidgetPoolManager">();
	}
	static class US6UI_WidgetPoolManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6UI_WidgetPoolManager>();
	}
};
static_assert(alignof(US6UI_WidgetPoolManager) == 0x000008, "Wrong alignment on US6UI_WidgetPoolManager");
static_assert(sizeof(US6UI_WidgetPoolManager) == 0x000078, "Wrong size on US6UI_WidgetPoolManager");
static_assert(offsetof(US6UI_WidgetPoolManager, WidgetPools) == 0x000028, "Member 'US6UI_WidgetPoolManager::WidgetPools' has a wrong offset!");

}

