#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_lamp_HangingTypeA_NoPhysics

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Master_lampGeneralTypeA_classes.hpp"
#include "Enum_core_Scalability_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_lamp_HangingTypeA_NoPhysics.BP_lamp_HangingTypeA_NoPhysics_C
// 0x00D0 (0x0508 - 0x0438)
class ABP_lamp_HangingTypeA_NoPhysics_C final : public ABP_Master_lampGeneralTypeA_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_lamp_HangingTypeA_NoPhysics_C;   // 0x0438(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Root_hangingAttach;                                // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TL_animWindThis_rotateMe_CCBC527B4EABA06BCF7124BCEA451C5F; // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_animWindThis__Direction_CCBC527B4EABA06BCF7124BCEA451C5F; // 0x0454(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_612F[0x3];                                     // 0x0455(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_animWindThis;                                   // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         TL_dimLight_dim_AB4CCB5E47E90D6451F06F83D65DB16F;  // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_dimLight__Direction_AB4CCB5E47E90D6451F06F83D65DB16F; // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6130[0x3];                                     // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_dimLight;                                       // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         TL_changingWind_Value_E7356406461C1C8FE0817CAFA773DF4D; // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_changingWind__Direction_E7356406461C1C8FE0817CAFA773DF4D; // 0x0474(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6131[0x3];                                     // 0x0475(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_changingWind;                                   // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Value_9F996A5C4E5B46B80CF688AB62AD6041; // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_9F996A5C4E5B46B80CF688AB62AD6041; // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6132[0x3];                                     // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        WindGustIntensity_current;                         // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindGustIntensity_new;                             // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind2Force;                                        // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Distance_physSleep;                                // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Gust_previous;                                     // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lamp_MassInKg;                                     // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Gust_current;                                      // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_dimClampMin;                                  // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dur_gustCycle;                                     // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AudioSwingVelocity;                                // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkSwingEvent;                                      // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        AudioVelocityThreshold;                            // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_physic4Wind;                                   // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_6133[0x7];                                     // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AnimWindGust_curr;                                 // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimWindGust_prev;                                 // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AudioWindUpdate();
	void Debug_amISleep();
	void Event_windAnimMe();
	void Event_windControl();
	void Event_windPhysicMe();
	void ExecuteUbergraph_BP_lamp_HangingTypeA_NoPhysics(int32 EntryPoint, float CallFunc_GetScalarParameterValue_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, const struct FLinearColor& CallFunc_GetVectorParameterValue_ReturnValue, bool CallFunc_WasRecentlyRendered_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_1, double CallFunc_Subtract_DoubleDouble_ReturnValue, double CallFunc_Multiply_DoubleDouble_ReturnValue, double CallFunc_Multiply_DoubleDouble_ReturnValue_1, double CallFunc_Add_DoubleDouble_ReturnValue, const struct FRotator& CallFunc_MakeRotator_ReturnValue, double CallFunc_Subtract_DoubleDouble_ReturnValue_1, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, double CallFunc_RandomFloatInRange_ReturnValue, bool CallFunc_IsServer_ReturnValue, double CallFunc_RandomFloatInRange_ReturnValue_1, const struct FVector& CallFunc_GetComponentVelocity_ReturnValue, double CallFunc_VSize_ReturnValue, double CallFunc_Lerp_ReturnValue, double CallFunc_FMax_ReturnValue, double CallFunc_NormalizeToRange_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, class UAkComponent* CallFunc_AkEventLocation_AkComponent, int32 CallFunc_AkEventLocation_Playing_ID, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_Greater_DoubleDouble_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_1, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue_1, double CallFunc_Subtract_DoubleDouble_ReturnValue_2, Enum_core_Scalability CallFunc_GlobalScalabilitySetting_ScalabilitySetting, double CallFunc_Abs_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Greater_DoubleDouble_ReturnValue_1, bool CallFunc_IsServer_ReturnValue_1, bool Temp_bool_Has_Been_Initd_Variable, double CallFunc_Multiply_DoubleDouble_ReturnValue_2, double CallFunc_FClamp_ReturnValue, const struct FLinearColor& CallFunc_Multiply_LinearColorFloat_ReturnValue, double CallFunc_Subtract_DoubleDouble_ReturnValue_3, const struct FVector& CallFunc_Conv_LinearColorToVector_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue, double CallFunc_Subtract_DoubleDouble_ReturnValue_4, double CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, const struct FLinearColor& CallFunc_GetVectorParameterValue_ReturnValue_1, const struct FHitResult& CallFunc_K2_SetRelativeRotation_SweepHitResult, float CallFunc_GetScalarParameterValue_ReturnValue_1, double CallFunc_Multiply_DoubleDouble_ReturnValue_3, const struct FLinearColor& CallFunc_Multiply_LinearColorFloat_ReturnValue_1, const struct FVector& CallFunc_Conv_LinearColorToVector_ReturnValue_1, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue_1, class UValeriaWeather* CallFunc_GetWorldSubsystem_ReturnValue, bool Temp_bool_IsClosed_Variable, class AValEnvironmentManager* CallFunc_GetCurrentEnvManager_ReturnValue, float CallFunc_GetWindIntensityAtPos_ReturnValue, double CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1, double CallFunc_Lerp_ReturnValue_1, class UValeriaWeather* CallFunc_GetWorldSubsystem_ReturnValue_1, class AValEnvironmentManager* CallFunc_GetCurrentEnvManager_ReturnValue_1, float CallFunc_GetWindIntensityAtPos_ReturnValue_1, double CallFunc_Multiply_DoubleDouble_ReturnValue_4, double CallFunc_Multiply_DoubleDouble_A_ImplicitCast, float CallFunc_SetMassOverrideInKg_MassInKg_ImplicitCast, double CallFunc_Multiply_DoubleDouble_B_ImplicitCast, double CallFunc_Subtract_DoubleDouble_B_ImplicitCast, float CallFunc_MakeRotator_Pitch_ImplicitCast, double CallFunc_Lerp_Alpha_ImplicitCast, float CallFunc_SetRTPCValue_Value_ImplicitCast, float CallFunc_K2_SetTimerDelegate_Time_ImplicitCast, float CallFunc_Multiply_LinearColorFloat_B_ImplicitCast, double CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1, float CallFunc_Multiply_LinearColorFloat_B_ImplicitCast_1, double CallFunc_MultiplyMultiply_FloatFloat_Base_ImplicitCast, double CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2);
	void ReceiveBeginPlay();
	void TL_animWindThis__FinishedFunc();
	void TL_animWindThis__UpdateFunc();
	void TL_changingWind__FinishedFunc();
	void TL_changingWind__UpdateFunc();
	void TL_dimLight__FinishedFunc();
	void TL_dimLight__UpdateFunc();
	void Update_pushMyLamp();
	void Update_wind2Lamp();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_lamp_HangingTypeA_NoPhysics_C">();
	}
	static class ABP_lamp_HangingTypeA_NoPhysics_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_lamp_HangingTypeA_NoPhysics_C>();
	}
};
static_assert(alignof(ABP_lamp_HangingTypeA_NoPhysics_C) == 0x000008, "Wrong alignment on ABP_lamp_HangingTypeA_NoPhysics_C");
static_assert(sizeof(ABP_lamp_HangingTypeA_NoPhysics_C) == 0x000508, "Wrong size on ABP_lamp_HangingTypeA_NoPhysics_C");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, UberGraphFrame_BP_lamp_HangingTypeA_NoPhysics_C) == 0x000438, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::UberGraphFrame_BP_lamp_HangingTypeA_NoPhysics_C' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Root_hangingAttach) == 0x000440, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Root_hangingAttach' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, PhysicsConstraint) == 0x000448, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, TL_animWindThis_rotateMe_CCBC527B4EABA06BCF7124BCEA451C5F) == 0x000450, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::TL_animWindThis_rotateMe_CCBC527B4EABA06BCF7124BCEA451C5F' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, TL_animWindThis__Direction_CCBC527B4EABA06BCF7124BCEA451C5F) == 0x000454, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::TL_animWindThis__Direction_CCBC527B4EABA06BCF7124BCEA451C5F' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, TL_animWindThis) == 0x000458, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::TL_animWindThis' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, TL_dimLight_dim_AB4CCB5E47E90D6451F06F83D65DB16F) == 0x000460, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::TL_dimLight_dim_AB4CCB5E47E90D6451F06F83D65DB16F' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, TL_dimLight__Direction_AB4CCB5E47E90D6451F06F83D65DB16F) == 0x000464, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::TL_dimLight__Direction_AB4CCB5E47E90D6451F06F83D65DB16F' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, TL_dimLight) == 0x000468, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::TL_dimLight' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, TL_changingWind_Value_E7356406461C1C8FE0817CAFA773DF4D) == 0x000470, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::TL_changingWind_Value_E7356406461C1C8FE0817CAFA773DF4D' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, TL_changingWind__Direction_E7356406461C1C8FE0817CAFA773DF4D) == 0x000474, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::TL_changingWind__Direction_E7356406461C1C8FE0817CAFA773DF4D' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, TL_changingWind) == 0x000478, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::TL_changingWind' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Timeline_0_Value_9F996A5C4E5B46B80CF688AB62AD6041) == 0x000480, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Timeline_0_Value_9F996A5C4E5B46B80CF688AB62AD6041' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Timeline_0__Direction_9F996A5C4E5B46B80CF688AB62AD6041) == 0x000484, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Timeline_0__Direction_9F996A5C4E5B46B80CF688AB62AD6041' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Timeline_0) == 0x000488, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, WindGustIntensity_current) == 0x000490, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::WindGustIntensity_current' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, WindGustIntensity_new) == 0x000498, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::WindGustIntensity_new' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Wind2Force) == 0x0004A0, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Wind2Force' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Distance_physSleep) == 0x0004A8, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Distance_physSleep' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Gust_previous) == 0x0004B0, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Gust_previous' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Lamp_MassInKg) == 0x0004B8, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Lamp_MassInKg' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Gust_current) == 0x0004C0, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Gust_current' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Wind_dimClampMin) == 0x0004C8, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Wind_dimClampMin' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Dur_gustCycle) == 0x0004D0, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Dur_gustCycle' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, AudioSwingVelocity) == 0x0004D8, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::AudioSwingVelocity' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, AkSwingEvent) == 0x0004E0, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::AkSwingEvent' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, AudioVelocityThreshold) == 0x0004E8, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::AudioVelocityThreshold' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, Use_physic4Wind) == 0x0004F0, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::Use_physic4Wind' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, AnimWindGust_curr) == 0x0004F8, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::AnimWindGust_curr' has a wrong offset!");
static_assert(offsetof(ABP_lamp_HangingTypeA_NoPhysics_C, AnimWindGust_prev) == 0x000500, "Member 'ABP_lamp_HangingTypeA_NoPhysics_C::AnimWindGust_prev' has a wrong offset!");

}

