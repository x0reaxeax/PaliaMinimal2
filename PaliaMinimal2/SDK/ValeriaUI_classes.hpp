#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValeriaUI

#include "Basic.hpp"

#include "Palia_structs.hpp"
#include "S6UICore_classes.hpp"
#include "Slate_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "CommonWidgetInputExtended_classes.hpp"
#include "ValeriaUI_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SlateCore_structs.hpp"
#include "S6Core_structs.hpp"
#include "S6Core_classes.hpp"
#include "EnhancedInput_structs.hpp"
#include "S6UICommonWidgets_classes.hpp"
#include "InputCore_structs.hpp"
#include "CommonUI_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "WebBrowserWidget_classes.hpp"


namespace SDK
{

// Class ValeriaUI.VALUI_ModalWidgetBase
// 0x0000 (0x0558 - 0x0558)
class UVALUI_ModalWidgetBase : public US6UI_ModalWidgetBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ModalWidgetBase">();
	}
	static class UVALUI_ModalWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ModalWidgetBase>();
	}
};
static_assert(alignof(UVALUI_ModalWidgetBase) == 0x000008, "Wrong alignment on UVALUI_ModalWidgetBase");
static_assert(sizeof(UVALUI_ModalWidgetBase) == 0x000558, "Wrong size on UVALUI_ModalWidgetBase");

// Class ValeriaUI.BaitUserWidget
// 0x0078 (0x05D0 - 0x0558)
class UBaitUserWidget final : public UVALUI_ModalWidgetBase
{
public:
	TArray<struct FValeriaItem>                   Bait;                                              // 0x0558(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FValeriaItem                           SelectedBait;                                      // 0x0568(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2CCE[0x8];                                     // 0x05C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndBaitSelection();
	void OnBaitSelected(const struct FValeriaItem& baitItem);
	void OnHidden();
	void OnRightMouseReleased();
	void OnShown(EAmmoType AmmoType);
	void ShowAmmoType(EAmmoType AmmoType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaitUserWidget">();
	}
	static class UBaitUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaitUserWidget>();
	}
};
static_assert(alignof(UBaitUserWidget) == 0x000008, "Wrong alignment on UBaitUserWidget");
static_assert(sizeof(UBaitUserWidget) == 0x0005D0, "Wrong size on UBaitUserWidget");
static_assert(offsetof(UBaitUserWidget, Bait) == 0x000558, "Member 'UBaitUserWidget::Bait' has a wrong offset!");
static_assert(offsetof(UBaitUserWidget, SelectedBait) == 0x000568, "Member 'UBaitUserWidget::SelectedBait' has a wrong offset!");

// Class ValeriaUI.VAL_LocalizationUtils
// 0x0000 (0x0028 - 0x0028)
class UVAL_LocalizationUtils final : public UBlueprintFunctionLibrary
{
public:
	static class FString GetGreetingLanguageSuffix();
	static class FString GetGreetingStorageLocation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_LocalizationUtils">();
	}
	static class UVAL_LocalizationUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVAL_LocalizationUtils>();
	}
};
static_assert(alignof(UVAL_LocalizationUtils) == 0x000008, "Wrong alignment on UVAL_LocalizationUtils");
static_assert(sizeof(UVAL_LocalizationUtils) == 0x000028, "Wrong size on UVAL_LocalizationUtils");

// Class ValeriaUI.BookViewerWidget
// 0x0008 (0x0560 - 0x0558)
class UBookViewerWidget final : public UVALUI_ModalWidgetBase
{
public:
	int32                                         CurrentBookId;                                     // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CCF[0x4];                                     // 0x055C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MarkPageAsRead(int32 Param_Index);

	class FText GetContentForPage(int32 Param_Index) const;
	int32 GetNumberOfPages() const;
	class FText GetSubTitle() const;
	class FText GetTitle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BookViewerWidget">();
	}
	static class UBookViewerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBookViewerWidget>();
	}
};
static_assert(alignof(UBookViewerWidget) == 0x000008, "Wrong alignment on UBookViewerWidget");
static_assert(sizeof(UBookViewerWidget) == 0x000560, "Wrong size on UBookViewerWidget");
static_assert(offsetof(UBookViewerWidget, CurrentBookId) == 0x000558, "Member 'UBookViewerWidget::CurrentBookId' has a wrong offset!");

// Class ValeriaUI.DetailUserWidget
// 0x0050 (0x0310 - 0x02C0)
class UDetailUserWidget final : public UUserWidget
{
public:
	class UTextBlock*                             DetailName;                                        // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             DetailCategory;                                    // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             DetailDescription;                                 // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DetailIcon;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CD1[0x30];                                    // 0x02E0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool UpdateDetail(TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset>& ItemType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DetailUserWidget">();
	}
	static class UDetailUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDetailUserWidget>();
	}
};
static_assert(alignof(UDetailUserWidget) == 0x000008, "Wrong alignment on UDetailUserWidget");
static_assert(sizeof(UDetailUserWidget) == 0x000310, "Wrong size on UDetailUserWidget");
static_assert(offsetof(UDetailUserWidget, DetailName) == 0x0002C0, "Member 'UDetailUserWidget::DetailName' has a wrong offset!");
static_assert(offsetof(UDetailUserWidget, DetailCategory) == 0x0002C8, "Member 'UDetailUserWidget::DetailCategory' has a wrong offset!");
static_assert(offsetof(UDetailUserWidget, DetailDescription) == 0x0002D0, "Member 'UDetailUserWidget::DetailDescription' has a wrong offset!");
static_assert(offsetof(UDetailUserWidget, DetailIcon) == 0x0002D8, "Member 'UDetailUserWidget::DetailIcon' has a wrong offset!");

// Class ValeriaUI.VALUI_ListView_Styled
// 0x0070 (0x0CE0 - 0x0C70)
#pragma pack(push, 0x1)
class alignas(0x10) UVALUI_ListView_Styled : public UListView
{
public:
	uint8                                         Pad_2CD3[0x8];                                     // 0x0C70(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UVALUI_ListViewStyle*                   Style;                                             // 0x0C78(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandleDirectionalNavigation;                      // 0x0C80(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProvideInputType;                                 // 0x0C81(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CD4[0x6];                                     // 0x0C82(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUserScrolled;                                    // 0x0C88(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUserMouseWheelScrolled;                          // 0x0C98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnListItemsChanged;                                // 0x0CA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CD5[0x10];                                    // 0x0CB8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnListItemSelectionChangedWithInputType;        // 0x0CC8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	void OnListItemsChanged__DelegateSignature(TArray<class UObject*>& AddedItems, TArray<class UObject*>& RemovedItems);
	void OnListItemSelectionChangedWithInputTypeDynamic__DelegateSignature(class UObject* Item, bool bIsSelected, ESelectInfo SelectType);
	void ResetPoolAndSetListItems(TArray<class UObject*>& InListItems);
	void SetEntryWidgetClass(TSubclassOf<class UUserWidget> NewWidgetClass);
	void VALUI_OnListViewUserMouseWheelScrolled__DelegateSignature(float DesiredOffset);
	void VALUI_OnListViewUserScrolled__DelegateSignature(float ScrollFraction);

	TArray<class UObject*> GetItemsWithinRange(int32& StartingIndex, int32& Range) const;
	float GetScrollbarDistanceFromBottom() const;
	bool ShouldScrollBarBeVisible() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ListView_Styled">();
	}
	static class UVALUI_ListView_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ListView_Styled>();
	}
};
#pragma pack(pop)
static_assert(alignof(UVALUI_ListView_Styled) == 0x000010, "Wrong alignment on UVALUI_ListView_Styled");
static_assert(sizeof(UVALUI_ListView_Styled) == 0x000CE0, "Wrong size on UVALUI_ListView_Styled");
static_assert(offsetof(UVALUI_ListView_Styled, Style) == 0x000C78, "Member 'UVALUI_ListView_Styled::Style' has a wrong offset!");
static_assert(offsetof(UVALUI_ListView_Styled, bHandleDirectionalNavigation) == 0x000C80, "Member 'UVALUI_ListView_Styled::bHandleDirectionalNavigation' has a wrong offset!");
static_assert(offsetof(UVALUI_ListView_Styled, bProvideInputType) == 0x000C81, "Member 'UVALUI_ListView_Styled::bProvideInputType' has a wrong offset!");
static_assert(offsetof(UVALUI_ListView_Styled, OnUserScrolled) == 0x000C88, "Member 'UVALUI_ListView_Styled::OnUserScrolled' has a wrong offset!");
static_assert(offsetof(UVALUI_ListView_Styled, OnUserMouseWheelScrolled) == 0x000C98, "Member 'UVALUI_ListView_Styled::OnUserMouseWheelScrolled' has a wrong offset!");
static_assert(offsetof(UVALUI_ListView_Styled, OnListItemsChanged) == 0x000CA8, "Member 'UVALUI_ListView_Styled::OnListItemsChanged' has a wrong offset!");
static_assert(offsetof(UVALUI_ListView_Styled, BP_OnListItemSelectionChangedWithInputType) == 0x000CC8, "Member 'UVALUI_ListView_Styled::BP_OnListItemSelectionChangedWithInputType' has a wrong offset!");

// Class ValeriaUI.VALUI_TileView_Styled
// 0x0020 (0x0D00 - 0x0CE0)
class UVALUI_TileView_Styled final : public UVALUI_ListView_Styled
{
public:
	float                                         EntryHeight;                                       // 0x0CD8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EntryWidth;                                        // 0x0CDC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EListItemAlignment                            TileAlignment;                                     // 0x0CE0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWrapHorizontalNavigation;                         // 0x0CE1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CD7[0x1E];                                    // 0x0CE2(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEntryHeight(float NewHeight);
	void SetEntryWidth(float NewWidth);

	float GetEntryHeight() const;
	float GetEntryWidth() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_TileView_Styled">();
	}
	static class UVALUI_TileView_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_TileView_Styled>();
	}
};
static_assert(alignof(UVALUI_TileView_Styled) == 0x000010, "Wrong alignment on UVALUI_TileView_Styled");
static_assert(sizeof(UVALUI_TileView_Styled) == 0x000D00, "Wrong size on UVALUI_TileView_Styled");
static_assert(offsetof(UVALUI_TileView_Styled, EntryHeight) == 0x000CD8, "Member 'UVALUI_TileView_Styled::EntryHeight' has a wrong offset!");
static_assert(offsetof(UVALUI_TileView_Styled, EntryWidth) == 0x000CDC, "Member 'UVALUI_TileView_Styled::EntryWidth' has a wrong offset!");
static_assert(offsetof(UVALUI_TileView_Styled, TileAlignment) == 0x000CE0, "Member 'UVALUI_TileView_Styled::TileAlignment' has a wrong offset!");
static_assert(offsetof(UVALUI_TileView_Styled, bWrapHorizontalNavigation) == 0x000CE1, "Member 'UVALUI_TileView_Styled::bWrapHorizontalNavigation' has a wrong offset!");

// Class ValeriaUI.HeadlessSteamAccountFlowBase
// 0x0000 (0x0510 - 0x0510)
class UHeadlessSteamAccountFlowBase : public UCommonActivatableWidgetInputExtended
{
public:
	void BindDelegates();
	class FString GetErrorMessageFromResponse(const class FString& Response);
	bool IsErrorRetriable(int32 Code, const class FString& Message);
	class FText LoginErrorMessage(int32 Code, const class FString& Message);
	void OnPlatformLoggedInFailure(const class FString& ErrorMessage, int32 ErrorCode);
	void OnPlatformLoggedInFailure2(const class FString& ErrorMessage, int32 ErrorCode);
	void OnPlatformLoggedInSuccess();
	void OnPlatformRegisterFailure(const class FString& ErrorMessage, int32 ErrorCode);
	void OnPlatformRegisterFailure2(const class FString& ErrorMessage, int32 ErrorCode);
	void OnPlatformRegisterSuccess();
	class FText RegistrationErrorMessage(int32 Code, const class FString& Message);
	void UnbindDelegates();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeadlessSteamAccountFlowBase">();
	}
	static class UHeadlessSteamAccountFlowBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeadlessSteamAccountFlowBase>();
	}
};
static_assert(alignof(UHeadlessSteamAccountFlowBase) == 0x000008, "Wrong alignment on UHeadlessSteamAccountFlowBase");
static_assert(sizeof(UHeadlessSteamAccountFlowBase) == 0x000510, "Wrong size on UHeadlessSteamAccountFlowBase");

// Class ValeriaUI.LinkSteamAccountFlowBase
// 0x0000 (0x0510 - 0x0510)
class ULinkSteamAccountFlowBase : public UCommonActivatableWidgetInputExtended
{
public:
	void BindDelegates();
	class FString GetErrorMessageFromResponse(const class FString& Response);
	class FText LinkErrorMessage(int32 Code, const class FString& Message);
	void OnPlatformLinkFailure(const class FString& ErrorMessage, int32 ErrorCode);
	void OnPlatformLinkFailure2(const class FString& ErrorMessage, int32 ErrorCode);
	void OnPlatformLinkSuccess();
	void OnPlatformLoggedInFailure(const class FString& ErrorMessage, int32 ErrorCode);
	void OnPlatformLoggedInFailure2(const class FString& ErrorMessage, int32 ErrorCode);
	void OnPlatformLoggedInSuccess();
	void UnbindDelegates();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LinkSteamAccountFlowBase">();
	}
	static class ULinkSteamAccountFlowBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULinkSteamAccountFlowBase>();
	}
};
static_assert(alignof(ULinkSteamAccountFlowBase) == 0x000008, "Wrong alignment on ULinkSteamAccountFlowBase");
static_assert(sizeof(ULinkSteamAccountFlowBase) == 0x000510, "Wrong size on ULinkSteamAccountFlowBase");

// Class ValeriaUI.VALUI_LoadingScreenUserWidget
// 0x0048 (0x0308 - 0x02C0)
class UVALUI_LoadingScreenUserWidget : public UUserWidget
{
public:
	class UVALUI_LoadingScreenBlackWidget*        LoadingScreenBlackWidget;                          // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             CurrentBackgroundTexture;                          // 0x02C8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CE5[0x38];                                    // 0x02D0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnPawnChanged(class APawn* Pawn);
	void HandleSetBackgroundImage(class UTexture2D* Texture);
	void HandleSetLoadingScreenTip(struct FPaliaLoadingScreenTip& Tip);
	void ShowFadeToBlack();
	void ShowLoadingScreenBackground();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_LoadingScreenUserWidget">();
	}
	static class UVALUI_LoadingScreenUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_LoadingScreenUserWidget>();
	}
};
static_assert(alignof(UVALUI_LoadingScreenUserWidget) == 0x000008, "Wrong alignment on UVALUI_LoadingScreenUserWidget");
static_assert(sizeof(UVALUI_LoadingScreenUserWidget) == 0x000308, "Wrong size on UVALUI_LoadingScreenUserWidget");
static_assert(offsetof(UVALUI_LoadingScreenUserWidget, LoadingScreenBlackWidget) == 0x0002C0, "Member 'UVALUI_LoadingScreenUserWidget::LoadingScreenBlackWidget' has a wrong offset!");
static_assert(offsetof(UVALUI_LoadingScreenUserWidget, CurrentBackgroundTexture) == 0x0002C8, "Member 'UVALUI_LoadingScreenUserWidget::CurrentBackgroundTexture' has a wrong offset!");

// Class ValeriaUI.MailboxViewerUserWidget
// 0x0030 (0x0588 - 0x0558)
class UMailboxViewerUserWidget final : public UVALUI_ModalWidgetBase
{
public:
	bool                                          bIsLoadingMail;                                    // 0x0558(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2CE6[0x7];                                     // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMailMessageWidgetData>         MailMessages;                                      // 0x0560(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	EMailboxViewerFilter                          CurrentFilter;                                     // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2CE7[0x7];                                     // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMailbox                               LoadedMailbox;                                     // 0x0578(0x0010)(NativeAccessSpecifierPrivate)

public:
	bool CanAllRewardsBeCollected(int32 Param_Index);
	void HideMessage(int32 Param_Index);
	void LoadMail();
	void MarkAsRead(int32 Param_Index);
	void OnMailChanged();
	void OnMailLoaded();
	void OnPlayerToPlayerMailFailed(class FString& Error);
	void OnPlayerToPlayerMailSuccess(struct FMailbox& Mailbox);
	void OnVillagerMailChanged(class UVillagerMailInboxComponent* VillagerMail);
	void RefreshMailMessages(bool AllowRemoval);
	void RemoveLoadedMessage(int32 Param_Index);
	bool TryCollectAllRewards(int32 Param_Index, EValeriaFuncResult* OutResult);
	bool TryCollectReward(int32 Param_Index, int32 RewardIndex);
	void UpdateMailFilter(EMailboxViewerFilter Filter);

	bool AreAllRewardsCollected(int32 Param_Index) const;
	EMailboxViewerFilter GetCurrentFilter() const;
	int32 GetIndexOfMailMessage(const struct FMailMessageWidgetData& Data) const;
	struct FMailMessageWidgetData GetMailMessage(int32 Param_Index) const;
	int32 GetNextNonHiddenMessage(int32 StartIndex) const;
	int32 GetNumberOfMessages() const;
	int32 GetNumberOfMessagesForFilter(EMailboxViewerFilter Filter) const;
	int32 GetNumberOfNonHiddenMessages() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MailboxViewerUserWidget">();
	}
	static class UMailboxViewerUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMailboxViewerUserWidget>();
	}
};
static_assert(alignof(UMailboxViewerUserWidget) == 0x000008, "Wrong alignment on UMailboxViewerUserWidget");
static_assert(sizeof(UMailboxViewerUserWidget) == 0x000588, "Wrong size on UMailboxViewerUserWidget");
static_assert(offsetof(UMailboxViewerUserWidget, bIsLoadingMail) == 0x000558, "Member 'UMailboxViewerUserWidget::bIsLoadingMail' has a wrong offset!");
static_assert(offsetof(UMailboxViewerUserWidget, MailMessages) == 0x000560, "Member 'UMailboxViewerUserWidget::MailMessages' has a wrong offset!");
static_assert(offsetof(UMailboxViewerUserWidget, CurrentFilter) == 0x000570, "Member 'UMailboxViewerUserWidget::CurrentFilter' has a wrong offset!");
static_assert(offsetof(UMailboxViewerUserWidget, LoadedMailbox) == 0x000578, "Member 'UMailboxViewerUserWidget::LoadedMailbox' has a wrong offset!");

// Class ValeriaUI.MainLobbyBase
// 0x0000 (0x0510 - 0x0510)
class UMainLobbyBase : public UCommonActivatableWidgetInputExtended
{
public:
	void HandleInitialSteamLoginFailure(int32 Code, const class FString& Msg);
	void OnSteamInitializationFailure();
	void OnSteamLoginError(class FText& Msg);
	void OnSteamLoginNotFound();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MainLobbyBase">();
	}
	static class UMainLobbyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMainLobbyBase>();
	}
};
static_assert(alignof(UMainLobbyBase) == 0x000008, "Wrong alignment on UMainLobbyBase");
static_assert(sizeof(UMainLobbyBase) == 0x000510, "Wrong size on UMainLobbyBase");

// Class ValeriaUI.ValeriaViewportClient
// 0x0060 (0x0450 - 0x03F0)
class UValeriaViewportClient final : public US6UI_GameViewportClient
{
public:
	uint8                                         Pad_2CF0[0x50];                                    // 0x03F0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UVALUI_LoadingScreenUserWidget*         LoadingScreenWidget;                               // 0x0440(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2CF1[0x8];                                     // 0x0448(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnFadeInBlack(float DurationSeconds);
	void HandleOnFadeOutBlack(float DurationSeconds);
	void ReceiveOnFadeOutBlack();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ValeriaViewportClient">();
	}
	static class UValeriaViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UValeriaViewportClient>();
	}
};
static_assert(alignof(UValeriaViewportClient) == 0x000008, "Wrong alignment on UValeriaViewportClient");
static_assert(sizeof(UValeriaViewportClient) == 0x000450, "Wrong size on UValeriaViewportClient");
static_assert(offsetof(UValeriaViewportClient, LoadingScreenWidget) == 0x000440, "Member 'UValeriaViewportClient::LoadingScreenWidget' has a wrong offset!");

// Class ValeriaUI.VALUI_AnnouncementsMessageModalDialog
// 0x0038 (0x0590 - 0x0558)
class UVALUI_AnnouncementsMessageModalDialog : public UVALUI_ModalWidgetBase
{
public:
	bool                                          bIsFromLogin;                                      // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CF2[0x7];                                     // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PrefetchedMessage;                                 // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnConfirm;                                         // 0x0570(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0580(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class FString GetAnnouncementUrl();
	void HandleRefreshedMessageFromWeb(const class FString& Message);
	void NotifyConfirmComplete();
	void OnConfirmDelegate__DelegateSignature();
	void RefreshMessageFromWeb();
	void SetURL(const class FString& NewURL);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_AnnouncementsMessageModalDialog">();
	}
	static class UVALUI_AnnouncementsMessageModalDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_AnnouncementsMessageModalDialog>();
	}
};
static_assert(alignof(UVALUI_AnnouncementsMessageModalDialog) == 0x000008, "Wrong alignment on UVALUI_AnnouncementsMessageModalDialog");
static_assert(sizeof(UVALUI_AnnouncementsMessageModalDialog) == 0x000590, "Wrong size on UVALUI_AnnouncementsMessageModalDialog");
static_assert(offsetof(UVALUI_AnnouncementsMessageModalDialog, bIsFromLogin) == 0x000558, "Member 'UVALUI_AnnouncementsMessageModalDialog::bIsFromLogin' has a wrong offset!");
static_assert(offsetof(UVALUI_AnnouncementsMessageModalDialog, PrefetchedMessage) == 0x000560, "Member 'UVALUI_AnnouncementsMessageModalDialog::PrefetchedMessage' has a wrong offset!");
static_assert(offsetof(UVALUI_AnnouncementsMessageModalDialog, OnConfirm) == 0x000570, "Member 'UVALUI_AnnouncementsMessageModalDialog::OnConfirm' has a wrong offset!");
static_assert(offsetof(UVALUI_AnnouncementsMessageModalDialog, URL) == 0x000580, "Member 'UVALUI_AnnouncementsMessageModalDialog::URL' has a wrong offset!");

// Class ValeriaUI.VAL_AsyncActionRequestStorefront
// 0x0028 (0x0058 - 0x0030)
class UVAL_AsyncActionRequestStorefront final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             Successful;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             Failure;                                           // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CF3[0x8];                                     // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVAL_AsyncActionRequestStorefront* RequestStorefront(class ULocalPlayer* LP);

	void OnRequestStorefrontFailure__DelegateSignature();
	void OnRequestStorefrontSuccess__DelegateSignature(const struct FVALUI_PremiumStorefrontResponse& Response);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_AsyncActionRequestStorefront">();
	}
	static class UVAL_AsyncActionRequestStorefront* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVAL_AsyncActionRequestStorefront>();
	}
};
static_assert(alignof(UVAL_AsyncActionRequestStorefront) == 0x000008, "Wrong alignment on UVAL_AsyncActionRequestStorefront");
static_assert(sizeof(UVAL_AsyncActionRequestStorefront) == 0x000058, "Wrong size on UVAL_AsyncActionRequestStorefront");
static_assert(offsetof(UVAL_AsyncActionRequestStorefront, Successful) == 0x000030, "Member 'UVAL_AsyncActionRequestStorefront::Successful' has a wrong offset!");
static_assert(offsetof(UVAL_AsyncActionRequestStorefront, Failure) == 0x000040, "Member 'UVAL_AsyncActionRequestStorefront::Failure' has a wrong offset!");

// Class ValeriaUI.WishViewWidget
// 0x0000 (0x0558 - 0x0558)
class UWishViewWidget final : public UVALUI_ModalWidgetBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WishViewWidget">();
	}
	static class UWishViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWishViewWidget>();
	}
};
static_assert(alignof(UWishViewWidget) == 0x000008, "Wrong alignment on UWishViewWidget");
static_assert(sizeof(UWishViewWidget) == 0x000558, "Wrong size on UWishViewWidget");

// Class ValeriaUI.VALUI_AsyncUpdateLoadout
// 0x0990 (0x09C0 - 0x0030)
class UVALUI_AsyncUpdateLoadout final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             Completed;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             Failed;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CF4[0x970];                                   // 0x0050(0x0970)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UVALUI_AsyncUpdateLoadout* UpdateLoadout(class UVALUI_CharacterCustomizationPanelBase* CustPanel, struct FVAL_CharacterCustomizationLoadout& NewLoadout, struct FVALUI_CharCustomization_UpdateLoadoutContextPayload& ContextPayload);

	void OnUpdateLoadoutFailed__DelegateSignature(struct FVALUI_CharCustomization_UpdateLoadoutContextPayload& ContextPayload);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_AsyncUpdateLoadout">();
	}
	static class UVALUI_AsyncUpdateLoadout* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_AsyncUpdateLoadout>();
	}
};
static_assert(alignof(UVALUI_AsyncUpdateLoadout) == 0x000008, "Wrong alignment on UVALUI_AsyncUpdateLoadout");
static_assert(sizeof(UVALUI_AsyncUpdateLoadout) == 0x0009C0, "Wrong size on UVALUI_AsyncUpdateLoadout");
static_assert(offsetof(UVALUI_AsyncUpdateLoadout, Completed) == 0x000030, "Member 'UVALUI_AsyncUpdateLoadout::Completed' has a wrong offset!");
static_assert(offsetof(UVALUI_AsyncUpdateLoadout, Failed) == 0x000040, "Member 'UVALUI_AsyncUpdateLoadout::Failed' has a wrong offset!");

// Class ValeriaUI.VALUI_WidgetStyleBase
// 0x0000 (0x0030 - 0x0030)
class UVALUI_WidgetStyleBase : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_WidgetStyleBase">();
	}
	static class UVALUI_WidgetStyleBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_WidgetStyleBase>();
	}
};
static_assert(alignof(UVALUI_WidgetStyleBase) == 0x000008, "Wrong alignment on UVALUI_WidgetStyleBase");
static_assert(sizeof(UVALUI_WidgetStyleBase) == 0x000030, "Wrong size on UVALUI_WidgetStyleBase");

// Class ValeriaUI.VALUI_BorderStyle
// 0x02C0 (0x02F0 - 0x0030)
class UVALUI_BorderStyle final : public UVALUI_WidgetStyleBase
{
public:
	bool                                          bShowEffectWhenDisabled;                           // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CF5[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0034(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ContentColorAndOpacity;                            // 0x0044(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CF6[0xC];                                     // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Background;                                        // 0x0060(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Background_Light;                                  // 0x0130(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Background_Dark;                                   // 0x0200(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           BrushColor;                                        // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipForRightToLeftFlowDirection;                  // 0x02E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CF7[0xF];                                     // 0x02E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Apply(class UBorder* Border) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_BorderStyle">();
	}
	static class UVALUI_BorderStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_BorderStyle>();
	}
};
static_assert(alignof(UVALUI_BorderStyle) == 0x000010, "Wrong alignment on UVALUI_BorderStyle");
static_assert(sizeof(UVALUI_BorderStyle) == 0x0002F0, "Wrong size on UVALUI_BorderStyle");
static_assert(offsetof(UVALUI_BorderStyle, bShowEffectWhenDisabled) == 0x000030, "Member 'UVALUI_BorderStyle::bShowEffectWhenDisabled' has a wrong offset!");
static_assert(offsetof(UVALUI_BorderStyle, Padding) == 0x000034, "Member 'UVALUI_BorderStyle::Padding' has a wrong offset!");
static_assert(offsetof(UVALUI_BorderStyle, ContentColorAndOpacity) == 0x000044, "Member 'UVALUI_BorderStyle::ContentColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UVALUI_BorderStyle, Background) == 0x000060, "Member 'UVALUI_BorderStyle::Background' has a wrong offset!");
static_assert(offsetof(UVALUI_BorderStyle, Background_Light) == 0x000130, "Member 'UVALUI_BorderStyle::Background_Light' has a wrong offset!");
static_assert(offsetof(UVALUI_BorderStyle, Background_Dark) == 0x000200, "Member 'UVALUI_BorderStyle::Background_Dark' has a wrong offset!");
static_assert(offsetof(UVALUI_BorderStyle, BrushColor) == 0x0002D0, "Member 'UVALUI_BorderStyle::BrushColor' has a wrong offset!");
static_assert(offsetof(UVALUI_BorderStyle, bFlipForRightToLeftFlowDirection) == 0x0002E0, "Member 'UVALUI_BorderStyle::bFlipForRightToLeftFlowDirection' has a wrong offset!");

// Class ValeriaUI.VALUI_Border_Styled
// 0x0070 (0x03B0 - 0x0340)
class UVALUI_Border_Styled final : public UBorder
{
public:
	bool                                          bSupportCrossPlatform;                             // 0x0338(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowHUDOpacitySettings;                          // 0x0339(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CF8[0x6];                                     // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVALUI_BorderStyle*                     Style;                                             // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ERedirectsPlatform, TSoftObjectPtr<class UVALUI_BorderStyle>> CrossPlatformStyles;                               // 0x0348(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CF9[0x18];                                    // 0x0398(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAccessbilitySettingsChanged(struct FValeriaAccessibilitySettings& AccessbilitySettings);
	void SetBorderStyle(class UVALUI_BorderStyle* NewStyle);
	void StyleLoadComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_Border_Styled">();
	}
	static class UVALUI_Border_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_Border_Styled>();
	}
};
static_assert(alignof(UVALUI_Border_Styled) == 0x000010, "Wrong alignment on UVALUI_Border_Styled");
static_assert(sizeof(UVALUI_Border_Styled) == 0x0003B0, "Wrong size on UVALUI_Border_Styled");
static_assert(offsetof(UVALUI_Border_Styled, bSupportCrossPlatform) == 0x000338, "Member 'UVALUI_Border_Styled::bSupportCrossPlatform' has a wrong offset!");
static_assert(offsetof(UVALUI_Border_Styled, bAllowHUDOpacitySettings) == 0x000339, "Member 'UVALUI_Border_Styled::bAllowHUDOpacitySettings' has a wrong offset!");
static_assert(offsetof(UVALUI_Border_Styled, Style) == 0x000340, "Member 'UVALUI_Border_Styled::Style' has a wrong offset!");
static_assert(offsetof(UVALUI_Border_Styled, CrossPlatformStyles) == 0x000348, "Member 'UVALUI_Border_Styled::CrossPlatformStyles' has a wrong offset!");

// Class ValeriaUI.VALUI_BoundInputActionStateWidget
// 0x0058 (0x0318 - 0x02C0)
class UVALUI_BoundInputActionStateWidget : public UUserWidget
{
public:
	class UInputAction*                           InputAction;                                       // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CFA[0x50];                                    // 0x02C8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetInputAction(class UInputAction* InInputAction);
	void UpdateInputActionState_Implementation(struct FKey& Key, ETriggerEvent LatestTriggerEvent, float OngoingDuration, float HoldTimeThreshold);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_BoundInputActionStateWidget">();
	}
	static class UVALUI_BoundInputActionStateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_BoundInputActionStateWidget>();
	}
};
static_assert(alignof(UVALUI_BoundInputActionStateWidget) == 0x000008, "Wrong alignment on UVALUI_BoundInputActionStateWidget");
static_assert(sizeof(UVALUI_BoundInputActionStateWidget) == 0x000318, "Wrong size on UVALUI_BoundInputActionStateWidget");
static_assert(offsetof(UVALUI_BoundInputActionStateWidget, InputAction) == 0x0002C0, "Member 'UVALUI_BoundInputActionStateWidget::InputAction' has a wrong offset!");

// Class ValeriaUI.VALUI_BoxDropShadow
// 0x0038 (0x01D0 - 0x0198)
class UVALUI_BoxDropShadow final : public UContentWidget
{
public:
	struct FVector2D                              ShadowOffset;                                      // 0x0198(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowHardness;                                    // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CornerRadius;                                      // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CFD[0x10];                                    // 0x01C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_BoxDropShadow">();
	}
	static class UVALUI_BoxDropShadow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_BoxDropShadow>();
	}
};
static_assert(alignof(UVALUI_BoxDropShadow) == 0x000008, "Wrong alignment on UVALUI_BoxDropShadow");
static_assert(sizeof(UVALUI_BoxDropShadow) == 0x0001D0, "Wrong size on UVALUI_BoxDropShadow");
static_assert(offsetof(UVALUI_BoxDropShadow, ShadowOffset) == 0x000198, "Member 'UVALUI_BoxDropShadow::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UVALUI_BoxDropShadow, ShadowHardness) == 0x0001A8, "Member 'UVALUI_BoxDropShadow::ShadowHardness' has a wrong offset!");
static_assert(offsetof(UVALUI_BoxDropShadow, CornerRadius) == 0x0001AC, "Member 'UVALUI_BoxDropShadow::CornerRadius' has a wrong offset!");
static_assert(offsetof(UVALUI_BoxDropShadow, ShadowColor) == 0x0001B0, "Member 'UVALUI_BoxDropShadow::ShadowColor' has a wrong offset!");

// Class ValeriaUI.VALUI_ButtonStyle
// 0x0460 (0x0490 - 0x0030)
class UVALUI_ButtonStyle : public UVALUI_WidgetStyleBase
{
public:
	struct FButtonStyle                           WidgetStyle;                                       // 0x0030(0x03F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x0420(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DropShadowCornerRadius;                            // 0x0440(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CFE[0x4];                                     // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ShadowOffset_Normal;                               // 0x0448(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset_Pressed;                              // 0x0458(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowHardness_Normal;                             // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowHardness_Pressed;                            // 0x046C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor_Normal;                                // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor_Pressed;                               // 0x0480(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Apply(class UVALUI_Button_Styled* Button) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ButtonStyle">();
	}
	static class UVALUI_ButtonStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ButtonStyle>();
	}
};
static_assert(alignof(UVALUI_ButtonStyle) == 0x000010, "Wrong alignment on UVALUI_ButtonStyle");
static_assert(sizeof(UVALUI_ButtonStyle) == 0x000490, "Wrong size on UVALUI_ButtonStyle");
static_assert(offsetof(UVALUI_ButtonStyle, WidgetStyle) == 0x000030, "Member 'UVALUI_ButtonStyle::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle, ColorAndOpacity) == 0x000420, "Member 'UVALUI_ButtonStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle, BackgroundColor) == 0x000430, "Member 'UVALUI_ButtonStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle, DropShadowCornerRadius) == 0x000440, "Member 'UVALUI_ButtonStyle::DropShadowCornerRadius' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle, ShadowOffset_Normal) == 0x000448, "Member 'UVALUI_ButtonStyle::ShadowOffset_Normal' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle, ShadowOffset_Pressed) == 0x000458, "Member 'UVALUI_ButtonStyle::ShadowOffset_Pressed' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle, ShadowHardness_Normal) == 0x000468, "Member 'UVALUI_ButtonStyle::ShadowHardness_Normal' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle, ShadowHardness_Pressed) == 0x00046C, "Member 'UVALUI_ButtonStyle::ShadowHardness_Pressed' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle, ShadowColor_Normal) == 0x000470, "Member 'UVALUI_ButtonStyle::ShadowColor_Normal' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle, ShadowColor_Pressed) == 0x000480, "Member 'UVALUI_ButtonStyle::ShadowColor_Pressed' has a wrong offset!");

// Class ValeriaUI.VALUI_ButtonStyle_WithBG
// 0x04E0 (0x0970 - 0x0490)
class UVALUI_ButtonStyle_WithBG final : public UVALUI_ButtonStyle
{
public:
	bool                                          bUseBackgroundImage;                               // 0x0490(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CFF[0xF];                                     // 0x0491(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundImage;                                   // 0x04A0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bUseBackgroundStyle;                               // 0x0570(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D00[0xF];                                     // 0x0571(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           BackgroundStyle;                                   // 0x0580(0x03F0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ButtonStyle_WithBG">();
	}
	static class UVALUI_ButtonStyle_WithBG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ButtonStyle_WithBG>();
	}
};
static_assert(alignof(UVALUI_ButtonStyle_WithBG) == 0x000010, "Wrong alignment on UVALUI_ButtonStyle_WithBG");
static_assert(sizeof(UVALUI_ButtonStyle_WithBG) == 0x000970, "Wrong size on UVALUI_ButtonStyle_WithBG");
static_assert(offsetof(UVALUI_ButtonStyle_WithBG, bUseBackgroundImage) == 0x000490, "Member 'UVALUI_ButtonStyle_WithBG::bUseBackgroundImage' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle_WithBG, BackgroundImage) == 0x0004A0, "Member 'UVALUI_ButtonStyle_WithBG::BackgroundImage' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle_WithBG, bUseBackgroundStyle) == 0x000570, "Member 'UVALUI_ButtonStyle_WithBG::bUseBackgroundStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_ButtonStyle_WithBG, BackgroundStyle) == 0x000580, "Member 'UVALUI_ButtonStyle_WithBG::BackgroundStyle' has a wrong offset!");

// Class ValeriaUI.VALUI_Button_Styled
// 0x0060 (0x0680 - 0x0620)
class UVALUI_Button_Styled : public UButton
{
public:
	class UVALUI_ButtonStyle*                     Style;                                             // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEffectWhenReleased;                               // 0x0620(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D01[0x3];                                     // 0x0621(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FEffectTime;                                       // 0x0624(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D02[0x38];                                    // 0x0628(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	ECursorState                                  CursorState;                                       // 0x0660(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFocusDirection                               DirectionOfCursorOnButton;                         // 0x0661(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D03[0x1E];                                    // 0x0662(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Construct();
	void Destruct();
	void HandlePressed();
	void HandleReleased();
	bool HasFocus();
	void OnInitialized();
	void PreConstruct(bool IsDesignTime);
	void RemoveCursor(class UWidget* InCursor);
	void SetButtonFocus();
	void SetButtonStyle(class UVALUI_ButtonStyle* NewStyle);
	bool ShowCursor(class UWidget* InCursor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_Button_Styled">();
	}
	static class UVALUI_Button_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_Button_Styled>();
	}
};
static_assert(alignof(UVALUI_Button_Styled) == 0x000010, "Wrong alignment on UVALUI_Button_Styled");
static_assert(sizeof(UVALUI_Button_Styled) == 0x000680, "Wrong size on UVALUI_Button_Styled");
static_assert(offsetof(UVALUI_Button_Styled, Style) == 0x000618, "Member 'UVALUI_Button_Styled::Style' has a wrong offset!");
static_assert(offsetof(UVALUI_Button_Styled, bEffectWhenReleased) == 0x000620, "Member 'UVALUI_Button_Styled::bEffectWhenReleased' has a wrong offset!");
static_assert(offsetof(UVALUI_Button_Styled, FEffectTime) == 0x000624, "Member 'UVALUI_Button_Styled::FEffectTime' has a wrong offset!");
static_assert(offsetof(UVALUI_Button_Styled, CursorState) == 0x000660, "Member 'UVALUI_Button_Styled::CursorState' has a wrong offset!");
static_assert(offsetof(UVALUI_Button_Styled, DirectionOfCursorOnButton) == 0x000661, "Member 'UVALUI_Button_Styled::DirectionOfCursorOnButton' has a wrong offset!");

// Class ValeriaUI.VALUI_Button_Styled_WithBG
// 0x0220 (0x08A0 - 0x0680)
class UVALUI_Button_Styled_WithBG final : public UVALUI_Button_Styled
{
public:
	uint8                                         Pad_2D05[0x10];                                    // 0x0680(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            GamepadKeyHint;                                    // 0x0690(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EGamepadKeyHintLocation                       HintShowLocation;                                  // 0x0760(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D06[0x7];                                     // 0x0761(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              HintMargin;                                        // 0x0768(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D07[0xD8];                                    // 0x0778(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	EFocusDirection                               DirectionOfCursorOnBG;                             // 0x0850(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D08[0x4F];                                    // 0x0851(0x004F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleHovered();
	void HandleUnhovered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_Button_Styled_WithBG">();
	}
	static class UVALUI_Button_Styled_WithBG* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_Button_Styled_WithBG>();
	}
};
static_assert(alignof(UVALUI_Button_Styled_WithBG) == 0x000010, "Wrong alignment on UVALUI_Button_Styled_WithBG");
static_assert(sizeof(UVALUI_Button_Styled_WithBG) == 0x0008A0, "Wrong size on UVALUI_Button_Styled_WithBG");
static_assert(offsetof(UVALUI_Button_Styled_WithBG, GamepadKeyHint) == 0x000690, "Member 'UVALUI_Button_Styled_WithBG::GamepadKeyHint' has a wrong offset!");
static_assert(offsetof(UVALUI_Button_Styled_WithBG, HintShowLocation) == 0x000760, "Member 'UVALUI_Button_Styled_WithBG::HintShowLocation' has a wrong offset!");
static_assert(offsetof(UVALUI_Button_Styled_WithBG, HintMargin) == 0x000768, "Member 'UVALUI_Button_Styled_WithBG::HintMargin' has a wrong offset!");
static_assert(offsetof(UVALUI_Button_Styled_WithBG, DirectionOfCursorOnBG) == 0x000850, "Member 'UVALUI_Button_Styled_WithBG::DirectionOfCursorOnBG' has a wrong offset!");

// Class ValeriaUI.VALUI_CameraVirtualMoveHooker_Mobile
// 0x0000 (0x0028 - 0x0028)
class UVALUI_CameraVirtualMoveHooker_Mobile final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_CameraVirtualMoveHooker_Mobile">();
	}
	static class UVALUI_CameraVirtualMoveHooker_Mobile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_CameraVirtualMoveHooker_Mobile>();
	}
};
static_assert(alignof(UVALUI_CameraVirtualMoveHooker_Mobile) == 0x000008, "Wrong alignment on UVALUI_CameraVirtualMoveHooker_Mobile");
static_assert(sizeof(UVALUI_CameraVirtualMoveHooker_Mobile) == 0x000028, "Wrong size on UVALUI_CameraVirtualMoveHooker_Mobile");

// Class ValeriaUI.VALUI_NameValidator
// 0x0068 (0x0090 - 0x0028)
class UVALUI_NameValidator : public UObject
{
public:
	TSet<EVAL_CharacterNameType>                  NameTypesToValidate;                               // 0x0028(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   ErrorMessage;                                      // 0x0078(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	bool IsNameValid(const class FString& InCharacterName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_NameValidator">();
	}
	static class UVALUI_NameValidator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_NameValidator>();
	}
};
static_assert(alignof(UVALUI_NameValidator) == 0x000008, "Wrong alignment on UVALUI_NameValidator");
static_assert(sizeof(UVALUI_NameValidator) == 0x000090, "Wrong size on UVALUI_NameValidator");
static_assert(offsetof(UVALUI_NameValidator, NameTypesToValidate) == 0x000028, "Member 'UVALUI_NameValidator::NameTypesToValidate' has a wrong offset!");
static_assert(offsetof(UVALUI_NameValidator, ErrorMessage) == 0x000078, "Member 'UVALUI_NameValidator::ErrorMessage' has a wrong offset!");

// Class ValeriaUI.VALUI_NameValidator_Regex
// 0x0010 (0x00A0 - 0x0090)
class UVALUI_NameValidator_Regex : public UVALUI_NameValidator
{
public:
	class FString                                 RegexPattern;                                      // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_NameValidator_Regex">();
	}
	static class UVALUI_NameValidator_Regex* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_NameValidator_Regex>();
	}
};
static_assert(alignof(UVALUI_NameValidator_Regex) == 0x000008, "Wrong alignment on UVALUI_NameValidator_Regex");
static_assert(sizeof(UVALUI_NameValidator_Regex) == 0x0000A0, "Wrong size on UVALUI_NameValidator_Regex");
static_assert(offsetof(UVALUI_NameValidator_Regex, RegexPattern) == 0x000090, "Member 'UVALUI_NameValidator_Regex::RegexPattern' has a wrong offset!");

// Class ValeriaUI.VALUI_NameValidator_Regex_PerWord
// 0x0000 (0x00A0 - 0x00A0)
class UVALUI_NameValidator_Regex_PerWord : public UVALUI_NameValidator_Regex
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_NameValidator_Regex_PerWord">();
	}
	static class UVALUI_NameValidator_Regex_PerWord* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_NameValidator_Regex_PerWord>();
	}
};
static_assert(alignof(UVALUI_NameValidator_Regex_PerWord) == 0x000008, "Wrong alignment on UVALUI_NameValidator_Regex_PerWord");
static_assert(sizeof(UVALUI_NameValidator_Regex_PerWord) == 0x0000A0, "Wrong size on UVALUI_NameValidator_Regex_PerWord");

// Class ValeriaUI.VALUI_NameValidatorDataAsset
// 0x0050 (0x0080 - 0x0030)
class UVALUI_NameValidatorDataAsset final : public UPrimaryDataAsset
{
public:
	TSet<TSubclassOf<class UObject>>              ValidatorClasses;                                  // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_NameValidatorDataAsset">();
	}
	static class UVALUI_NameValidatorDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_NameValidatorDataAsset>();
	}
};
static_assert(alignof(UVALUI_NameValidatorDataAsset) == 0x000008, "Wrong alignment on UVALUI_NameValidatorDataAsset");
static_assert(sizeof(UVALUI_NameValidatorDataAsset) == 0x000080, "Wrong size on UVALUI_NameValidatorDataAsset");
static_assert(offsetof(UVALUI_NameValidatorDataAsset, ValidatorClasses) == 0x000030, "Member 'UVALUI_NameValidatorDataAsset::ValidatorClasses' has a wrong offset!");

// Class ValeriaUI.VALUI_CharacterCreationScreenBase
// 0x0050 (0x0560 - 0x0510)
class UVALUI_CharacterCreationScreenBase : public UCommonActivatableWidgetInputExtended
{
public:
	class UVALUI_CharacterCustomizationPanelBase* CustomizationPanel;                                // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVALUI_NameValidatorDataAsset*          NameValidatorDataAsset;                            // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UVALUI_NameValidator*>           NameValidators;                                    // 0x0520(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             EventOnCommitCharacter;                            // 0x0530(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventOnBodyTypeSelectionConfirm;                   // 0x0540(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventOnBodyTypeSelectionChange;                    // 0x0550(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void HandleCharacterNameChanged(class FText& InCharacterName, EVAL_CharacterNameType InCharacterNameType);
	void HandleCharacterNameValidityResponse(struct FVALUI_CharacterNameValidityResponse& Response);
	void OnBodyTypeSelectionChange__DelegateSignature(bool bFirstSelection);
	void OnBodyTypeSelectionConfirm__DelegateSignature();
	void OnCommitCharacter__DelegateSignature(const struct FVALDTOS_MetaCharacterFormat& CommitedCharacter);
	void SetEnableAllButtons(bool bEnable);
	void SetEnableContinueButton(bool bEnable);
	void SetEnableTurntable(bool bEnable);

	TSet<TSoftObjectPtr<class UVAL_CharacterCustomizationItemBase>> GetAllowedCustomizationItems() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_CharacterCreationScreenBase">();
	}
	static class UVALUI_CharacterCreationScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_CharacterCreationScreenBase>();
	}
};
static_assert(alignof(UVALUI_CharacterCreationScreenBase) == 0x000008, "Wrong alignment on UVALUI_CharacterCreationScreenBase");
static_assert(sizeof(UVALUI_CharacterCreationScreenBase) == 0x000560, "Wrong size on UVALUI_CharacterCreationScreenBase");
static_assert(offsetof(UVALUI_CharacterCreationScreenBase, CustomizationPanel) == 0x000510, "Member 'UVALUI_CharacterCreationScreenBase::CustomizationPanel' has a wrong offset!");
static_assert(offsetof(UVALUI_CharacterCreationScreenBase, NameValidatorDataAsset) == 0x000518, "Member 'UVALUI_CharacterCreationScreenBase::NameValidatorDataAsset' has a wrong offset!");
static_assert(offsetof(UVALUI_CharacterCreationScreenBase, NameValidators) == 0x000520, "Member 'UVALUI_CharacterCreationScreenBase::NameValidators' has a wrong offset!");
static_assert(offsetof(UVALUI_CharacterCreationScreenBase, EventOnCommitCharacter) == 0x000530, "Member 'UVALUI_CharacterCreationScreenBase::EventOnCommitCharacter' has a wrong offset!");
static_assert(offsetof(UVALUI_CharacterCreationScreenBase, EventOnBodyTypeSelectionConfirm) == 0x000540, "Member 'UVALUI_CharacterCreationScreenBase::EventOnBodyTypeSelectionConfirm' has a wrong offset!");
static_assert(offsetof(UVALUI_CharacterCreationScreenBase, EventOnBodyTypeSelectionChange) == 0x000550, "Member 'UVALUI_CharacterCreationScreenBase::EventOnBodyTypeSelectionChange' has a wrong offset!");

// Class ValeriaUI.VALUI_CharacterCreationStatics
// 0x0000 (0x0028 - 0x0028)
class UVALUI_CharacterCreationStatics final : public UBlueprintFunctionLibrary
{
public:
	static bool IsCharacterNameValidityResponseValid(struct FVALUI_CharacterNameValidityResponse& Response);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_CharacterCreationStatics">();
	}
	static class UVALUI_CharacterCreationStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_CharacterCreationStatics>();
	}
};
static_assert(alignof(UVALUI_CharacterCreationStatics) == 0x000008, "Wrong alignment on UVALUI_CharacterCreationStatics");
static_assert(sizeof(UVALUI_CharacterCreationStatics) == 0x000028, "Wrong size on UVALUI_CharacterCreationStatics");

// Class ValeriaUI.VALUI_CharacterCustomizationPanelBase
// 0x09C8 (0x0ED8 - 0x0510)
class UVALUI_CharacterCustomizationPanelBase : public UCommonActivatableWidgetInputExtended
{
public:
	uint8                                         Pad_2D0C[0x10];                                    // 0x0510(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PreviewCharacterActor;                             // 0x0520(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVAL_CharacterCustomizationComponent*   CharacterCustomizationComponent;                   // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVAL_CharacterCustomizationLoadout     CurrentLoadout;                                    // 0x0530(0x0900)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FVALUI_CharCustomization_LoadoutSlotData> LoadoutSlotMap;                                    // 0x0E30(0x0050)(Edit, BlueprintVisible, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UEnum*                                  ItemTypeEnum;                                      // 0x0E80(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<class FName>                             EnabledTagNames;                                   // 0x0E88(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)

public:
	class UObject* GenerateItemObject(struct FVAL_CharCustomization_AssetData& AssetData, class UWidget* ViewWidget);
	void GenerateLoadoutSlotItems();
	void HandleLoadoutSlotItemsGenerated(class FName& LoadoutSlotName, struct FVALUI_CharCustomization_LoadoutSlotData& LoadoutSlotData);
	void HandleLoadoutUpdated(struct FVALUI_CharCustomization_UpdateLoadoutContextPayload& ContextPayload);
	void HandleOnAllLoadoutSlotItemsGenerated();
	void PopulateLoadoutSlotMap();
	void SetPreviewCharacterActor(class AActor* Actor);

	const struct FVAL_CharacterCustomizationLoadout GetCurrentLoadout() const;
	void GetLoadoutSlotDataFromItemObject(class UObject* ItemObject, class FName* LoadoutSlotName, struct FVALUI_CharCustomization_LoadoutSlotData* LoadoutSlotData, bool* bSuccess) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_CharacterCustomizationPanelBase">();
	}
	static class UVALUI_CharacterCustomizationPanelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_CharacterCustomizationPanelBase>();
	}
};
static_assert(alignof(UVALUI_CharacterCustomizationPanelBase) == 0x000008, "Wrong alignment on UVALUI_CharacterCustomizationPanelBase");
static_assert(sizeof(UVALUI_CharacterCustomizationPanelBase) == 0x000ED8, "Wrong size on UVALUI_CharacterCustomizationPanelBase");
static_assert(offsetof(UVALUI_CharacterCustomizationPanelBase, PreviewCharacterActor) == 0x000520, "Member 'UVALUI_CharacterCustomizationPanelBase::PreviewCharacterActor' has a wrong offset!");
static_assert(offsetof(UVALUI_CharacterCustomizationPanelBase, CharacterCustomizationComponent) == 0x000528, "Member 'UVALUI_CharacterCustomizationPanelBase::CharacterCustomizationComponent' has a wrong offset!");
static_assert(offsetof(UVALUI_CharacterCustomizationPanelBase, CurrentLoadout) == 0x000530, "Member 'UVALUI_CharacterCustomizationPanelBase::CurrentLoadout' has a wrong offset!");
static_assert(offsetof(UVALUI_CharacterCustomizationPanelBase, LoadoutSlotMap) == 0x000E30, "Member 'UVALUI_CharacterCustomizationPanelBase::LoadoutSlotMap' has a wrong offset!");
static_assert(offsetof(UVALUI_CharacterCustomizationPanelBase, ItemTypeEnum) == 0x000E80, "Member 'UVALUI_CharacterCustomizationPanelBase::ItemTypeEnum' has a wrong offset!");
static_assert(offsetof(UVALUI_CharacterCustomizationPanelBase, EnabledTagNames) == 0x000E88, "Member 'UVALUI_CharacterCustomizationPanelBase::EnabledTagNames' has a wrong offset!");

// Class ValeriaUI.VALUI_CharacterMovementStick_Mobile
// 0x0060 (0x0580 - 0x0520)
class UVALUI_CharacterMovementStick_Mobile final : public US6UI_InputActionHandlingUserWidget
{
public:
	uint8                                         Pad_2D0E[0x50];                                    // 0x0520(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UVALUI_CameraVirtualMoveHooker_Mobile*  Hooker;                                            // 0x0570(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D0F[0x8];                                     // 0x0578(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitMovementVirtualStack(const struct FVector2D& DefaultPosition, float ValidTouchRadius, float MovementValidDistanceTemp, float WalkBoundaryDistanceTemp);
	void OnFirstTouch();
	void OnUpdateMovmentVirtualStick(bool TouchControlFlag, struct FVector2D& Pos, struct FVector2D& ControlVector);
	void SetHooker(class UVALUI_CameraVirtualMoveHooker_Mobile* VirtualMoveHooker);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_CharacterMovementStick_Mobile">();
	}
	static class UVALUI_CharacterMovementStick_Mobile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_CharacterMovementStick_Mobile>();
	}
};
static_assert(alignof(UVALUI_CharacterMovementStick_Mobile) == 0x000008, "Wrong alignment on UVALUI_CharacterMovementStick_Mobile");
static_assert(sizeof(UVALUI_CharacterMovementStick_Mobile) == 0x000580, "Wrong size on UVALUI_CharacterMovementStick_Mobile");
static_assert(offsetof(UVALUI_CharacterMovementStick_Mobile, Hooker) == 0x000570, "Member 'UVALUI_CharacterMovementStick_Mobile::Hooker' has a wrong offset!");

// Class ValeriaUI.VAL_ChatBubbleWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class IVAL_ChatBubbleWidgetInterface final : public IInterface
{
public:
	void DisplayMessage(struct FValeriaChatMessage& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_ChatBubbleWidgetInterface">();
	}
	static class IVAL_ChatBubbleWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVAL_ChatBubbleWidgetInterface>();
	}
};
static_assert(alignof(IVAL_ChatBubbleWidgetInterface) == 0x000008, "Wrong alignment on IVAL_ChatBubbleWidgetInterface");
static_assert(sizeof(IVAL_ChatBubbleWidgetInterface) == 0x000028, "Wrong size on IVAL_ChatBubbleWidgetInterface");

// Class ValeriaUI.VALUI_ChatBubbleManager
// 0x0010 (0x0040 - 0x0030)
class UVALUI_ChatBubbleManager final : public ULocalPlayerSubsystem
{
public:
	TSubclassOf<class UWidgetComponent>           WidgetComponentClass;                              // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D12[0x8];                                     // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnNewChatMessageReceived(struct FValeriaChatMessage& Message);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ChatBubbleManager">();
	}
	static class UVALUI_ChatBubbleManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ChatBubbleManager>();
	}
};
static_assert(alignof(UVALUI_ChatBubbleManager) == 0x000008, "Wrong alignment on UVALUI_ChatBubbleManager");
static_assert(sizeof(UVALUI_ChatBubbleManager) == 0x000040, "Wrong size on UVALUI_ChatBubbleManager");
static_assert(offsetof(UVALUI_ChatBubbleManager, WidgetComponentClass) == 0x000030, "Member 'UVALUI_ChatBubbleManager::WidgetComponentClass' has a wrong offset!");

// Class ValeriaUI.VALUI_ChatEmojiPanel
// 0x0000 (0x02C0 - 0x02C0)
class UVALUI_ChatEmojiPanel : public UUserWidget
{
public:
	const TSoftObjectPtr<class UTexture2D> GetTexture(struct FS6UI_FRichImageRow_Soft& ImageRow) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ChatEmojiPanel">();
	}
	static class UVALUI_ChatEmojiPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ChatEmojiPanel>();
	}
};
static_assert(alignof(UVALUI_ChatEmojiPanel) == 0x000008, "Wrong alignment on UVALUI_ChatEmojiPanel");
static_assert(sizeof(UVALUI_ChatEmojiPanel) == 0x0002C0, "Wrong size on UVALUI_ChatEmojiPanel");

// Class ValeriaUI.VALUI_ChatInputBar
// 0x0200 (0x04C0 - 0x02C0)
class UVALUI_ChatInputBar : public UUserWidget
{
public:
	uint8                                         Pad_2D13[0x68];                                    // 0x02C0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCommitBlankText;                                 // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMessageSubmitted;                                // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTextChanged;                                     // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMessageTargetCycled;                             // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCommandSuggestionsChanged;                       // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D14[0x20];                                    // 0x0378(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UVAL_ChatCommand_Base*                  ActiveChatCommand;                                 // 0x0398(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UVAL_ChatCommand_Base>> ChatCommandClasses;                                // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<EVAL_DirectMessageResult, class FText>   DirectMessageErrorMessageTable;                    // 0x03B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UVALUI_ChatInputEditableText*           EditableText;                                      // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UVAL_ChatCommand_Base*>          ChatCommandTemplateObjects;                        // 0x0408(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TSet<class UVAL_ChatCommand_Base*>            PendingActiveCommands;                             // 0x0418(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D15[0x58];                                    // 0x0468(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ChangeMessageTarget(struct FMessageTarget& MessageTarget);
	void CommitText();
	void CompleteSuggestion();
	void CycleToNextSuggestion();
	void CycleToPrevSuggestion();
	void DisplayActiveCommandHint(class UVAL_ChatCommand_Base* Command, bool bDisplay);
	void DisplayCommandSuggestions(bool bInDisplay);
	void DisplayStringsSuggestions(const class FString& InString, TArray<class FString>& Suggestions);
	void HandleOnChatChannelSet(struct FVALUI_ChatChannel& Channel);
	void HandleOnDisplayCharacterNameSuggestions(const class FString& CharacterNameSubstr, int32 MaxSuggestionsNum);
	void HandleOnHideSuggestions();
	void HandleOnStateChanged(EVALUI_ChatInputBarState NewStateId);
	void HandleOnTextChanged(class FText& InText);
	void HandleOnTextCommitted(class FText& InText, ETextCommit InCommitMethod);
	void PushErrorNotification(class FText& InErrorText);
	struct FMessageTarget SwitchToNextChannel(bool bSwitchUp);
	void TryUpdateChatChannel();
	void VALUIEvent_OnCommandSuggestionsChanged__DelegateSignature(const class FString& InString, TArray<class UVAL_ChatCommand_Base*>& CommandObjects);
	void VALUIEvent_OnCommitBlankText__DelegateSignature(class UVALUI_ChatInputBar* InputBar);
	void VALUIEvent_OnMessageSubmitted__DelegateSignature(class UVALUI_ChatInputBar* InputBar, struct FMessageTarget& MessageTarget, class FText& Message);
	void VALUIEvent_OnMessageTargetCycled__DelegateSignature(class UVALUI_ChatInputBar* InputBar, struct FMessageTarget& MessageTarget);
	void VALUIEvent_OnTextChanged__DelegateSignature(class UVALUI_ChatInputBar* InputBar, class FText& PreviousText, class FText& NewText);

	class FString GetCharacterName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ChatInputBar">();
	}
	static class UVALUI_ChatInputBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ChatInputBar>();
	}
};
static_assert(alignof(UVALUI_ChatInputBar) == 0x000008, "Wrong alignment on UVALUI_ChatInputBar");
static_assert(sizeof(UVALUI_ChatInputBar) == 0x0004C0, "Wrong size on UVALUI_ChatInputBar");
static_assert(offsetof(UVALUI_ChatInputBar, OnCommitBlankText) == 0x000328, "Member 'UVALUI_ChatInputBar::OnCommitBlankText' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputBar, OnMessageSubmitted) == 0x000338, "Member 'UVALUI_ChatInputBar::OnMessageSubmitted' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputBar, OnTextChanged) == 0x000348, "Member 'UVALUI_ChatInputBar::OnTextChanged' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputBar, OnMessageTargetCycled) == 0x000358, "Member 'UVALUI_ChatInputBar::OnMessageTargetCycled' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputBar, OnCommandSuggestionsChanged) == 0x000368, "Member 'UVALUI_ChatInputBar::OnCommandSuggestionsChanged' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputBar, ActiveChatCommand) == 0x000398, "Member 'UVALUI_ChatInputBar::ActiveChatCommand' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputBar, ChatCommandClasses) == 0x0003A0, "Member 'UVALUI_ChatInputBar::ChatCommandClasses' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputBar, DirectMessageErrorMessageTable) == 0x0003B0, "Member 'UVALUI_ChatInputBar::DirectMessageErrorMessageTable' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputBar, EditableText) == 0x000400, "Member 'UVALUI_ChatInputBar::EditableText' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputBar, ChatCommandTemplateObjects) == 0x000408, "Member 'UVALUI_ChatInputBar::ChatCommandTemplateObjects' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputBar, PendingActiveCommands) == 0x000418, "Member 'UVALUI_ChatInputBar::PendingActiveCommands' has a wrong offset!");

// Class ValeriaUI.VALUI_EditableRichText_Styled
// 0x0010 (0x0860 - 0x0850)
#pragma pack(push, 0x1)
class alignas(0x10) UVALUI_EditableRichText_Styled : public US6UI_EditableRichText
{
public:
	class UVALUI_EditableRichTextStyle*           Style;                                             // 0x0850(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetTextBlockStyle(class UVALUI_EditableRichTextStyle* NewStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_EditableRichText_Styled">();
	}
	static class UVALUI_EditableRichText_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_EditableRichText_Styled>();
	}
};
#pragma pack(pop)
static_assert(alignof(UVALUI_EditableRichText_Styled) == 0x000010, "Wrong alignment on UVALUI_EditableRichText_Styled");
static_assert(sizeof(UVALUI_EditableRichText_Styled) == 0x000860, "Wrong size on UVALUI_EditableRichText_Styled");
static_assert(offsetof(UVALUI_EditableRichText_Styled, Style) == 0x000850, "Member 'UVALUI_EditableRichText_Styled::Style' has a wrong offset!");

// Class ValeriaUI.VALUI_ChatInputEditableText
// 0x0100 (0x0960 - 0x0860)
class UVALUI_ChatInputEditableText final : public UVALUI_EditableRichText_Styled
{
public:
	FMulticastInlineDelegateProperty_             OnSummonContextMenu;                               // 0x0858(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         MaximumCharacterLimit;                             // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D1B[0x4];                                     // 0x086C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlainTextTag;                                      // 0x0870(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoldTextTag;                                       // 0x0880(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItalicTextTag;                                     // 0x0890(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   CycleKey;                                          // 0x08A0(0x0018)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   UpKey;                                             // 0x08B8(0x0018)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   DownKey;                                           // 0x08D0(0x0018)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   PlainTextKey;                                      // 0x08E8(0x0018)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   BoldKey;                                           // 0x0900(0x0018)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FKey                                   ItalicKey;                                         // 0x0918(0x0018)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D1C[0x30];                                    // 0x0930(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InsertTextAtCursorChecked(class FText& InText);
	void MakeSelectedTextBold();
	void MakeSelectedTextItalic();
	void MakeSelectedTextPlain();
	void PasteTextFromClipboardChecked();
	void StyleSelectedText(const class FString& StyleTagString);
	void VALUI_OnSummonContextMenu__DelegateSignature(struct FGeometry& Geometry, struct FPointerEvent& MouseEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ChatInputEditableText">();
	}
	static class UVALUI_ChatInputEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ChatInputEditableText>();
	}
};
static_assert(alignof(UVALUI_ChatInputEditableText) == 0x000010, "Wrong alignment on UVALUI_ChatInputEditableText");
static_assert(sizeof(UVALUI_ChatInputEditableText) == 0x000960, "Wrong size on UVALUI_ChatInputEditableText");
static_assert(offsetof(UVALUI_ChatInputEditableText, OnSummonContextMenu) == 0x000858, "Member 'UVALUI_ChatInputEditableText::OnSummonContextMenu' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputEditableText, MaximumCharacterLimit) == 0x000868, "Member 'UVALUI_ChatInputEditableText::MaximumCharacterLimit' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputEditableText, PlainTextTag) == 0x000870, "Member 'UVALUI_ChatInputEditableText::PlainTextTag' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputEditableText, BoldTextTag) == 0x000880, "Member 'UVALUI_ChatInputEditableText::BoldTextTag' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputEditableText, ItalicTextTag) == 0x000890, "Member 'UVALUI_ChatInputEditableText::ItalicTextTag' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputEditableText, CycleKey) == 0x0008A0, "Member 'UVALUI_ChatInputEditableText::CycleKey' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputEditableText, UpKey) == 0x0008B8, "Member 'UVALUI_ChatInputEditableText::UpKey' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputEditableText, DownKey) == 0x0008D0, "Member 'UVALUI_ChatInputEditableText::DownKey' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputEditableText, PlainTextKey) == 0x0008E8, "Member 'UVALUI_ChatInputEditableText::PlainTextKey' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputEditableText, BoldKey) == 0x000900, "Member 'UVALUI_ChatInputEditableText::BoldKey' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatInputEditableText, ItalicKey) == 0x000918, "Member 'UVALUI_ChatInputEditableText::ItalicKey' has a wrong offset!");

// Class ValeriaUI.VALUI_ChatMessage
// 0x0000 (0x02C0 - 0x02C0)
class UVALUI_ChatMessage : public UUserWidget
{
public:
	class FString ColorToHexString(struct FLinearColor& Color) const;
	class FString GetTimeZone() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ChatMessage">();
	}
	static class UVALUI_ChatMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ChatMessage>();
	}
};
static_assert(alignof(UVALUI_ChatMessage) == 0x000008, "Wrong alignment on UVALUI_ChatMessage");
static_assert(sizeof(UVALUI_ChatMessage) == 0x0002C0, "Wrong size on UVALUI_ChatMessage");

// Class ValeriaUI.VALUI_ChatPanelBase
// 0x0108 (0x0628 - 0x0520)
class UVALUI_ChatPanelBase : public US6UI_InputActionHandlingUserWidget
{
public:
	uint8                                         Pad_2D1D[0x68];                                    // 0x0520(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChatPanelStateChanged;                           // 0x0588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVALUI_ChatTab>      TabTable;                                          // 0x0598(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FName                                   ActiveTabName;                                     // 0x05E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVALUI_ChatInputBar*                    InputBar;                                          // 0x05F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ChatRequestDecoratorWidgetPtr;                     // 0x05F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                ChatRequestDecoratorWidget;                        // 0x0620(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearTabSidePanel(struct FVALUI_ChatTab& Tab);
	void DisplayTab(class FName& TabName);
	void GetTabWidgetReferences(class FName& TabName, class UWidget** OutSidePanelWidget, class UWidget** OutMessagePanelWidget);
	void GotoChatState(EVALUI_ChatPanelState State);
	void HandleAddMessageToPanel(class UWidget* MessagePanel, struct FValeriaChatMessage& ChatMessage, struct FVALUI_ChatMessageConfig& MessageConfig);
	void HandleAddTabChannel(struct FVALUI_ChatMessageConfig& MessageConfig);
	void HandleAddTabToTabHost(class FName& TabName, class FText& TabDisplayName);
	void HandleClearMessagePanel(class UWidget* MessagePanel);
	void HandleClearTabHost();
	void HandleDisplayChannelGlow(class UWidget* SidePanel, struct FVALUI_ChatChannel& Channel, int32 ChannelIndex);
	void HandleDisplayTab(class FName& TabName);
	void HandleMessageTargetRemoved(const struct FMessageTarget& MessageTarget);
	void HandleNewChatMessage(struct FValeriaChatMessage& ChatMessage);
	void HandleNewControlMessage(struct FControlMessage& ControlMessage);
	void HandleNewMessageTarget(const struct FMessageTarget& MessageTarget);
	void HandleOnServerDelimiterMessageTriggered();
	void HandleOnStateChanged(EVALUI_ChatPanelState State);
	void HandleRemoveSidePanelChannel(class UWidget* SidePanel, int32 ChannelIndex);
	void HandleTabChannelEnabled(struct FVALUI_ChatTab& Tab, struct FVALUI_ChatChannel& Channel, struct FVALUI_ChatMessageConfig& Config);
	void HandleToggleTabHost(bool bEnabled);
	bool IsTabChannelEnabled(class FName& TabName, struct FMessageTarget& MessageTarget);
	void OnNewChatMessageAdded(struct FValeriaChatMessage& ChatMessage);
	void RemoveTabChannel(struct FVALUI_ChatTab* Tab, int32 ChannelIndex);
	void SwitchTab(class FName& TabName);
	void ToggleAllChannels(bool bEnabled);
	void ToggleChannelsByType(bool bEnabled, EMessageTargetType Type);
	void ToggleChatChannel(struct FVALUI_ChatMessageConfig& MessageConfig);

	void GetChatMessageConfigs(struct FValeriaChatMessage& Message, TArray<struct FVALUI_ChatMessageConfig>* OutMessageConfigs) const;
	EVALUI_ChatPanelState GetCurrentChatState() const;
	bool TryGetTabAndChannelFromMessageConfig(struct FVALUI_ChatMessageConfig& Config, struct FVALUI_ChatTab* OutTab, struct FVALUI_ChatChannel* OutChannel) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ChatPanelBase">();
	}
	static class UVALUI_ChatPanelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ChatPanelBase>();
	}
};
static_assert(alignof(UVALUI_ChatPanelBase) == 0x000008, "Wrong alignment on UVALUI_ChatPanelBase");
static_assert(sizeof(UVALUI_ChatPanelBase) == 0x000628, "Wrong size on UVALUI_ChatPanelBase");
static_assert(offsetof(UVALUI_ChatPanelBase, OnChatPanelStateChanged) == 0x000588, "Member 'UVALUI_ChatPanelBase::OnChatPanelStateChanged' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatPanelBase, TabTable) == 0x000598, "Member 'UVALUI_ChatPanelBase::TabTable' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatPanelBase, ActiveTabName) == 0x0005E8, "Member 'UVALUI_ChatPanelBase::ActiveTabName' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatPanelBase, InputBar) == 0x0005F0, "Member 'UVALUI_ChatPanelBase::InputBar' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatPanelBase, ChatRequestDecoratorWidgetPtr) == 0x0005F8, "Member 'UVALUI_ChatPanelBase::ChatRequestDecoratorWidgetPtr' has a wrong offset!");
static_assert(offsetof(UVALUI_ChatPanelBase, ChatRequestDecoratorWidget) == 0x000620, "Member 'UVALUI_ChatPanelBase::ChatRequestDecoratorWidget' has a wrong offset!");

// Class ValeriaUI.VALUI_ChatStatics
// 0x0000 (0x0028 - 0x0028)
class UVALUI_ChatStatics final : public UBlueprintFunctionLibrary
{
public:
	static TArray<struct FS6PLAT_ChatMessage> ConvertValeriaChatMessagesArrayToPlatformChatMessagesArray(TArray<struct FValeriaChatMessage>& ChatMessages);
	static struct FS6PLAT_ChatMessage ConvertValeriaChatMessageToPlatformChatMessage(struct FValeriaChatMessage& ChatMessages);
	static bool DoesChannelMatchMessageTarget(struct FVALUI_ChatChannel& InChannel, struct FMessageTarget& InMessageTarget);
	static TArray<struct FValeriaChatMessage> FetchChatMessages(class UObject* WorldContextObject, struct FVALUI_ChatMessageFetchFilter& Filter);
	static TArray<struct FMessageTarget> GetMessageTargetsOfChannel(class UWorld* WorldContext, struct FVALUI_ChatChannel& InChannel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ChatStatics">();
	}
	static class UVALUI_ChatStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ChatStatics>();
	}
};
static_assert(alignof(UVALUI_ChatStatics) == 0x000008, "Wrong alignment on UVALUI_ChatStatics");
static_assert(sizeof(UVALUI_ChatStatics) == 0x000028, "Wrong size on UVALUI_ChatStatics");

// Class ValeriaUI.VALUI_CheckBoxStyle
// 0x0AD0 (0x0B00 - 0x0030)
class UVALUI_CheckBoxStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FCheckBoxStyle                         WidgetStyle;                                       // 0x0030(0x0AD0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void Apply(class UCheckBox* CheckBox) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_CheckBoxStyle">();
	}
	static class UVALUI_CheckBoxStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_CheckBoxStyle>();
	}
};
static_assert(alignof(UVALUI_CheckBoxStyle) == 0x000010, "Wrong alignment on UVALUI_CheckBoxStyle");
static_assert(sizeof(UVALUI_CheckBoxStyle) == 0x000B00, "Wrong size on UVALUI_CheckBoxStyle");
static_assert(offsetof(UVALUI_CheckBoxStyle, WidgetStyle) == 0x000030, "Member 'UVALUI_CheckBoxStyle::WidgetStyle' has a wrong offset!");

// Class ValeriaUI.VALUI_CheckBox_Styled
// 0x0000 (0x0CB0 - 0x0CB0)
class UVALUI_CheckBox_Styled final : public UCheckBox
{
public:
	class UVALUI_CheckBoxStyle*                   Style;                                             // 0x0CA8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetCheckBoxStyle(class UVALUI_CheckBoxStyle* NewStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_CheckBox_Styled">();
	}
	static class UVALUI_CheckBox_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_CheckBox_Styled>();
	}
};
static_assert(alignof(UVALUI_CheckBox_Styled) == 0x000010, "Wrong alignment on UVALUI_CheckBox_Styled");
static_assert(sizeof(UVALUI_CheckBox_Styled) == 0x000CB0, "Wrong size on UVALUI_CheckBox_Styled");
static_assert(offsetof(UVALUI_CheckBox_Styled, Style) == 0x000CA8, "Member 'UVALUI_CheckBox_Styled::Style' has a wrong offset!");

// Class ValeriaUI.VALUI_CrafterContentWidget
// 0x0058 (0x0318 - 0x02C0)
class UVALUI_CrafterContentWidget final : public UUserWidget
{
public:
	TMap<class FName, struct FVALUI_Crafter>      CrafterTable;                                      // 0x02C0(0x0050)(Edit, BlueprintVisible, EditFixedSize, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UDataTable*                             CrafterConfigsDataTable;                           // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool GetCrafterData(struct FCrafterConfig& CrafterConfig, struct FVALUI_Crafter* CrafterData) const;
	class FName GetCrafterRowName(struct FCrafterConfig& CrafterConfig) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_CrafterContentWidget">();
	}
	static class UVALUI_CrafterContentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_CrafterContentWidget>();
	}
};
static_assert(alignof(UVALUI_CrafterContentWidget) == 0x000008, "Wrong alignment on UVALUI_CrafterContentWidget");
static_assert(sizeof(UVALUI_CrafterContentWidget) == 0x000318, "Wrong size on UVALUI_CrafterContentWidget");
static_assert(offsetof(UVALUI_CrafterContentWidget, CrafterTable) == 0x0002C0, "Member 'UVALUI_CrafterContentWidget::CrafterTable' has a wrong offset!");
static_assert(offsetof(UVALUI_CrafterContentWidget, CrafterConfigsDataTable) == 0x000310, "Member 'UVALUI_CrafterContentWidget::CrafterConfigsDataTable' has a wrong offset!");

// Class ValeriaUI.VALUI_CrafterStationsViewWidget
// 0x0000 (0x02C0 - 0x02C0)
class UVALUI_CrafterStationsViewWidget final : public UUserWidget
{
public:
	void DisplayCrafterStations(struct FRecipeNeeds& RecipeNeeds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_CrafterStationsViewWidget">();
	}
	static class UVALUI_CrafterStationsViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_CrafterStationsViewWidget>();
	}
};
static_assert(alignof(UVALUI_CrafterStationsViewWidget) == 0x000008, "Wrong alignment on UVALUI_CrafterStationsViewWidget");
static_assert(sizeof(UVALUI_CrafterStationsViewWidget) == 0x0002C0, "Wrong size on UVALUI_CrafterStationsViewWidget");

// Class ValeriaUI.VALUI_DebugOnly
// 0x0018 (0x01B0 - 0x0198)
class UVALUI_DebugOnly final : public UContentWidget
{
public:
	bool                                          bShouldCollapseIfNotDebugMode;                     // 0x0198(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D28[0x17];                                    // 0x0199(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_DebugOnly">();
	}
	static class UVALUI_DebugOnly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_DebugOnly>();
	}
};
static_assert(alignof(UVALUI_DebugOnly) == 0x000008, "Wrong alignment on UVALUI_DebugOnly");
static_assert(sizeof(UVALUI_DebugOnly) == 0x0001B0, "Wrong size on UVALUI_DebugOnly");
static_assert(offsetof(UVALUI_DebugOnly, bShouldCollapseIfNotDebugMode) == 0x000198, "Member 'UVALUI_DebugOnly::bShouldCollapseIfNotDebugMode' has a wrong offset!");

// Class ValeriaUI.VALUI_DepthSortedHorizontalBox
// 0x0008 (0x01B0 - 0x01A8)
class UVALUI_DepthSortedHorizontalBox final : public UHorizontalBox
{
public:
	int32                                         ForemostWidgetIndex;                               // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D29[0x4];                                     // 0x01AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetForemostWidgetIndex(int32 Param_Index);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_DepthSortedHorizontalBox">();
	}
	static class UVALUI_DepthSortedHorizontalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_DepthSortedHorizontalBox>();
	}
};
static_assert(alignof(UVALUI_DepthSortedHorizontalBox) == 0x000008, "Wrong alignment on UVALUI_DepthSortedHorizontalBox");
static_assert(sizeof(UVALUI_DepthSortedHorizontalBox) == 0x0001B0, "Wrong size on UVALUI_DepthSortedHorizontalBox");
static_assert(offsetof(UVALUI_DepthSortedHorizontalBox, ForemostWidgetIndex) == 0x0001A8, "Member 'UVALUI_DepthSortedHorizontalBox::ForemostWidgetIndex' has a wrong offset!");

// Class ValeriaUI.VALUI_DragDropOperation
// 0x0018 (0x00A8 - 0x0090)
class UVALUI_DragDropOperation : public UDragDropOperation
{
public:
	FMulticastInlineDelegateProperty_             OnDragStarted;                                     // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bStartedDrag;                                      // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D2A[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DragStarted(struct FPointerEvent& PointerEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_DragDropOperation">();
	}
	static class UVALUI_DragDropOperation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_DragDropOperation>();
	}
};
static_assert(alignof(UVALUI_DragDropOperation) == 0x000008, "Wrong alignment on UVALUI_DragDropOperation");
static_assert(sizeof(UVALUI_DragDropOperation) == 0x0000A8, "Wrong size on UVALUI_DragDropOperation");
static_assert(offsetof(UVALUI_DragDropOperation, OnDragStarted) == 0x000090, "Member 'UVALUI_DragDropOperation::OnDragStarted' has a wrong offset!");
static_assert(offsetof(UVALUI_DragDropOperation, bStartedDrag) == 0x0000A0, "Member 'UVALUI_DragDropOperation::bStartedDrag' has a wrong offset!");

// Class ValeriaUI.VALUI_Functor_Button_OnClicked
// 0x0048 (0x0070 - 0x0028)
class UVALUI_Functor_Button_OnClicked final : public UObject
{
public:
	uint8                                         Pad_2D2B[0x48];                                    // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_Functor_Button_OnClicked">();
	}
	static class UVALUI_Functor_Button_OnClicked* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_Functor_Button_OnClicked>();
	}
};
static_assert(alignof(UVALUI_Functor_Button_OnClicked) == 0x000008, "Wrong alignment on UVALUI_Functor_Button_OnClicked");
static_assert(sizeof(UVALUI_Functor_Button_OnClicked) == 0x000070, "Wrong size on UVALUI_Functor_Button_OnClicked");

// Class ValeriaUI.VALUI_DynamicExtensionBase
// 0x0038 (0x0068 - 0x0030)
class UVALUI_DynamicExtensionBase final : public UPrimaryDataAsset
{
public:
	class FName                                   TargetContainer;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TargetWidget;                                      // 0x0038(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Priority;                                          // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2C[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachedToWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_DynamicExtensionBase">();
	}
	static class UVALUI_DynamicExtensionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_DynamicExtensionBase>();
	}
};
static_assert(alignof(UVALUI_DynamicExtensionBase) == 0x000008, "Wrong alignment on UVALUI_DynamicExtensionBase");
static_assert(sizeof(UVALUI_DynamicExtensionBase) == 0x000068, "Wrong size on UVALUI_DynamicExtensionBase");
static_assert(offsetof(UVALUI_DynamicExtensionBase, TargetContainer) == 0x000030, "Member 'UVALUI_DynamicExtensionBase::TargetContainer' has a wrong offset!");
static_assert(offsetof(UVALUI_DynamicExtensionBase, TargetWidget) == 0x000038, "Member 'UVALUI_DynamicExtensionBase::TargetWidget' has a wrong offset!");
static_assert(offsetof(UVALUI_DynamicExtensionBase, Priority) == 0x000060, "Member 'UVALUI_DynamicExtensionBase::Priority' has a wrong offset!");

// Class ValeriaUI.VALUI_EditableRichTextStyle
// 0x0310 (0x0340 - 0x0030)
class UVALUI_EditableRichTextStyle final : public UVALUI_WidgetStyleBase
{
public:
	class UDataTable*                             TextStyleSet;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class US6UI_EditableRichTextDecorator>> DecoratorClasses;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bOverrideDefaultStyle;                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2D[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEditableTextStyle                     DefaultTextStyleOverride;                          // 0x0050(0x02F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ApplyToTextBlock(class US6UI_EditableRichText* TextWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_EditableRichTextStyle">();
	}
	static class UVALUI_EditableRichTextStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_EditableRichTextStyle>();
	}
};
static_assert(alignof(UVALUI_EditableRichTextStyle) == 0x000010, "Wrong alignment on UVALUI_EditableRichTextStyle");
static_assert(sizeof(UVALUI_EditableRichTextStyle) == 0x000340, "Wrong size on UVALUI_EditableRichTextStyle");
static_assert(offsetof(UVALUI_EditableRichTextStyle, TextStyleSet) == 0x000030, "Member 'UVALUI_EditableRichTextStyle::TextStyleSet' has a wrong offset!");
static_assert(offsetof(UVALUI_EditableRichTextStyle, DecoratorClasses) == 0x000038, "Member 'UVALUI_EditableRichTextStyle::DecoratorClasses' has a wrong offset!");
static_assert(offsetof(UVALUI_EditableRichTextStyle, bOverrideDefaultStyle) == 0x000048, "Member 'UVALUI_EditableRichTextStyle::bOverrideDefaultStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_EditableRichTextStyle, DefaultTextStyleOverride) == 0x000050, "Member 'UVALUI_EditableRichTextStyle::DefaultTextStyleOverride' has a wrong offset!");

// Class ValeriaUI.VALUI_EditableTextBoxStyle
// 0x0E80 (0x0EB0 - 0x0030)
class UVALUI_EditableTextBoxStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FEditableTextBoxStyle                  WidgetStyle;                                       // 0x0030(0x0E80)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ApplyToTextBox(class UEditableTextBox* TextWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_EditableTextBoxStyle">();
	}
	static class UVALUI_EditableTextBoxStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_EditableTextBoxStyle>();
	}
};
static_assert(alignof(UVALUI_EditableTextBoxStyle) == 0x000010, "Wrong alignment on UVALUI_EditableTextBoxStyle");
static_assert(sizeof(UVALUI_EditableTextBoxStyle) == 0x000EB0, "Wrong size on UVALUI_EditableTextBoxStyle");
static_assert(offsetof(UVALUI_EditableTextBoxStyle, WidgetStyle) == 0x000030, "Member 'UVALUI_EditableTextBoxStyle::WidgetStyle' has a wrong offset!");

// Class ValeriaUI.VALUI_EditableTextBox_Styled
// 0x0000 (0x10B0 - 0x10B0)
class UVALUI_EditableTextBox_Styled final : public UEditableTextBox
{
public:
	class UVALUI_EditableTextBoxStyle*            Style;                                             // 0x10A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetTextStyle(class UVALUI_EditableTextBoxStyle* NewStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_EditableTextBox_Styled">();
	}
	static class UVALUI_EditableTextBox_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_EditableTextBox_Styled>();
	}
};
static_assert(alignof(UVALUI_EditableTextBox_Styled) == 0x000010, "Wrong alignment on UVALUI_EditableTextBox_Styled");
static_assert(sizeof(UVALUI_EditableTextBox_Styled) == 0x0010B0, "Wrong size on UVALUI_EditableTextBox_Styled");
static_assert(offsetof(UVALUI_EditableTextBox_Styled, Style) == 0x0010A8, "Member 'UVALUI_EditableTextBox_Styled::Style' has a wrong offset!");

// Class ValeriaUI.VALUI_EditableTextStyle
// 0x0630 (0x0660 - 0x0030)
class UVALUI_EditableTextStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FEditableTextStyle                     WidgetStyle;                                       // 0x0030(0x02F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        HintTextStyle;                                     // 0x0320(0x0340)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ApplyToTextBlock(class UEditableText* TextWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_EditableTextStyle">();
	}
	static class UVALUI_EditableTextStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_EditableTextStyle>();
	}
};
static_assert(alignof(UVALUI_EditableTextStyle) == 0x000010, "Wrong alignment on UVALUI_EditableTextStyle");
static_assert(sizeof(UVALUI_EditableTextStyle) == 0x000660, "Wrong size on UVALUI_EditableTextStyle");
static_assert(offsetof(UVALUI_EditableTextStyle, WidgetStyle) == 0x000030, "Member 'UVALUI_EditableTextStyle::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_EditableTextStyle, HintTextStyle) == 0x000320, "Member 'UVALUI_EditableTextStyle::HintTextStyle' has a wrong offset!");

// Class ValeriaUI.VALUI_EditableText_Styled
// 0x0020 (0x0530 - 0x0510)
class UVALUI_EditableText_Styled final : public UEditableText
{
public:
	FMulticastInlineDelegateProperty_             OnCaretMovedDelegate;                              // 0x0510(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UVALUI_EditableTextStyle*               Style;                                             // 0x0520(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2E[0x8];                                     // 0x0528(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CaretGoTo(int32 LineIndex, int32 Offset);
	void SetTextStyle(class UVALUI_EditableTextStyle* NewStyle);
	void VALUIEvent_UMGEditableTextOnCursorMoved__DelegateSignature(int32 LineIndex, int32 Offset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_EditableText_Styled">();
	}
	static class UVALUI_EditableText_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_EditableText_Styled>();
	}
};
static_assert(alignof(UVALUI_EditableText_Styled) == 0x000010, "Wrong alignment on UVALUI_EditableText_Styled");
static_assert(sizeof(UVALUI_EditableText_Styled) == 0x000530, "Wrong size on UVALUI_EditableText_Styled");
static_assert(offsetof(UVALUI_EditableText_Styled, OnCaretMovedDelegate) == 0x000510, "Member 'UVALUI_EditableText_Styled::OnCaretMovedDelegate' has a wrong offset!");
static_assert(offsetof(UVALUI_EditableText_Styled, Style) == 0x000520, "Member 'UVALUI_EditableText_Styled::Style' has a wrong offset!");

// Class ValeriaUI.VALUI_LobbyScreenUserWidget
// 0x0030 (0x0550 - 0x0520)
class UVALUI_LobbyScreenUserWidget : public US6UI_InputActionHandlingUserWidget
{
public:
	FMulticastInlineDelegateProperty_             EventUpdateSelectedCharacter;                      // 0x0520(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventOnPlayButtonClicked;                          // 0x0530(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventOnCancelLoginQueueButtonClicked;              // 0x0540(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_LobbyScreenUserWidget">();
	}
	static class UVALUI_LobbyScreenUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_LobbyScreenUserWidget>();
	}
};
static_assert(alignof(UVALUI_LobbyScreenUserWidget) == 0x000008, "Wrong alignment on UVALUI_LobbyScreenUserWidget");
static_assert(sizeof(UVALUI_LobbyScreenUserWidget) == 0x000550, "Wrong size on UVALUI_LobbyScreenUserWidget");
static_assert(offsetof(UVALUI_LobbyScreenUserWidget, EventUpdateSelectedCharacter) == 0x000520, "Member 'UVALUI_LobbyScreenUserWidget::EventUpdateSelectedCharacter' has a wrong offset!");
static_assert(offsetof(UVALUI_LobbyScreenUserWidget, EventOnPlayButtonClicked) == 0x000530, "Member 'UVALUI_LobbyScreenUserWidget::EventOnPlayButtonClicked' has a wrong offset!");
static_assert(offsetof(UVALUI_LobbyScreenUserWidget, EventOnCancelLoginQueueButtonClicked) == 0x000540, "Member 'UVALUI_LobbyScreenUserWidget::EventOnCancelLoginQueueButtonClicked' has a wrong offset!");

// Class ValeriaUI.VALUI_EmoteButton
// 0x0018 (0x02D8 - 0x02C0)
class UVALUI_EmoteButton : public UUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnButtonClicked;                                   // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UEmoteDataAsset*                        EmoteDataAsset;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_EmoteButton">();
	}
	static class UVALUI_EmoteButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_EmoteButton>();
	}
};
static_assert(alignof(UVALUI_EmoteButton) == 0x000008, "Wrong alignment on UVALUI_EmoteButton");
static_assert(sizeof(UVALUI_EmoteButton) == 0x0002D8, "Wrong size on UVALUI_EmoteButton");
static_assert(offsetof(UVALUI_EmoteButton, OnButtonClicked) == 0x0002C0, "Member 'UVALUI_EmoteButton::OnButtonClicked' has a wrong offset!");
static_assert(offsetof(UVALUI_EmoteButton, EmoteDataAsset) == 0x0002D0, "Member 'UVALUI_EmoteButton::EmoteDataAsset' has a wrong offset!");

// Class ValeriaUI.VALUI_EmoteButtonContainer
// 0x0028 (0x02E8 - 0x02C0)
class UVALUI_EmoteButtonContainer : public UUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnButtonClicked;                                   // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UVALUI_EmoteButton>         EmoteButtonWidgetClass;                            // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UEmoteDataAsset>> Emotes;                                            // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void HandleAddButtonToContainer(class UVALUI_EmoteButton* Button);
	void HandleClearContainer();
	void OnEmoteButtonClicked(class UVALUI_EmoteButton* InButtonClicked, class UEmoteDataAsset* InEmoteDataAsset);
	void OnEmoteContainerButtonClicked__DelegateSignature(class UVALUI_EmoteButtonContainer* Container, class UVALUI_EmoteButton* ButtonClicked, class UEmoteDataAsset* EmoteDataAsset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_EmoteButtonContainer">();
	}
	static class UVALUI_EmoteButtonContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_EmoteButtonContainer>();
	}
};
static_assert(alignof(UVALUI_EmoteButtonContainer) == 0x000008, "Wrong alignment on UVALUI_EmoteButtonContainer");
static_assert(sizeof(UVALUI_EmoteButtonContainer) == 0x0002E8, "Wrong size on UVALUI_EmoteButtonContainer");
static_assert(offsetof(UVALUI_EmoteButtonContainer, OnButtonClicked) == 0x0002C0, "Member 'UVALUI_EmoteButtonContainer::OnButtonClicked' has a wrong offset!");
static_assert(offsetof(UVALUI_EmoteButtonContainer, EmoteButtonWidgetClass) == 0x0002D0, "Member 'UVALUI_EmoteButtonContainer::EmoteButtonWidgetClass' has a wrong offset!");
static_assert(offsetof(UVALUI_EmoteButtonContainer, Emotes) == 0x0002D8, "Member 'UVALUI_EmoteButtonContainer::Emotes' has a wrong offset!");

// Class ValeriaUI.VALUI_ErrorDisplayHandlerInterface
// 0x0000 (0x0028 - 0x0028)
class IVALUI_ErrorDisplayHandlerInterface final : public IInterface
{
public:
	void HandleErrorDisplay(struct FVALUI_ErrorDisplayPayload& ErrorDisplayPayload);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ErrorDisplayHandlerInterface">();
	}
	static class IVALUI_ErrorDisplayHandlerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVALUI_ErrorDisplayHandlerInterface>();
	}
};
static_assert(alignof(IVALUI_ErrorDisplayHandlerInterface) == 0x000008, "Wrong alignment on IVALUI_ErrorDisplayHandlerInterface");
static_assert(sizeof(IVALUI_ErrorDisplayHandlerInterface) == 0x000028, "Wrong size on IVALUI_ErrorDisplayHandlerInterface");

// Class ValeriaUI.VALUI_ErrorDisplayHandling
// 0x0000 (0x0028 - 0x0028)
class UVALUI_ErrorDisplayHandling final : public UBlueprintFunctionLibrary
{
public:
	static bool TryRaiseErrorForDisplay(class UWidget* InstigatingWidget, struct FVALUI_ErrorDisplayPayload& ErrorDisplayPayload);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ErrorDisplayHandling">();
	}
	static class UVALUI_ErrorDisplayHandling* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ErrorDisplayHandling>();
	}
};
static_assert(alignof(UVALUI_ErrorDisplayHandling) == 0x000008, "Wrong alignment on UVALUI_ErrorDisplayHandling");
static_assert(sizeof(UVALUI_ErrorDisplayHandling) == 0x000028, "Wrong size on UVALUI_ErrorDisplayHandling");

// Class ValeriaUI.VALUI_TextBlockStyle
// 0x0160 (0x0190 - 0x0030)
class UVALUI_TextBlockStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FSlateColor                            ColorAndOpacity;                                   // 0x0030(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D30[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0048(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            StrikeBrush;                                       // 0x00A0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ApplyToTextBlock(class UTextBlock* TextWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_TextBlockStyle">();
	}
	static class UVALUI_TextBlockStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_TextBlockStyle>();
	}
};
static_assert(alignof(UVALUI_TextBlockStyle) == 0x000010, "Wrong alignment on UVALUI_TextBlockStyle");
static_assert(sizeof(UVALUI_TextBlockStyle) == 0x000190, "Wrong size on UVALUI_TextBlockStyle");
static_assert(offsetof(UVALUI_TextBlockStyle, ColorAndOpacity) == 0x000030, "Member 'UVALUI_TextBlockStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UVALUI_TextBlockStyle, Font) == 0x000048, "Member 'UVALUI_TextBlockStyle::Font' has a wrong offset!");
static_assert(offsetof(UVALUI_TextBlockStyle, StrikeBrush) == 0x0000A0, "Member 'UVALUI_TextBlockStyle::StrikeBrush' has a wrong offset!");
static_assert(offsetof(UVALUI_TextBlockStyle, ShadowOffset) == 0x000170, "Member 'UVALUI_TextBlockStyle::ShadowOffset' has a wrong offset!");
static_assert(offsetof(UVALUI_TextBlockStyle, ShadowColorAndOpacity) == 0x000180, "Member 'UVALUI_TextBlockStyle::ShadowColorAndOpacity' has a wrong offset!");

// Class ValeriaUI.VALUI_ExpandableAreaStyle
// 0x02D0 (0x0300 - 0x0030)
class UVALUI_ExpandableAreaStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FExpandableAreaStyle                   WidgetStyle;                                       // 0x0030(0x01C0)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BorderBrush;                                       // 0x01F0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateColor                            BorderColor;                                       // 0x02C0(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                HeaderPadding;                                     // 0x02D4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                AreaPadding;                                       // 0x02E4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D31[0xC];                                     // 0x02F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Apply(class UExpandableArea* ExpandableArea) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ExpandableAreaStyle">();
	}
	static class UVALUI_ExpandableAreaStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ExpandableAreaStyle>();
	}
};
static_assert(alignof(UVALUI_ExpandableAreaStyle) == 0x000010, "Wrong alignment on UVALUI_ExpandableAreaStyle");
static_assert(sizeof(UVALUI_ExpandableAreaStyle) == 0x000300, "Wrong size on UVALUI_ExpandableAreaStyle");
static_assert(offsetof(UVALUI_ExpandableAreaStyle, WidgetStyle) == 0x000030, "Member 'UVALUI_ExpandableAreaStyle::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_ExpandableAreaStyle, BorderBrush) == 0x0001F0, "Member 'UVALUI_ExpandableAreaStyle::BorderBrush' has a wrong offset!");
static_assert(offsetof(UVALUI_ExpandableAreaStyle, BorderColor) == 0x0002C0, "Member 'UVALUI_ExpandableAreaStyle::BorderColor' has a wrong offset!");
static_assert(offsetof(UVALUI_ExpandableAreaStyle, HeaderPadding) == 0x0002D4, "Member 'UVALUI_ExpandableAreaStyle::HeaderPadding' has a wrong offset!");
static_assert(offsetof(UVALUI_ExpandableAreaStyle, AreaPadding) == 0x0002E4, "Member 'UVALUI_ExpandableAreaStyle::AreaPadding' has a wrong offset!");

// Class ValeriaUI.VALUI_ExpandableArea_Styled
// 0x0010 (0x04A0 - 0x0490)
class UVALUI_ExpandableArea_Styled final : public UExpandableArea
{
public:
	class UVALUI_ExpandableAreaStyle*             ExpandableAreaStyle;                               // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D32[0x8];                                     // 0x0498(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetExpandableAreaStyle(class UVALUI_ExpandableAreaStyle* NewStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ExpandableArea_Styled">();
	}
	static class UVALUI_ExpandableArea_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ExpandableArea_Styled>();
	}
};
static_assert(alignof(UVALUI_ExpandableArea_Styled) == 0x000010, "Wrong alignment on UVALUI_ExpandableArea_Styled");
static_assert(sizeof(UVALUI_ExpandableArea_Styled) == 0x0004A0, "Wrong size on UVALUI_ExpandableArea_Styled");
static_assert(offsetof(UVALUI_ExpandableArea_Styled, ExpandableAreaStyle) == 0x000490, "Member 'UVALUI_ExpandableArea_Styled::ExpandableAreaStyle' has a wrong offset!");

// Class ValeriaUI.VALUI_Slider_Styled
// 0x0010 (0x0740 - 0x0730)
class UVALUI_Slider_Styled final : public USlider
{
public:
	class UVALUI_SliderStyle*                     Style;                                             // 0x0730(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D33[0x8];                                     // 0x0738(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetSliderStyle(class UVALUI_SliderStyle* NewStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_Slider_Styled">();
	}
	static class UVALUI_Slider_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_Slider_Styled>();
	}
};
static_assert(alignof(UVALUI_Slider_Styled) == 0x000010, "Wrong alignment on UVALUI_Slider_Styled");
static_assert(sizeof(UVALUI_Slider_Styled) == 0x000740, "Wrong size on UVALUI_Slider_Styled");
static_assert(offsetof(UVALUI_Slider_Styled, Style) == 0x000730, "Member 'UVALUI_Slider_Styled::Style' has a wrong offset!");

// Class ValeriaUI.VALUI_ExtensionPointContainerBase
// 0x0008 (0x02C8 - 0x02C0)
class UVALUI_ExtensionPointContainerBase final : public UUserWidget
{
public:
	class FName                                   Identifier;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddExtensibleWidget(TSoftClassPtr<class UClass>& WidgetReference);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ExtensionPointContainerBase">();
	}
	static class UVALUI_ExtensionPointContainerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ExtensionPointContainerBase>();
	}
};
static_assert(alignof(UVALUI_ExtensionPointContainerBase) == 0x000008, "Wrong alignment on UVALUI_ExtensionPointContainerBase");
static_assert(sizeof(UVALUI_ExtensionPointContainerBase) == 0x0002C8, "Wrong size on UVALUI_ExtensionPointContainerBase");
static_assert(offsetof(UVALUI_ExtensionPointContainerBase, Identifier) == 0x0002C0, "Member 'UVALUI_ExtensionPointContainerBase::Identifier' has a wrong offset!");

// Class ValeriaUI.VALUI_GameInteractPopupSubsystem
// 0x0020 (0x0050 - 0x0030)
class alignas(0x10) UVALUI_GameInteractPopupSubsystem final : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_2D34[0x10];                                    // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayInteractivePopupDataAsset*     ActivePopup;                                       // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D35[0x8];                                     // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPopupToQueue(TSoftObjectPtr<class UGameplayInteractivePopupDataAsset> GpPopupAsset);
	void OnHandlePopupClosed(class UGameplayInteractivePopupDataAsset* GpPopupAsset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_GameInteractPopupSubsystem">();
	}
	static class UVALUI_GameInteractPopupSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_GameInteractPopupSubsystem>();
	}
};
static_assert(alignof(UVALUI_GameInteractPopupSubsystem) == 0x000010, "Wrong alignment on UVALUI_GameInteractPopupSubsystem");
static_assert(sizeof(UVALUI_GameInteractPopupSubsystem) == 0x000050, "Wrong size on UVALUI_GameInteractPopupSubsystem");
static_assert(offsetof(UVALUI_GameInteractPopupSubsystem, ActivePopup) == 0x000040, "Member 'UVALUI_GameInteractPopupSubsystem::ActivePopup' has a wrong offset!");

// Class ValeriaUI.VALUI_GpInteractivePopupBase
// 0x0028 (0x0538 - 0x0510)
class UVALUI_GpInteractivePopupBase : public UCommonActivatableWidgetInputExtended
{
public:
	FMulticastInlineDelegateProperty_             OnPopupClosed;                                     // 0x0510(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UGameplayInteractivePopupDataAsset*     InteractivePopupDataAsset;                         // 0x0520(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVAL_GameplayConditionDef*              GameplayCondition;                                 // 0x0528(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AValeriaCharacter*                      ValeriaCharacter;                                  // 0x0530(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CheckGameplayCondition();
	void ClosePopupWidget();
	void SetInteractivePopupDataAsset(class UGameplayInteractivePopupDataAsset* InteractivePopupAsset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_GpInteractivePopupBase">();
	}
	static class UVALUI_GpInteractivePopupBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_GpInteractivePopupBase>();
	}
};
static_assert(alignof(UVALUI_GpInteractivePopupBase) == 0x000008, "Wrong alignment on UVALUI_GpInteractivePopupBase");
static_assert(sizeof(UVALUI_GpInteractivePopupBase) == 0x000538, "Wrong size on UVALUI_GpInteractivePopupBase");
static_assert(offsetof(UVALUI_GpInteractivePopupBase, OnPopupClosed) == 0x000510, "Member 'UVALUI_GpInteractivePopupBase::OnPopupClosed' has a wrong offset!");
static_assert(offsetof(UVALUI_GpInteractivePopupBase, InteractivePopupDataAsset) == 0x000520, "Member 'UVALUI_GpInteractivePopupBase::InteractivePopupDataAsset' has a wrong offset!");
static_assert(offsetof(UVALUI_GpInteractivePopupBase, GameplayCondition) == 0x000528, "Member 'UVALUI_GpInteractivePopupBase::GameplayCondition' has a wrong offset!");
static_assert(offsetof(UVALUI_GpInteractivePopupBase, ValeriaCharacter) == 0x000530, "Member 'UVALUI_GpInteractivePopupBase::ValeriaCharacter' has a wrong offset!");

// Class ValeriaUI.VALUI_HotPotTurnTimer
// 0x0000 (0x02E8 - 0x02E8)
class UVALUI_HotPotTurnTimer final : public UCommonUserWidget
{
public:
	void BP_DisableTimer();
	void BP_StartTimer(float SecondsLeft, EHotPotTurnState TurnState);
	void BP_UpdatePlayerID(struct FGuid& PlayerId, struct FGuid& CharacterId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_HotPotTurnTimer">();
	}
	static class UVALUI_HotPotTurnTimer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_HotPotTurnTimer>();
	}
};
static_assert(alignof(UVALUI_HotPotTurnTimer) == 0x000008, "Wrong alignment on UVALUI_HotPotTurnTimer");
static_assert(sizeof(UVALUI_HotPotTurnTimer) == 0x0002E8, "Wrong size on UVALUI_HotPotTurnTimer");

// Class ValeriaUI.VALUI_ImageStyle
// 0x0280 (0x02B0 - 0x0030)
class UVALUI_ImageStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FSlateBrush                            Brush_Normal;                                      // 0x0030(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_Light;                                       // 0x0100(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_Dark;                                        // 0x01D0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           BrushColor;                                        // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Apply(class UImage* Image) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ImageStyle">();
	}
	static class UVALUI_ImageStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ImageStyle>();
	}
};
static_assert(alignof(UVALUI_ImageStyle) == 0x000010, "Wrong alignment on UVALUI_ImageStyle");
static_assert(sizeof(UVALUI_ImageStyle) == 0x0002B0, "Wrong size on UVALUI_ImageStyle");
static_assert(offsetof(UVALUI_ImageStyle, Brush_Normal) == 0x000030, "Member 'UVALUI_ImageStyle::Brush_Normal' has a wrong offset!");
static_assert(offsetof(UVALUI_ImageStyle, Brush_Light) == 0x000100, "Member 'UVALUI_ImageStyle::Brush_Light' has a wrong offset!");
static_assert(offsetof(UVALUI_ImageStyle, Brush_Dark) == 0x0001D0, "Member 'UVALUI_ImageStyle::Brush_Dark' has a wrong offset!");
static_assert(offsetof(UVALUI_ImageStyle, BrushColor) == 0x0002A0, "Member 'UVALUI_ImageStyle::BrushColor' has a wrong offset!");

// Class ValeriaUI.VALUI_Image_Styled
// 0x0070 (0x0350 - 0x02E0)
class UVALUI_Image_Styled final : public UImage
{
public:
	bool                                          bSupportCrossPlatform;                             // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowHUDOpacitySettings;                          // 0x02D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D37[0x6];                                     // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVALUI_ImageStyle*                      Style;                                             // 0x02E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ERedirectsPlatform, TSoftObjectPtr<class UVALUI_ImageStyle>> CrossPlatformStyles;                               // 0x02E8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D38[0x18];                                    // 0x0338(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAccessbilitySettingsChanged(struct FValeriaAccessibilitySettings& AccessbilitySettings);
	void SetImageStyle(class UVALUI_ImageStyle* NewStyle);
	void StyleLoadComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_Image_Styled">();
	}
	static class UVALUI_Image_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_Image_Styled>();
	}
};
static_assert(alignof(UVALUI_Image_Styled) == 0x000010, "Wrong alignment on UVALUI_Image_Styled");
static_assert(sizeof(UVALUI_Image_Styled) == 0x000350, "Wrong size on UVALUI_Image_Styled");
static_assert(offsetof(UVALUI_Image_Styled, bSupportCrossPlatform) == 0x0002D8, "Member 'UVALUI_Image_Styled::bSupportCrossPlatform' has a wrong offset!");
static_assert(offsetof(UVALUI_Image_Styled, bAllowHUDOpacitySettings) == 0x0002D9, "Member 'UVALUI_Image_Styled::bAllowHUDOpacitySettings' has a wrong offset!");
static_assert(offsetof(UVALUI_Image_Styled, Style) == 0x0002E0, "Member 'UVALUI_Image_Styled::Style' has a wrong offset!");
static_assert(offsetof(UVALUI_Image_Styled, CrossPlatformStyles) == 0x0002E8, "Member 'UVALUI_Image_Styled::CrossPlatformStyles' has a wrong offset!");

// Class ValeriaUI.VALUI_InputValidationFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UVALUI_InputValidationFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ValidateUserName(const class FString& UserNameInput, TArray<class FText>* OutErrors);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_InputValidationFunctionLibrary">();
	}
	static class UVALUI_InputValidationFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_InputValidationFunctionLibrary>();
	}
};
static_assert(alignof(UVALUI_InputValidationFunctionLibrary) == 0x000008, "Wrong alignment on UVALUI_InputValidationFunctionLibrary");
static_assert(sizeof(UVALUI_InputValidationFunctionLibrary) == 0x000028, "Wrong size on UVALUI_InputValidationFunctionLibrary");

// Class ValeriaUI.VALUI_ItemAcquisitionNotificationInterface
// 0x0000 (0x0028 - 0x0028)
class IVALUI_ItemAcquisitionNotificationInterface final : public IInterface
{
public:
	void AppendAdditionalData(const struct FValeriaItem& Item);
	void SetInitialData(const struct FValeriaItem& Item);

	bool CanAppendAdditionalData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ItemAcquisitionNotificationInterface">();
	}
	static class IVALUI_ItemAcquisitionNotificationInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVALUI_ItemAcquisitionNotificationInterface>();
	}
};
static_assert(alignof(IVALUI_ItemAcquisitionNotificationInterface) == 0x000008, "Wrong alignment on IVALUI_ItemAcquisitionNotificationInterface");
static_assert(sizeof(IVALUI_ItemAcquisitionNotificationInterface) == 0x000028, "Wrong size on IVALUI_ItemAcquisitionNotificationInterface");

// Class ValeriaUI.VALUI_ItemAcquisitionNotifier
// 0x00D8 (0x0100 - 0x0028)
class UVALUI_ItemAcquisitionNotifier final : public UObject
{
public:
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0028(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D3A[0xB0];                                    // 0x0050(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleItemAcquired(const struct FValeriaItem& Item);
	void HandleNotificationDismissed(class UVALUI_NotificationQueue* NotificationQueue, struct FGuid& AffectedNotificationId, class UWidget* NotificationWidget);
	class UWidget* OnCreateItemAcquisitionNotification__DelegateSignature(class UVALUI_ItemAcquisitionNotifier* Notifier);
	void Setup(class UInventoryComponent* SourceInventoryComponent, class UVALUI_NotificationQueue* TargetNotificationQueue, TSoftClassPtr<class UClass>& InWidgetClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ItemAcquisitionNotifier">();
	}
	static class UVALUI_ItemAcquisitionNotifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ItemAcquisitionNotifier>();
	}
};
static_assert(alignof(UVALUI_ItemAcquisitionNotifier) == 0x000008, "Wrong alignment on UVALUI_ItemAcquisitionNotifier");
static_assert(sizeof(UVALUI_ItemAcquisitionNotifier) == 0x000100, "Wrong size on UVALUI_ItemAcquisitionNotifier");
static_assert(offsetof(UVALUI_ItemAcquisitionNotifier, WidgetClass) == 0x000028, "Member 'UVALUI_ItemAcquisitionNotifier::WidgetClass' has a wrong offset!");

// Class ValeriaUI.VALUI_ItemDragDrop
// 0x0008 (0x00B0 - 0x00A8)
class UVALUI_ItemDragDrop : public UVALUI_DragDropOperation
{
public:
	bool                                          WasShiftDown;                                      // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D3B[0x7];                                     // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FValeriaItem GetItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ItemDragDrop">();
	}
	static class UVALUI_ItemDragDrop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ItemDragDrop>();
	}
};
static_assert(alignof(UVALUI_ItemDragDrop) == 0x000008, "Wrong alignment on UVALUI_ItemDragDrop");
static_assert(sizeof(UVALUI_ItemDragDrop) == 0x0000B0, "Wrong size on UVALUI_ItemDragDrop");
static_assert(offsetof(UVALUI_ItemDragDrop, WasShiftDown) == 0x0000A8, "Member 'UVALUI_ItemDragDrop::WasShiftDown' has a wrong offset!");

// Class ValeriaUI.VALUI_ItemSlotStyle
// 0x04F0 (0x0520 - 0x0030)
class UVALUI_ItemSlotStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FSlateBrush                            Brush_Empty;                                       // 0x0030(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_Filled;                                      // 0x0100(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_Hover;                                       // 0x01D0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_Selected;                                    // 0x02A0(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_Highlighted;                                 // 0x0370(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_Disabled;                                    // 0x0440(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bRaiseOnHover;                                     // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayAnimOnHover;                                  // 0x0511(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D3C[0xE];                                     // 0x0512(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ItemSlotStyle">();
	}
	static class UVALUI_ItemSlotStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ItemSlotStyle>();
	}
};
static_assert(alignof(UVALUI_ItemSlotStyle) == 0x000010, "Wrong alignment on UVALUI_ItemSlotStyle");
static_assert(sizeof(UVALUI_ItemSlotStyle) == 0x000520, "Wrong size on UVALUI_ItemSlotStyle");
static_assert(offsetof(UVALUI_ItemSlotStyle, Brush_Empty) == 0x000030, "Member 'UVALUI_ItemSlotStyle::Brush_Empty' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemSlotStyle, Brush_Filled) == 0x000100, "Member 'UVALUI_ItemSlotStyle::Brush_Filled' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemSlotStyle, Brush_Hover) == 0x0001D0, "Member 'UVALUI_ItemSlotStyle::Brush_Hover' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemSlotStyle, Brush_Selected) == 0x0002A0, "Member 'UVALUI_ItemSlotStyle::Brush_Selected' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemSlotStyle, Brush_Highlighted) == 0x000370, "Member 'UVALUI_ItemSlotStyle::Brush_Highlighted' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemSlotStyle, Brush_Disabled) == 0x000440, "Member 'UVALUI_ItemSlotStyle::Brush_Disabled' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemSlotStyle, bRaiseOnHover) == 0x000510, "Member 'UVALUI_ItemSlotStyle::bRaiseOnHover' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemSlotStyle, bPlayAnimOnHover) == 0x000511, "Member 'UVALUI_ItemSlotStyle::bPlayAnimOnHover' has a wrong offset!");

// Class ValeriaUI.VALUI_ItemStyle
// 0x0020 (0x0050 - 0x0030)
class UVALUI_ItemStyle final : public UDataAsset
{
public:
	EItemEmptyDisplayType                         EmptyDisplayType;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemAmountDisplayType                        AmountDisplayType;                                 // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomAmountDisplayColor;                      // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D3D[0x1];                                     // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            AmountDisplayColor;                                // 0x0034(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bCanShowDurability;                                // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanShowCapacity;                                  // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanShowConsumableIcon;                            // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanShowQuestIcon;                                 // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanShowAmmo;                                      // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTooltipOnHover;                               // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D3E[0x2];                                     // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ItemStyle">();
	}
	static class UVALUI_ItemStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ItemStyle>();
	}
};
static_assert(alignof(UVALUI_ItemStyle) == 0x000008, "Wrong alignment on UVALUI_ItemStyle");
static_assert(sizeof(UVALUI_ItemStyle) == 0x000050, "Wrong size on UVALUI_ItemStyle");
static_assert(offsetof(UVALUI_ItemStyle, EmptyDisplayType) == 0x000030, "Member 'UVALUI_ItemStyle::EmptyDisplayType' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemStyle, AmountDisplayType) == 0x000031, "Member 'UVALUI_ItemStyle::AmountDisplayType' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemStyle, bUseCustomAmountDisplayColor) == 0x000032, "Member 'UVALUI_ItemStyle::bUseCustomAmountDisplayColor' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemStyle, AmountDisplayColor) == 0x000034, "Member 'UVALUI_ItemStyle::AmountDisplayColor' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemStyle, bCanShowDurability) == 0x000048, "Member 'UVALUI_ItemStyle::bCanShowDurability' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemStyle, bCanShowCapacity) == 0x000049, "Member 'UVALUI_ItemStyle::bCanShowCapacity' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemStyle, bCanShowConsumableIcon) == 0x00004A, "Member 'UVALUI_ItemStyle::bCanShowConsumableIcon' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemStyle, bCanShowQuestIcon) == 0x00004B, "Member 'UVALUI_ItemStyle::bCanShowQuestIcon' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemStyle, bCanShowAmmo) == 0x00004C, "Member 'UVALUI_ItemStyle::bCanShowAmmo' has a wrong offset!");
static_assert(offsetof(UVALUI_ItemStyle, bShowTooltipOnHover) == 0x00004D, "Member 'UVALUI_ItemStyle::bShowTooltipOnHover' has a wrong offset!");

// Class ValeriaUI.VALUI_ListViewStyle
// 0x07A0 (0x07D0 - 0x0030)
class UVALUI_ListViewStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FScrollBarStyle                        WidgetBarStyle;                                    // 0x0030(0x0770)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESlateVisibility                              ScrollBarVisibility;                               // 0x07A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D3F[0x7];                                     // 0x07A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScrollbarThickness;                                // 0x07A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarPadding;                                  // 0x07B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bScrollBarAlwaysVisible;                           // 0x07C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D40[0x3];                                     // 0x07C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfItemsToMakeScrollBarVisible;               // 0x07CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ListViewStyle">();
	}
	static class UVALUI_ListViewStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ListViewStyle>();
	}
};
static_assert(alignof(UVALUI_ListViewStyle) == 0x000010, "Wrong alignment on UVALUI_ListViewStyle");
static_assert(sizeof(UVALUI_ListViewStyle) == 0x0007D0, "Wrong size on UVALUI_ListViewStyle");
static_assert(offsetof(UVALUI_ListViewStyle, WidgetBarStyle) == 0x000030, "Member 'UVALUI_ListViewStyle::WidgetBarStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_ListViewStyle, ScrollBarVisibility) == 0x0007A0, "Member 'UVALUI_ListViewStyle::ScrollBarVisibility' has a wrong offset!");
static_assert(offsetof(UVALUI_ListViewStyle, ScrollbarThickness) == 0x0007A8, "Member 'UVALUI_ListViewStyle::ScrollbarThickness' has a wrong offset!");
static_assert(offsetof(UVALUI_ListViewStyle, ScrollbarPadding) == 0x0007B8, "Member 'UVALUI_ListViewStyle::ScrollbarPadding' has a wrong offset!");
static_assert(offsetof(UVALUI_ListViewStyle, bScrollBarAlwaysVisible) == 0x0007C8, "Member 'UVALUI_ListViewStyle::bScrollBarAlwaysVisible' has a wrong offset!");
static_assert(offsetof(UVALUI_ListViewStyle, NumberOfItemsToMakeScrollBarVisible) == 0x0007CC, "Member 'UVALUI_ListViewStyle::NumberOfItemsToMakeScrollBarVisible' has a wrong offset!");

// Class ValeriaUI.VALUI_LoadingScreenBlackWidget
// 0x0000 (0x02C0 - 0x02C0)
class UVALUI_LoadingScreenBlackWidget : public UUserWidget
{
public:
	void FadeFromBlackToNone(float FadeTimeInSeconds);
	void FadeFromNoneToBlack(float FadeTimeInSeconds);

	class UWidgetAnimation* GetFadeFromBlackAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_LoadingScreenBlackWidget">();
	}
	static class UVALUI_LoadingScreenBlackWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_LoadingScreenBlackWidget>();
	}
};
static_assert(alignof(UVALUI_LoadingScreenBlackWidget) == 0x000008, "Wrong alignment on UVALUI_LoadingScreenBlackWidget");
static_assert(sizeof(UVALUI_LoadingScreenBlackWidget) == 0x0002C0, "Wrong size on UVALUI_LoadingScreenBlackWidget");

// Class ValeriaUI.VALUI_MainHUDViewModel
// 0x0020 (0x0098 - 0x0078)
class UVALUI_MainHUDViewModel final : public US6UI_StateViewModel
{
public:
	struct FVALUI_MainHUDState                    HUDState;                                          // 0x0078(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVALUI_SocialTrackingData              SocialTrackingData;                                // 0x0084(0x0014)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void HideRightHudElements();
	void ShowRightHudElements();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_MainHUDViewModel">();
	}
	static class UVALUI_MainHUDViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_MainHUDViewModel>();
	}
};
static_assert(alignof(UVALUI_MainHUDViewModel) == 0x000008, "Wrong alignment on UVALUI_MainHUDViewModel");
static_assert(sizeof(UVALUI_MainHUDViewModel) == 0x000098, "Wrong size on UVALUI_MainHUDViewModel");
static_assert(offsetof(UVALUI_MainHUDViewModel, HUDState) == 0x000078, "Member 'UVALUI_MainHUDViewModel::HUDState' has a wrong offset!");
static_assert(offsetof(UVALUI_MainHUDViewModel, SocialTrackingData) == 0x000084, "Member 'UVALUI_MainHUDViewModel::SocialTrackingData' has a wrong offset!");

// Class ValeriaUI.VALUI_MainHUDWidget
// 0x0000 (0x0558 - 0x0558)
class UVALUI_MainHUDWidget : public US6UI_StateUserWidget
{
public:
	void HandleOnHUDStateChanged(struct FVALUI_MainHUDState& State);
	void HandleOnSocialTrackingDataChanged(struct FVALUI_SocialTrackingData& SocialData);
	void HandleOnViewModelHUDStateChanged(class UObject* Object, const struct FFieldNotificationId& Field);
	void HandleOnViewModelSocialTrackingDataChanged(class UObject* Object, const struct FFieldNotificationId& Field);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_MainHUDWidget">();
	}
	static class UVALUI_MainHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_MainHUDWidget>();
	}
};
static_assert(alignof(UVALUI_MainHUDWidget) == 0x000008, "Wrong alignment on UVALUI_MainHUDWidget");
static_assert(sizeof(UVALUI_MainHUDWidget) == 0x000558, "Wrong size on UVALUI_MainHUDWidget");

// Class ValeriaUI.VALUI_MultiLineEditableTextBoxStyle
// 0x11C0 (0x11F0 - 0x0030)
class UVALUI_MultiLineEditableTextBoxStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FEditableTextBoxStyle                  WidgetStyle;                                       // 0x0030(0x0E80)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x0EB0(0x0340)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ApplyToTextBox(class UMultiLineEditableTextBox* TextWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_MultiLineEditableTextBoxStyle">();
	}
	static class UVALUI_MultiLineEditableTextBoxStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_MultiLineEditableTextBoxStyle>();
	}
};
static_assert(alignof(UVALUI_MultiLineEditableTextBoxStyle) == 0x000010, "Wrong alignment on UVALUI_MultiLineEditableTextBoxStyle");
static_assert(sizeof(UVALUI_MultiLineEditableTextBoxStyle) == 0x0011F0, "Wrong size on UVALUI_MultiLineEditableTextBoxStyle");
static_assert(offsetof(UVALUI_MultiLineEditableTextBoxStyle, WidgetStyle) == 0x000030, "Member 'UVALUI_MultiLineEditableTextBoxStyle::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_MultiLineEditableTextBoxStyle, TextStyle) == 0x000EB0, "Member 'UVALUI_MultiLineEditableTextBoxStyle::TextStyle' has a wrong offset!");

// Class ValeriaUI.VALUI_MultiLineEditableTextBox_Styled
// 0x0010 (0x10B0 - 0x10A0)
class UVALUI_MultiLineEditableTextBox_Styled final : public UMultiLineEditableTextBox
{
public:
	class UVALUI_MultiLineEditableTextBoxStyle*   Style;                                             // 0x10A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D41[0x8];                                     // 0x10A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTextBoxStyle(class UVALUI_MultiLineEditableTextBoxStyle* NewStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_MultiLineEditableTextBox_Styled">();
	}
	static class UVALUI_MultiLineEditableTextBox_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_MultiLineEditableTextBox_Styled>();
	}
};
static_assert(alignof(UVALUI_MultiLineEditableTextBox_Styled) == 0x000010, "Wrong alignment on UVALUI_MultiLineEditableTextBox_Styled");
static_assert(sizeof(UVALUI_MultiLineEditableTextBox_Styled) == 0x0010B0, "Wrong size on UVALUI_MultiLineEditableTextBox_Styled");
static_assert(offsetof(UVALUI_MultiLineEditableTextBox_Styled, Style) == 0x0010A0, "Member 'UVALUI_MultiLineEditableTextBox_Styled::Style' has a wrong offset!");

// Class ValeriaUI.VALUI_MultiLineEditableTextStyle
// 0x0340 (0x0370 - 0x0030)
class UVALUI_MultiLineEditableTextStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FTextBlockStyle                        WidgetStyle;                                       // 0x0030(0x0340)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ApplyToTextBlock(class UMultiLineEditableText* TextWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_MultiLineEditableTextStyle">();
	}
	static class UVALUI_MultiLineEditableTextStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_MultiLineEditableTextStyle>();
	}
};
static_assert(alignof(UVALUI_MultiLineEditableTextStyle) == 0x000010, "Wrong alignment on UVALUI_MultiLineEditableTextStyle");
static_assert(sizeof(UVALUI_MultiLineEditableTextStyle) == 0x000370, "Wrong size on UVALUI_MultiLineEditableTextStyle");
static_assert(offsetof(UVALUI_MultiLineEditableTextStyle, WidgetStyle) == 0x000030, "Member 'UVALUI_MultiLineEditableTextStyle::WidgetStyle' has a wrong offset!");

// Class ValeriaUI.VALUI_MultiLineEditableText_Styled
// 0x0000 (0x0570 - 0x0570)
class UVALUI_MultiLineEditableText_Styled final : public UMultiLineEditableText
{
public:
	class UVALUI_MultiLineEditableTextStyle*      Style;                                             // 0x0568(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetTextStyle(class UVALUI_MultiLineEditableTextStyle* NewStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_MultiLineEditableText_Styled">();
	}
	static class UVALUI_MultiLineEditableText_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_MultiLineEditableText_Styled>();
	}
};
static_assert(alignof(UVALUI_MultiLineEditableText_Styled) == 0x000010, "Wrong alignment on UVALUI_MultiLineEditableText_Styled");
static_assert(sizeof(UVALUI_MultiLineEditableText_Styled) == 0x000570, "Wrong size on UVALUI_MultiLineEditableText_Styled");
static_assert(offsetof(UVALUI_MultiLineEditableText_Styled, Style) == 0x000568, "Member 'UVALUI_MultiLineEditableText_Styled::Style' has a wrong offset!");

// Class ValeriaUI.VALUI_NewsInboxMessageDataAsset
// 0x0048 (0x0078 - 0x0030)
class UVALUI_NewsInboxMessageDataAsset final : public UDataAsset
{
public:
	struct FGuid                                  Guid;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_NewsInboxMessageType                     MessageType;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D42[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Subject;                                           // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Body;                                              // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_NewsInboxMessageDataAsset">();
	}
	static class UVALUI_NewsInboxMessageDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_NewsInboxMessageDataAsset>();
	}
};
static_assert(alignof(UVALUI_NewsInboxMessageDataAsset) == 0x000008, "Wrong alignment on UVALUI_NewsInboxMessageDataAsset");
static_assert(sizeof(UVALUI_NewsInboxMessageDataAsset) == 0x000078, "Wrong size on UVALUI_NewsInboxMessageDataAsset");
static_assert(offsetof(UVALUI_NewsInboxMessageDataAsset, Guid) == 0x000030, "Member 'UVALUI_NewsInboxMessageDataAsset::Guid' has a wrong offset!");
static_assert(offsetof(UVALUI_NewsInboxMessageDataAsset, MessageType) == 0x000040, "Member 'UVALUI_NewsInboxMessageDataAsset::MessageType' has a wrong offset!");
static_assert(offsetof(UVALUI_NewsInboxMessageDataAsset, Subject) == 0x000048, "Member 'UVALUI_NewsInboxMessageDataAsset::Subject' has a wrong offset!");
static_assert(offsetof(UVALUI_NewsInboxMessageDataAsset, Body) == 0x000060, "Member 'UVALUI_NewsInboxMessageDataAsset::Body' has a wrong offset!");

// Class ValeriaUI.VALUI_NewsInbox_Widget
// 0x0030 (0x0588 - 0x0558)
class UVALUI_NewsInbox_Widget final : public UVALUI_ModalWidgetBase
{
public:
	bool                                          MessageDefsLoaded;                                 // 0x0558(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D43[0x7];                                     // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVAL_NewsInboxComponent*                CurrentNewsInbox;                                  // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UVALUI_NewsInboxMessageDataAsset*> NewsInboxMessageDefinitions;                       // 0x0568(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D44[0x10];                                    // 0x0578(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnLoadSuccess();
	void BP_OnRedemptionFailure();
	void BP_OnRedemptionSuccess();
	void BP_OnRewardRefresh();
	void LoadNewsInboxMessageDefinitions();
	void OnLoadSuccess();

	class UVALUI_NewsInboxMessageDataAsset* GetNewsInboxMessageDefinitionByType(EVAL_NewsInboxMessageType EMessageType) const;
	class UVALUI_NewsInboxMessageDataAsset* GetNewsInboxMessageDefinitionFromRewardIndex(int32 Param_Index, bool Claimed) const;
	const class AValeriaPlayerController* GetValeriaPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_NewsInbox_Widget">();
	}
	static class UVALUI_NewsInbox_Widget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_NewsInbox_Widget>();
	}
};
static_assert(alignof(UVALUI_NewsInbox_Widget) == 0x000008, "Wrong alignment on UVALUI_NewsInbox_Widget");
static_assert(sizeof(UVALUI_NewsInbox_Widget) == 0x000588, "Wrong size on UVALUI_NewsInbox_Widget");
static_assert(offsetof(UVALUI_NewsInbox_Widget, MessageDefsLoaded) == 0x000558, "Member 'UVALUI_NewsInbox_Widget::MessageDefsLoaded' has a wrong offset!");
static_assert(offsetof(UVALUI_NewsInbox_Widget, CurrentNewsInbox) == 0x000560, "Member 'UVALUI_NewsInbox_Widget::CurrentNewsInbox' has a wrong offset!");
static_assert(offsetof(UVALUI_NewsInbox_Widget, NewsInboxMessageDefinitions) == 0x000568, "Member 'UVALUI_NewsInbox_Widget::NewsInboxMessageDefinitions' has a wrong offset!");

// Class ValeriaUI.VALUI_NotificationFactory
// 0x0000 (0x0028 - 0x0028)
class UVALUI_NotificationFactory : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_NotificationFactory">();
	}
	static class UVALUI_NotificationFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_NotificationFactory>();
	}
};
static_assert(alignof(UVALUI_NotificationFactory) == 0x000008, "Wrong alignment on UVALUI_NotificationFactory");
static_assert(sizeof(UVALUI_NotificationFactory) == 0x000028, "Wrong size on UVALUI_NotificationFactory");

// Class ValeriaUI.VALUI_NotificationWidgetInterface
// 0x0000 (0x0028 - 0x0028)
class IVALUI_NotificationWidgetInterface final : public IInterface
{
public:
	void HandleNotificationDismissed(class UVALUI_NotificationQueue* NotificationQueue, struct FGuid& NotificationId);
	void HandleNotificationShown(class UVALUI_NotificationQueue* NotificationQueue, struct FGuid& NotificationId);
	bool MatchesNotification(class FText& NotificationText, TSoftObjectPtr<class UTexture2D>& NotificationIcon);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_NotificationWidgetInterface">();
	}
	static class IVALUI_NotificationWidgetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVALUI_NotificationWidgetInterface>();
	}
};
static_assert(alignof(IVALUI_NotificationWidgetInterface) == 0x000008, "Wrong alignment on IVALUI_NotificationWidgetInterface");
static_assert(sizeof(IVALUI_NotificationWidgetInterface) == 0x000028, "Wrong size on IVALUI_NotificationWidgetInterface");

// Class ValeriaUI.VALUI_NotificationQueue
// 0x0048 (0x0070 - 0x0028)
class UVALUI_NotificationQueue final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnNotificationPushed;                              // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNotificationDismissed;                           // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FVALUI_NotificationQueueEntry>  Entries;                                           // 0x0048(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FVALUI_NotificationQueueEntry>  PendingEntries;                                    // 0x0058(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D48[0x8];                                     // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnNotificationDismissed__DelegateSignature(class UVALUI_NotificationQueue* NotificationQueue, struct FGuid& AffectedNotificationId, class UWidget* NotificationWidget);
	void OnNotificationPushed__DelegateSignature(class UVALUI_NotificationQueue* NotificationQueue, struct FGuid& AffectedNotificationId);
	void OnNotificationShown(struct FGuid& NotificationId);
	struct FGuid PushNotification(class UWidget* NotificationWidget);
	bool TryDismissNotification(struct FGuid& NotificationId);
	bool TryDismissPendingNotification(struct FGuid& NotificationId);

	TArray<struct FGuid> GetAlllNotificationIds() const;
	struct FGuid GetIdForNotification(class UWidget* NotificationWidget) const;
	class UWidget* GetLastNotificationOnStack() const;
	class UWidget* GetNotificationById(struct FGuid& NotificationId) const;
	TArray<struct FVALUI_NotificationQueueEntry> GetPendingEntries() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_NotificationQueue">();
	}
	static class UVALUI_NotificationQueue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_NotificationQueue>();
	}
};
static_assert(alignof(UVALUI_NotificationQueue) == 0x000008, "Wrong alignment on UVALUI_NotificationQueue");
static_assert(sizeof(UVALUI_NotificationQueue) == 0x000070, "Wrong size on UVALUI_NotificationQueue");
static_assert(offsetof(UVALUI_NotificationQueue, OnNotificationPushed) == 0x000028, "Member 'UVALUI_NotificationQueue::OnNotificationPushed' has a wrong offset!");
static_assert(offsetof(UVALUI_NotificationQueue, OnNotificationDismissed) == 0x000038, "Member 'UVALUI_NotificationQueue::OnNotificationDismissed' has a wrong offset!");
static_assert(offsetof(UVALUI_NotificationQueue, Entries) == 0x000048, "Member 'UVALUI_NotificationQueue::Entries' has a wrong offset!");
static_assert(offsetof(UVALUI_NotificationQueue, PendingEntries) == 0x000058, "Member 'UVALUI_NotificationQueue::PendingEntries' has a wrong offset!");

// Class ValeriaUI.VALUI_PaliaPassHUDViewModel
// 0x0008 (0x0080 - 0x0078)
class UVALUI_PaliaPassHUDViewModel final : public US6UI_StateViewModel
{
public:
	struct FVALUI_PaliaPassHUDState               HUDState;                                          // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4B[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PaliaPassHUDViewModel">();
	}
	static class UVALUI_PaliaPassHUDViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PaliaPassHUDViewModel>();
	}
};
static_assert(alignof(UVALUI_PaliaPassHUDViewModel) == 0x000008, "Wrong alignment on UVALUI_PaliaPassHUDViewModel");
static_assert(sizeof(UVALUI_PaliaPassHUDViewModel) == 0x000080, "Wrong size on UVALUI_PaliaPassHUDViewModel");
static_assert(offsetof(UVALUI_PaliaPassHUDViewModel, HUDState) == 0x000078, "Member 'UVALUI_PaliaPassHUDViewModel::HUDState' has a wrong offset!");

// Class ValeriaUI.VALUI_PaliaPassHUDWidget
// 0x0000 (0x0558 - 0x0558)
class UVALUI_PaliaPassHUDWidget final : public US6UI_StateUserWidget
{
public:
	void DisplayActiveTrack(TArray<class UVAL_PaliaPassRewardObject_Base*>& Rewards);
	void HandleOnHUDStateChanged(struct FVALUI_PaliaPassHUDState& State);
	void HandleOnViewModelHUDStateChanged(class UObject* Object, const struct FFieldNotificationId& Field);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PaliaPassHUDWidget">();
	}
	static class UVALUI_PaliaPassHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PaliaPassHUDWidget>();
	}
};
static_assert(alignof(UVALUI_PaliaPassHUDWidget) == 0x000008, "Wrong alignment on UVALUI_PaliaPassHUDWidget");
static_assert(sizeof(UVALUI_PaliaPassHUDWidget) == 0x000558, "Wrong size on UVALUI_PaliaPassHUDWidget");

// Class ValeriaUI.VALUI_PlayerSupport
// 0x0008 (0x0560 - 0x0558)
class UVALUI_PlayerSupport : public UVALUI_ModalWidgetBase
{
public:
	class UVAL_PlayerSupport*                     PlayerSupport;                                     // 0x0558(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DrawToCanvas(class UCanvas* Canvas, const struct FVector2D& ImageDimensions, const TArray<uint8>& QrData, int32 Size);
	void FetchQrCode(class AValeriaPlayerController* PC);
	void OnQrFetchFailed(const class FString& FailReason);
	void OnQrReceived(const class FString& Link, TArray<uint8>& QrData, int32 Size);
	void OnTextureComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PlayerSupport">();
	}
	static class UVALUI_PlayerSupport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PlayerSupport>();
	}
};
static_assert(alignof(UVALUI_PlayerSupport) == 0x000008, "Wrong alignment on UVALUI_PlayerSupport");
static_assert(sizeof(UVALUI_PlayerSupport) == 0x000560, "Wrong size on UVALUI_PlayerSupport");
static_assert(offsetof(UVALUI_PlayerSupport, PlayerSupport) == 0x000558, "Member 'UVALUI_PlayerSupport::PlayerSupport' has a wrong offset!");

// Class ValeriaUI.VALUI_UIManagerWidgetBase
// 0x00C8 (0x06A0 - 0x05D8)
class UVALUI_UIManagerWidgetBase : public US6UI_UIManagerWidgetBase
{
public:
	uint8                                         Pad_2D4E[0x8];                                     // 0x05D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnItemDragDrop;                                    // 0x05E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             InventoryVisibilityToggled;                        // 0x05F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D4F[0xA0];                                    // 0x0600(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetStoredCrafterUIState(class FName& CrafterName, struct FCrafterUIState* OutCrafterUIState);
	void Implementation_CloseMenuHub();
	void Implementation_CloseSubgameScreen();
	bool Implementation_HasAnyHousingPlotsTeleportOptions(class AVAL_TeleporterBase* Teleporter);
	void Implementation_NavigateToOnlinePhotoAlbum(struct FGuid& IdOfPhotoToNavigateTo, bool bShouldSelectPhoto);
	void Implementation_NavigateToRecentPhotos(struct FGuid& IdOfPhotoToNavigateTo, bool bShouldSelectPhoto);
	void Implementation_OpenAmmoMenu(EAmmoType AmmoType);
	void Implementation_OpenBook(int32 BookId);
	void Implementation_OpenBundleDropOffMenu(class UVAL_BundleShrineConfigAsset* BundleShrineConfigAsset);
	void Implementation_OpenCommunityActivities();
	void Implementation_OpenCrafter(class UCrafterComponent* CrafterComponent);
	void Implementation_OpenCVarMenu();
	void Implementation_OpenDyeConfirmation(EWishType WishType);
	void Implementation_OpenFullscreenInventory();
	void Implementation_OpenGameplayInteractiveModal(class UGameplayInteractivePopupDataAsset* PopupAsset);
	void Implementation_OpenHomeTeleporter(class AVAL_TeleporterBase* Teleporter);
	void Implementation_OpenHouseUpgrade(class ULevelerComponent* LevelerComponent);
	void Implementation_OpenHousingEdit(class AHousingPlotActor* HousingPlot);
	void Implementation_OpenItemVariantCustomizer(class UItemVariantCustomizerComponent* Customizer);
	void Implementation_OpenMailbox();
	void Implementation_OpenMenuHub();
	void Implementation_OpenNewsInbox();
	void Implementation_OpenPaliaPass();
	void Implementation_OpenPetBonus(TSet<TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Pet>>& Items);
	void Implementation_OpenPlayerStorage();
	void Implementation_OpenPremiumStore(struct FVAL_OpenStorePayload& Payload);
	void Implementation_OpenRecipeInspiration();
	void Implementation_OpenRepairStation(class AActor* RepairStationActor, bool bAllowPurchases, bool bAllowRepairKitsFromStorage);
	void Implementation_OpenRequestItem(class FName Tag);
	void Implementation_OpenShippingBin(class UShippingBinComponent* ShippingBinComponent);
	void Implementation_OpenSignTeleporter(class AActor* TeleporterActor);
	void Implementation_OpenStables(class AActor* StablesActor);
	void Implementation_OpenStore(class UVillagerStoreConfig* StoreConfig);
	void Implementation_OpenSubgameScreen(class USubgameConfig* InSubgameConfig);
	void Implementation_OpenTourBoard();
	void Implementation_OpenVillagerStore(int32 VillagerConfigId);
	void Implementation_OpenWishView(TArray<struct FWishTreeEntry>& Wishes, class UVillagerWishDataAsset* VillagerWishOverride);
	void Implementation_ToggleCollectionsMenu(EVAL_CollectionsTabState& TabState);
	void Implementation_ToggleGameplayMenuMode(EVAL_GameplayMenuMode Mode);
	void NavigateToOnlinePhotoAlbum(struct FGuid& IdOfPhotoToNavigateTo, bool bShouldSelectPhoto);
	void NavigateToRecentPhotos(struct FGuid& IdOfPhotoToNavigateTo, bool bShouldSelectPhoto);
	void OnItemDragDropped(class UDragDropOperation* Operation);
	void OpenBook(int32 BookId);
	void OpenTutorialModal(class FName& TutorialModalName);
	void OpenVillagerStore(int32 VillagerConfigId);
	void RegisterCallbacksAndBroadcastNewDragDrop(class UVALUI_ItemDragDrop* ItemDragDrop);
	void SetStoredCrafterUIState(class FName& CrafterName, const struct FCrafterUIState& CrafterUIState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_UIManagerWidgetBase">();
	}
	static class UVALUI_UIManagerWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_UIManagerWidgetBase>();
	}
};
static_assert(alignof(UVALUI_UIManagerWidgetBase) == 0x000008, "Wrong alignment on UVALUI_UIManagerWidgetBase");
static_assert(sizeof(UVALUI_UIManagerWidgetBase) == 0x0006A0, "Wrong size on UVALUI_UIManagerWidgetBase");
static_assert(offsetof(UVALUI_UIManagerWidgetBase, OnItemDragDrop) == 0x0005E0, "Member 'UVALUI_UIManagerWidgetBase::OnItemDragDrop' has a wrong offset!");
static_assert(offsetof(UVALUI_UIManagerWidgetBase, InventoryVisibilityToggled) == 0x0005F0, "Member 'UVALUI_UIManagerWidgetBase::InventoryVisibilityToggled' has a wrong offset!");

// Class ValeriaUI.VALUI_PregameUIManager
// 0x00F8 (0x0798 - 0x06A0)
class UVALUI_PregameUIManager : public UVALUI_UIManagerWidgetBase
{
public:
	uint8                                         Pad_2D57[0x68];                                    // 0x06A0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPregameStateChange;                              // 0x0708(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLobbyStateChange;                                // 0x0718(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class AVAL_CharacterRenderStudio*             RenderStudio;                                      // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 AnnouncementURL;                                   // 0x0730(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Announcement;                                      // 0x0740(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              AnnouncementTimestamp;                             // 0x0750(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ServerStatusURL;                                   // 0x0758(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ServerStatus;                                      // 0x0768(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableAutoLogin;                                  // 0x0778(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D58[0x1F];                                    // 0x0779(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeinitAutoLogin();
	void FetchServerStatus();
	void GetCachedCharacterAtIndex_Checked(int32 Param_Index, struct FVALDTOS_MetaCharacterFormat* OutCharacter);
	class FString GetServerStatusUrl();
	void GoToCharacterCreationState(EVALUI_CharacterCreationState NewState);
	void GoToLobbyState(EVALUI_LobbyState NewState);
	void GoToLoginState(EVALUI_LoginState NewState);
	void GoToPregameState(EVALUI_PregameState NewState);
	void HandleOnCharacterCreationStateChanged(EVALUI_CharacterCreationState NewState);
	void HandleOnCharacterListObtained(TArray<struct FVALDTOS_MetaCharacterFormat>& InCachedCharacters);
	void HandleOnFetchedServerStatus();
	void HandleOnLobbyStateChanged(EVALUI_LobbyState NewState);
	void HandleOnLoginStateChanged(EVALUI_LoginState NewState);
	void HandleOnPregameStateChanged(EVALUI_PregameState NewState);
	void HandleOnRetrievingCharacterListFailed(int32 ErrorCode);
	void InitAutoLogin();
	void OnLobbyStateChange__DelegateSignature(EVALUI_LobbyState State);
	void OnPregameStateChange__DelegateSignature(EVALUI_PregameState State);
	void StartAutoLogin();
	void StopAutoLogin(bool bIsComplete);
	bool TryGetCachedCharacters(TArray<struct FVALDTOS_MetaCharacterFormat>* OutOurCharacters);
	void TryGetCachedCharacters_Checked(TArray<struct FVALDTOS_MetaCharacterFormat>* OutOurCharacters);
	void TryStartMatchmaking();

	EVALUI_PregameState GetCurrentPregameStateId() const;
	bool TryGetCurrentLobbyStateId(EVALUI_LobbyState* OutLobbyStateId) const;
	bool TryGetCurrentLoginStateId(EVALUI_LoginState* OutLoginStateId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PregameUIManager">();
	}
	static class UVALUI_PregameUIManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PregameUIManager>();
	}
};
static_assert(alignof(UVALUI_PregameUIManager) == 0x000008, "Wrong alignment on UVALUI_PregameUIManager");
static_assert(sizeof(UVALUI_PregameUIManager) == 0x000798, "Wrong size on UVALUI_PregameUIManager");
static_assert(offsetof(UVALUI_PregameUIManager, OnPregameStateChange) == 0x000708, "Member 'UVALUI_PregameUIManager::OnPregameStateChange' has a wrong offset!");
static_assert(offsetof(UVALUI_PregameUIManager, OnLobbyStateChange) == 0x000718, "Member 'UVALUI_PregameUIManager::OnLobbyStateChange' has a wrong offset!");
static_assert(offsetof(UVALUI_PregameUIManager, RenderStudio) == 0x000728, "Member 'UVALUI_PregameUIManager::RenderStudio' has a wrong offset!");
static_assert(offsetof(UVALUI_PregameUIManager, AnnouncementURL) == 0x000730, "Member 'UVALUI_PregameUIManager::AnnouncementURL' has a wrong offset!");
static_assert(offsetof(UVALUI_PregameUIManager, Announcement) == 0x000740, "Member 'UVALUI_PregameUIManager::Announcement' has a wrong offset!");
static_assert(offsetof(UVALUI_PregameUIManager, AnnouncementTimestamp) == 0x000750, "Member 'UVALUI_PregameUIManager::AnnouncementTimestamp' has a wrong offset!");
static_assert(offsetof(UVALUI_PregameUIManager, ServerStatusURL) == 0x000758, "Member 'UVALUI_PregameUIManager::ServerStatusURL' has a wrong offset!");
static_assert(offsetof(UVALUI_PregameUIManager, ServerStatus) == 0x000768, "Member 'UVALUI_PregameUIManager::ServerStatus' has a wrong offset!");
static_assert(offsetof(UVALUI_PregameUIManager, bEnableAutoLogin) == 0x000778, "Member 'UVALUI_PregameUIManager::bEnableAutoLogin' has a wrong offset!");

// Class ValeriaUI.VALUI_PremiumCurrencyPurchaseWidgetBase
// 0x0048 (0x0458 - 0x0410)
class UVALUI_PremiumCurrencyPurchaseWidgetBase final : public UCommonActivatableWidget
{
public:
	EVALUI_PremiumCurrencyPurchaseState           PurchaseState;                                     // 0x0410(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D5B[0x13];                                    // 0x0411(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidatePurchaseTimerSecs;                         // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ValidatePurchaseMaxAttempts;                       // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D5C[0x24];                                    // 0x042C(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	class UVAL_PremiumStoreSubsystem*             PremiumStoreSubsystem;                             // 0x0450(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CancelValidatePaymentPolling();
	void HandleBundleOffersAvailable(TArray<struct FVALUI_PremiumCurrencyBundle>& Bundles);
	void HandleBundleOffersFailed();
	void HandleCheckoutSessionCreated(const class FString& URL);
	void HandlePaymentCancelled();
	void HandlePaymentCompleted();
	void HandlePaymentFulfilled();
	void HandleSteamMicrotransactionCompleted(uint32 AppID, uint64 OrderId, bool bAuthorized);
	void HandleUrlChanged(class FText& Text);
	void HandleValidatePaymentFulfillmentTick(struct FGuid& PaymentID);
	void PurchasePremiumCurrency(struct FGuid& BundleId);
	void RequestBundleOffers();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PremiumCurrencyPurchaseWidgetBase">();
	}
	static class UVALUI_PremiumCurrencyPurchaseWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PremiumCurrencyPurchaseWidgetBase>();
	}
};
static_assert(alignof(UVALUI_PremiumCurrencyPurchaseWidgetBase) == 0x000008, "Wrong alignment on UVALUI_PremiumCurrencyPurchaseWidgetBase");
static_assert(sizeof(UVALUI_PremiumCurrencyPurchaseWidgetBase) == 0x000458, "Wrong size on UVALUI_PremiumCurrencyPurchaseWidgetBase");
static_assert(offsetof(UVALUI_PremiumCurrencyPurchaseWidgetBase, PurchaseState) == 0x000410, "Member 'UVALUI_PremiumCurrencyPurchaseWidgetBase::PurchaseState' has a wrong offset!");
static_assert(offsetof(UVALUI_PremiumCurrencyPurchaseWidgetBase, ValidatePurchaseTimerSecs) == 0x000424, "Member 'UVALUI_PremiumCurrencyPurchaseWidgetBase::ValidatePurchaseTimerSecs' has a wrong offset!");
static_assert(offsetof(UVALUI_PremiumCurrencyPurchaseWidgetBase, ValidatePurchaseMaxAttempts) == 0x000428, "Member 'UVALUI_PremiumCurrencyPurchaseWidgetBase::ValidatePurchaseMaxAttempts' has a wrong offset!");
static_assert(offsetof(UVALUI_PremiumCurrencyPurchaseWidgetBase, PremiumStoreSubsystem) == 0x000450, "Member 'UVALUI_PremiumCurrencyPurchaseWidgetBase::PremiumStoreSubsystem' has a wrong offset!");

// Class ValeriaUI.VALUI_PremiumItemPurchaseWidgetBase
// 0x00F0 (0x0500 - 0x0410)
class UVALUI_PremiumItemPurchaseWidgetBase final : public UCommonActivatableWidget
{
public:
	TMap<struct FVALUI_PremiumStorefrontVariant, bool> MultipleVariantsShouldForceDiscountMap;            // 0x0410(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TSet<struct FVALUI_PremiumStorefrontVariant>  ExcludedVariants;                                  // 0x0460(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<struct FVALUI_PremiumStorefrontVariant, struct FVALUI_PremiumStorefrontWidgetModel> MultipleVariantsData;                              // 0x04B0(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	void GenerateMultipleVariantsShouldForceDiscountMap();
	TArray<class UVAL_CharacterCustomizationItemBase*> GetCustomizationItemsForGuids(TArray<struct FGuid>& ItemIds);
	TMap<class FName, class UVAL_CharacterCustomizationItemBase*> GetLoadoutOverridesForCatalogItems(TArray<class UVAL_CharacterCustomizationItemBase*>& Items);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PremiumItemPurchaseWidgetBase">();
	}
	static class UVALUI_PremiumItemPurchaseWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PremiumItemPurchaseWidgetBase>();
	}
};
static_assert(alignof(UVALUI_PremiumItemPurchaseWidgetBase) == 0x000008, "Wrong alignment on UVALUI_PremiumItemPurchaseWidgetBase");
static_assert(sizeof(UVALUI_PremiumItemPurchaseWidgetBase) == 0x000500, "Wrong size on UVALUI_PremiumItemPurchaseWidgetBase");
static_assert(offsetof(UVALUI_PremiumItemPurchaseWidgetBase, MultipleVariantsShouldForceDiscountMap) == 0x000410, "Member 'UVALUI_PremiumItemPurchaseWidgetBase::MultipleVariantsShouldForceDiscountMap' has a wrong offset!");
static_assert(offsetof(UVALUI_PremiumItemPurchaseWidgetBase, ExcludedVariants) == 0x000460, "Member 'UVALUI_PremiumItemPurchaseWidgetBase::ExcludedVariants' has a wrong offset!");
static_assert(offsetof(UVALUI_PremiumItemPurchaseWidgetBase, MultipleVariantsData) == 0x0004B0, "Member 'UVALUI_PremiumItemPurchaseWidgetBase::MultipleVariantsData' has a wrong offset!");

// Class ValeriaUI.VALUI_PremiumStorefrontTileWidgetBase
// 0x0068 (0x0328 - 0x02C0)
class UVALUI_PremiumStorefrontTileWidgetBase final : public UUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnSelected;                                        // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FVALUI_PremiumStorefrontWidgetModel    Model;                                             // 0x02D0(0x0058)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void HandleModelUpdate(struct FVALUI_PremiumStorefrontWidgetModel& NewModel);
	void OnSelected__DelegateSignature(class UVALUI_PremiumStorefrontTileWidgetBase* Widget);
	void SetModel(struct FVALUI_PremiumStorefrontWidgetModel& NewModel);

	struct FVALUI_PremiumStorefrontWidgetModel GetModel() const;
	bool IsOwned() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PremiumStorefrontTileWidgetBase">();
	}
	static class UVALUI_PremiumStorefrontTileWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PremiumStorefrontTileWidgetBase>();
	}
};
static_assert(alignof(UVALUI_PremiumStorefrontTileWidgetBase) == 0x000008, "Wrong alignment on UVALUI_PremiumStorefrontTileWidgetBase");
static_assert(sizeof(UVALUI_PremiumStorefrontTileWidgetBase) == 0x000328, "Wrong size on UVALUI_PremiumStorefrontTileWidgetBase");
static_assert(offsetof(UVALUI_PremiumStorefrontTileWidgetBase, OnSelected) == 0x0002C0, "Member 'UVALUI_PremiumStorefrontTileWidgetBase::OnSelected' has a wrong offset!");
static_assert(offsetof(UVALUI_PremiumStorefrontTileWidgetBase, Model) == 0x0002D0, "Member 'UVALUI_PremiumStorefrontTileWidgetBase::Model' has a wrong offset!");

// Class ValeriaUI.VALUI_PremiumStorefrontWidgetBase
// 0x0018 (0x0428 - 0x0410)
class UVALUI_PremiumStorefrontWidgetBase final : public UCommonActivatableWidget
{
public:
	int32                                         TilePaddingAmount;                                 // 0x0410(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D5F[0x4];                                     // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridPanel*                             StoreGrid;                                         // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UVALUI_PremiumStorefrontTileWidgetBase> TileWidgetClass;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CreateStorefrontGrid(int32 WidgetsPerRow, TArray<struct FVALUI_PremiumStorefrontWidgetModel>& Models);
	bool FetchStorefront();
	void HandleStorefrontAvailable(struct FVALUI_PremiumStorefrontResponse& Response);
	void HandleStorefrontError();
	void HandleTileSelected(struct FVALUI_PremiumStorefrontWidgetModel& Model);
	void HandleTileWidgetSelected(class UVALUI_PremiumStorefrontTileWidgetBase* Tile);
	void SetTileNavigation(int32 WidgetsPerRow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PremiumStorefrontWidgetBase">();
	}
	static class UVALUI_PremiumStorefrontWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PremiumStorefrontWidgetBase>();
	}
};
static_assert(alignof(UVALUI_PremiumStorefrontWidgetBase) == 0x000008, "Wrong alignment on UVALUI_PremiumStorefrontWidgetBase");
static_assert(sizeof(UVALUI_PremiumStorefrontWidgetBase) == 0x000428, "Wrong size on UVALUI_PremiumStorefrontWidgetBase");
static_assert(offsetof(UVALUI_PremiumStorefrontWidgetBase, TilePaddingAmount) == 0x000410, "Member 'UVALUI_PremiumStorefrontWidgetBase::TilePaddingAmount' has a wrong offset!");
static_assert(offsetof(UVALUI_PremiumStorefrontWidgetBase, StoreGrid) == 0x000418, "Member 'UVALUI_PremiumStorefrontWidgetBase::StoreGrid' has a wrong offset!");
static_assert(offsetof(UVALUI_PremiumStorefrontWidgetBase, TileWidgetClass) == 0x000420, "Member 'UVALUI_PremiumStorefrontWidgetBase::TileWidgetClass' has a wrong offset!");

// Class ValeriaUI.VALUI_PremiumStoreScreenWidgetBase
// 0x0078 (0x05D0 - 0x0558)
class UVALUI_PremiumStoreScreenWidgetBase final : public US6UI_StateUserWidget
{
public:
	uint8                                         Pad_2D61[0x68];                                    // 0x0558(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStudioStateChanged;                              // 0x05C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void GoToPremiumStoreState(EVALUI_PremiumStoreState NewState);
	void HandleBackAction(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime);
	void HandleOnStateChanged(EVALUI_PremiumStoreState State);
	void OnStateChanged__DelegateSignature(class UVALUI_PremiumStoreScreenWidgetBase* StoreWidget, EVALUI_PremiumStoreState State);

	EVALUI_PremiumStoreState GetPremiumStoreState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PremiumStoreScreenWidgetBase">();
	}
	static class UVALUI_PremiumStoreScreenWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PremiumStoreScreenWidgetBase>();
	}
};
static_assert(alignof(UVALUI_PremiumStoreScreenWidgetBase) == 0x000008, "Wrong alignment on UVALUI_PremiumStoreScreenWidgetBase");
static_assert(sizeof(UVALUI_PremiumStoreScreenWidgetBase) == 0x0005D0, "Wrong size on UVALUI_PremiumStoreScreenWidgetBase");
static_assert(offsetof(UVALUI_PremiumStoreScreenWidgetBase, OnStudioStateChanged) == 0x0005C0, "Member 'UVALUI_PremiumStoreScreenWidgetBase::OnStudioStateChanged' has a wrong offset!");

// Class ValeriaUI.VAL_PremiumStoreSettings
// 0x0068 (0x00A0 - 0x0038)
class UVAL_PremiumStoreSettings final : public UDeveloperSettings
{
public:
	float                                         DefaultPerItemBundleDiscount;                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D63[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UVAL_CharacterCustomizationItemBase>> ItemSlotOrder;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class UVAL_CharacterCustomizationItemBase>, TSoftObjectPtr<class UTexture2D>> ItemClassToIcon;                                   // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_PremiumStoreSettings">();
	}
	static class UVAL_PremiumStoreSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVAL_PremiumStoreSettings>();
	}
};
static_assert(alignof(UVAL_PremiumStoreSettings) == 0x000008, "Wrong alignment on UVAL_PremiumStoreSettings");
static_assert(sizeof(UVAL_PremiumStoreSettings) == 0x0000A0, "Wrong size on UVAL_PremiumStoreSettings");
static_assert(offsetof(UVAL_PremiumStoreSettings, DefaultPerItemBundleDiscount) == 0x000038, "Member 'UVAL_PremiumStoreSettings::DefaultPerItemBundleDiscount' has a wrong offset!");
static_assert(offsetof(UVAL_PremiumStoreSettings, ItemSlotOrder) == 0x000040, "Member 'UVAL_PremiumStoreSettings::ItemSlotOrder' has a wrong offset!");
static_assert(offsetof(UVAL_PremiumStoreSettings, ItemClassToIcon) == 0x000050, "Member 'UVAL_PremiumStoreSettings::ItemClassToIcon' has a wrong offset!");

// Class ValeriaUI.VALUI_PremiumStoreFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UVALUI_PremiumStoreFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TMap<struct FVALUI_PremiumStorefrontVariant, struct FVALUI_PremiumStorefrontWidgetModel> GetMultiplsVariantsDataFromItemIds(struct FVALUI_PremiumStorefrontResponse& StorefrontResponse, TSet<struct FGuid>& ItemIds);
	static TArray<TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Pet>> GetNewPetsForBonusReceivedModal(struct FVAL_CharacterCustomization_PetPurchaseBonus& PetPurchaseBonus, TSet<struct FGuid>& NewEntitlements);
	static struct FVAL_CharacterCustomization_PetPurchaseBonus GetPetPurchaseBonusFromPurchaseRewards(struct FVALUI_PremiumStorefrontPurchaseRewards& PurchaseRewards);
	static bool ShouldShowBuyButtonOnTile(struct FVALUI_PremiumStorefrontVariant& Variant);
	static void SortItemsByItemSlot(TArray<class UVAL_CharacterCustomizationItemBase*>& OutItems);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PremiumStoreFunctionLibrary">();
	}
	static class UVALUI_PremiumStoreFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PremiumStoreFunctionLibrary>();
	}
};
static_assert(alignof(UVALUI_PremiumStoreFunctionLibrary) == 0x000008, "Wrong alignment on UVALUI_PremiumStoreFunctionLibrary");
static_assert(sizeof(UVALUI_PremiumStoreFunctionLibrary) == 0x000028, "Wrong size on UVALUI_PremiumStoreFunctionLibrary");

// Class ValeriaUI.VALUI_PremiumStoreWebBrowser
// 0x0050 (0x0228 - 0x01D8)
class UVALUI_PremiumStoreWebBrowser final : public UWebBrowser
{
public:
	uint8                                         Pad_2D65[0x50];                                    // 0x01D8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PremiumStoreWebBrowser">();
	}
	static class UVALUI_PremiumStoreWebBrowser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PremiumStoreWebBrowser>();
	}
};
static_assert(alignof(UVALUI_PremiumStoreWebBrowser) == 0x000008, "Wrong alignment on UVALUI_PremiumStoreWebBrowser");
static_assert(sizeof(UVALUI_PremiumStoreWebBrowser) == 0x000228, "Wrong size on UVALUI_PremiumStoreWebBrowser");

// Class ValeriaUI.VALUI_ProgressBarStyle
// 0x02A0 (0x02D0 - 0x0030)
class UVALUI_ProgressBarStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FProgressBarStyle                      WidgetStyle;                                       // 0x0030(0x0290)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              BorderPadding;                                     // 0x02C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Apply(class UProgressBar* ProgressBar) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ProgressBarStyle">();
	}
	static class UVALUI_ProgressBarStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ProgressBarStyle>();
	}
};
static_assert(alignof(UVALUI_ProgressBarStyle) == 0x000010, "Wrong alignment on UVALUI_ProgressBarStyle");
static_assert(sizeof(UVALUI_ProgressBarStyle) == 0x0002D0, "Wrong size on UVALUI_ProgressBarStyle");
static_assert(offsetof(UVALUI_ProgressBarStyle, WidgetStyle) == 0x000030, "Member 'UVALUI_ProgressBarStyle::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_ProgressBarStyle, BorderPadding) == 0x0002C0, "Member 'UVALUI_ProgressBarStyle::BorderPadding' has a wrong offset!");

// Class ValeriaUI.VALUI_ProgressBar_Styled
// 0x0000 (0x0470 - 0x0470)
class UVALUI_ProgressBar_Styled final : public UProgressBar
{
public:
	class UVALUI_ProgressBarStyle*                Style;                                             // 0x0468(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetProgressBarStyle(class UVALUI_ProgressBarStyle* NewStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ProgressBar_Styled">();
	}
	static class UVALUI_ProgressBar_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ProgressBar_Styled>();
	}
};
static_assert(alignof(UVALUI_ProgressBar_Styled) == 0x000010, "Wrong alignment on UVALUI_ProgressBar_Styled");
static_assert(sizeof(UVALUI_ProgressBar_Styled) == 0x000470, "Wrong size on UVALUI_ProgressBar_Styled");
static_assert(offsetof(UVALUI_ProgressBar_Styled, Style) == 0x000468, "Member 'UVALUI_ProgressBar_Styled::Style' has a wrong offset!");

// Class ValeriaUI.VALUI_RadioSlider
// 0x0210 (0x0390 - 0x0180)
class UVALUI_RadioSlider final : public UWidget
{
public:
	FMulticastInlineDelegateProperty_             OnSliderAnimationStarted;                          // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSliderAnimationCompleted;                        // 0x0190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSliderWidgetCreated;                             // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnElementWidgetCreated;                            // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPageChanged;                                     // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                SliderWidgetClass;                                 // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UUserWidget>                ElementWidgetClass;                                // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ElementCount;                                      // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SliderIndex;                                       // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVALUI_RadioSliderPaginationSettings   PaginationSettings;                                // 0x01E8(0x0098)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         SliderAnimationTime;                               // 0x0280(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D66[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     SliderAnimationCurve;                              // 0x0288(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                ElementPadding;                                    // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UUserWidget*                            SliderWidget;                                      // 0x0320(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<int32, class UUserWidget*>               ElementWidgetsTable;                               // 0x0328(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D67[0x18];                                    // 0x0378(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BuildElementsAndSlider();
	class UUserWidget* GetSliderWidget();
	void OnElementWidgetCreated__DelegateSignature(class UUserWidget* ElementWidget, int32 ElementIndex);
	void OnPageChanged__DelegateSignature(int32 PageIndex, int32 TotalNumPages);
	void OnSliderChanged__DelegateSignature(class UUserWidget* PreviousElementWidget, int32 PreviousElementIndex, class UUserWidget* NewElementWidget, int32 NewElementIndex);
	void OnSliderWidgetCreated__DelegateSignature(class UUserWidget* Param_SliderWidget);
	void SetIndex(int32 Param_Index, bool bSkipSliderAnimation);

	int32 GetCurrentIndex() const;
	int32 GetCurrentPageIndex() const;
	TArray<int32> GetElementIndexsInCurrentPage() const;
	const TMap<int32, class UUserWidget*> GetElementWidgetsTable() const;
	bool GetIndexFromWidget(class UUserWidget* Widget, int32* Param_Index) const;
	int32 GetTotalNumPages() const;
	class UUserWidget* GetWidgetAtIndex(int32 Param_Index) const;
	void TryDecrementPage() const;
	void TryIncrementPage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_RadioSlider">();
	}
	static class UVALUI_RadioSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_RadioSlider>();
	}
};
static_assert(alignof(UVALUI_RadioSlider) == 0x000008, "Wrong alignment on UVALUI_RadioSlider");
static_assert(sizeof(UVALUI_RadioSlider) == 0x000390, "Wrong size on UVALUI_RadioSlider");
static_assert(offsetof(UVALUI_RadioSlider, OnSliderAnimationStarted) == 0x000180, "Member 'UVALUI_RadioSlider::OnSliderAnimationStarted' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, OnSliderAnimationCompleted) == 0x000190, "Member 'UVALUI_RadioSlider::OnSliderAnimationCompleted' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, OnSliderWidgetCreated) == 0x0001A0, "Member 'UVALUI_RadioSlider::OnSliderWidgetCreated' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, OnElementWidgetCreated) == 0x0001B0, "Member 'UVALUI_RadioSlider::OnElementWidgetCreated' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, OnPageChanged) == 0x0001C0, "Member 'UVALUI_RadioSlider::OnPageChanged' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, SliderWidgetClass) == 0x0001D0, "Member 'UVALUI_RadioSlider::SliderWidgetClass' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, ElementWidgetClass) == 0x0001D8, "Member 'UVALUI_RadioSlider::ElementWidgetClass' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, ElementCount) == 0x0001E0, "Member 'UVALUI_RadioSlider::ElementCount' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, SliderIndex) == 0x0001E4, "Member 'UVALUI_RadioSlider::SliderIndex' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, PaginationSettings) == 0x0001E8, "Member 'UVALUI_RadioSlider::PaginationSettings' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, SliderAnimationTime) == 0x000280, "Member 'UVALUI_RadioSlider::SliderAnimationTime' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, SliderAnimationCurve) == 0x000288, "Member 'UVALUI_RadioSlider::SliderAnimationCurve' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, ElementPadding) == 0x000310, "Member 'UVALUI_RadioSlider::ElementPadding' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, SliderWidget) == 0x000320, "Member 'UVALUI_RadioSlider::SliderWidget' has a wrong offset!");
static_assert(offsetof(UVALUI_RadioSlider, ElementWidgetsTable) == 0x000328, "Member 'UVALUI_RadioSlider::ElementWidgetsTable' has a wrong offset!");

// Class ValeriaUI.VALUI_RichTextBlockDecorator_RequestLink
// 0x0028 (0x0050 - 0x0028)
class UVALUI_RichTextBlockDecorator_RequestLink : public URichTextBlockDecorator
{
public:
	TSoftClassPtr<class UClass>                   ButtonWidgetClass;                                 // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_RichTextBlockDecorator_RequestLink">();
	}
	static class UVALUI_RichTextBlockDecorator_RequestLink* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_RichTextBlockDecorator_RequestLink>();
	}
};
static_assert(alignof(UVALUI_RichTextBlockDecorator_RequestLink) == 0x000008, "Wrong alignment on UVALUI_RichTextBlockDecorator_RequestLink");
static_assert(sizeof(UVALUI_RichTextBlockDecorator_RequestLink) == 0x000050, "Wrong size on UVALUI_RichTextBlockDecorator_RequestLink");
static_assert(offsetof(UVALUI_RichTextBlockDecorator_RequestLink, ButtonWidgetClass) == 0x000028, "Member 'UVALUI_RichTextBlockDecorator_RequestLink::ButtonWidgetClass' has a wrong offset!");

// Class ValeriaUI.VALUI_RichTextBlockStyle
// 0x0360 (0x0390 - 0x0030)
class UVALUI_RichTextBlockStyle final : public UVALUI_WidgetStyleBase
{
public:
	class UDataTable*                             TextStyleSet;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class URichTextBlockDecorator>> DecoratorClasses;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bOverrideDefaultStyle;                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D6E[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBlockStyle                        DefaultTextStyleOverride;                          // 0x0050(0x0340)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ApplyToTextBlock(class URichTextBlock* TextWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_RichTextBlockStyle">();
	}
	static class UVALUI_RichTextBlockStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_RichTextBlockStyle>();
	}
};
static_assert(alignof(UVALUI_RichTextBlockStyle) == 0x000010, "Wrong alignment on UVALUI_RichTextBlockStyle");
static_assert(sizeof(UVALUI_RichTextBlockStyle) == 0x000390, "Wrong size on UVALUI_RichTextBlockStyle");
static_assert(offsetof(UVALUI_RichTextBlockStyle, TextStyleSet) == 0x000030, "Member 'UVALUI_RichTextBlockStyle::TextStyleSet' has a wrong offset!");
static_assert(offsetof(UVALUI_RichTextBlockStyle, DecoratorClasses) == 0x000038, "Member 'UVALUI_RichTextBlockStyle::DecoratorClasses' has a wrong offset!");
static_assert(offsetof(UVALUI_RichTextBlockStyle, bOverrideDefaultStyle) == 0x000048, "Member 'UVALUI_RichTextBlockStyle::bOverrideDefaultStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_RichTextBlockStyle, DefaultTextStyleOverride) == 0x000050, "Member 'UVALUI_RichTextBlockStyle::DefaultTextStyleOverride' has a wrong offset!");

// Class ValeriaUI.VALUI_RichTextBlock_Styled
// 0x0070 (0x0910 - 0x08A0)
class UVALUI_RichTextBlock_Styled final : public US6UI_RichTextBlock
{
public:
	class UVALUI_RichTextBlockStyle*              Style;                                             // 0x08A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportCrossPlatform;                             // 0x08A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D6F[0x7];                                     // 0x08A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ERedirectsPlatform, TSoftObjectPtr<class UVALUI_RichTextBlockStyle>> CrossPlatformStyles;                               // 0x08B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D70[0x10];                                    // 0x0900(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTextBlockStyle(class UVALUI_RichTextBlockStyle* NewStyle);
	void StyleLoadComplete();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_RichTextBlock_Styled">();
	}
	static class UVALUI_RichTextBlock_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_RichTextBlock_Styled>();
	}
};
static_assert(alignof(UVALUI_RichTextBlock_Styled) == 0x000010, "Wrong alignment on UVALUI_RichTextBlock_Styled");
static_assert(sizeof(UVALUI_RichTextBlock_Styled) == 0x000910, "Wrong size on UVALUI_RichTextBlock_Styled");
static_assert(offsetof(UVALUI_RichTextBlock_Styled, Style) == 0x0008A0, "Member 'UVALUI_RichTextBlock_Styled::Style' has a wrong offset!");
static_assert(offsetof(UVALUI_RichTextBlock_Styled, bSupportCrossPlatform) == 0x0008A8, "Member 'UVALUI_RichTextBlock_Styled::bSupportCrossPlatform' has a wrong offset!");
static_assert(offsetof(UVALUI_RichTextBlock_Styled, CrossPlatformStyles) == 0x0008B0, "Member 'UVALUI_RichTextBlock_Styled::CrossPlatformStyles' has a wrong offset!");

// Class ValeriaUI.VALUI_ScrollBoxStyle
// 0x0B00 (0x0B30 - 0x0030)
class UVALUI_ScrollBoxStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FScrollBoxStyle                        WidgetStyle;                                       // 0x0030(0x0370)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScrollBarStyle                        WidgetBarStyle;                                    // 0x03A0(0x0770)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              ScrollbarThickness;                                // 0x0B10(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ScrollbarPadding;                                  // 0x0B20(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	void ApplyToScrollBox(class UScrollBox* ScrollBox) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ScrollBoxStyle">();
	}
	static class UVALUI_ScrollBoxStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ScrollBoxStyle>();
	}
};
static_assert(alignof(UVALUI_ScrollBoxStyle) == 0x000010, "Wrong alignment on UVALUI_ScrollBoxStyle");
static_assert(sizeof(UVALUI_ScrollBoxStyle) == 0x000B30, "Wrong size on UVALUI_ScrollBoxStyle");
static_assert(offsetof(UVALUI_ScrollBoxStyle, WidgetStyle) == 0x000030, "Member 'UVALUI_ScrollBoxStyle::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_ScrollBoxStyle, WidgetBarStyle) == 0x0003A0, "Member 'UVALUI_ScrollBoxStyle::WidgetBarStyle' has a wrong offset!");
static_assert(offsetof(UVALUI_ScrollBoxStyle, ScrollbarThickness) == 0x000B10, "Member 'UVALUI_ScrollBoxStyle::ScrollbarThickness' has a wrong offset!");
static_assert(offsetof(UVALUI_ScrollBoxStyle, ScrollbarPadding) == 0x000B20, "Member 'UVALUI_ScrollBoxStyle::ScrollbarPadding' has a wrong offset!");

// Class ValeriaUI.VALUI_ScrollBox_Styled
// 0x0010 (0x0D00 - 0x0CF0)
class UVALUI_ScrollBox_Styled final : public UScrollBox
{
public:
	class UVALUI_ScrollBoxStyle*                  Style;                                             // 0x0CF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandleDirectionalNavigation;                      // 0x0CF8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D71[0x7];                                     // 0x0CF9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetScrollBoxStyle(class UVALUI_ScrollBoxStyle* NewStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_ScrollBox_Styled">();
	}
	static class UVALUI_ScrollBox_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_ScrollBox_Styled>();
	}
};
static_assert(alignof(UVALUI_ScrollBox_Styled) == 0x000010, "Wrong alignment on UVALUI_ScrollBox_Styled");
static_assert(sizeof(UVALUI_ScrollBox_Styled) == 0x000D00, "Wrong size on UVALUI_ScrollBox_Styled");
static_assert(offsetof(UVALUI_ScrollBox_Styled, Style) == 0x000CF0, "Member 'UVALUI_ScrollBox_Styled::Style' has a wrong offset!");
static_assert(offsetof(UVALUI_ScrollBox_Styled, bHandleDirectionalNavigation) == 0x000CF8, "Member 'UVALUI_ScrollBox_Styled::bHandleDirectionalNavigation' has a wrong offset!");

// Class ValeriaUI.VALUI_Settings
// 0x0038 (0x0070 - 0x0038)
class UVALUI_Settings final : public UDeveloperSettings
{
public:
	TSubclassOf<class UUserWidget>                ToolTipWidgetClass;                                // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             RadioSliderDefaultAnimCurve;                       // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayBetweenQueuedPopupsSeconds;                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D72[0x4];                                     // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_Settings">();
	}
	static class UVALUI_Settings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_Settings>();
	}
};
static_assert(alignof(UVALUI_Settings) == 0x000008, "Wrong alignment on UVALUI_Settings");
static_assert(sizeof(UVALUI_Settings) == 0x000070, "Wrong size on UVALUI_Settings");
static_assert(offsetof(UVALUI_Settings, ToolTipWidgetClass) == 0x000038, "Member 'UVALUI_Settings::ToolTipWidgetClass' has a wrong offset!");
static_assert(offsetof(UVALUI_Settings, RadioSliderDefaultAnimCurve) == 0x000040, "Member 'UVALUI_Settings::RadioSliderDefaultAnimCurve' has a wrong offset!");
static_assert(offsetof(UVALUI_Settings, DelayBetweenQueuedPopupsSeconds) == 0x000068, "Member 'UVALUI_Settings::DelayBetweenQueuedPopupsSeconds' has a wrong offset!");

// Class ValeriaUI.VALUI_SliderStyle
// 0x0500 (0x0530 - 0x0030)
class UVALUI_SliderStyle final : public UVALUI_WidgetStyleBase
{
public:
	struct FSliderStyle                           WidgetStyle;                                       // 0x0030(0x0500)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void Apply(class USlider* Slider) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_SliderStyle">();
	}
	static class UVALUI_SliderStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_SliderStyle>();
	}
};
static_assert(alignof(UVALUI_SliderStyle) == 0x000010, "Wrong alignment on UVALUI_SliderStyle");
static_assert(sizeof(UVALUI_SliderStyle) == 0x000530, "Wrong size on UVALUI_SliderStyle");
static_assert(offsetof(UVALUI_SliderStyle, WidgetStyle) == 0x000030, "Member 'UVALUI_SliderStyle::WidgetStyle' has a wrong offset!");

// Class ValeriaUI.VALUI_SocialPanelBase
// 0x0010 (0x0530 - 0x0520)
class UVALUI_SocialPanelBase : public US6UI_InputActionHandlingUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnToggleDebugSimulation;                           // 0x0520(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class FString GetDebugSimulationFlag();

	void ToggleDebugSimulation__DelegateSignature(bool bDisplay);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_SocialPanelBase">();
	}
	static class UVALUI_SocialPanelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_SocialPanelBase>();
	}
};
static_assert(alignof(UVALUI_SocialPanelBase) == 0x000008, "Wrong alignment on UVALUI_SocialPanelBase");
static_assert(sizeof(UVALUI_SocialPanelBase) == 0x000530, "Wrong size on UVALUI_SocialPanelBase");
static_assert(offsetof(UVALUI_SocialPanelBase, OnToggleDebugSimulation) == 0x000520, "Member 'UVALUI_SocialPanelBase::OnToggleDebugSimulation' has a wrong offset!");

// Class ValeriaUI.VALUI_StateUserWidget_PregameHUD
// 0x0000 (0x0558 - 0x0558)
class UVALUI_StateUserWidget_PregameHUD : public US6UI_StateUserWidget
{
public:
	void DisplayCharacterCreationMatchmaking();
	void DisplayMatchmakingQueueActive(bool bActive);
	void DisplayMatchmakingQueueNumber(int32 Number);
	class UVALUI_CharacterCreationScreenBase* GetCharacterCreationScreen();
	class UVALUI_LobbyScreenUserWidget* GetLobbyScreen();
	void HandleOnCharacterCreationStateChanged(EVALUI_CharacterCreationState NewState);
	void HandleOnFetchedServerStatus();
	void HandleOnLobbyStateChanged(EVALUI_LobbyState NewState);
	void HandleOnLoginStateChanged(EVALUI_LoginState NewState);
	void SetOwner(class UVALUI_PregameUIManager* Owner);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_StateUserWidget_PregameHUD">();
	}
	static class UVALUI_StateUserWidget_PregameHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_StateUserWidget_PregameHUD>();
	}
};
static_assert(alignof(UVALUI_StateUserWidget_PregameHUD) == 0x000008, "Wrong alignment on UVALUI_StateUserWidget_PregameHUD");
static_assert(sizeof(UVALUI_StateUserWidget_PregameHUD) == 0x000558, "Wrong size on UVALUI_StateUserWidget_PregameHUD");

// Class ValeriaUI.VALUI_TabButtonHostBase
// 0x0078 (0x0338 - 0x02C0)
class UVALUI_TabButtonHostBase : public UUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnDifferentActiveTabSet;                           // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FVALUI_TabButtonPreregistrationInfo> PreregisteredTabsInfoArray;                        // 0x02D0(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   ActiveTabName;                                     // 0x02E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FVALUI_InstantiatedTabButtonInfo> InstantiatedTabButtonsInfoMap;                     // 0x02E8(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void AddTabButton(class FName& TabName, struct FVALUI_InstantiatedTabButtonInfo& Info);
	void HandleDifferentActiveTabSet(class FName TabName);
	void HideTabButton(class FName& TabName, struct FVALUI_InstantiatedTabButtonInfo& Info);
	void OnDifferentActiveTabSet__DelegateSignature(class UVALUI_TabButtonHostBase* TabButtonHost);
	void RegisterNewTab(class FName& TabName, class FText& TabDisplayName, class UButton* Button, class UWidget* AssociatedContent, TSoftObjectPtr<class UTexture2D> IconTexture, struct FVector2D& IconSize);
	void RemoveTabButton(class FName& TabName, struct FVALUI_InstantiatedTabButtonInfo& Info);
	void SetTabButtonVisibility(class FName& TabName, ESlateVisibility NewVisibility);
	void ShowTabButton(class FName& TabName, struct FVALUI_InstantiatedTabButtonInfo& Info);
	bool TrySetActiveTabName(class FName TabName, bool bForceSet);
	void UnregisterTab(class FName& TabName);

	class FName GetActiveTabName() const;
	TArray<class FName> GetTabNames() const;
	bool TryGetTabInfo(class FName& TabName, struct FVALUI_InstantiatedTabButtonInfo* OutInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_TabButtonHostBase">();
	}
	static class UVALUI_TabButtonHostBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_TabButtonHostBase>();
	}
};
static_assert(alignof(UVALUI_TabButtonHostBase) == 0x000008, "Wrong alignment on UVALUI_TabButtonHostBase");
static_assert(sizeof(UVALUI_TabButtonHostBase) == 0x000338, "Wrong size on UVALUI_TabButtonHostBase");
static_assert(offsetof(UVALUI_TabButtonHostBase, OnDifferentActiveTabSet) == 0x0002C0, "Member 'UVALUI_TabButtonHostBase::OnDifferentActiveTabSet' has a wrong offset!");
static_assert(offsetof(UVALUI_TabButtonHostBase, PreregisteredTabsInfoArray) == 0x0002D0, "Member 'UVALUI_TabButtonHostBase::PreregisteredTabsInfoArray' has a wrong offset!");
static_assert(offsetof(UVALUI_TabButtonHostBase, ActiveTabName) == 0x0002E0, "Member 'UVALUI_TabButtonHostBase::ActiveTabName' has a wrong offset!");
static_assert(offsetof(UVALUI_TabButtonHostBase, InstantiatedTabButtonsInfoMap) == 0x0002E8, "Member 'UVALUI_TabButtonHostBase::InstantiatedTabButtonsInfoMap' has a wrong offset!");

// Class ValeriaUI.VALUI_TabButtonInterface
// 0x0000 (0x0028 - 0x0028)
class IVALUI_TabButtonInterface final : public IInterface
{
public:
	void SetIsActiveTabButton(bool bIsActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_TabButtonInterface">();
	}
	static class IVALUI_TabButtonInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVALUI_TabButtonInterface>();
	}
};
static_assert(alignof(IVALUI_TabButtonInterface) == 0x000008, "Wrong alignment on IVALUI_TabButtonInterface");
static_assert(sizeof(IVALUI_TabButtonInterface) == 0x000028, "Wrong size on IVALUI_TabButtonInterface");

// Class ValeriaUI.VALUI_TextBlock_Styled
// 0x0080 (0x03F0 - 0x0370)
class UVALUI_TextBlock_Styled final : public UTextBlock
{
public:
	bool                                          bSupportCrossPlatform;                             // 0x0368(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D76[0x7];                                     // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVALUI_TextBlockStyle*                  Style;                                             // 0x0370(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ERedirectsPlatform, TSoftObjectPtr<class UVALUI_TextBlockStyle>> CrossPlatformStyles;                               // 0x0378(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStyleLoadComplete;                               // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D77[0x18];                                    // 0x03D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnStyleLoadComplete__DelegateSignature();
	void SetTextBlockStyle(class UVALUI_TextBlockStyle* NewStyle);
	void StyleLoadComplete();
	void UpdateCrossPlatformStyles(TMap<ERedirectsPlatform, TSoftObjectPtr<class UVALUI_TextBlockStyle>>& NewCrossPlatformStyles);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_TextBlock_Styled">();
	}
	static class UVALUI_TextBlock_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_TextBlock_Styled>();
	}
};
static_assert(alignof(UVALUI_TextBlock_Styled) == 0x000010, "Wrong alignment on UVALUI_TextBlock_Styled");
static_assert(sizeof(UVALUI_TextBlock_Styled) == 0x0003F0, "Wrong size on UVALUI_TextBlock_Styled");
static_assert(offsetof(UVALUI_TextBlock_Styled, bSupportCrossPlatform) == 0x000368, "Member 'UVALUI_TextBlock_Styled::bSupportCrossPlatform' has a wrong offset!");
static_assert(offsetof(UVALUI_TextBlock_Styled, Style) == 0x000370, "Member 'UVALUI_TextBlock_Styled::Style' has a wrong offset!");
static_assert(offsetof(UVALUI_TextBlock_Styled, CrossPlatformStyles) == 0x000378, "Member 'UVALUI_TextBlock_Styled::CrossPlatformStyles' has a wrong offset!");
static_assert(offsetof(UVALUI_TextBlock_Styled, OnStyleLoadComplete) == 0x0003C8, "Member 'UVALUI_TextBlock_Styled::OnStyleLoadComplete' has a wrong offset!");

// Class ValeriaUI.VALUI_UButtonSlot
// 0x0028 (0x0060 - 0x0038)
class UVALUI_UButtonSlot final : public UPanelSlot
{
public:
	struct FMargin                                Padding;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D78[0x16];                                    // 0x004A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetPadding(const struct FMargin& InPadding);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_UButtonSlot">();
	}
	static class UVALUI_UButtonSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_UButtonSlot>();
	}
};
static_assert(alignof(UVALUI_UButtonSlot) == 0x000008, "Wrong alignment on UVALUI_UButtonSlot");
static_assert(sizeof(UVALUI_UButtonSlot) == 0x000060, "Wrong size on UVALUI_UButtonSlot");
static_assert(offsetof(UVALUI_UButtonSlot, Padding) == 0x000038, "Member 'UVALUI_UButtonSlot::Padding' has a wrong offset!");
static_assert(offsetof(UVALUI_UButtonSlot, HorizontalAlignment) == 0x000048, "Member 'UVALUI_UButtonSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UVALUI_UButtonSlot, VerticalAlignment) == 0x000049, "Member 'UVALUI_UButtonSlot::VerticalAlignment' has a wrong offset!");

// Class ValeriaUI.VALUI_UButton_Styled
// 0x04A8 (0x0640 - 0x0198)
class UVALUI_UButton_Styled final : public UContentWidget
{
public:
	class UVALUI_ButtonStyle*                     Style;                                             // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorAndOpacity;                                   // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonClickMethod                            ClickMethod;                                       // 0x01C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonTouchMethod                            TouchMethod;                                       // 0x01C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonPressMethod                            PressMethod;                                       // 0x01C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x01C3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D79[0x4];                                     // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnButtonClicked;                                   // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonPressed;                                   // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonReleased;                                  // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonHovered;                                   // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonUnhovered;                                 // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnButtonDrop;                                      // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D7A[0x18];                                    // 0x0228(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           WidgetStyleOverride;                               // 0x0240(0x03F0)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D7B[0x10];                                    // 0x0630(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FEventReply OnMouseButtonClicked(const struct FGeometry& MyGeometry, struct FPointerEvent& InMouseEvent);
	void SetButtonConfig(class UVALUI_ButtonStyle* NewButtonStyle);
	void SetButtonStyle(struct FButtonStyle& WidgetStyle);
	void SetClickMethod(EButtonClickMethod InClickMethod);
	void SetPressMethod(EButtonPressMethod InPressMethod);
	void SetTouchMethod(EButtonTouchMethod InTouchMethod);
	void VisualPress();
	void VisualRelease();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_UButton_Styled">();
	}
	static class UVALUI_UButton_Styled* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_UButton_Styled>();
	}
};
static_assert(alignof(UVALUI_UButton_Styled) == 0x000010, "Wrong alignment on UVALUI_UButton_Styled");
static_assert(sizeof(UVALUI_UButton_Styled) == 0x000640, "Wrong size on UVALUI_UButton_Styled");
static_assert(offsetof(UVALUI_UButton_Styled, Style) == 0x000198, "Member 'UVALUI_UButton_Styled::Style' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, ColorAndOpacity) == 0x0001A0, "Member 'UVALUI_UButton_Styled::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, BackgroundColor) == 0x0001B0, "Member 'UVALUI_UButton_Styled::BackgroundColor' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, ClickMethod) == 0x0001C0, "Member 'UVALUI_UButton_Styled::ClickMethod' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, TouchMethod) == 0x0001C1, "Member 'UVALUI_UButton_Styled::TouchMethod' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, PressMethod) == 0x0001C2, "Member 'UVALUI_UButton_Styled::PressMethod' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, IsFocusable) == 0x0001C3, "Member 'UVALUI_UButton_Styled::IsFocusable' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, OnButtonClicked) == 0x0001C8, "Member 'UVALUI_UButton_Styled::OnButtonClicked' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, OnButtonPressed) == 0x0001D8, "Member 'UVALUI_UButton_Styled::OnButtonPressed' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, OnButtonReleased) == 0x0001E8, "Member 'UVALUI_UButton_Styled::OnButtonReleased' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, OnButtonHovered) == 0x0001F8, "Member 'UVALUI_UButton_Styled::OnButtonHovered' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, OnButtonUnhovered) == 0x000208, "Member 'UVALUI_UButton_Styled::OnButtonUnhovered' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, OnButtonDrop) == 0x000218, "Member 'UVALUI_UButton_Styled::OnButtonDrop' has a wrong offset!");
static_assert(offsetof(UVALUI_UButton_Styled, WidgetStyleOverride) == 0x000240, "Member 'UVALUI_UButton_Styled::WidgetStyleOverride' has a wrong offset!");

// Class ValeriaUI.VALUI_UIManagerHUDBase
// 0x0000 (0x03C8 - 0x03C8)
class AVALUI_UIManagerHUDBase : public AS6UI_UIManagerHUDBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_UIManagerHUDBase">();
	}
	static class AVALUI_UIManagerHUDBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVALUI_UIManagerHUDBase>();
	}
};
static_assert(alignof(AVALUI_UIManagerHUDBase) == 0x000008, "Wrong alignment on AVALUI_UIManagerHUDBase");
static_assert(sizeof(AVALUI_UIManagerHUDBase) == 0x0003C8, "Wrong size on AVALUI_UIManagerHUDBase");

// Class ValeriaUI.VALUI_WidgetBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UVALUI_WidgetBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FEventReply CaptureMouseWithHighPrecision(struct FEventReply& Reply, class UWidget* CapturingWidget);
	static class FString ColorToHexString(struct FLinearColor& Color);
	static class UWidget* FindOuterMostWidget(class UWidget* BaseWidget);
	static class UObject* GetOuterForConstructingNativeWidget(class UUserWidget* HostUserWidget);
	static void UpdateEntryWidgetTypeOnListView(class UListViewBase* ListView, TSubclassOf<class UUserWidget> EntryWidgetType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_WidgetBlueprintLibrary">();
	}
	static class UVALUI_WidgetBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_WidgetBlueprintLibrary>();
	}
};
static_assert(alignof(UVALUI_WidgetBlueprintLibrary) == 0x000008, "Wrong alignment on UVALUI_WidgetBlueprintLibrary");
static_assert(sizeof(UVALUI_WidgetBlueprintLibrary) == 0x000028, "Wrong size on UVALUI_WidgetBlueprintLibrary");

// Class ValeriaUI.VAL_LocalizationSettings
// 0x00E0 (0x0118 - 0x0038)
class UVAL_LocalizationSettings final : public UDeveloperSettings
{
public:
	class FString                                 MaintenanceUrlFormat;                              // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnnouncementUrlFormat;                             // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultEnvironment;                                // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            EnvironmentTable;                                  // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	class FString                                 DefaultLanguage;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            LanguageTable;                                     // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_LocalizationSettings">();
	}
	static class UVAL_LocalizationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVAL_LocalizationSettings>();
	}
};
static_assert(alignof(UVAL_LocalizationSettings) == 0x000008, "Wrong alignment on UVAL_LocalizationSettings");
static_assert(sizeof(UVAL_LocalizationSettings) == 0x000118, "Wrong size on UVAL_LocalizationSettings");
static_assert(offsetof(UVAL_LocalizationSettings, MaintenanceUrlFormat) == 0x000038, "Member 'UVAL_LocalizationSettings::MaintenanceUrlFormat' has a wrong offset!");
static_assert(offsetof(UVAL_LocalizationSettings, AnnouncementUrlFormat) == 0x000048, "Member 'UVAL_LocalizationSettings::AnnouncementUrlFormat' has a wrong offset!");
static_assert(offsetof(UVAL_LocalizationSettings, DefaultEnvironment) == 0x000058, "Member 'UVAL_LocalizationSettings::DefaultEnvironment' has a wrong offset!");
static_assert(offsetof(UVAL_LocalizationSettings, EnvironmentTable) == 0x000068, "Member 'UVAL_LocalizationSettings::EnvironmentTable' has a wrong offset!");
static_assert(offsetof(UVAL_LocalizationSettings, DefaultLanguage) == 0x0000B8, "Member 'UVAL_LocalizationSettings::DefaultLanguage' has a wrong offset!");
static_assert(offsetof(UVAL_LocalizationSettings, LanguageTable) == 0x0000C8, "Member 'UVAL_LocalizationSettings::LanguageTable' has a wrong offset!");

// Class ValeriaUI.VAL_PlatformInvitationManager
// 0x0048 (0x0248 - 0x0200)
class UVAL_PlatformInvitationManager final : public US6Core_PlatformInvitationManager
{
public:
	FMulticastInlineDelegateProperty_             PlatformInvitedFailed_FTUEInProgress;              // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D7C[0x38];                                    // 0x0210(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLoginFailure(const class FString& ErrorMessage, int32 ErrorCode);
	void PlatformInvitedFailed_FTUEInProgress__DelegateSignature(class FText ErrorMessage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_PlatformInvitationManager">();
	}
	static class UVAL_PlatformInvitationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVAL_PlatformInvitationManager>();
	}
};
static_assert(alignof(UVAL_PlatformInvitationManager) == 0x000008, "Wrong alignment on UVAL_PlatformInvitationManager");
static_assert(sizeof(UVAL_PlatformInvitationManager) == 0x000248, "Wrong size on UVAL_PlatformInvitationManager");
static_assert(offsetof(UVAL_PlatformInvitationManager, PlatformInvitedFailed_FTUEInProgress) == 0x000200, "Member 'UVAL_PlatformInvitationManager::PlatformInvitedFailed_FTUEInProgress' has a wrong offset!");

}

