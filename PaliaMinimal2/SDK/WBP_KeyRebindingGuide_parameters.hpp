#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_KeyRebindingGuide

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK::Params
{

// Function WBP_KeyRebindingGuide.WBP_KeyRebindingGuide_C.BoundSuccessfulTip
// 0x04F0 (0x04F0 - 0x0000)
struct WBP_KeyRebindingGuide_C_BoundSuccessfulTip final
{
public:
	class FText                                   KeyName;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   ChordKeyName;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InputActionName;                                   // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   ConflicActionName;                                 // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bIsUnbound;                                        // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BEE[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InvalidName;                                       // 0x0068(0x0018)(Edit, BlueprintVisible)
	class FText                                   KeysName;                                          // 0x0080(0x0018)(Edit, BlueprintVisible)
	bool                                          Temp_bool_Variable;                                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BEF[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00A0(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF0[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00F8(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0148(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0198(0x0010)(ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x01A8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01B8(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x01D0(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_TextText_ReturnValue;          // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_TextText_ReturnValue_1;        // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF1[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x01F0(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x0240(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0290(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x02E0(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0330(0x0010)(ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x0340(0x0050)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0390(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF2[0x7];                                     // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_8;            // 0x03B0(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_3;                          // 0x0400(0x0010)(ReferenceParm)
	class FText                                   K2Node_Select_Default;                             // 0x0410(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue_3;                     // 0x0428(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_9;            // 0x0440(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_4;                          // 0x0490(0x0010)(ReferenceParm)
	bool                                          CallFunc_TextIsEmpty_ReturnValue_1;                // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF3[0x7];                                     // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_4;                     // 0x04A8(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x04C0(0x0018)()
	class FText                                   K2Node_Select_Default_2;                           // 0x04D8(0x0018)()
};
static_assert(alignof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip) == 0x000008, "Wrong alignment on WBP_KeyRebindingGuide_C_BoundSuccessfulTip");
static_assert(sizeof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip) == 0x0004F0, "Wrong size on WBP_KeyRebindingGuide_C_BoundSuccessfulTip");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, KeyName) == 0x000000, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::KeyName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, ChordKeyName) == 0x000018, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::ChordKeyName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, InputActionName) == 0x000030, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::InputActionName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, ConflicActionName) == 0x000048, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::ConflicActionName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, bIsUnbound) == 0x000060, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::bIsUnbound' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, InvalidName) == 0x000068, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::InvalidName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, KeysName) == 0x000080, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::KeysName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, Temp_bool_Variable) == 0x000098, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeStruct_FormatArgumentData) == 0x0000A0, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, CallFunc_TextIsEmpty_ReturnValue) == 0x0000F0, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000F8, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeStruct_FormatArgumentData_2) == 0x000148, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeArray_Array) == 0x000198, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeArray_Array_1) == 0x0001A8, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, CallFunc_Format_ReturnValue) == 0x0001B8, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, CallFunc_Format_ReturnValue_1) == 0x0001D0, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, Temp_bool_Variable_1) == 0x0001E8, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, CallFunc_EqualEqual_TextText_ReturnValue) == 0x0001E9, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::CallFunc_EqualEqual_TextText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, CallFunc_EqualEqual_TextText_ReturnValue_1) == 0x0001EA, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::CallFunc_EqualEqual_TextText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, CallFunc_BooleanOR_ReturnValue) == 0x0001EB, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeStruct_FormatArgumentData_3) == 0x0001F0, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeStruct_FormatArgumentData_4) == 0x000240, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeStruct_FormatArgumentData_5) == 0x000290, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeStruct_FormatArgumentData_6) == 0x0002E0, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeArray_Array_2) == 0x000330, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeStruct_FormatArgumentData_7) == 0x000340, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, CallFunc_Format_ReturnValue_2) == 0x000390, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, Temp_bool_Variable_2) == 0x0003A8, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeStruct_FormatArgumentData_8) == 0x0003B0, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeStruct_FormatArgumentData_8' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeArray_Array_3) == 0x000400, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_Select_Default) == 0x000410, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, CallFunc_Format_ReturnValue_3) == 0x000428, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::CallFunc_Format_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeStruct_FormatArgumentData_9) == 0x000440, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeStruct_FormatArgumentData_9' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_MakeArray_Array_4) == 0x000490, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, CallFunc_TextIsEmpty_ReturnValue_1) == 0x0004A0, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::CallFunc_TextIsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, CallFunc_Format_ReturnValue_4) == 0x0004A8, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::CallFunc_Format_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_Select_Default_1) == 0x0004C0, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_BoundSuccessfulTip, K2Node_Select_Default_2) == 0x0004D8, "Member 'WBP_KeyRebindingGuide_C_BoundSuccessfulTip::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_KeyRebindingGuide.WBP_KeyRebindingGuide_C.ExecuteUbergraph_WBP_KeyRebindingGuide
// 0x00C8 (0x00C8 - 0x0000)
struct WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF4[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UVerticalBox*                           Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVerticalBox*                           Temp_object_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_CustomEvent_KeyName;                        // 0x0028(0x0018)()
	class FText                                   K2Node_CustomEvent_ChordKeyName;                   // 0x0040(0x0018)()
	class FText                                   K2Node_CustomEvent_InputActionName;                // 0x0058(0x0018)()
	class FText                                   K2Node_CustomEvent_ConflicActionName;              // 0x0070(0x0018)()
	bool                                          K2Node_CustomEvent_bIsUnbound;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF5[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_InvalidateTimerHandle_ReturnValue;     // 0x0090(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF6[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_InvalidateTimerHandle_ReturnValue_1;   // 0x00A0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00A8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x00B0(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPromptDelayTime_ReturnValue;           // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF7[0x3];                                     // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBox*                           K2Node_Select_Default;                             // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide) == 0x000008, "Wrong alignment on WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide");
static_assert(sizeof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide) == 0x0000C8, "Wrong size on WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, EntryPoint) == 0x000000, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, Temp_byte_Variable) == 0x000004, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, Temp_object_Variable) == 0x000018, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, Temp_object_Variable_1) == 0x000020, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, K2Node_CustomEvent_KeyName) == 0x000028, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::K2Node_CustomEvent_KeyName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, K2Node_CustomEvent_ChordKeyName) == 0x000040, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::K2Node_CustomEvent_ChordKeyName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, K2Node_CustomEvent_InputActionName) == 0x000058, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::K2Node_CustomEvent_InputActionName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, K2Node_CustomEvent_ConflicActionName) == 0x000070, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::K2Node_CustomEvent_ConflicActionName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, K2Node_CustomEvent_bIsUnbound) == 0x000088, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::K2Node_CustomEvent_bIsUnbound' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, CallFunc_K2_InvalidateTimerHandle_ReturnValue) == 0x000090, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::CallFunc_K2_InvalidateTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000098, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, CallFunc_K2_InvalidateTimerHandle_ReturnValue_1) == 0x0000A0, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::CallFunc_K2_InvalidateTimerHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000A8, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0000B0, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, CallFunc_GetPromptDelayTime_ReturnValue) == 0x0000B8, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::CallFunc_GetPromptDelayTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, K2Node_Event_IsDesignTime) == 0x0000BC, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide, K2Node_Select_Default) == 0x0000C0, "Member 'WBP_KeyRebindingGuide_C_ExecuteUbergraph_WBP_KeyRebindingGuide::K2Node_Select_Default' has a wrong offset!");

// Function WBP_KeyRebindingGuide.WBP_KeyRebindingGuide_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_KeyRebindingGuide_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_KeyRebindingGuide_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_KeyRebindingGuide_C_PreConstruct");
static_assert(sizeof(WBP_KeyRebindingGuide_C_PreConstruct) == 0x000001, "Wrong size on WBP_KeyRebindingGuide_C_PreConstruct");
static_assert(offsetof(WBP_KeyRebindingGuide_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_KeyRebindingGuide_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_KeyRebindingGuide.WBP_KeyRebindingGuide_C.UpdateBoundTips
// 0x0068 (0x0068 - 0x0000)
struct WBP_KeyRebindingGuide_C_UpdateBoundTips final
{
public:
	class FText                                   KeyName;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   ChordKeyName;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   InputActionName;                                   // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   ConflicActionName;                                 // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bIsUnbound;                                        // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_KeyRebindingGuide_C_UpdateBoundTips) == 0x000008, "Wrong alignment on WBP_KeyRebindingGuide_C_UpdateBoundTips");
static_assert(sizeof(WBP_KeyRebindingGuide_C_UpdateBoundTips) == 0x000068, "Wrong size on WBP_KeyRebindingGuide_C_UpdateBoundTips");
static_assert(offsetof(WBP_KeyRebindingGuide_C_UpdateBoundTips, KeyName) == 0x000000, "Member 'WBP_KeyRebindingGuide_C_UpdateBoundTips::KeyName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_UpdateBoundTips, ChordKeyName) == 0x000018, "Member 'WBP_KeyRebindingGuide_C_UpdateBoundTips::ChordKeyName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_UpdateBoundTips, InputActionName) == 0x000030, "Member 'WBP_KeyRebindingGuide_C_UpdateBoundTips::InputActionName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_UpdateBoundTips, ConflicActionName) == 0x000048, "Member 'WBP_KeyRebindingGuide_C_UpdateBoundTips::ConflicActionName' has a wrong offset!");
static_assert(offsetof(WBP_KeyRebindingGuide_C_UpdateBoundTips, bIsUnbound) == 0x000060, "Member 'WBP_KeyRebindingGuide_C_UpdateBoundTips::bIsUnbound' has a wrong offset!");

}

