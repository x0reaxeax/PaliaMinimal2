#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AudioPool_StaticLoop

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AudioPool_StaticLoop.BP_AudioPool_StaticLoop_C
// 0x0058 (0x0300 - 0x02A8)
class ABP_AudioPool_StaticLoop_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkComponent*                           Ak;                                                // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UComp_Audio_Pool_Manager_C*             PoolManager;                                       // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash)
	bool                                          IsPlaying;                                         // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_462D[0x7];                                     // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          CurrentlyPlayingEvent;                             // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_462E[0x7];                                     // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Env_Audio_Pool_Base_C*              MyPoolObject;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             SoundStopped;                                      // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         PlayingID;                                         // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFading;                                          // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_462F[0x3];                                     // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Transition_Duration;                               // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SoundStopped__DelegateSignature(class ABP_AudioPool_StaticLoop_C* PoolObject);
	void AudioDebugFoliage(bool On);
	void DebugLine(const struct FVector& CallFunc_GetValeriaAudioListenerPosition_OutLocation, const struct FVector& CallFunc_GetValeriaAudioListenerPosition_OutFrontDir, const struct FVector& CallFunc_GetValeriaAudioListenerPosition_OutRightDir, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue);
	void ExecuteUbergraph_BP_AudioPool_StaticLoop(int32 EntryPoint, TArray<struct FAkExternalSourceInfo>& Temp_struct_Variable, bool K2Node_CustomEvent_Immediately, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, const struct FHitResult& CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, class ABP_Env_Audio_Pool_Base_C* K2Node_CustomEvent_PoolObject, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_2, double CallFunc_MakeLiteralDouble_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_1, float K2Node_Event_DeltaSeconds, TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable, bool K2Node_CustomEvent_On, int32 CallFunc_PostAssociatedAkEvent_ReturnValue, float CallFunc_Delay_Duration_ImplicitCast, float CallFunc_DrawDebugSphere_Duration_ImplicitCast);
	void ReceiveTick(float DeltaSeconds);
	void StartSound(class ABP_Env_Audio_Pool_Base_C* PoolObject);
	void StopSound(bool Immediately);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AudioPool_StaticLoop_C">();
	}
	static class ABP_AudioPool_StaticLoop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AudioPool_StaticLoop_C>();
	}
};
static_assert(alignof(ABP_AudioPool_StaticLoop_C) == 0x000008, "Wrong alignment on ABP_AudioPool_StaticLoop_C");
static_assert(sizeof(ABP_AudioPool_StaticLoop_C) == 0x000300, "Wrong size on ABP_AudioPool_StaticLoop_C");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_AudioPool_StaticLoop_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, Ak) == 0x0002B0, "Member 'ABP_AudioPool_StaticLoop_C::Ak' has a wrong offset!");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, PoolManager) == 0x0002B8, "Member 'ABP_AudioPool_StaticLoop_C::PoolManager' has a wrong offset!");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, IsPlaying) == 0x0002C0, "Member 'ABP_AudioPool_StaticLoop_C::IsPlaying' has a wrong offset!");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, CurrentlyPlayingEvent) == 0x0002C8, "Member 'ABP_AudioPool_StaticLoop_C::CurrentlyPlayingEvent' has a wrong offset!");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, Debug) == 0x0002D0, "Member 'ABP_AudioPool_StaticLoop_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, MyPoolObject) == 0x0002D8, "Member 'ABP_AudioPool_StaticLoop_C::MyPoolObject' has a wrong offset!");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, SoundStopped) == 0x0002E0, "Member 'ABP_AudioPool_StaticLoop_C::SoundStopped' has a wrong offset!");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, PlayingID) == 0x0002F0, "Member 'ABP_AudioPool_StaticLoop_C::PlayingID' has a wrong offset!");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, IsFading) == 0x0002F4, "Member 'ABP_AudioPool_StaticLoop_C::IsFading' has a wrong offset!");
static_assert(offsetof(ABP_AudioPool_StaticLoop_C, Transition_Duration) == 0x0002F8, "Member 'ABP_AudioPool_StaticLoop_C::Transition_Duration' has a wrong offset!");

}

