#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S6Persist

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum S6Persist.ES6PersistConfigurationSerializationFormat
// NumValues: 0x0003
enum class ES6PersistConfigurationSerializationFormat : uint8
{
	JSON                                     = 0,
	Flexbuffer                               = 1,
	ES6PersistConfigurationSerializationFormat_MAX = 2,
};

// Enum S6Persist.ES6PersistConfigurationStorageLocation
// NumValues: 0x0003
enum class ES6PersistConfigurationStorageLocation : uint8
{
	Disk                                     = 0,
	GameDataService                          = 1,
	ES6PersistConfigurationStorageLocation_MAX = 2,
};

// Enum S6Persist.ES6MutateOpType
// NumValues: 0x0004
enum class ES6MutateOpType : uint8
{
	Insert                                   = 0,
	Update                                   = 1,
	Delete                                   = 2,
	ES6MutateOpType_MAX                      = 3,
};

// ScriptStruct S6Persist.S6PersistBlock
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FS6PersistBlock
{
public:
	uint8                                         Pad_1D27[0x40];                                    // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6PersistBlock) == 0x000008, "Wrong alignment on FS6PersistBlock");
static_assert(sizeof(FS6PersistBlock) == 0x000040, "Wrong size on FS6PersistBlock");

// ScriptStruct S6Persist.S6PersistOperationSetTestBlock
// 0x0008 (0x0048 - 0x0040)
struct FS6PersistOperationSetTestBlock final : public FS6PersistBlock
{
public:
	float                                         Test;                                              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D28[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6PersistOperationSetTestBlock) == 0x000008, "Wrong alignment on FS6PersistOperationSetTestBlock");
static_assert(sizeof(FS6PersistOperationSetTestBlock) == 0x000048, "Wrong size on FS6PersistOperationSetTestBlock");
static_assert(offsetof(FS6PersistOperationSetTestBlock, Test) == 0x000040, "Member 'FS6PersistOperationSetTestBlock::Test' has a wrong offset!");

// ScriptStruct S6Persist.S6PersistContainer
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FS6PersistContainer
{
public:
	uint8                                         Pad_1D29[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6PersistContainer) == 0x000008, "Wrong alignment on FS6PersistContainer");
static_assert(sizeof(FS6PersistContainer) == 0x000018, "Wrong size on FS6PersistContainer");

// ScriptStruct S6Persist.S6PersistBlockData
// 0x0030 (0x0030 - 0x0000)
struct FS6PersistBlockData final
{
public:
	struct FGuid                                  BlockId;                                           // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlockKind;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6PersistBlockData) == 0x000008, "Wrong alignment on FS6PersistBlockData");
static_assert(sizeof(FS6PersistBlockData) == 0x000030, "Wrong size on FS6PersistBlockData");
static_assert(offsetof(FS6PersistBlockData, BlockId) == 0x000000, "Member 'FS6PersistBlockData::BlockId' has a wrong offset!");
static_assert(offsetof(FS6PersistBlockData, BlockKind) == 0x000010, "Member 'FS6PersistBlockData::BlockKind' has a wrong offset!");
static_assert(offsetof(FS6PersistBlockData, Data) == 0x000020, "Member 'FS6PersistBlockData::Data' has a wrong offset!");

// ScriptStruct S6Persist.S6GameDataServiceEnvelope
// 0x0038 (0x0038 - 0x0000)
struct FS6GameDataServiceEnvelope final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContainerKind;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Version;                                           // 0x0020(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2A[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS6PersistBlockData>            Blocks;                                            // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6GameDataServiceEnvelope) == 0x000008, "Wrong alignment on FS6GameDataServiceEnvelope");
static_assert(sizeof(FS6GameDataServiceEnvelope) == 0x000038, "Wrong size on FS6GameDataServiceEnvelope");
static_assert(offsetof(FS6GameDataServiceEnvelope, ContainerID) == 0x000000, "Member 'FS6GameDataServiceEnvelope::ContainerID' has a wrong offset!");
static_assert(offsetof(FS6GameDataServiceEnvelope, ContainerKind) == 0x000010, "Member 'FS6GameDataServiceEnvelope::ContainerKind' has a wrong offset!");
static_assert(offsetof(FS6GameDataServiceEnvelope, Version) == 0x000020, "Member 'FS6GameDataServiceEnvelope::Version' has a wrong offset!");
static_assert(offsetof(FS6GameDataServiceEnvelope, Blocks) == 0x000028, "Member 'FS6GameDataServiceEnvelope::Blocks' has a wrong offset!");

// ScriptStruct S6Persist.S6PersistOperation
// 0x0060 (0x0060 - 0x0000)
struct FS6PersistOperation final
{
public:
	ES6MutateOpType                               Mutation;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ContainerID;                                       // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2C[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContainerKind;                                     // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Version;                                           // 0x0028(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2D[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  BlockId;                                           // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2E[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BlockKind;                                         // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6PersistOperation) == 0x000008, "Wrong alignment on FS6PersistOperation");
static_assert(sizeof(FS6PersistOperation) == 0x000060, "Wrong size on FS6PersistOperation");
static_assert(offsetof(FS6PersistOperation, Mutation) == 0x000000, "Member 'FS6PersistOperation::Mutation' has a wrong offset!");
static_assert(offsetof(FS6PersistOperation, ContainerID) == 0x000004, "Member 'FS6PersistOperation::ContainerID' has a wrong offset!");
static_assert(offsetof(FS6PersistOperation, ContainerKind) == 0x000018, "Member 'FS6PersistOperation::ContainerKind' has a wrong offset!");
static_assert(offsetof(FS6PersistOperation, Version) == 0x000028, "Member 'FS6PersistOperation::Version' has a wrong offset!");
static_assert(offsetof(FS6PersistOperation, BlockId) == 0x00002C, "Member 'FS6PersistOperation::BlockId' has a wrong offset!");
static_assert(offsetof(FS6PersistOperation, BlockKind) == 0x000040, "Member 'FS6PersistOperation::BlockKind' has a wrong offset!");
static_assert(offsetof(FS6PersistOperation, Data) == 0x000050, "Member 'FS6PersistOperation::Data' has a wrong offset!");

// ScriptStruct S6Persist.S6PersistMigration
// 0x0038 (0x0038 - 0x0000)
struct FS6PersistMigration final
{
public:
	struct FGuid                                  ContainerID;                                       // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContainerKind;                                     // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Version;                                           // 0x0020(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2F[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS6PersistOperation>            Operations;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6PersistMigration) == 0x000008, "Wrong alignment on FS6PersistMigration");
static_assert(sizeof(FS6PersistMigration) == 0x000038, "Wrong size on FS6PersistMigration");
static_assert(offsetof(FS6PersistMigration, ContainerID) == 0x000000, "Member 'FS6PersistMigration::ContainerID' has a wrong offset!");
static_assert(offsetof(FS6PersistMigration, ContainerKind) == 0x000010, "Member 'FS6PersistMigration::ContainerKind' has a wrong offset!");
static_assert(offsetof(FS6PersistMigration, Version) == 0x000020, "Member 'FS6PersistMigration::Version' has a wrong offset!");
static_assert(offsetof(FS6PersistMigration, Operations) == 0x000028, "Member 'FS6PersistMigration::Operations' has a wrong offset!");

// ScriptStruct S6Persist.S6PersistOperationSet
// 0x0078 (0x0078 - 0x0000)
struct FS6PersistOperationSet final
{
public:
	uint8                                         Pad_1D30[0x20];                                    // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FS6PersistOperation>              Operations;                                        // 0x0020(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D31[0x8];                                     // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6PersistOperationSet) == 0x000008, "Wrong alignment on FS6PersistOperationSet");
static_assert(sizeof(FS6PersistOperationSet) == 0x000078, "Wrong size on FS6PersistOperationSet");
static_assert(offsetof(FS6PersistOperationSet, Operations) == 0x000020, "Member 'FS6PersistOperationSet::Operations' has a wrong offset!");

}

