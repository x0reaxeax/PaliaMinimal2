#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Agones

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct Agones.Port
// 0x0018 (0x0018 - 0x0000)
struct FPort final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED3[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPort) == 0x000008, "Wrong alignment on FPort");
static_assert(sizeof(FPort) == 0x000018, "Wrong size on FPort");
static_assert(offsetof(FPort, Name) == 0x000000, "Member 'FPort::Name' has a wrong offset!");
static_assert(offsetof(FPort, Port) == 0x000010, "Member 'FPort::Port' has a wrong offset!");

// ScriptStruct Agones.Status
// 0x0030 (0x0030 - 0x0000)
struct FStatus final
{
public:
	class FString                                 State;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Address;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPort>                          Ports;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatus) == 0x000008, "Wrong alignment on FStatus");
static_assert(sizeof(FStatus) == 0x000030, "Wrong size on FStatus");
static_assert(offsetof(FStatus, State) == 0x000000, "Member 'FStatus::State' has a wrong offset!");
static_assert(offsetof(FStatus, Address) == 0x000010, "Member 'FStatus::Address' has a wrong offset!");
static_assert(offsetof(FStatus, Ports) == 0x000020, "Member 'FStatus::Ports' has a wrong offset!");

// ScriptStruct Agones.AgonesError
// 0x0010 (0x0010 - 0x0000)
struct FAgonesError final
{
public:
	class FString                                 ErrorMessage;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAgonesError) == 0x000008, "Wrong alignment on FAgonesError");
static_assert(sizeof(FAgonesError) == 0x000010, "Wrong size on FAgonesError");
static_assert(offsetof(FAgonesError, ErrorMessage) == 0x000000, "Member 'FAgonesError::ErrorMessage' has a wrong offset!");

// ScriptStruct Agones.EmptyResponse
// 0x0001 (0x0001 - 0x0000)
struct FEmptyResponse final
{
public:
	uint8                                         Pad_1ED4[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEmptyResponse) == 0x000001, "Wrong alignment on FEmptyResponse");
static_assert(sizeof(FEmptyResponse) == 0x000001, "Wrong size on FEmptyResponse");

// ScriptStruct Agones.ObjectMeta
// 0x00F8 (0x00F8 - 0x0000)
struct FObjectMeta final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Namespace;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Uid;                                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceVersion;                                   // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Generation;                                        // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CreationTimestamp;                                 // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DeletionTimestamp;                                 // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Annotations;                                       // 0x0058(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Labels;                                            // 0x00A8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectMeta) == 0x000008, "Wrong alignment on FObjectMeta");
static_assert(sizeof(FObjectMeta) == 0x0000F8, "Wrong size on FObjectMeta");
static_assert(offsetof(FObjectMeta, Name) == 0x000000, "Member 'FObjectMeta::Name' has a wrong offset!");
static_assert(offsetof(FObjectMeta, Namespace) == 0x000010, "Member 'FObjectMeta::Namespace' has a wrong offset!");
static_assert(offsetof(FObjectMeta, Uid) == 0x000020, "Member 'FObjectMeta::Uid' has a wrong offset!");
static_assert(offsetof(FObjectMeta, ResourceVersion) == 0x000030, "Member 'FObjectMeta::ResourceVersion' has a wrong offset!");
static_assert(offsetof(FObjectMeta, Generation) == 0x000040, "Member 'FObjectMeta::Generation' has a wrong offset!");
static_assert(offsetof(FObjectMeta, CreationTimestamp) == 0x000048, "Member 'FObjectMeta::CreationTimestamp' has a wrong offset!");
static_assert(offsetof(FObjectMeta, DeletionTimestamp) == 0x000050, "Member 'FObjectMeta::DeletionTimestamp' has a wrong offset!");
static_assert(offsetof(FObjectMeta, Annotations) == 0x000058, "Member 'FObjectMeta::Annotations' has a wrong offset!");
static_assert(offsetof(FObjectMeta, Labels) == 0x0000A8, "Member 'FObjectMeta::Labels' has a wrong offset!");

// ScriptStruct Agones.Health
// 0x0010 (0x0010 - 0x0000)
struct FHealth final
{
public:
	bool                                          bDisabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PeriodSeconds;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailureThreshold;                                  // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialDelaySeconds;                               // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHealth) == 0x000004, "Wrong alignment on FHealth");
static_assert(sizeof(FHealth) == 0x000010, "Wrong size on FHealth");
static_assert(offsetof(FHealth, bDisabled) == 0x000000, "Member 'FHealth::bDisabled' has a wrong offset!");
static_assert(offsetof(FHealth, PeriodSeconds) == 0x000004, "Member 'FHealth::PeriodSeconds' has a wrong offset!");
static_assert(offsetof(FHealth, FailureThreshold) == 0x000008, "Member 'FHealth::FailureThreshold' has a wrong offset!");
static_assert(offsetof(FHealth, InitialDelaySeconds) == 0x00000C, "Member 'FHealth::InitialDelaySeconds' has a wrong offset!");

// ScriptStruct Agones.Spec
// 0x0010 (0x0010 - 0x0000)
struct FSpec final
{
public:
	struct FHealth                                Health;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpec) == 0x000004, "Wrong alignment on FSpec");
static_assert(sizeof(FSpec) == 0x000010, "Wrong size on FSpec");
static_assert(offsetof(FSpec, Health) == 0x000000, "Member 'FSpec::Health' has a wrong offset!");

// ScriptStruct Agones.GameServerResponse
// 0x0138 (0x0138 - 0x0000)
struct FGameServerResponse final
{
public:
	struct FStatus                                Status;                                            // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FObjectMeta                            ObjectMeta;                                        // 0x0030(0x00F8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSpec                                  Spec;                                              // 0x0128(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameServerResponse) == 0x000008, "Wrong alignment on FGameServerResponse");
static_assert(sizeof(FGameServerResponse) == 0x000138, "Wrong size on FGameServerResponse");
static_assert(offsetof(FGameServerResponse, Status) == 0x000000, "Member 'FGameServerResponse::Status' has a wrong offset!");
static_assert(offsetof(FGameServerResponse, ObjectMeta) == 0x000030, "Member 'FGameServerResponse::ObjectMeta' has a wrong offset!");
static_assert(offsetof(FGameServerResponse, Spec) == 0x000128, "Member 'FGameServerResponse::Spec' has a wrong offset!");

// ScriptStruct Agones.ConnectedPlayersResponse
// 0x0010 (0x0010 - 0x0000)
struct FConnectedPlayersResponse final
{
public:
	TArray<class FString>                         ConnectedPlayers;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConnectedPlayersResponse) == 0x000008, "Wrong alignment on FConnectedPlayersResponse");
static_assert(sizeof(FConnectedPlayersResponse) == 0x000010, "Wrong size on FConnectedPlayersResponse");
static_assert(offsetof(FConnectedPlayersResponse, ConnectedPlayers) == 0x000000, "Member 'FConnectedPlayersResponse::ConnectedPlayers' has a wrong offset!");

// ScriptStruct Agones.CountResponse
// 0x0008 (0x0008 - 0x0000)
struct FCountResponse final
{
public:
	int64                                         Count;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCountResponse) == 0x000008, "Wrong alignment on FCountResponse");
static_assert(sizeof(FCountResponse) == 0x000008, "Wrong size on FCountResponse");
static_assert(offsetof(FCountResponse, Count) == 0x000000, "Member 'FCountResponse::Count' has a wrong offset!");

// ScriptStruct Agones.ConnectedResponse
// 0x0001 (0x0001 - 0x0000)
struct FConnectedResponse final
{
public:
	bool                                          bConnected;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConnectedResponse) == 0x000001, "Wrong alignment on FConnectedResponse");
static_assert(sizeof(FConnectedResponse) == 0x000001, "Wrong size on FConnectedResponse");
static_assert(offsetof(FConnectedResponse, bConnected) == 0x000000, "Member 'FConnectedResponse::bConnected' has a wrong offset!");

// ScriptStruct Agones.DisconnectResponse
// 0x0001 (0x0001 - 0x0000)
struct FDisconnectResponse final
{
public:
	bool                                          bDisconnected;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisconnectResponse) == 0x000001, "Wrong alignment on FDisconnectResponse");
static_assert(sizeof(FDisconnectResponse) == 0x000001, "Wrong size on FDisconnectResponse");
static_assert(offsetof(FDisconnectResponse, bDisconnected) == 0x000000, "Member 'FDisconnectResponse::bDisconnected' has a wrong offset!");

// ScriptStruct Agones.KeyValuePair
// 0x0020 (0x0020 - 0x0000)
struct FKeyValuePair final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeyValuePair) == 0x000008, "Wrong alignment on FKeyValuePair");
static_assert(sizeof(FKeyValuePair) == 0x000020, "Wrong size on FKeyValuePair");
static_assert(offsetof(FKeyValuePair, Key) == 0x000000, "Member 'FKeyValuePair::Key' has a wrong offset!");
static_assert(offsetof(FKeyValuePair, Value) == 0x000010, "Member 'FKeyValuePair::Value' has a wrong offset!");

// ScriptStruct Agones.Duration
// 0x0008 (0x0008 - 0x0000)
struct FDuration final
{
public:
	int64                                         Seconds;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDuration) == 0x000008, "Wrong alignment on FDuration");
static_assert(sizeof(FDuration) == 0x000008, "Wrong size on FDuration");
static_assert(offsetof(FDuration, Seconds) == 0x000000, "Member 'FDuration::Seconds' has a wrong offset!");

// ScriptStruct Agones.AgonesPlayer
// 0x0010 (0x0010 - 0x0000)
struct FAgonesPlayer final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAgonesPlayer) == 0x000008, "Wrong alignment on FAgonesPlayer");
static_assert(sizeof(FAgonesPlayer) == 0x000010, "Wrong size on FAgonesPlayer");
static_assert(offsetof(FAgonesPlayer, PlayerId) == 0x000000, "Member 'FAgonesPlayer::PlayerId' has a wrong offset!");

// ScriptStruct Agones.PlayerCapacity
// 0x0008 (0x0008 - 0x0000)
struct FPlayerCapacity final
{
public:
	int64                                         Count;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerCapacity) == 0x000008, "Wrong alignment on FPlayerCapacity");
static_assert(sizeof(FPlayerCapacity) == 0x000008, "Wrong size on FPlayerCapacity");
static_assert(offsetof(FPlayerCapacity, Count) == 0x000000, "Member 'FPlayerCapacity::Count' has a wrong offset!");

}

