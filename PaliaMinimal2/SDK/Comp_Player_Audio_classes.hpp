#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Comp_Player_Audio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Palia_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Comp_Player_Audio.Comp_Player_Audio_C
// 0x0108 (0x01A8 - 0x00A0)
class UComp_Player_Audio_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AValeriaCharacter*                      Character;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          IsLocal;                                           // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4837[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          DefaultItemAddedSound;                             // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFalling;                                         // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4838[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkRtpc*                                FallingRTPC;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UAkAudioEvent*                          FallingSound;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          CloseToGroundSound;                                // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        FalltimeThreshold;                                 // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FallRampDistance;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastRotationYaw;                                   // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewRotationYaw;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CloseToGroundSoundID;                              // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GliderLoopID;                                      // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          GlidingLoopDefaultSound;                           // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        RTPC_UpdateTime;                                   // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          GliderEndSound;                                    // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPhysmatEffect_C*                       PickaxeMissEffects;                                // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          DefaultItemPlacedSound;                            // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FValeriaItem>                   Item;                                              // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         GroupItemPickupThreshold;                          // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4839[0x4];                                     // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          GroupItemAddedSound;                               // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ListenerDistance;                                  // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ListenerPadding;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSprinting;                                       // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moved;                                             // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_483A[0x6];                                     // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          BeginSprintSound;                                  // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          BeginRunSound;                                     // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          ForceUnequipSound;                                 // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UEquipmentComponent*                    EquipmentComponent;                                // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        FallVelocity;                                      // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           GlidingTimerHandle;                                // 0x0190(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FallingTimerHandle;                                // 0x0198(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          GliderLoopToPlay;                                  // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BeginFalling();
	void BeginRun();
	void BeginSprint();
	void BindItemAudio();
	void BindItemAudioLocal();
	void BindMovementAudio();
	void ClimbChanged(bool IsClimbing);
	void ClimbDash(bool IsClimbing, EValeriaClimbDashDirection Direction);
	void ClimbOutro(const struct FVector& Location);
	void EndFalling();
	void EquippedItemChanged(class UEquipmentComponent* Param_EquipmentComponent, const struct FEquipmentItem& Param_Item);
	void EquippedItemVisibilityChanged(class UEquipmentComponent* Param_EquipmentComponent, bool bNewVisibility);
	void ExecuteUbergraph_Comp_Player_Audio(int32 EntryPoint, const struct FValeriaItem& K2Node_CustomEvent_Item_1, int32 CallFunc_AkEventActor_ReturnValue, int32 CallFunc_Array_AddUnique_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_Not_PreBool_ReturnValue, int32 CallFunc_AkEventActor_ReturnValue_1, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, TDelegate<void(const struct FValeriaItem& Item)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(const struct FValeriaItem& Item)> K2Node_CreateDelegate_OutputDelegate_1, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Has_Been_Initd_Variable_1, class UEquipmentComponent* K2Node_CustomEvent_EquipmentComponent_1, const struct FEquipmentItem& K2Node_CustomEvent_Item, TDelegate<void(class UEquipmentComponent* EquipmentComponent, const struct FEquipmentItem& Item)> K2Node_CreateDelegate_OutputDelegate_2, class UEquipmentComponent* K2Node_CustomEvent_EquipmentComponent, bool K2Node_CustomEvent_bNewVisibility, TDelegate<void(class UEquipmentComponent* EquipmentComponent, bool bHidden)> K2Node_CreateDelegate_OutputDelegate_3, TDelegate<void(class UEquipmentComponent* EquipmentComponent, const struct FEquipmentItem& Item)> K2Node_CreateDelegate_OutputDelegate_4, TDelegate<void(class UEquipmentComponent* EquipmentComponent, bool bHidden)> K2Node_CreateDelegate_OutputDelegate_5, bool Temp_bool_IsClosed_Variable, const struct FEquipmentItem& CallFunc_GetEquippedItem_ReturnValue, class AEquipViewActor* CallFunc_Array_Get_Item, class UClass* CallFunc_GetObjectClass_ReturnValue, class UValeriaCharacterMoveComponent* CallFunc_GetValeriaCharacterMovementComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool Temp_bool_IsClosed_Variable_1, double CallFunc_Subtract_DoubleDouble_ReturnValue, class UValeriaCharacterMoveComponent* CallFunc_GetValeriaCharacterMovementComponent_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_2, bool CallFunc_EqualEqual_ByteByte_ReturnValue_1, class UEquipmentComponent* CallFunc_GetEquipment_ReturnValue, bool CallFunc_IsValid_ReturnValue_3, double CallFunc_Subtract_DoubleDouble_ReturnValue_1, TDelegate<void(class AValeriaMoveablePawn* Pawn, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)> K2Node_CreateDelegate_OutputDelegate_6, int32 CallFunc_AkEventActor_ReturnValue_2, const struct FRotator& CallFunc_K2_GetActorRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, int32 CallFunc_AkEventActor_ReturnValue_3, class AValeriaMoveablePawn* K2Node_CustomEvent_Pawn, EMovementMode K2Node_CustomEvent_PrevMovementMode, uint8 K2Node_CustomEvent_PreviousCustomMode, bool K2Node_SwitchEnum_CmpSuccess, const struct FVector& CallFunc_GetVelocity_ReturnValue, bool CallFunc_Find_Distance_to_Ground_Hit, double CallFunc_Find_Distance_to_Ground_Distance, double CallFunc_VSize_ReturnValue, bool CallFunc_InRange_FloatFloat_ReturnValue, const struct FVector& CallFunc_GetVelocity_ReturnValue_1, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, const struct FVector& CallFunc_MakeVector_ReturnValue, double CallFunc_VSize_ReturnValue_1, const struct FTimerHandle& CallFunc_K2_SetTimer_ReturnValue, const struct FTimerHandle& CallFunc_K2_SetTimer_ReturnValue_1, bool K2Node_CustomEvent_isGliding, int32 CallFunc_AkEventActor_ReturnValue_4, int32 CallFunc_AkEventActor_ReturnValue_5, bool K2Node_CustomEvent_isClimbing_1, bool Temp_bool_IsClosed_Variable_2, class UValeriaCharacterMoveComponent* K2Node_DynamicCast_AsValeria_Character_Move_Component, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_isClimbing, EValeriaClimbDashDirection K2Node_CustomEvent_direction, const struct FVector& K2Node_CustomEvent_Location, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, TDelegate<void(bool IsGliding)> K2Node_CreateDelegate_OutputDelegate_7, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, int32 CallFunc_AkEventActor_ReturnValue_6, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, float K2Node_CustomEvent_DeltaSeconds, const struct FVector& K2Node_CustomEvent_OldLocation, const struct FVector& K2Node_CustomEvent_OldVelocity, class AValeriaCharacter* K2Node_CustomEvent_Character, bool K2Node_CustomEvent_isSprinting, int32 CallFunc_AkEventActor_ReturnValue_7, int32 CallFunc_AkEventActor_ReturnValue_8, const struct FVector& CallFunc_GetVelocity_ReturnValue_2, bool CallFunc_IsValid_ReturnValue_4, double CallFunc_VSize_ReturnValue_2, bool CallFunc_Greater_DoubleDouble_ReturnValue, bool CallFunc_IsValid_ReturnValue_5, class UValeriaCharacterMoveComponent* CallFunc_GetValeriaCharacterMovementComponent_ReturnValue_2, bool CallFunc_Find_Distance_to_Ground_Hit_1, double CallFunc_Find_Distance_to_Ground_Distance_1, TDelegate<void(class AValeriaMoveablePawn* Pawn, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)> K2Node_CreateDelegate_OutputDelegate_8, TDelegate<void(bool IsGliding)> K2Node_CreateDelegate_OutputDelegate_9, TDelegate<void(bool IsClimbing)> K2Node_CreateDelegate_OutputDelegate_10, TDelegate<void(bool IsClimbing, EValeriaClimbDashDirection Direction)> K2Node_CreateDelegate_OutputDelegate_11, TDelegate<void(const struct FVector& Location)> K2Node_CreateDelegate_OutputDelegate_12, TDelegate<void(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity)> K2Node_CreateDelegate_OutputDelegate_13, bool CallFunc_IsValid_ReturnValue_6, class UEquipmentComponent* CallFunc_GetEquipment_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_7, TDelegate<void(class AValeriaCharacter* Character, bool IsSprinting)> K2Node_CreateDelegate_OutputDelegate_14, bool Temp_bool_Has_Been_Initd_Variable_2, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue_1, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue_8, class UValeriaCharacterMoveComponent* CallFunc_GetValeriaCharacterMovementComponent_ReturnValue_3, bool CallFunc_IsSprinting_ReturnValue, bool CallFunc_IsValid_ReturnValue_9, class UValeriaCharacterMoveComponent* K2Node_DynamicCast_AsValeria_Character_Move_Component_1, bool K2Node_DynamicCast_bSuccess_1, bool CallFunc_IsValid_ReturnValue_10, class UValeriaCharacterMoveComponent* CallFunc_GetValeriaCharacterMovementComponent_ReturnValue_4, class UAkAudioEvent* CallFunc_GetGliderLoop_Output, int32 CallFunc_AkEventActor_ReturnValue_9, class AActor* CallFunc_GetOwner_ReturnValue, bool CallFunc_IsServer_ReturnValue, class AValeriaCharacter* K2Node_DynamicCast_AsValeria_Character, bool K2Node_DynamicCast_bSuccess_2, bool CallFunc_Not_PreBool_ReturnValue_1, int32 Temp_int_Array_Index_Variable, class AActor* K2Node_CustomEvent_actor, bool K2Node_CustomEvent_WasDamaged, TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> K2Node_CustomEvent_ItemType, class AActor* K2Node_CustomEvent_instigator, const struct FValeriaItem& CallFunc_Array_Get_Item_1, class ABP_ValeriaGatherableLoot_C* K2Node_DynamicCast_AsBP_Valeria_Gatherable_Loot, bool K2Node_DynamicCast_bSuccess_3, class UObject* CallFunc_LoadAsset_Blocking_ReturnValue, class UVAL_ItemTypeDefinitionAsset* K2Node_DynamicCast_AsItem_Type_Definition, bool K2Node_DynamicCast_bSuccess_4, bool CallFunc_IsValid_ReturnValue_11, class UObject* CallFunc_LoadAsset_Blocking_ReturnValue_1, class UVAL_ItemTypeDefinitionAsset* K2Node_DynamicCast_AsItem_Type_Definition_1, bool K2Node_DynamicCast_bSuccess_5, bool CallFunc_IsValid_ReturnValue_12, const struct FItemAudioConfig& CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_IsValid_ReturnValue_13, bool CallFunc_IsValid_ReturnValue_14, int32 CallFunc_AkEventActor_ReturnValue_10, bool CallFunc_IsValid_ReturnValue_15, TDelegate<void(class AValeriaCharacter* Character, bool IsSprinting)> K2Node_CreateDelegate_OutputDelegate_15, TDelegate<void(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity)> K2Node_CreateDelegate_OutputDelegate_16, TDelegate<void(const struct FVector& Location)> K2Node_CreateDelegate_OutputDelegate_17, TDelegate<void(bool IsClimbing, EValeriaClimbDashDirection Direction)> K2Node_CreateDelegate_OutputDelegate_18, EEndPlayReason K2Node_Event_EndPlayReason, bool CallFunc_IsServer_ReturnValue_1, bool CallFunc_Not_PreBool_ReturnValue_2, TDelegate<void(bool IsClimbing)> K2Node_CreateDelegate_OutputDelegate_19, bool CallFunc_IsLocallyControlled_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_16, float CallFunc_RetriggerableDelay_Duration_ImplicitCast, double K2Node_VariableSet_NewRotationYaw_ImplicitCast, float CallFunc_K2_SetTimer_Time_ImplicitCast, float CallFunc_K2_SetTimer_Time_ImplicitCast_1);
	void Falling();
	void Find_Distance_to_Ground(class AValeriaMoveablePawn* Param_Character, bool* Hit, double* Distance, TArray<class AActor*>& Temp_object_Variable, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, double CallFunc_Subtract_DoubleDouble_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FHitResult& CallFunc_LineTraceSingle_OutHit, bool CallFunc_LineTraceSingle_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, const struct FVector& CallFunc_BreakHitResult_Location, const struct FVector& CallFunc_BreakHitResult_ImpactPoint, const struct FVector& CallFunc_BreakHitResult_Normal, const struct FVector& CallFunc_BreakHitResult_ImpactNormal, class UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, class AActor* CallFunc_BreakHitResult_HitActor, class UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, class FName CallFunc_BreakHitResult_HitBoneName, class FName CallFunc_BreakHitResult_BoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_ElementIndex, int32 CallFunc_BreakHitResult_FaceIndex, const struct FVector& CallFunc_BreakHitResult_TraceStart, const struct FVector& CallFunc_BreakHitResult_TraceEnd, double K2Node_FunctionResult_Distance_ImplicitCast);
	void GetGliderLoop(class UAkAudioEvent** Output, class UVAL_CharacterCustomizationComponent* CallFunc_GetCharacterCustomizationComponent_ReturnValue, struct FVAL_CharacterCustomizationLoadout& CallFunc_GetLoadout_ReturnValue, class UObject* CallFunc_LoadAsset_Blocking_ReturnValue, class UVAL_CharacterCustomizationItem_GliderTrail* K2Node_DynamicCast_AsVAL_Character_Customization_Item_Glider_Trail, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, const struct FVAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig& CallFunc_TryGetBodyTypeSpecificConfig_GliderTrail_OutBodyTypeSpecificConfig, bool CallFunc_TryGetBodyTypeSpecificConfig_GliderTrail_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, class UObject* CallFunc_LoadAsset_Blocking_ReturnValue_1, class UAkAudioEvent* K2Node_DynamicCast_AsAk_Audio_Event, bool K2Node_DynamicCast_bSuccess_1, bool CallFunc_IsValid_ReturnValue_1);
	void GliderChanged(bool IsGliding);
	void Gliding();
	void GlidingEnd();
	void GlidingStart();
	void ItemAddedSFX(const struct FValeriaItem& Param_Item);
	void MovementModeChanged(class AValeriaMoveablePawn* Pawn, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void MovementUpdate(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	void OnPossessionChanged();
	void PlayEquipSound(TSubclassOf<class AEquipViewActor> Param_Class, bool Unequip, class UClass* K2Node_ClassDynamicCast_AsBP_Equip_View_Actor, bool K2Node_ClassDynamicCast_bSuccess, bool CallFunc_IsValidClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UAkAudioEvent* CallFunc_Get_Audio_Event_AudioEvent, bool CallFunc_Get_Audio_Event_Found, class UAkAudioEvent* CallFunc_Get_Audio_Event_AudioEvent_1, bool CallFunc_Get_Audio_Event_Found_1, bool Temp_bool_Variable, class UAkAudioEvent* K2Node_Select_Default, int32 CallFunc_AkEventActor_ReturnValue);
	void PlayPickWiffFX(TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType, class AActor* Instigator, int32 Temp_int_Variable, int32 Temp_int_Variable_1, int32 Temp_int_Variable_2, int32 Temp_int_Variable_3, int32 Temp_int_Variable_4, int32 Temp_int_Variable_5, int32 Temp_int_Variable_6, int32 Temp_int_Variable_7, int32 Temp_int_Variable_8, int32 Temp_int_Variable_9, int32 Temp_int_Variable_10, int32 Temp_int_Variable_11, int32 Temp_int_Variable_12, int32 Temp_int_Variable_13, int32 Temp_int_Variable_14, int32 Temp_int_Variable_15, int32 Temp_int_Variable_16, int32 Temp_int_Variable_17, TArray<class AActor*>& Temp_object_Variable, int32 Temp_int_Variable_18, class UObject* CallFunc_LoadAsset_Blocking_ReturnValue, class UVAL_ItemTypeDefinitionAsset* K2Node_DynamicCast_AsItem_Type_Definition, bool K2Node_DynamicCast_bSuccess, int32 Temp_int_Variable_19, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasTag_ReturnValue, int32 Temp_int_Variable_20, EPhysicalSurface Temp_byte_Variable, TArray<EObjectTypeQuery>& K2Node_MakeArray_Array, class USkeletalMeshComponent* CallFunc_GetComponentByClass_ReturnValue, class UPhysicalMaterial* Temp_object_Variable_1, class UNiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, const struct FVector& CallFunc_Add_VectorVector_ReturnValue_1, bool Temp_bool_Variable, const struct FHitResult& CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, const struct FVector& CallFunc_BreakHitResult_Location, const struct FVector& CallFunc_BreakHitResult_ImpactPoint, const struct FVector& CallFunc_BreakHitResult_Normal, const struct FVector& CallFunc_BreakHitResult_ImpactNormal, class UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, class AActor* CallFunc_BreakHitResult_HitActor, class UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, class FName CallFunc_BreakHitResult_HitBoneName, class FName CallFunc_BreakHitResult_BoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_ElementIndex, int32 CallFunc_BreakHitResult_FaceIndex, const struct FVector& CallFunc_BreakHitResult_TraceStart, const struct FVector& CallFunc_BreakHitResult_TraceEnd, class UNiagaraComponent* CallFunc_SpawnSystemAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue_2, bool CallFunc_IsValid_ReturnValue_3, class UPhysicalMaterial* K2Node_Select_Default, const struct FStruct_Physmat& CallFunc_GetSurfaceEffect_Value, bool CallFunc_GetSurfaceEffect_ReturnValue, class UAkComponent* CallFunc_AkEventLocation_AkComponent, int32 CallFunc_AkEventLocation_Playing_ID, int32 K2Node_Select_Default_1);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReplicatedAudioEvent(class AActor* Actor, bool WasDamaged, TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType, class AActor* Instigator);
	void SetDefaultMixState();
	void SprintChange(class AValeriaCharacter* Param_Character, bool Param_IsSprinting);
	void UnbindItemAudio();
	void UnbindMovementAudio();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Comp_Player_Audio_C">();
	}
	static class UComp_Player_Audio_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComp_Player_Audio_C>();
	}
};
static_assert(alignof(UComp_Player_Audio_C) == 0x000008, "Wrong alignment on UComp_Player_Audio_C");
static_assert(sizeof(UComp_Player_Audio_C) == 0x0001A8, "Wrong size on UComp_Player_Audio_C");
static_assert(offsetof(UComp_Player_Audio_C, UberGraphFrame) == 0x0000A0, "Member 'UComp_Player_Audio_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, Character) == 0x0000A8, "Member 'UComp_Player_Audio_C::Character' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, IsLocal) == 0x0000B0, "Member 'UComp_Player_Audio_C::IsLocal' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, DefaultItemAddedSound) == 0x0000B8, "Member 'UComp_Player_Audio_C::DefaultItemAddedSound' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, IsFalling) == 0x0000C0, "Member 'UComp_Player_Audio_C::IsFalling' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, FallingRTPC) == 0x0000C8, "Member 'UComp_Player_Audio_C::FallingRTPC' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, FallingSound) == 0x0000D0, "Member 'UComp_Player_Audio_C::FallingSound' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, CloseToGroundSound) == 0x0000D8, "Member 'UComp_Player_Audio_C::CloseToGroundSound' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, FalltimeThreshold) == 0x0000E0, "Member 'UComp_Player_Audio_C::FalltimeThreshold' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, FallRampDistance) == 0x0000E8, "Member 'UComp_Player_Audio_C::FallRampDistance' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, LastRotationYaw) == 0x0000F0, "Member 'UComp_Player_Audio_C::LastRotationYaw' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, NewRotationYaw) == 0x0000F8, "Member 'UComp_Player_Audio_C::NewRotationYaw' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, CloseToGroundSoundID) == 0x000100, "Member 'UComp_Player_Audio_C::CloseToGroundSoundID' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, GliderLoopID) == 0x000104, "Member 'UComp_Player_Audio_C::GliderLoopID' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, GlidingLoopDefaultSound) == 0x000108, "Member 'UComp_Player_Audio_C::GlidingLoopDefaultSound' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, RTPC_UpdateTime) == 0x000110, "Member 'UComp_Player_Audio_C::RTPC_UpdateTime' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, GliderEndSound) == 0x000118, "Member 'UComp_Player_Audio_C::GliderEndSound' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, PickaxeMissEffects) == 0x000120, "Member 'UComp_Player_Audio_C::PickaxeMissEffects' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, DefaultItemPlacedSound) == 0x000128, "Member 'UComp_Player_Audio_C::DefaultItemPlacedSound' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, Item) == 0x000130, "Member 'UComp_Player_Audio_C::Item' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, GroupItemPickupThreshold) == 0x000140, "Member 'UComp_Player_Audio_C::GroupItemPickupThreshold' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, GroupItemAddedSound) == 0x000148, "Member 'UComp_Player_Audio_C::GroupItemAddedSound' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, ListenerDistance) == 0x000150, "Member 'UComp_Player_Audio_C::ListenerDistance' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, ListenerPadding) == 0x000158, "Member 'UComp_Player_Audio_C::ListenerPadding' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, IsSprinting) == 0x000160, "Member 'UComp_Player_Audio_C::IsSprinting' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, Moved) == 0x000161, "Member 'UComp_Player_Audio_C::Moved' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, BeginSprintSound) == 0x000168, "Member 'UComp_Player_Audio_C::BeginSprintSound' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, BeginRunSound) == 0x000170, "Member 'UComp_Player_Audio_C::BeginRunSound' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, ForceUnequipSound) == 0x000178, "Member 'UComp_Player_Audio_C::ForceUnequipSound' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, EquipmentComponent) == 0x000180, "Member 'UComp_Player_Audio_C::EquipmentComponent' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, FallVelocity) == 0x000188, "Member 'UComp_Player_Audio_C::FallVelocity' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, GlidingTimerHandle) == 0x000190, "Member 'UComp_Player_Audio_C::GlidingTimerHandle' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, FallingTimerHandle) == 0x000198, "Member 'UComp_Player_Audio_C::FallingTimerHandle' has a wrong offset!");
static_assert(offsetof(UComp_Player_Audio_C, GliderLoopToPlay) == 0x0001A0, "Member 'UComp_Player_Audio_C::GliderLoopToPlay' has a wrong offset!");

}

