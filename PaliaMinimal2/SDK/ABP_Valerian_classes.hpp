#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Valerian

#include "Basic.hpp"

#include "ABP_Valerian_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Palia_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Valerian.ABP_Valerian_C
// 0x0CC0 (0x1010 - 0x0350)
class UABP_Valerian_C : public UAnimInstance
{
public:
	uint8                                         Pad_4C6B[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Valerian::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0358(0x0002)(HasGetValueTypeHash)
	uint8                                         Pad_4C6C[0x6];                                     // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0360(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0368(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0370(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x0390(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x03B8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x03E0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0408(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0430(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0458(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0480(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x04A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x04D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x04F8(0x0028)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_3;             // 0x0520(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x05E0(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_2;             // 0x0600(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x06C0(0x0020)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping_1;           // 0x06E0(0x00B8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0798(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping_1;             // 0x07B8(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0878(0x0020)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping;               // 0x0898(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0958(0x0020)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping;             // 0x0978(0x00B8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0A30(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0A50(0x00C8)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x0B18(0x0080)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0B98(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x0C18(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0C40(0x0048)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0C88(0x00F0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0D78(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0DC0(0x0048)()
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization;                     // 0x0E08(0x0110)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x0F18(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0F40(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0F68(0x0028)()
	bool                                          IsInAir_;                                          // 0x0F90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C6D[0x7];                                     // 0x0F91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed;                                             // 0x0F98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UValeriaBaseMovementComponent*          Movement_Component;                                // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AValeriaVillagerCharacter*              As_Valeria_Villager_Character;                     // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        PassedDeltaTime;                                   // 0x0FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UpperAsFull;                                       // 0x0FB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C6E[0x7];                                     // 0x0FB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        UpperBodyBlend;                                    // 0x0FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDialogueComponent*                     Dialohue;                                          // 0x0FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocalEngagedDialogue;                            // 0x0FD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEngagedInDialogue;                               // 0x0FD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C6F[0x6];                                     // 0x0FD2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EligableFidgetNames;                               // 0x0FD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ShouldFidget;                                      // 0x0FE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFidgeting;                                       // 0x0FE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C70[0x6];                                     // 0x0FEA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PercentChangeToFidget;                             // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FidgetName;                                        // 0x0FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FidgetTimer;                                       // 0x1000(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         LastFidgetEndTime;                                 // 0x1008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinimumSecondsBetweenFidgets;                      // 0x100C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_EnteringFidgetNPC();
	void AnimNotify_LeavingFidgetNPC();
	void BlueprintBeginPlay();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void CustomEvent_0(class UDialogueComponent* Diag, class AValeriaCharacter* PlayerParticipant);
	void CustomEvent_1(class UDialogueComponent* Diag, class AValeriaCharacter* PlayerParticipant);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Valerian_AnimGraphNode_TransitionResult_C5750D364AEAAEAFFE003A8421AB0318();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Valerian_AnimGraphNode_TransitionResult_F33871F04E5D1FA652F5F1A3558CDEA8();
	void ExecuteUbergraph_ABP_Valerian(int32 EntryPoint, bool CallFunc_Greater_DoubleDouble_ReturnValue, bool CallFunc_Less_DoubleDouble_ReturnValue, TDelegate<void(class UDialogueComponent* Diag, class AValeriaCharacter* PlayerParticipant)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(class UDialogueComponent* Diag, class AValeriaCharacter* PlayerParticipant)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(class AValeriaMoveablePawn* Pawn, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)> K2Node_CreateDelegate_OutputDelegate_2, float K2Node_Event_DeltaTimeX, class APawn* CallFunc_TryGetPawnOwner_ReturnValue, class AValeriaVillagerCharacter* K2Node_DynamicCast_AsValeria_Villager_Character, bool K2Node_DynamicCast_bSuccess, class AValeriaMoveablePawn* K2Node_CustomEvent_Pawn, EMovementMode K2Node_CustomEvent_PrevMovementMode, uint8 K2Node_CustomEvent_PreviousCustomMode, bool CallFunc_IsFalling_ReturnValue, const struct FVector& CallFunc_GetVelocity_ReturnValue, double CallFunc_VSize_ReturnValue, bool CallFunc_Greater_DoubleDouble_ReturnValue_1, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, float CallFunc_GetSlotMontageGlobalWeight_ReturnValue, class UDialogueComponent* K2Node_CustomEvent_diag_1, class AValeriaCharacter* K2Node_CustomEvent_playerParticipant_1, class UDialogueComponent* CallFunc_GetDialogue_ReturnValue, bool CallFunc_IsLocallyEngagedForDialogue_ReturnValue, class UDialogueComponent* K2Node_CustomEvent_diag, class AValeriaCharacter* K2Node_CustomEvent_playerParticipant, bool CallFunc_IsLocallyEngagedForDialogue_ReturnValue_1, bool CallFunc_Array_IsNotEmpty_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate_3, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_1, double CallFunc_RandomFloat_ReturnValue, bool CallFunc_LessEqual_DoubleDouble_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_RandomInteger_ReturnValue, int32 CallFunc_GetValeriaTimestampSecs_ReturnValue, int32 CallFunc_GetValeriaTimestampSecs_ReturnValue_1, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_3, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_2, bool CallFunc_LessEqual_DoubleDouble_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue_4, bool CallFunc_BooleanAND_ReturnValue_5, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BPNE_CanFidget_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, double K2Node_VariableSet_PassedDeltaTime_ImplicitCast, double K2Node_VariableSet_UpperBodyBlend_ImplicitCast, double CallFunc_LessEqual_DoubleDouble_A_ImplicitCast);
	void IsInAir(class AValeriaMoveablePawn* Pawn, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void TryFidget();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Valerian_C">();
	}
	static class UABP_Valerian_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Valerian_C>();
	}
};
static_assert(alignof(UABP_Valerian_C) == 0x000010, "Wrong alignment on UABP_Valerian_C");
static_assert(sizeof(UABP_Valerian_C) == 0x001010, "Wrong size on UABP_Valerian_C");
static_assert(offsetof(UABP_Valerian_C, UberGraphFrame) == 0x000350, "Member 'UABP_Valerian_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, __AnimBlueprintMutables) == 0x000358, "Member 'UABP_Valerian_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimBlueprintExtension_PropertyAccess) == 0x000360, "Member 'UABP_Valerian_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimBlueprintExtension_Base) == 0x000368, "Member 'UABP_Valerian_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_Root) == 0x000370, "Member 'UABP_Valerian_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_TransitionResult_9) == 0x000390, "Member 'UABP_Valerian_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_TransitionResult_8) == 0x0003B8, "Member 'UABP_Valerian_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_TransitionResult_7) == 0x0003E0, "Member 'UABP_Valerian_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_TransitionResult_6) == 0x000408, "Member 'UABP_Valerian_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_TransitionResult_5) == 0x000430, "Member 'UABP_Valerian_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_TransitionResult_4) == 0x000458, "Member 'UABP_Valerian_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_TransitionResult_3) == 0x000480, "Member 'UABP_Valerian_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_TransitionResult_2) == 0x0004A8, "Member 'UABP_Valerian_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_TransitionResult_1) == 0x0004D0, "Member 'UABP_Valerian_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_TransitionResult) == 0x0004F8, "Member 'UABP_Valerian_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_PlaySequenceByMapping_3) == 0x000520, "Member 'UABP_Valerian_C::AnimGraphNode_PlaySequenceByMapping_3' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_StateResult_5) == 0x0005E0, "Member 'UABP_Valerian_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_PlaySequenceByMapping_2) == 0x000600, "Member 'UABP_Valerian_C::AnimGraphNode_PlaySequenceByMapping_2' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_StateResult_4) == 0x0006C0, "Member 'UABP_Valerian_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_PlayBlendSpaceByMapping_1) == 0x0006E0, "Member 'UABP_Valerian_C::AnimGraphNode_PlayBlendSpaceByMapping_1' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_StateResult_3) == 0x000798, "Member 'UABP_Valerian_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_PlaySequenceByMapping_1) == 0x0007B8, "Member 'UABP_Valerian_C::AnimGraphNode_PlaySequenceByMapping_1' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_StateResult_2) == 0x000878, "Member 'UABP_Valerian_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_PlaySequenceByMapping) == 0x000898, "Member 'UABP_Valerian_C::AnimGraphNode_PlaySequenceByMapping' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_StateResult_1) == 0x000958, "Member 'UABP_Valerian_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_PlayBlendSpaceByMapping) == 0x000978, "Member 'UABP_Valerian_C::AnimGraphNode_PlayBlendSpaceByMapping' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_StateResult) == 0x000A30, "Member 'UABP_Valerian_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_StateMachine) == 0x000A50, "Member 'UABP_Valerian_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_SaveCachedPose_1) == 0x000B18, "Member 'UABP_Valerian_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_SaveCachedPose) == 0x000B98, "Member 'UABP_Valerian_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_UseCachedPose_3) == 0x000C18, "Member 'UABP_Valerian_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_Slot_1) == 0x000C40, "Member 'UABP_Valerian_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_LayeredBoneBlend) == 0x000C88, "Member 'UABP_Valerian_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_Slot) == 0x000D78, "Member 'UABP_Valerian_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_BlendListByBool) == 0x000DC0, "Member 'UABP_Valerian_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_Inertialization) == 0x000E08, "Member 'UABP_Valerian_C::AnimGraphNode_Inertialization' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_UseCachedPose_2) == 0x000F18, "Member 'UABP_Valerian_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_UseCachedPose_1) == 0x000F40, "Member 'UABP_Valerian_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, AnimGraphNode_UseCachedPose) == 0x000F68, "Member 'UABP_Valerian_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, IsInAir_) == 0x000F90, "Member 'UABP_Valerian_C::IsInAir_' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, Speed) == 0x000F98, "Member 'UABP_Valerian_C::Speed' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, Movement_Component) == 0x000FA0, "Member 'UABP_Valerian_C::Movement_Component' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, As_Valeria_Villager_Character) == 0x000FA8, "Member 'UABP_Valerian_C::As_Valeria_Villager_Character' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, PassedDeltaTime) == 0x000FB0, "Member 'UABP_Valerian_C::PassedDeltaTime' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, UpperAsFull) == 0x000FB8, "Member 'UABP_Valerian_C::UpperAsFull' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, UpperBodyBlend) == 0x000FC0, "Member 'UABP_Valerian_C::UpperBodyBlend' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, Dialohue) == 0x000FC8, "Member 'UABP_Valerian_C::Dialohue' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, IsLocalEngagedDialogue) == 0x000FD0, "Member 'UABP_Valerian_C::IsLocalEngagedDialogue' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, IsEngagedInDialogue) == 0x000FD1, "Member 'UABP_Valerian_C::IsEngagedInDialogue' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, EligableFidgetNames) == 0x000FD8, "Member 'UABP_Valerian_C::EligableFidgetNames' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, ShouldFidget) == 0x000FE8, "Member 'UABP_Valerian_C::ShouldFidget' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, IsFidgeting) == 0x000FE9, "Member 'UABP_Valerian_C::IsFidgeting' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, PercentChangeToFidget) == 0x000FF0, "Member 'UABP_Valerian_C::PercentChangeToFidget' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, FidgetName) == 0x000FF8, "Member 'UABP_Valerian_C::FidgetName' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, FidgetTimer) == 0x001000, "Member 'UABP_Valerian_C::FidgetTimer' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, LastFidgetEndTime) == 0x001008, "Member 'UABP_Valerian_C::LastFidgetEndTime' has a wrong offset!");
static_assert(offsetof(UABP_Valerian_C, MinimumSecondsBetweenFidgets) == 0x00100C, "Member 'UABP_Valerian_C::MinimumSecondsBetweenFidgets' has a wrong offset!");

}

