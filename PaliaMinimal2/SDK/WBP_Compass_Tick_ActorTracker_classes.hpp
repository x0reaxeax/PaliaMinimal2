#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Compass_Tick_ActorTracker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Palia_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "WBP_Compass_Tick_Base_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C
// 0x0260 (0x0538 - 0x02D8)
class UWBP_Compass_Tick_ActorTracker_C final : public UWBP_Compass_Tick_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WBP_Compass_Tick_ActorTracker_C;    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           BaseCanvas;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_IconColor;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVALUI_Border_Styled*                   Border_VillagerIcon;                               // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVALUI_BoxDropShadow*                   DropShadow;                                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon;                                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Activity;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Down;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Quest;                                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Quest_Backer;                                 // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon_Up;                                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Focused;                                     // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_PartyMemberFocused;                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_RadialGradient;                              // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_VillagerIcon;                                // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVALUI_TextBlock_Styled*                Text_Distance;                                     // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FTrackedItemInfo                       TrackedItemInfo;                                   // 0x0358(0x0148)(Edit, BlueprintVisible)
	double                                        Config_VerticalIndicator_MinVerticalDistanceToDraw; // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Config_Vertical_Indicator_Min_Vertical_Distance_to_Draw_if_Target_Hidden; // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Config_VerticalIndicator_HorizontalDistance_MaxDist; // 0x04B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Config_VerticalIndicator_HorizontalDistance_FadeInDist; // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Config_VerticalIndicator_MinCameraAngleToDraw;     // 0x04C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalIndicator_UpArrow_Alpha;                   // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalIndicator_DownArrow_Alpha;                 // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DegreesFromCenterAbs;                              // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldShowDistance;                                // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F34[0x7];                                     // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetPosition;                                    // 0x04E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DotProductFromCenter;                              // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetToActorVector;                               // 0x0508(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetToActorVectorLength;                         // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalIndicator_HorizontalDistance_FadeRange;    // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVALUI_TextBlockStyle*                  DistanceTextStyleOverride;                         // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BindVillagerActivityUpdated(class AActor* NewParam);
	void CanHitTarget(bool* CanHit, TArray<class AActor*>& Temp_object_Variable, TArray<EObjectTypeQuery>& K2Node_MakeArray_Array, class APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_1, bool CallFunc_IsValid_ReturnValue, const struct FHitResult& CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, const struct FVector& CallFunc_BreakHitResult_Location, const struct FVector& CallFunc_BreakHitResult_ImpactPoint, const struct FVector& CallFunc_BreakHitResult_Normal, const struct FVector& CallFunc_BreakHitResult_ImpactNormal, class UPhysicalMaterial* CallFunc_BreakHitResult_PhysMat, class AActor* CallFunc_BreakHitResult_HitActor, class UPrimitiveComponent* CallFunc_BreakHitResult_HitComponent, class FName CallFunc_BreakHitResult_HitBoneName, class FName CallFunc_BreakHitResult_BoneName, int32 CallFunc_BreakHitResult_HitItem, int32 CallFunc_BreakHitResult_ElementIndex, int32 CallFunc_BreakHitResult_FaceIndex, const struct FVector& CallFunc_BreakHitResult_TraceStart, const struct FVector& CallFunc_BreakHitResult_TraceEnd, bool CallFunc_EqualEqual_VectorVector_ReturnValue);
	void ChooseSecondaryIcon(TSoftObjectPtr<class UTexture2D>* Param_Icon, bool CallFunc_IsValidSoftObjectReference_ReturnValue);
	void Compute_VerticalIndicator_MinVerticalDistanceToDraw(const struct FVector& Param_TargetToActorVector, double* Value, double DeltaZ, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, double CallFunc_Abs_ReturnValue, bool CallFunc_LessEqual_DoubleDouble_ReturnValue, bool CallFunc_LessEqual_DoubleDouble_ReturnValue_1, bool CallFunc_CanHitTarget_CanHit, bool CallFunc_BooleanAND_ReturnValue);
	void Construct();
	void ExecuteUbergraph_WBP_Compass_Tick_ActorTracker(int32 EntryPoint, class AActor* K2Node_CustomEvent_NewParam_1, class AValeriaVillagerCharacter* K2Node_DynamicCast_AsValeria_Villager_Character, bool K2Node_DynamicCast_bSuccess, class AValeriaVillagerCharacter* K2Node_CustomEvent_Villager, const struct FVillagerActionInfo& K2Node_CustomEvent_actionInfo, TDelegate<void(class AValeriaVillagerCharacter* Villager, const struct FVillagerActionInfo& ActionInfo)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(class AValeriaVillagerCharacter* Villager, const struct FVillagerActionInfo& ActionInfo)> K2Node_CreateDelegate_OutputDelegate_1, bool K2Node_CustomEvent_IsFocused, class AActor* K2Node_CustomEvent_NewParam, class AValeriaVillagerCharacter* K2Node_DynamicCast_AsValeria_Villager_Character_1, bool K2Node_DynamicCast_bSuccess_1, bool CallFunc_GreaterEqual_DoubleDouble_ReturnValue, double CallFunc_Subtract_DoubleDouble_ReturnValue, double CallFunc_FClamp_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValid_ReturnValue_1, bool K2Node_Event_IsDesignTime);
	void GetIsFocused(bool* IsFocused, ESlateVisibility CallFunc_GetVisibility_ReturnValue, ESlateVisibility CallFunc_GetVisibility_ReturnValue_1, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue);
	void PreConstruct(bool IsDesignTime);
	void SetIcon(class UImage* Widget, class UImage* BackerWidget, TSoftObjectPtr<class UTexture2D> Param_Icon, ESlateVisibility IconVisibility, bool CallFunc_IsValidSoftObjectReference_ReturnValue, bool CallFunc_IsValid_ReturnValue);
	void SetShowDistanceIndicator(bool bShow, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, ESlateVisibility K2Node_Select_Default);
	void UnbindVillagerActivityUpdated(class AActor* NewParam);
	void UpdateDistanceText(double CallFunc_VSize_ReturnValue, double CallFunc_Multiply_DoubleDouble_ReturnValue, int64 CallFunc_Round64_ReturnValue, int32 CallFunc_Conv_Int64ToInt_ReturnValue, int64 CallFunc_Conv_IntToInt64_ReturnValue, const struct FFormatArgumentData& K2Node_MakeStruct_FormatArgumentData, TArray<struct FFormatArgumentData>& K2Node_MakeArray_Array, class FText CallFunc_Format_ReturnValue);
	void UpdateFocusedBacker(bool IsFocused);
	void UpdateFromItemInfo(ESlateVisibility QuestIconVisibility, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool Temp_bool_Variable, ESlateVisibility K2Node_Select_Default, bool CallFunc_NotEqual_SoftObjectReference_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_TextText_ReturnValue);
	void UpdatePositionInformation(class APawn* Pawn, bool CallFunc_IsValid_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_1, class APawn* CallFunc_GetOwningPlayerPawn_ReturnValue, double CallFunc_VSize_ReturnValue);
	void UpdateStatus();
	void UpdateVerticalIndicators(double InDeltaTime, bool DistanceCulled, double DistanceMeters, double VerticalIndicator_MinVerticalDistanceToDraw, double Param_VerticalIndicator_HorizontalDistance_FadeRange, bool ShouldDrawDown, bool ShouldDrawUp, bool ShouldDrawVerticalMarkersBasedOnDistance, double CallFunc_SelectFloat_ReturnValue, double CallFunc_SelectFloat_ReturnValue_1, double CallFunc_SelectFloat_ReturnValue_2, double CallFunc_FInterpTo_ReturnValue, double CallFunc_SelectFloat_ReturnValue_3, double CallFunc_FInterpTo_ReturnValue_1, bool CallFunc_LessEqual_DoubleDouble_ReturnValue, double CallFunc_Multiply_DoubleDouble_ReturnValue, bool CallFunc_Greater_DoubleDouble_ReturnValue, const struct FVector2D& CallFunc_Conv_VectorToVector2D_ReturnValue, double CallFunc_Compute_VerticalIndicator_MinVerticalDistanceToDraw_Value, double CallFunc_VSize2D_ReturnValue, bool CallFunc_Less_DoubleDouble_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, bool CallFunc_Greater_DoubleDouble_ReturnValue_1, bool CallFunc_Less_DoubleDouble_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, double CallFunc_Subtract_DoubleDouble_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue, double CallFunc_FClamp_ReturnValue, double CallFunc_Subtract_DoubleDouble_ReturnValue_1, double CallFunc_Multiply_DoubleDouble_ReturnValue_1, double CallFunc_Multiply_DoubleDouble_ReturnValue_2, double CallFunc_FInterpTo_ReturnValue_2, double CallFunc_FInterpTo_ReturnValue_3, float CallFunc_SetOpacity_InOpacity_ImplicitCast, float CallFunc_SetOpacity_InOpacity_ImplicitCast_1);
	void VillagerActionChanged(class AValeriaVillagerCharacter* Villager, const struct FVillagerActionInfo& ActionInfo);
	void VillagerActivityUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Compass_Tick_ActorTracker_C">();
	}
	static class UWBP_Compass_Tick_ActorTracker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Compass_Tick_ActorTracker_C>();
	}
};
static_assert(alignof(UWBP_Compass_Tick_ActorTracker_C) == 0x000008, "Wrong alignment on UWBP_Compass_Tick_ActorTracker_C");
static_assert(sizeof(UWBP_Compass_Tick_ActorTracker_C) == 0x000538, "Wrong size on UWBP_Compass_Tick_ActorTracker_C");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, UberGraphFrame_WBP_Compass_Tick_ActorTracker_C) == 0x0002D8, "Member 'UWBP_Compass_Tick_ActorTracker_C::UberGraphFrame_WBP_Compass_Tick_ActorTracker_C' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, BaseCanvas) == 0x0002E0, "Member 'UWBP_Compass_Tick_ActorTracker_C::BaseCanvas' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Border_IconColor) == 0x0002E8, "Member 'UWBP_Compass_Tick_ActorTracker_C::Border_IconColor' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Border_VillagerIcon) == 0x0002F0, "Member 'UWBP_Compass_Tick_ActorTracker_C::Border_VillagerIcon' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, DropShadow) == 0x0002F8, "Member 'UWBP_Compass_Tick_ActorTracker_C::DropShadow' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Icon) == 0x000300, "Member 'UWBP_Compass_Tick_ActorTracker_C::Icon' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Icon_Activity) == 0x000308, "Member 'UWBP_Compass_Tick_ActorTracker_C::Icon_Activity' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Icon_Down) == 0x000310, "Member 'UWBP_Compass_Tick_ActorTracker_C::Icon_Down' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Icon_Quest) == 0x000318, "Member 'UWBP_Compass_Tick_ActorTracker_C::Icon_Quest' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Icon_Quest_Backer) == 0x000320, "Member 'UWBP_Compass_Tick_ActorTracker_C::Icon_Quest_Backer' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Icon_Up) == 0x000328, "Member 'UWBP_Compass_Tick_ActorTracker_C::Icon_Up' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Image_Focused) == 0x000330, "Member 'UWBP_Compass_Tick_ActorTracker_C::Image_Focused' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Image_PartyMemberFocused) == 0x000338, "Member 'UWBP_Compass_Tick_ActorTracker_C::Image_PartyMemberFocused' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Image_RadialGradient) == 0x000340, "Member 'UWBP_Compass_Tick_ActorTracker_C::Image_RadialGradient' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Image_VillagerIcon) == 0x000348, "Member 'UWBP_Compass_Tick_ActorTracker_C::Image_VillagerIcon' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Text_Distance) == 0x000350, "Member 'UWBP_Compass_Tick_ActorTracker_C::Text_Distance' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, TrackedItemInfo) == 0x000358, "Member 'UWBP_Compass_Tick_ActorTracker_C::TrackedItemInfo' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Config_VerticalIndicator_MinVerticalDistanceToDraw) == 0x0004A0, "Member 'UWBP_Compass_Tick_ActorTracker_C::Config_VerticalIndicator_MinVerticalDistanceToDraw' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Config_Vertical_Indicator_Min_Vertical_Distance_to_Draw_if_Target_Hidden) == 0x0004A8, "Member 'UWBP_Compass_Tick_ActorTracker_C::Config_Vertical_Indicator_Min_Vertical_Distance_to_Draw_if_Target_Hidden' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Config_VerticalIndicator_HorizontalDistance_MaxDist) == 0x0004B0, "Member 'UWBP_Compass_Tick_ActorTracker_C::Config_VerticalIndicator_HorizontalDistance_MaxDist' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Config_VerticalIndicator_HorizontalDistance_FadeInDist) == 0x0004B8, "Member 'UWBP_Compass_Tick_ActorTracker_C::Config_VerticalIndicator_HorizontalDistance_FadeInDist' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, Config_VerticalIndicator_MinCameraAngleToDraw) == 0x0004C0, "Member 'UWBP_Compass_Tick_ActorTracker_C::Config_VerticalIndicator_MinCameraAngleToDraw' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, VerticalIndicator_UpArrow_Alpha) == 0x0004C8, "Member 'UWBP_Compass_Tick_ActorTracker_C::VerticalIndicator_UpArrow_Alpha' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, VerticalIndicator_DownArrow_Alpha) == 0x0004D0, "Member 'UWBP_Compass_Tick_ActorTracker_C::VerticalIndicator_DownArrow_Alpha' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, DegreesFromCenterAbs) == 0x0004D8, "Member 'UWBP_Compass_Tick_ActorTracker_C::DegreesFromCenterAbs' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, ShouldShowDistance) == 0x0004E0, "Member 'UWBP_Compass_Tick_ActorTracker_C::ShouldShowDistance' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, TargetPosition) == 0x0004E8, "Member 'UWBP_Compass_Tick_ActorTracker_C::TargetPosition' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, DotProductFromCenter) == 0x000500, "Member 'UWBP_Compass_Tick_ActorTracker_C::DotProductFromCenter' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, TargetToActorVector) == 0x000508, "Member 'UWBP_Compass_Tick_ActorTracker_C::TargetToActorVector' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, TargetToActorVectorLength) == 0x000520, "Member 'UWBP_Compass_Tick_ActorTracker_C::TargetToActorVectorLength' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, VerticalIndicator_HorizontalDistance_FadeRange) == 0x000528, "Member 'UWBP_Compass_Tick_ActorTracker_C::VerticalIndicator_HorizontalDistance_FadeRange' has a wrong offset!");
static_assert(offsetof(UWBP_Compass_Tick_ActorTracker_C, DistanceTextStyleOverride) == 0x000530, "Member 'UWBP_Compass_Tick_ActorTracker_C::DistanceTextStyleOverride' has a wrong offset!");

}

