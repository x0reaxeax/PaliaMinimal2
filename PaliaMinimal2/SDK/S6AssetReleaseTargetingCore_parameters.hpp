#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S6AssetReleaseTargetingCore

#include "Basic.hpp"

#include "S6AssetReleaseTargetingCore_structs.hpp"


namespace SDK::Params
{

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.EqualEqual
// 0x0014 (0x0014 - 0x0000)
struct S6ReleaseVersioningLibrary_EqualEqual final
{
public:
	struct FS6ReleaseVersionSpecification         A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EEF[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S6ReleaseVersioningLibrary_EqualEqual) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_EqualEqual");
static_assert(sizeof(S6ReleaseVersioningLibrary_EqualEqual) == 0x000014, "Wrong size on S6ReleaseVersioningLibrary_EqualEqual");
static_assert(offsetof(S6ReleaseVersioningLibrary_EqualEqual, A) == 0x000000, "Member 'S6ReleaseVersioningLibrary_EqualEqual::A' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_EqualEqual, B) == 0x000008, "Member 'S6ReleaseVersioningLibrary_EqualEqual::B' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_EqualEqual, ReturnValue) == 0x000010, "Member 'S6ReleaseVersioningLibrary_EqualEqual::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.GetCurrentReleaseVersionSpec
// 0x0008 (0x0008 - 0x0000)
struct S6ReleaseVersioningLibrary_GetCurrentReleaseVersionSpec final
{
public:
	struct FS6ReleaseVersionSpecification         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S6ReleaseVersioningLibrary_GetCurrentReleaseVersionSpec) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_GetCurrentReleaseVersionSpec");
static_assert(sizeof(S6ReleaseVersioningLibrary_GetCurrentReleaseVersionSpec) == 0x000008, "Wrong size on S6ReleaseVersioningLibrary_GetCurrentReleaseVersionSpec");
static_assert(offsetof(S6ReleaseVersioningLibrary_GetCurrentReleaseVersionSpec, ReturnValue) == 0x000000, "Member 'S6ReleaseVersioningLibrary_GetCurrentReleaseVersionSpec::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.GetFutureReleaseVersionSpec
// 0x0008 (0x0008 - 0x0000)
struct S6ReleaseVersioningLibrary_GetFutureReleaseVersionSpec final
{
public:
	struct FS6ReleaseVersionSpecification         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S6ReleaseVersioningLibrary_GetFutureReleaseVersionSpec) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_GetFutureReleaseVersionSpec");
static_assert(sizeof(S6ReleaseVersioningLibrary_GetFutureReleaseVersionSpec) == 0x000008, "Wrong size on S6ReleaseVersioningLibrary_GetFutureReleaseVersionSpec");
static_assert(offsetof(S6ReleaseVersioningLibrary_GetFutureReleaseVersionSpec, ReturnValue) == 0x000000, "Member 'S6ReleaseVersioningLibrary_GetFutureReleaseVersionSpec::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.GetUnspecifiedReleaseVersionSpec
// 0x0008 (0x0008 - 0x0000)
struct S6ReleaseVersioningLibrary_GetUnspecifiedReleaseVersionSpec final
{
public:
	struct FS6ReleaseVersionSpecification         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S6ReleaseVersioningLibrary_GetUnspecifiedReleaseVersionSpec) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_GetUnspecifiedReleaseVersionSpec");
static_assert(sizeof(S6ReleaseVersioningLibrary_GetUnspecifiedReleaseVersionSpec) == 0x000008, "Wrong size on S6ReleaseVersioningLibrary_GetUnspecifiedReleaseVersionSpec");
static_assert(offsetof(S6ReleaseVersioningLibrary_GetUnspecifiedReleaseVersionSpec, ReturnValue) == 0x000000, "Member 'S6ReleaseVersioningLibrary_GetUnspecifiedReleaseVersionSpec::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.Greater
// 0x0014 (0x0014 - 0x0000)
struct S6ReleaseVersioningLibrary_Greater final
{
public:
	struct FS6ReleaseVersionSpecification         A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF0[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S6ReleaseVersioningLibrary_Greater) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_Greater");
static_assert(sizeof(S6ReleaseVersioningLibrary_Greater) == 0x000014, "Wrong size on S6ReleaseVersioningLibrary_Greater");
static_assert(offsetof(S6ReleaseVersioningLibrary_Greater, A) == 0x000000, "Member 'S6ReleaseVersioningLibrary_Greater::A' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_Greater, B) == 0x000008, "Member 'S6ReleaseVersioningLibrary_Greater::B' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_Greater, ReturnValue) == 0x000010, "Member 'S6ReleaseVersioningLibrary_Greater::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.GreaterEqual
// 0x0014 (0x0014 - 0x0000)
struct S6ReleaseVersioningLibrary_GreaterEqual final
{
public:
	struct FS6ReleaseVersionSpecification         A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF1[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S6ReleaseVersioningLibrary_GreaterEqual) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_GreaterEqual");
static_assert(sizeof(S6ReleaseVersioningLibrary_GreaterEqual) == 0x000014, "Wrong size on S6ReleaseVersioningLibrary_GreaterEqual");
static_assert(offsetof(S6ReleaseVersioningLibrary_GreaterEqual, A) == 0x000000, "Member 'S6ReleaseVersioningLibrary_GreaterEqual::A' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_GreaterEqual, B) == 0x000008, "Member 'S6ReleaseVersioningLibrary_GreaterEqual::B' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_GreaterEqual, ReturnValue) == 0x000010, "Member 'S6ReleaseVersioningLibrary_GreaterEqual::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.IsValid
// 0x000C (0x000C - 0x0000)
struct S6ReleaseVersioningLibrary_IsValid final
{
public:
	struct FS6ReleaseVersionSpecification         Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF2[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S6ReleaseVersioningLibrary_IsValid) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_IsValid");
static_assert(sizeof(S6ReleaseVersioningLibrary_IsValid) == 0x00000C, "Wrong size on S6ReleaseVersioningLibrary_IsValid");
static_assert(offsetof(S6ReleaseVersioningLibrary_IsValid, Value) == 0x000000, "Member 'S6ReleaseVersioningLibrary_IsValid::Value' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_IsValid, ReturnValue) == 0x000008, "Member 'S6ReleaseVersioningLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.Less
// 0x0014 (0x0014 - 0x0000)
struct S6ReleaseVersioningLibrary_Less final
{
public:
	struct FS6ReleaseVersionSpecification         A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF3[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S6ReleaseVersioningLibrary_Less) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_Less");
static_assert(sizeof(S6ReleaseVersioningLibrary_Less) == 0x000014, "Wrong size on S6ReleaseVersioningLibrary_Less");
static_assert(offsetof(S6ReleaseVersioningLibrary_Less, A) == 0x000000, "Member 'S6ReleaseVersioningLibrary_Less::A' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_Less, B) == 0x000008, "Member 'S6ReleaseVersioningLibrary_Less::B' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_Less, ReturnValue) == 0x000010, "Member 'S6ReleaseVersioningLibrary_Less::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.LessEqual
// 0x0014 (0x0014 - 0x0000)
struct S6ReleaseVersioningLibrary_LessEqual final
{
public:
	struct FS6ReleaseVersionSpecification         A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF4[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S6ReleaseVersioningLibrary_LessEqual) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_LessEqual");
static_assert(sizeof(S6ReleaseVersioningLibrary_LessEqual) == 0x000014, "Wrong size on S6ReleaseVersioningLibrary_LessEqual");
static_assert(offsetof(S6ReleaseVersioningLibrary_LessEqual, A) == 0x000000, "Member 'S6ReleaseVersioningLibrary_LessEqual::A' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_LessEqual, B) == 0x000008, "Member 'S6ReleaseVersioningLibrary_LessEqual::B' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_LessEqual, ReturnValue) == 0x000010, "Member 'S6ReleaseVersioningLibrary_LessEqual::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.Max
// 0x0018 (0x0018 - 0x0000)
struct S6ReleaseVersioningLibrary_Max final
{
public:
	struct FS6ReleaseVersionSpecification         A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S6ReleaseVersioningLibrary_Max) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_Max");
static_assert(sizeof(S6ReleaseVersioningLibrary_Max) == 0x000018, "Wrong size on S6ReleaseVersioningLibrary_Max");
static_assert(offsetof(S6ReleaseVersioningLibrary_Max, A) == 0x000000, "Member 'S6ReleaseVersioningLibrary_Max::A' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_Max, B) == 0x000008, "Member 'S6ReleaseVersioningLibrary_Max::B' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_Max, ReturnValue) == 0x000010, "Member 'S6ReleaseVersioningLibrary_Max::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.Min
// 0x0018 (0x0018 - 0x0000)
struct S6ReleaseVersioningLibrary_Min final
{
public:
	struct FS6ReleaseVersionSpecification         A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S6ReleaseVersioningLibrary_Min) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_Min");
static_assert(sizeof(S6ReleaseVersioningLibrary_Min) == 0x000018, "Wrong size on S6ReleaseVersioningLibrary_Min");
static_assert(offsetof(S6ReleaseVersioningLibrary_Min, A) == 0x000000, "Member 'S6ReleaseVersioningLibrary_Min::A' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_Min, B) == 0x000008, "Member 'S6ReleaseVersioningLibrary_Min::B' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_Min, ReturnValue) == 0x000010, "Member 'S6ReleaseVersioningLibrary_Min::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.NotEqual
// 0x0014 (0x0014 - 0x0000)
struct S6ReleaseVersioningLibrary_NotEqual final
{
public:
	struct FS6ReleaseVersionSpecification         A;                                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         B;                                                 // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF5[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S6ReleaseVersioningLibrary_NotEqual) == 0x000004, "Wrong alignment on S6ReleaseVersioningLibrary_NotEqual");
static_assert(sizeof(S6ReleaseVersioningLibrary_NotEqual) == 0x000014, "Wrong size on S6ReleaseVersioningLibrary_NotEqual");
static_assert(offsetof(S6ReleaseVersioningLibrary_NotEqual, A) == 0x000000, "Member 'S6ReleaseVersioningLibrary_NotEqual::A' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_NotEqual, B) == 0x000008, "Member 'S6ReleaseVersioningLibrary_NotEqual::B' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_NotEqual, ReturnValue) == 0x000010, "Member 'S6ReleaseVersioningLibrary_NotEqual::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.ToString
// 0x0018 (0x0018 - 0x0000)
struct S6ReleaseVersioningLibrary_ToString final
{
public:
	struct FS6ReleaseVersionSpecification         Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S6ReleaseVersioningLibrary_ToString) == 0x000008, "Wrong alignment on S6ReleaseVersioningLibrary_ToString");
static_assert(sizeof(S6ReleaseVersioningLibrary_ToString) == 0x000018, "Wrong size on S6ReleaseVersioningLibrary_ToString");
static_assert(offsetof(S6ReleaseVersioningLibrary_ToString, Value) == 0x000000, "Member 'S6ReleaseVersioningLibrary_ToString::Value' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_ToString, ReturnValue) == 0x000008, "Member 'S6ReleaseVersioningLibrary_ToString::ReturnValue' has a wrong offset!");

// Function S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary.TryParse
// 0x0020 (0x0020 - 0x0000)
struct S6ReleaseVersioningLibrary_TryParse final
{
public:
	class FString                                 VersionString;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FS6ReleaseVersionSpecification         OutReleaseVersion;                                 // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EF6[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S6ReleaseVersioningLibrary_TryParse) == 0x000008, "Wrong alignment on S6ReleaseVersioningLibrary_TryParse");
static_assert(sizeof(S6ReleaseVersioningLibrary_TryParse) == 0x000020, "Wrong size on S6ReleaseVersioningLibrary_TryParse");
static_assert(offsetof(S6ReleaseVersioningLibrary_TryParse, VersionString) == 0x000000, "Member 'S6ReleaseVersioningLibrary_TryParse::VersionString' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_TryParse, OutReleaseVersion) == 0x000010, "Member 'S6ReleaseVersioningLibrary_TryParse::OutReleaseVersion' has a wrong offset!");
static_assert(offsetof(S6ReleaseVersioningLibrary_TryParse, ReturnValue) == 0x000018, "Member 'S6ReleaseVersioningLibrary_TryParse::ReturnValue' has a wrong offset!");

}

