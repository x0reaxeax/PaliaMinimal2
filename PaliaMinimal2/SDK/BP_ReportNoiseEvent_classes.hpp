#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ReportNoiseEvent

#include "Basic.hpp"

#include "Palia_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ReportNoiseEvent.BP_ReportNoiseEvent_C
// 0x0008 (0x0040 - 0x0038)
class UBP_ReportNoiseEvent_C final : public UAnimNotify
{
public:
	EValeriaNoiseEventVolume                      NoiseVolume;                                       // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EValeriaNoiseEventType                        NoiseType;                                         // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, struct FAnimNotifyEventReference& EventReference, bool StealthMask, const struct FTimeOfDayFilter& TimeOfDay, double DesiredEventRange, EValeriaNoiseEventType Temp_byte_Variable, class AActor* CallFunc_GetOwner_ReturnValue, EValeriaNoiseEventVolume Temp_byte_Variable_1, int32 CallFunc_GetStealthMaskFromActor_StealthMask, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, EValeriaNoiseEventVolume Temp_byte_Variable_2, EValeriaNoiseEventVolume Temp_byte_Variable_3, EValeriaNoiseEventVolume Temp_byte_Variable_4, EValeriaNoiseEventVolume Temp_byte_Variable_5, EValeriaNoiseEventVolume Temp_byte_Variable_6, EValeriaNoiseEventVolume Temp_byte_Variable_7, bool Temp_bool_Variable, EValeriaNoiseEventVolume K2Node_Select_Default, bool CallFunc_EqualEqual_ByteByte_ReturnValue, EValeriaNoiseEventVolume K2Node_Select_Default_1) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ReportNoiseEvent_C">();
	}
	static class UBP_ReportNoiseEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ReportNoiseEvent_C>();
	}
};
static_assert(alignof(UBP_ReportNoiseEvent_C) == 0x000008, "Wrong alignment on UBP_ReportNoiseEvent_C");
static_assert(sizeof(UBP_ReportNoiseEvent_C) == 0x000040, "Wrong size on UBP_ReportNoiseEvent_C");
static_assert(offsetof(UBP_ReportNoiseEvent_C, NoiseVolume) == 0x000038, "Member 'UBP_ReportNoiseEvent_C::NoiseVolume' has a wrong offset!");
static_assert(offsetof(UBP_ReportNoiseEvent_C, NoiseType) == 0x000039, "Member 'UBP_ReportNoiseEvent_C::NoiseType' has a wrong offset!");

}

