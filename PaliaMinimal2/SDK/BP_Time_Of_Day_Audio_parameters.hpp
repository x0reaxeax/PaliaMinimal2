#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Time_Of_Day_Audio

#include "Basic.hpp"

#include "Palia_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Time_Of_Day_Audio.BP_Time_Of_Day_Audio_C.DoesTimeMatchCurrentTime
// 0x0018 (0x0018 - 0x0000)
struct BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Minutes;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D8A[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Hours_and_Minutes_ClockHour;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Hours_and_Minutes_ClockMinute;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime) == 0x000004, "Wrong alignment on BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime");
static_assert(sizeof(BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime) == 0x000018, "Wrong size on BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime, Hour) == 0x000000, "Member 'BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime::Hour' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime, Minutes) == 0x000004, "Member 'BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime::Minutes' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime, ReturnValue) == 0x000008, "Member 'BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime, CallFunc_Get_Hours_and_Minutes_ClockHour) == 0x00000C, "Member 'BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime::CallFunc_Get_Hours_and_Minutes_ClockHour' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime, CallFunc_Get_Hours_and_Minutes_ClockMinute) == 0x000010, "Member 'BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime::CallFunc_Get_Hours_and_Minutes_ClockMinute' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000015, "Member 'BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'BP_Time_Of_Day_Audio_C_DoesTimeMatchCurrentTime::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_Time_Of_Day_Audio.BP_Time_Of_Day_Audio_C.ExecuteUbergraph_BP_Time_Of_Day_Audio
// 0x0050 (0x0050 - 0x0000)
struct BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimeOfDayPeriod                              K2Node_CustomEvent_period;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingCustomTime_True;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D8B[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Hours_and_Minutes_ClockHour;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Get_Hours_and_Minutes_ClockMinute;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UValeriaWeather*                        CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D8C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AValEnvironmentManager*                 CallFunc_GetCurrentEnvManager_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ETimeOfDayPeriod Period)>      K2Node_CreateDelegate_OutputDelegate_1;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio) == 0x000008, "Wrong alignment on BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio");
static_assert(sizeof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio) == 0x000050, "Wrong size on BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, EntryPoint) == 0x000000, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, K2Node_CustomEvent_period) == 0x000004, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::K2Node_CustomEvent_period' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, CallFunc_IsUsingCustomTime_True) == 0x000005, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::CallFunc_IsUsingCustomTime_True' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, CallFunc_IsDedicatedServer_ReturnValue) == 0x000006, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, CallFunc_Get_Hours_and_Minutes_ClockHour) == 0x000008, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::CallFunc_Get_Hours_and_Minutes_ClockHour' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, CallFunc_Get_Hours_and_Minutes_ClockMinute) == 0x00000C, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::CallFunc_Get_Hours_and_Minutes_ClockMinute' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000028, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, CallFunc_GetCurrentEnvManager_ReturnValue) == 0x000038, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::CallFunc_GetCurrentEnvManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio, K2Node_CreateDelegate_OutputDelegate_1) == 0x000040, "Member 'BP_Time_Of_Day_Audio_C_ExecuteUbergraph_BP_Time_Of_Day_Audio::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_Time_Of_Day_Audio.BP_Time_Of_Day_Audio_C.Get Hours and Minutes
// 0x0020 (0x0020 - 0x0000)
struct BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes final
{
public:
	int32                                         ClockHour;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ClockMinute;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UValeriaTimeManager*                    CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FClockTimeInValeria                    CallFunc_GetClockTime_ReturnValue;                 // 0x0010(0x0010)(NoDestructor)
};
static_assert(alignof(BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes) == 0x000008, "Wrong alignment on BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes");
static_assert(sizeof(BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes) == 0x000020, "Wrong size on BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes, ClockHour) == 0x000000, "Member 'BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes::ClockHour' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes, ClockMinute) == 0x000004, "Member 'BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes::ClockMinute' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes, CallFunc_GetClockTime_ReturnValue) == 0x000010, "Member 'BP_Time_Of_Day_Audio_C_Get_Hours_and_Minutes::CallFunc_GetClockTime_ReturnValue' has a wrong offset!");

// Function BP_Time_Of_Day_Audio.BP_Time_Of_Day_Audio_C.IsOnHousingPlot
// 0x0038 (0x0038 - 0x0000)
struct BP_Time_Of_Day_Audio_C_IsOnHousingPlot final
{
public:
	bool                                          IsOnPlot;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D8D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHousingPlotActor*                      HousingPlot;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AValeriaPlayerController*               K2Node_DynamicCast_AsValeria_Player_Controller;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D8E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHousingPlotActor*                      CallFunc_GetCurrentHousingPlot_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Time_Of_Day_Audio_C_IsOnHousingPlot) == 0x000008, "Wrong alignment on BP_Time_Of_Day_Audio_C_IsOnHousingPlot");
static_assert(sizeof(BP_Time_Of_Day_Audio_C_IsOnHousingPlot) == 0x000038, "Wrong size on BP_Time_Of_Day_Audio_C_IsOnHousingPlot");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsOnHousingPlot, IsOnPlot) == 0x000000, "Member 'BP_Time_Of_Day_Audio_C_IsOnHousingPlot::IsOnPlot' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsOnHousingPlot, HousingPlot) == 0x000008, "Member 'BP_Time_Of_Day_Audio_C_IsOnHousingPlot::HousingPlot' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsOnHousingPlot, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_Time_Of_Day_Audio_C_IsOnHousingPlot::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsOnHousingPlot, K2Node_DynamicCast_AsValeria_Player_Controller) == 0x000018, "Member 'BP_Time_Of_Day_Audio_C_IsOnHousingPlot::K2Node_DynamicCast_AsValeria_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsOnHousingPlot, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Time_Of_Day_Audio_C_IsOnHousingPlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsOnHousingPlot, CallFunc_GetCurrentHousingPlot_ReturnValue) == 0x000028, "Member 'BP_Time_Of_Day_Audio_C_IsOnHousingPlot::CallFunc_GetCurrentHousingPlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsOnHousingPlot, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_Time_Of_Day_Audio_C_IsOnHousingPlot::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Time_Of_Day_Audio.BP_Time_Of_Day_Audio_C.IsUsingCustomTime
// 0x0068 (0x0068 - 0x0000)
struct BP_Time_Of_Day_Audio_C_IsUsingCustomTime final
{
public:
	bool                                          TURR;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsingCustomTime;                                   // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D8F[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D90[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimeOfDayAudio                        CallFunc_Array_Get_Item;                           // 0x0018(0x0048)(NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime) == 0x000008, "Wrong alignment on BP_Time_Of_Day_Audio_C_IsUsingCustomTime");
static_assert(sizeof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime) == 0x000068, "Wrong size on BP_Time_Of_Day_Audio_C_IsUsingCustomTime");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, TURR) == 0x000000, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::TURR' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, UsingCustomTime) == 0x000001, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::UsingCustomTime' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, Temp_bool_True_if_break_was_hit_Variable) == 0x000002, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, CallFunc_BooleanAND_ReturnValue) == 0x000061, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000062, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, CallFunc_IsValid_ReturnValue) == 0x000063, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_IsUsingCustomTime, CallFunc_BooleanAND_ReturnValue_1) == 0x000064, "Member 'BP_Time_Of_Day_Audio_C_IsUsingCustomTime::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_Time_Of_Day_Audio.BP_Time_Of_Day_Audio_C.OnTimeOfDayChangeEvent
// 0x0001 (0x0001 - 0x0000)
struct BP_Time_Of_Day_Audio_C_OnTimeOfDayChangeEvent final
{
public:
	ETimeOfDayPeriod                              Period;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Time_Of_Day_Audio_C_OnTimeOfDayChangeEvent) == 0x000001, "Wrong alignment on BP_Time_Of_Day_Audio_C_OnTimeOfDayChangeEvent");
static_assert(sizeof(BP_Time_Of_Day_Audio_C_OnTimeOfDayChangeEvent) == 0x000001, "Wrong size on BP_Time_Of_Day_Audio_C_OnTimeOfDayChangeEvent");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_OnTimeOfDayChangeEvent, Period) == 0x000000, "Member 'BP_Time_Of_Day_Audio_C_OnTimeOfDayChangeEvent::Period' has a wrong offset!");

// Function BP_Time_Of_Day_Audio.BP_Time_Of_Day_Audio_C.PlayTimeOfDayAudio
// 0x0238 (0x0238 - 0x0000)
struct BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio final
{
public:
	struct FVector                                RefLocation;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimeOfDayAudioSettings                Settings;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, NoDestructor)
	class UAkAudioEvent*                          AudioToPlay;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D91[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOnHousingPlot_IsOnPlot;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D92[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHousingPlotActor*                      CallFunc_IsOnHousingPlot_HousingPlot;              // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D93[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegreesToRadians_ReturnValue;             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Sin_ReturnValue;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Cos_ReturnValue;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimeOfDayAudio                        CallFunc_Array_Get_Item;                           // 0x00E8(0x0048)(NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesTimeMatchCurrentTime_ReturnValue;     // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D94[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_AkEventLocation_AkComponent;              // 0x0150(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AkEventLocation_Playing_ID;               // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D95[0x2];                                     // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D96[0x7];                                     // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_MathExpression_ReturnValue;                 // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_AkEventLocation_AkComponent_1;            // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AkEventLocation_Playing_ID_1;             // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D97[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOnHousingPlot_IsOnPlot_1;               // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D98[0x7];                                     // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHousingPlotActor*                      CallFunc_IsOnHousingPlot_HousingPlot_1;            // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_AkEventLocation_AkComponent_2;            // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AkEventLocation_Playing_ID_2;             // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimeOfDayAudioSettings                K2Node_Select_Default;                             // 0x0204(0x0018)(NoDestructor)
	uint8                                         Pad_4D99[0x4];                                     // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_VectorFloat_B_ImplicitCast;      // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast;      // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast;      // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio) == 0x000008, "Wrong alignment on BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio");
static_assert(sizeof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio) == 0x000238, "Wrong size on BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, RefLocation) == 0x000000, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::RefLocation' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, Settings) == 0x000018, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::Settings' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, AudioToPlay) == 0x000030, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::AudioToPlay' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_GetPlayerPawn_ReturnValue) == 0x000040, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_IsOnHousingPlot_IsOnPlot) == 0x000048, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_IsOnHousingPlot_IsOnPlot' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_IsOnHousingPlot_HousingPlot) == 0x000050, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_IsOnHousingPlot_HousingPlot' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000070, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, Temp_bool_Variable) == 0x000088, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000089, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Not_PreBool_ReturnValue) == 0x00008A, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_BooleanAND_ReturnValue) == 0x00008B, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000090, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_DegreesToRadians_ReturnValue) == 0x000098, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_DegreesToRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Sin_ReturnValue) == 0x0000A0, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Cos_ReturnValue) == 0x0000A8, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000B0, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_MakeVector_ReturnValue) == 0x0000B8, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000D0, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Add_VectorVector_ReturnValue) == 0x000130, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Array_Length_ReturnValue) == 0x000148, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_DoesTimeMatchCurrentTime_ReturnValue) == 0x00014C, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_DoesTimeMatchCurrentTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_AkEventLocation_AkComponent) == 0x000150, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_AkEventLocation_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_AkEventLocation_Playing_ID) == 0x000158, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_AkEventLocation_Playing_ID' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, Temp_int_Loop_Counter_Variable) == 0x00015C, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000160, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Less_IntInt_ReturnValue) == 0x000161, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Add_IntInt_ReturnValue) == 0x000164, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000168, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000170, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_RandomUnitVector_ReturnValue) == 0x000188, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, K2Node_SwitchEnum_CmpSuccess) == 0x0001A0, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, K2Node_MathExpression_ReturnValue) == 0x0001A8, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_AkEventLocation_AkComponent_1) == 0x0001C0, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_AkEventLocation_AkComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_AkEventLocation_Playing_ID_1) == 0x0001C8, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_AkEventLocation_Playing_ID_1' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x0001D0, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_IsOnHousingPlot_IsOnPlot_1) == 0x0001E8, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_IsOnHousingPlot_IsOnPlot_1' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_IsOnHousingPlot_HousingPlot_1) == 0x0001F0, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_IsOnHousingPlot_HousingPlot_1' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_AkEventLocation_AkComponent_2) == 0x0001F8, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_AkEventLocation_AkComponent_2' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_AkEventLocation_Playing_ID_2) == 0x000200, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_AkEventLocation_Playing_ID_2' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, K2Node_Select_Default) == 0x000204, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_Multiply_VectorFloat_B_ImplicitCast) == 0x000220, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_Multiply_VectorFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_RandomFloatInRange_Min_ImplicitCast) == 0x000228, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_RandomFloatInRange_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio, CallFunc_RandomFloatInRange_Max_ImplicitCast) == 0x000230, "Member 'BP_Time_Of_Day_Audio_C_PlayTimeOfDayAudio::CallFunc_RandomFloatInRange_Max_ImplicitCast' has a wrong offset!");

}

