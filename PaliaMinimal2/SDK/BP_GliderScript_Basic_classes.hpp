#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GliderScript_Basic

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_CharacterCustomizationScript_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GliderScript_Basic.BP_GliderScript_Basic_C
// 0x0020 (0x0100 - 0x00E0)
class UBP_GliderScript_Basic_C final : public UBP_CharacterCustomizationScript_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GliderScript_Basic_C;            // 0x00E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FTimerHandle                           FakeTickTimer;                                     // 0x00E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSpeed;                                          // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HorizontalVelocity;                                // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GliderScript_Basic(int32 EntryPoint, class UVAL_CharacterCustomizationComponent* K2Node_Event_component_1, class UVAL_CharacterCustomizationItemBase* K2Node_Event_Item, TMap<class FName, struct FGuid>& K2Node_Event_VariantSelections, class UPawnMovementComponent* CallFunc_GetMovementComponent_ReturnValue, class UVAL_CharacterCustomizationComponent* K2Node_Event_component, const struct FTimerHandle& CallFunc_K2_InvalidateTimerHandle_ReturnValue, class UVAL_CharacterCustomizationComponent* CallFunc_GetCharacterCustomizationComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UVAL_CharacterCustomizationComponent* CallFunc_GetCharacterCustomizationComponent_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_1, class AVAL_GliderBase* K2Node_CustomEvent_Glider_1, class UVAL_CharacterCustomizationComponent* CallFunc_GetCharacterCustomizationComponent_ReturnValue_2, class AVAL_GliderBase* K2Node_CustomEvent_Glider, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, class UVAL_CharacterCustomizationComponent* CallFunc_GetCharacterCustomizationComponent_ReturnValue_3, TDelegate<void(class AVAL_GliderBase* Glider)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(class AVAL_GliderBase* Glider)> K2Node_CreateDelegate_OutputDelegate_2, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue_1, class UVAL_CharacterCustomizationComponent* CallFunc_GetCharacterCustomizationComponent_ReturnValue_4, class UVAL_CharacterCustomizationComponent* CallFunc_GetCharacterCustomizationComponent_ReturnValue_5, TDelegate<void(class AVAL_GliderBase* Glider)> K2Node_CreateDelegate_OutputDelegate_3, TDelegate<void(class AVAL_GliderBase* Glider)> K2Node_CreateDelegate_OutputDelegate_4, bool CallFunc_IsServer_ReturnValue);
	void GliderRemoved(class AVAL_GliderBase* Glider);
	void GliderSpawned(class AVAL_GliderBase* Glider);
	void OnApply(class UVAL_CharacterCustomizationComponent* Component, class UVAL_CharacterCustomizationItemBase* Item, TMap<class FName, struct FGuid>& VariantSelections);
	void OnUninitialize(class UVAL_CharacterCustomizationComponent* Component);
	void UpdateGliderVelocityVisuals();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GliderScript_Basic_C">();
	}
	static class UBP_GliderScript_Basic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GliderScript_Basic_C>();
	}
};
static_assert(alignof(UBP_GliderScript_Basic_C) == 0x000008, "Wrong alignment on UBP_GliderScript_Basic_C");
static_assert(sizeof(UBP_GliderScript_Basic_C) == 0x000100, "Wrong size on UBP_GliderScript_Basic_C");
static_assert(offsetof(UBP_GliderScript_Basic_C, UberGraphFrame_BP_GliderScript_Basic_C) == 0x0000E0, "Member 'UBP_GliderScript_Basic_C::UberGraphFrame_BP_GliderScript_Basic_C' has a wrong offset!");
static_assert(offsetof(UBP_GliderScript_Basic_C, FakeTickTimer) == 0x0000E8, "Member 'UBP_GliderScript_Basic_C::FakeTickTimer' has a wrong offset!");
static_assert(offsetof(UBP_GliderScript_Basic_C, MaxSpeed) == 0x0000F0, "Member 'UBP_GliderScript_Basic_C::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UBP_GliderScript_Basic_C, HorizontalVelocity) == 0x0000F8, "Member 'UBP_GliderScript_Basic_C::HorizontalVelocity' has a wrong offset!");

}

