#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ak_OneShot_Base

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ak_OneShot_Base.Ak_OneShot_Base_C
// 0x0010 (0x0048 - 0x0038)
class UAk_OneShot_Base_C : public UAnimNotify
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Local_Only;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	class FString GetNotifyName(const class FString& CallFunc_GetDisplayName_ReturnValue) const;
	void PlayAudio(class USkeletalMeshComponent* MeshComp, bool* Success, class UAkAudioEvent* UsedAkEvent, class AActor* Owner, class UAkComponent* Ak, bool CallFunc_AkGetComponent_ComponentCreated, class UAkComponent* CallFunc_AkGetComponent_AkComponent, int32 CallFunc_AkEventComponent_ReturnValue) const;
	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, struct FAnimNotifyEventReference& EventReference, class UAkComponent* Ak, bool CallFunc_PlayAudio_Success, bool CallFunc_ShouldPlay_Should) const;
	void ShouldPlay(class USkeletalMeshComponent* MeshComp, bool* Should, bool CallFunc_IsServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, class AActor* CallFunc_GetOwner_ReturnValue, class AValeriaCharacter* K2Node_DynamicCast_AsValeria_Character, bool K2Node_DynamicCast_bSuccess, class UGameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ak_OneShot_Base_C">();
	}
	static class UAk_OneShot_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAk_OneShot_Base_C>();
	}
};
static_assert(alignof(UAk_OneShot_Base_C) == 0x000008, "Wrong alignment on UAk_OneShot_Base_C");
static_assert(sizeof(UAk_OneShot_Base_C) == 0x000048, "Wrong size on UAk_OneShot_Base_C");
static_assert(offsetof(UAk_OneShot_Base_C, AkEvent) == 0x000038, "Member 'UAk_OneShot_Base_C::AkEvent' has a wrong offset!");
static_assert(offsetof(UAk_OneShot_Base_C, Local_Only) == 0x000040, "Member 'UAk_OneShot_Base_C::Local_Only' has a wrong offset!");

}

