#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OnlineSubsystemValeria

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ValeriaDTOs_structs.hpp"


namespace SDK
{

// Enum OnlineSubsystemValeria.EVAL_UserPrivileges
// NumValues: 0x0006
enum class EVAL_UserPrivileges : uint8
{
	CanPlay                                  = 0,
	CanPlayOnline                            = 1,
	CanCommunicateOnline                     = 2,
	CanUseUserGeneratedContent               = 3,
	CanUserCrossPlay                         = 4,
	EVAL_MAX                                 = 5,
};

// Enum OnlineSubsystemValeria.EOSSVAL_ChatChannelType
// NumValues: 0x0007
enum class EOSSVAL_ChatChannelType : uint8
{
	Invalid                                  = 0,
	Global                                   = 1,
	Server                                   = 2,
	Party                                    = 3,
	PlayerGuild                              = 4,
	Proximity                                = 5,
	EOSSVAL_MAX                              = 6,
};

// Enum OnlineSubsystemValeria.EOSSVAL_MatchmakingRequestType
// NumValues: 0x0004
enum class EOSSVAL_MatchmakingRequestType : uint8
{
	ServerType                               = 0,
	Space                                    = 1,
	ServerSync                               = 2,
	EOSSVAL_MAX                              = 3,
};

// Enum OnlineSubsystemValeria.EOSSVAL_MatchmakingFailErrorType
// NumValues: 0x0011
enum class EOSSVAL_MatchmakingFailErrorType : uint8
{
	Unknown                                  = 0,
	AlreadyMatchmaking                       = 1,
	InvalidPlayer                            = 2,
	RequestCreationFailed                    = 3,
	MatchmakingTicketCreationFailed          = 4,
	MatchmakingTicketCreationTimedOut        = 5,
	ServerRPCSendFail                        = 6,
	BeaconClientFailedToSpawn                = 7,
	BeaconClientFailedToConnect              = 8,
	TicketValidationTimedOut                 = 9,
	TicketRejected                           = 10,
	PlayerControllerNotFound                 = 11,
	LoginQueueGenericError                   = 12,
	ExitLoginQueueGenericError               = 13,
	ExitLoginQueueTimeOut                    = 14,
	PlayerFinalPersistTimedOut               = 15,
	EOSSVAL_MAX                              = 16,
};

// Enum OnlineSubsystemValeria.EControlMessageType
// NumValues: 0x000A
enum class EControlMessageType : uint8
{
	Informational                            = 0,
	ServerInvite                             = 1,
	Party                                    = 2,
	JoinSession                              = 3,
	PlayerGuild                              = 4,
	Friend                                   = 5,
	InventoryRequests                        = 6,
	FriendRouterType                         = 7,
	EventBus                                 = 8,
	EControlMessageType_MAX                  = 9,
};

// Enum OnlineSubsystemValeria.EOnlineSystemMessageType
// NumValues: 0x0004
enum class EOnlineSystemMessageType : uint8
{
	Unknown                                  = 0,
	Chat                                     = 1,
	Friends                                  = 2,
	EOnlineSystemMessageType_MAX             = 3,
};

// ScriptStruct OnlineSubsystemValeria.OSSVAL_MatchmakingRequestPlayer
// 0x0020 (0x0020 - 0x0000)
struct FOSSVAL_MatchmakingRequestPlayer final
{
public:
	struct FGuid                                  AccountId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_MatchmakingRequestPlayer) == 0x000004, "Wrong alignment on FOSSVAL_MatchmakingRequestPlayer");
static_assert(sizeof(FOSSVAL_MatchmakingRequestPlayer) == 0x000020, "Wrong size on FOSSVAL_MatchmakingRequestPlayer");
static_assert(offsetof(FOSSVAL_MatchmakingRequestPlayer, AccountId) == 0x000000, "Member 'FOSSVAL_MatchmakingRequestPlayer::AccountId' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingRequestPlayer, CharacterId) == 0x000010, "Member 'FOSSVAL_MatchmakingRequestPlayer::CharacterId' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_MatchmakingRequestContext
// 0x00A8 (0x00A8 - 0x0000)
struct FOSSVAL_MatchmakingRequestContext final
{
public:
	bool                                          bInternalRequest;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJoinAfterGettingTicket;                           // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSSVAL_MatchmakingRequestType                Type;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D06[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerType;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SpaceId;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSSVAL_MatchmakingRequestPlayer       ServerSyncTargetPlayer;                            // 0x0028(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 CurrentNetWorkVersion;                             // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSSVAL_MatchmakingRequestPlayer       CurrentPlayer;                                     // 0x0058(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FOSSVAL_MatchmakingRequestPlayer       PartyLeader;                                       // 0x0078(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FOSSVAL_MatchmakingRequestPlayer> PartyMembers;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_MatchmakingRequestContext) == 0x000008, "Wrong alignment on FOSSVAL_MatchmakingRequestContext");
static_assert(sizeof(FOSSVAL_MatchmakingRequestContext) == 0x0000A8, "Wrong size on FOSSVAL_MatchmakingRequestContext");
static_assert(offsetof(FOSSVAL_MatchmakingRequestContext, bInternalRequest) == 0x000000, "Member 'FOSSVAL_MatchmakingRequestContext::bInternalRequest' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingRequestContext, bJoinAfterGettingTicket) == 0x000001, "Member 'FOSSVAL_MatchmakingRequestContext::bJoinAfterGettingTicket' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingRequestContext, Type) == 0x000002, "Member 'FOSSVAL_MatchmakingRequestContext::Type' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingRequestContext, ServerType) == 0x000008, "Member 'FOSSVAL_MatchmakingRequestContext::ServerType' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingRequestContext, SpaceId) == 0x000018, "Member 'FOSSVAL_MatchmakingRequestContext::SpaceId' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingRequestContext, ServerSyncTargetPlayer) == 0x000028, "Member 'FOSSVAL_MatchmakingRequestContext::ServerSyncTargetPlayer' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingRequestContext, CurrentNetWorkVersion) == 0x000048, "Member 'FOSSVAL_MatchmakingRequestContext::CurrentNetWorkVersion' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingRequestContext, CurrentPlayer) == 0x000058, "Member 'FOSSVAL_MatchmakingRequestContext::CurrentPlayer' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingRequestContext, PartyLeader) == 0x000078, "Member 'FOSSVAL_MatchmakingRequestContext::PartyLeader' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingRequestContext, PartyMembers) == 0x000098, "Member 'FOSSVAL_MatchmakingRequestContext::PartyMembers' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_MatchmakingErrorResult
// 0x0020 (0x0020 - 0x0000)
struct FOSSVAL_MatchmakingErrorResult final
{
public:
	EOSSVAL_MatchmakingFailErrorType              ErrorType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D07[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ErrorCode;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ErrorText;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_MatchmakingErrorResult) == 0x000008, "Wrong alignment on FOSSVAL_MatchmakingErrorResult");
static_assert(sizeof(FOSSVAL_MatchmakingErrorResult) == 0x000020, "Wrong size on FOSSVAL_MatchmakingErrorResult");
static_assert(offsetof(FOSSVAL_MatchmakingErrorResult, ErrorType) == 0x000000, "Member 'FOSSVAL_MatchmakingErrorResult::ErrorType' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingErrorResult, ErrorCode) == 0x000004, "Member 'FOSSVAL_MatchmakingErrorResult::ErrorCode' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingErrorResult, ErrorText) == 0x000008, "Member 'FOSSVAL_MatchmakingErrorResult::ErrorText' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_ProfanityFilterResponse
// 0x0018 (0x0018 - 0x0000)
struct FOSSVAL_ProfanityFilterResponse final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D08[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Result;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_ProfanityFilterResponse) == 0x000008, "Wrong alignment on FOSSVAL_ProfanityFilterResponse");
static_assert(sizeof(FOSSVAL_ProfanityFilterResponse) == 0x000018, "Wrong size on FOSSVAL_ProfanityFilterResponse");
static_assert(offsetof(FOSSVAL_ProfanityFilterResponse, bSuccess) == 0x000000, "Member 'FOSSVAL_ProfanityFilterResponse::bSuccess' has a wrong offset!");
static_assert(offsetof(FOSSVAL_ProfanityFilterResponse, Result) == 0x000008, "Member 'FOSSVAL_ProfanityFilterResponse::Result' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_SelectedCharacter
// 0x0040 (0x0040 - 0x0000)
struct FOSSVAL_SelectedCharacter final
{
public:
	struct FGuid                                  AccountId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  CharacterId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CharacterName;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PreferredName;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FOSSVAL_SelectedCharacter) == 0x000008, "Wrong alignment on FOSSVAL_SelectedCharacter");
static_assert(sizeof(FOSSVAL_SelectedCharacter) == 0x000040, "Wrong size on FOSSVAL_SelectedCharacter");
static_assert(offsetof(FOSSVAL_SelectedCharacter, AccountId) == 0x000000, "Member 'FOSSVAL_SelectedCharacter::AccountId' has a wrong offset!");
static_assert(offsetof(FOSSVAL_SelectedCharacter, CharacterId) == 0x000010, "Member 'FOSSVAL_SelectedCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(FOSSVAL_SelectedCharacter, CharacterName) == 0x000020, "Member 'FOSSVAL_SelectedCharacter::CharacterName' has a wrong offset!");
static_assert(offsetof(FOSSVAL_SelectedCharacter, PreferredName) == 0x000030, "Member 'FOSSVAL_SelectedCharacter::PreferredName' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_MatchmakingTicket
// 0x0098 (0x0098 - 0x0000)
struct FOSSVAL_MatchmakingTicket final
{
public:
	class FString                                 Signature;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  TicketId;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Expiry;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOSSVAL_MatchmakingRequestPlayer       Player;                                            // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ServerId;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerType;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerVersion;                                     // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ServerStatus;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D09[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerAddr;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerPort;                                        // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerBeaconPort;                                  // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_MatchmakingTicket) == 0x000008, "Wrong alignment on FOSSVAL_MatchmakingTicket");
static_assert(sizeof(FOSSVAL_MatchmakingTicket) == 0x000098, "Wrong size on FOSSVAL_MatchmakingTicket");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, Signature) == 0x000000, "Member 'FOSSVAL_MatchmakingTicket::Signature' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, TicketId) == 0x000010, "Member 'FOSSVAL_MatchmakingTicket::TicketId' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, Expiry) == 0x000020, "Member 'FOSSVAL_MatchmakingTicket::Expiry' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, Player) == 0x000028, "Member 'FOSSVAL_MatchmakingTicket::Player' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, ServerId) == 0x000048, "Member 'FOSSVAL_MatchmakingTicket::ServerId' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, ServerType) == 0x000058, "Member 'FOSSVAL_MatchmakingTicket::ServerType' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, ServerVersion) == 0x000068, "Member 'FOSSVAL_MatchmakingTicket::ServerVersion' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, ServerStatus) == 0x000078, "Member 'FOSSVAL_MatchmakingTicket::ServerStatus' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, ServerAddr) == 0x000080, "Member 'FOSSVAL_MatchmakingTicket::ServerAddr' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, ServerPort) == 0x000090, "Member 'FOSSVAL_MatchmakingTicket::ServerPort' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingTicket, ServerBeaconPort) == 0x000094, "Member 'FOSSVAL_MatchmakingTicket::ServerBeaconPort' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_MatchmakingResult
// 0x00C0 (0x00C0 - 0x0000)
struct FOSSVAL_MatchmakingResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInternalRequest;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOSSVAL_MatchmakingTicket              Ticket;                                            // 0x0008(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FOSSVAL_MatchmakingErrorResult         ErrorResult;                                       // 0x00A0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_MatchmakingResult) == 0x000008, "Wrong alignment on FOSSVAL_MatchmakingResult");
static_assert(sizeof(FOSSVAL_MatchmakingResult) == 0x0000C0, "Wrong size on FOSSVAL_MatchmakingResult");
static_assert(offsetof(FOSSVAL_MatchmakingResult, bSuccess) == 0x000000, "Member 'FOSSVAL_MatchmakingResult::bSuccess' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingResult, bInternalRequest) == 0x000001, "Member 'FOSSVAL_MatchmakingResult::bInternalRequest' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingResult, Ticket) == 0x000008, "Member 'FOSSVAL_MatchmakingResult::Ticket' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingResult, ErrorResult) == 0x0000A0, "Member 'FOSSVAL_MatchmakingResult::ErrorResult' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_ChatChannel
// 0x0028 (0x0028 - 0x0000)
struct FOSSVAL_ChatChannel final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOSSVAL_ChatChannelType                       Kind;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0B[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOSSVAL_ChatChannel) == 0x000008, "Wrong alignment on FOSSVAL_ChatChannel");
static_assert(sizeof(FOSSVAL_ChatChannel) == 0x000028, "Wrong size on FOSSVAL_ChatChannel");
static_assert(offsetof(FOSSVAL_ChatChannel, Name) == 0x000000, "Member 'FOSSVAL_ChatChannel::Name' has a wrong offset!");
static_assert(offsetof(FOSSVAL_ChatChannel, Token) == 0x000010, "Member 'FOSSVAL_ChatChannel::Token' has a wrong offset!");
static_assert(offsetof(FOSSVAL_ChatChannel, Kind) == 0x000020, "Member 'FOSSVAL_ChatChannel::Kind' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_GetChannelsResponse
// 0x0018 (0x0018 - 0x0000)
struct FOSSVAL_GetChannelsResponse final
{
public:
	bool                                          bSuccessful;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOSSVAL_ChatChannel>            Channels;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_GetChannelsResponse) == 0x000008, "Wrong alignment on FOSSVAL_GetChannelsResponse");
static_assert(sizeof(FOSSVAL_GetChannelsResponse) == 0x000018, "Wrong size on FOSSVAL_GetChannelsResponse");
static_assert(offsetof(FOSSVAL_GetChannelsResponse, bSuccessful) == 0x000000, "Member 'FOSSVAL_GetChannelsResponse::bSuccessful' has a wrong offset!");
static_assert(offsetof(FOSSVAL_GetChannelsResponse, Channels) == 0x000008, "Member 'FOSSVAL_GetChannelsResponse::Channels' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_CharacterNameAndId
// 0x0030 (0x0030 - 0x0000)
struct FOSSVAL_CharacterNameAndId final
{
public:
	struct FGuid                                  CharacterId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreferredName;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FullName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_CharacterNameAndId) == 0x000008, "Wrong alignment on FOSSVAL_CharacterNameAndId");
static_assert(sizeof(FOSSVAL_CharacterNameAndId) == 0x000030, "Wrong size on FOSSVAL_CharacterNameAndId");
static_assert(offsetof(FOSSVAL_CharacterNameAndId, CharacterId) == 0x000000, "Member 'FOSSVAL_CharacterNameAndId::CharacterId' has a wrong offset!");
static_assert(offsetof(FOSSVAL_CharacterNameAndId, PreferredName) == 0x000010, "Member 'FOSSVAL_CharacterNameAndId::PreferredName' has a wrong offset!");
static_assert(offsetof(FOSSVAL_CharacterNameAndId, FullName) == 0x000020, "Member 'FOSSVAL_CharacterNameAndId::FullName' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_MatchmakingJoinStatusResult
// 0x00C8 (0x00C8 - 0x0000)
struct FOSSVAL_MatchmakingJoinStatusResult final
{
public:
	int32                                         JoinNumber;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOSSVAL_MatchmakingResult              MatchmakingResult;                                 // 0x0008(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_MatchmakingJoinStatusResult) == 0x000008, "Wrong alignment on FOSSVAL_MatchmakingJoinStatusResult");
static_assert(sizeof(FOSSVAL_MatchmakingJoinStatusResult) == 0x0000C8, "Wrong size on FOSSVAL_MatchmakingJoinStatusResult");
static_assert(offsetof(FOSSVAL_MatchmakingJoinStatusResult, JoinNumber) == 0x000000, "Member 'FOSSVAL_MatchmakingJoinStatusResult::JoinNumber' has a wrong offset!");
static_assert(offsetof(FOSSVAL_MatchmakingJoinStatusResult, MatchmakingResult) == 0x000008, "Member 'FOSSVAL_MatchmakingJoinStatusResult::MatchmakingResult' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.ServerStatusUpdate
// 0x0050 (0x0050 - 0x0000)
struct FServerStatusUpdate final
{
public:
	class FString                                 ServerId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerType;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip;                                                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeaconPort;                                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AvailableSlots;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0E[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PlayerIds;                                         // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerStatusUpdate) == 0x000008, "Wrong alignment on FServerStatusUpdate");
static_assert(sizeof(FServerStatusUpdate) == 0x000050, "Wrong size on FServerStatusUpdate");
static_assert(offsetof(FServerStatusUpdate, ServerId) == 0x000000, "Member 'FServerStatusUpdate::ServerId' has a wrong offset!");
static_assert(offsetof(FServerStatusUpdate, ServerType) == 0x000010, "Member 'FServerStatusUpdate::ServerType' has a wrong offset!");
static_assert(offsetof(FServerStatusUpdate, Ip) == 0x000020, "Member 'FServerStatusUpdate::Ip' has a wrong offset!");
static_assert(offsetof(FServerStatusUpdate, Port) == 0x000030, "Member 'FServerStatusUpdate::Port' has a wrong offset!");
static_assert(offsetof(FServerStatusUpdate, BeaconPort) == 0x000034, "Member 'FServerStatusUpdate::BeaconPort' has a wrong offset!");
static_assert(offsetof(FServerStatusUpdate, AvailableSlots) == 0x000038, "Member 'FServerStatusUpdate::AvailableSlots' has a wrong offset!");
static_assert(offsetof(FServerStatusUpdate, PlayerIds) == 0x000040, "Member 'FServerStatusUpdate::PlayerIds' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_RegisterCharacterResponse
// 0x0798 (0x0798 - 0x0000)
struct FOSSVAL_RegisterCharacterResponse final
{
public:
	struct FVALDTOS_MetaCharacterFormat           CharacterData;                                     // 0x0000(0x0778)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ErrorText;                                         // 0x0778(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0790(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0F[0x4];                                     // 0x0794(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOSSVAL_RegisterCharacterResponse) == 0x000008, "Wrong alignment on FOSSVAL_RegisterCharacterResponse");
static_assert(sizeof(FOSSVAL_RegisterCharacterResponse) == 0x000798, "Wrong size on FOSSVAL_RegisterCharacterResponse");
static_assert(offsetof(FOSSVAL_RegisterCharacterResponse, CharacterData) == 0x000000, "Member 'FOSSVAL_RegisterCharacterResponse::CharacterData' has a wrong offset!");
static_assert(offsetof(FOSSVAL_RegisterCharacterResponse, ErrorText) == 0x000778, "Member 'FOSSVAL_RegisterCharacterResponse::ErrorText' has a wrong offset!");
static_assert(offsetof(FOSSVAL_RegisterCharacterResponse, ErrorCode) == 0x000790, "Member 'FOSSVAL_RegisterCharacterResponse::ErrorCode' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.ValeriaUserDTO
// 0x0068 (0x0068 - 0x0000)
struct FValeriaUserDTO final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FirstName;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Birthday;                                          // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaUserDTO) == 0x000008, "Wrong alignment on FValeriaUserDTO");
static_assert(sizeof(FValeriaUserDTO) == 0x000068, "Wrong size on FValeriaUserDTO");
static_assert(offsetof(FValeriaUserDTO, UserName) == 0x000000, "Member 'FValeriaUserDTO::UserName' has a wrong offset!");
static_assert(offsetof(FValeriaUserDTO, Password) == 0x000010, "Member 'FValeriaUserDTO::Password' has a wrong offset!");
static_assert(offsetof(FValeriaUserDTO, Email) == 0x000020, "Member 'FValeriaUserDTO::Email' has a wrong offset!");
static_assert(offsetof(FValeriaUserDTO, FirstName) == 0x000030, "Member 'FValeriaUserDTO::FirstName' has a wrong offset!");
static_assert(offsetof(FValeriaUserDTO, LastName) == 0x000040, "Member 'FValeriaUserDTO::LastName' has a wrong offset!");
static_assert(offsetof(FValeriaUserDTO, Region) == 0x000050, "Member 'FValeriaUserDTO::Region' has a wrong offset!");
static_assert(offsetof(FValeriaUserDTO, Birthday) == 0x000060, "Member 'FValeriaUserDTO::Birthday' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.ValeriaOnlineAchievementDefinition
// 0x00D8 (0x00D8 - 0x0000)
struct FValeriaOnlineAchievementDefinition final
{
public:
	class FString                                 AchievementID;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   Title;                                             // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	class FString                                 GroupID;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 Category;                                          // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Tier;                                              // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D10[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LockedDesc;                                        // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	class FText                                   UnlockedDesc;                                      // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)
	bool                                          bIsHidden;                                         // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D11[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 XBoxId;                                            // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PlaystationId;                                     // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 SteamId;                                           // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D12[0x20];                                    // 0x00B8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaOnlineAchievementDefinition) == 0x000008, "Wrong alignment on FValeriaOnlineAchievementDefinition");
static_assert(sizeof(FValeriaOnlineAchievementDefinition) == 0x0000D8, "Wrong size on FValeriaOnlineAchievementDefinition");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, AchievementID) == 0x000000, "Member 'FValeriaOnlineAchievementDefinition::AchievementID' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, Title) == 0x000010, "Member 'FValeriaOnlineAchievementDefinition::Title' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, GroupID) == 0x000028, "Member 'FValeriaOnlineAchievementDefinition::GroupID' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, Category) == 0x000038, "Member 'FValeriaOnlineAchievementDefinition::Category' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, Tier) == 0x000048, "Member 'FValeriaOnlineAchievementDefinition::Tier' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, LockedDesc) == 0x000050, "Member 'FValeriaOnlineAchievementDefinition::LockedDesc' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, UnlockedDesc) == 0x000068, "Member 'FValeriaOnlineAchievementDefinition::UnlockedDesc' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, bIsHidden) == 0x000080, "Member 'FValeriaOnlineAchievementDefinition::bIsHidden' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, XBoxId) == 0x000088, "Member 'FValeriaOnlineAchievementDefinition::XBoxId' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, PlaystationId) == 0x000098, "Member 'FValeriaOnlineAchievementDefinition::PlaystationId' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievementDefinition, SteamId) == 0x0000A8, "Member 'FValeriaOnlineAchievementDefinition::SteamId' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_MatchmakingTicketContext
// 0x0010 (0x0010 - 0x0000)
struct FOSSVAL_MatchmakingTicketContext final
{
public:
	struct FGuid                                  SpaceId;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_MatchmakingTicketContext) == 0x000004, "Wrong alignment on FOSSVAL_MatchmakingTicketContext");
static_assert(sizeof(FOSSVAL_MatchmakingTicketContext) == 0x000010, "Wrong size on FOSSVAL_MatchmakingTicketContext");
static_assert(offsetof(FOSSVAL_MatchmakingTicketContext, SpaceId) == 0x000000, "Member 'FOSSVAL_MatchmakingTicketContext::SpaceId' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.DiscoveredServerDTO
// 0x0020 (0x0020 - 0x0000)
struct FDiscoveredServerDTO final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerAddress;                                     // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDiscoveredServerDTO) == 0x000008, "Wrong alignment on FDiscoveredServerDTO");
static_assert(sizeof(FDiscoveredServerDTO) == 0x000020, "Wrong size on FDiscoveredServerDTO");
static_assert(offsetof(FDiscoveredServerDTO, ServerName) == 0x000000, "Member 'FDiscoveredServerDTO::ServerName' has a wrong offset!");
static_assert(offsetof(FDiscoveredServerDTO, ServerAddress) == 0x000010, "Member 'FDiscoveredServerDTO::ServerAddress' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.ValeriaOnlineAchievement
// 0x0020 (0x0020 - 0x0000)
struct FValeriaOnlineAchievement final
{
public:
	class FString                                 AchievementID;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              UnlockTime;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDateTime                              ClaimTime;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FValeriaOnlineAchievement) == 0x000008, "Wrong alignment on FValeriaOnlineAchievement");
static_assert(sizeof(FValeriaOnlineAchievement) == 0x000020, "Wrong size on FValeriaOnlineAchievement");
static_assert(offsetof(FValeriaOnlineAchievement, AchievementID) == 0x000000, "Member 'FValeriaOnlineAchievement::AchievementID' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievement, UnlockTime) == 0x000010, "Member 'FValeriaOnlineAchievement::UnlockTime' has a wrong offset!");
static_assert(offsetof(FValeriaOnlineAchievement, ClaimTime) == 0x000018, "Member 'FValeriaOnlineAchievement::ClaimTime' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.MatchmakingResult
// 0x0010 (0x0010 - 0x0000)
struct FMatchmakingResult final
{
public:
	TArray<struct FServerStatusUpdate>            Servers;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingResult) == 0x000008, "Wrong alignment on FMatchmakingResult");
static_assert(sizeof(FMatchmakingResult) == 0x000010, "Wrong size on FMatchmakingResult");
static_assert(offsetof(FMatchmakingResult, Servers) == 0x000000, "Member 'FMatchmakingResult::Servers' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.MatchmakingNetId
// 0x0020 (0x0020 - 0x0000)
struct FMatchmakingNetId final
{
public:
	struct FGuid                                  Account_id;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Character_id;                                      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingNetId) == 0x000004, "Wrong alignment on FMatchmakingNetId");
static_assert(sizeof(FMatchmakingNetId) == 0x000020, "Wrong size on FMatchmakingNetId");
static_assert(offsetof(FMatchmakingNetId, Account_id) == 0x000000, "Member 'FMatchmakingNetId::Account_id' has a wrong offset!");
static_assert(offsetof(FMatchmakingNetId, Character_id) == 0x000010, "Member 'FMatchmakingNetId::Character_id' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.MatchmakingSearchCriteria
// 0x0010 (0x0010 - 0x0000)
struct FMatchmakingSearchCriteria final
{
public:
	TArray<struct FMatchmakingNetId>              Characters;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingSearchCriteria) == 0x000008, "Wrong alignment on FMatchmakingSearchCriteria");
static_assert(sizeof(FMatchmakingSearchCriteria) == 0x000010, "Wrong size on FMatchmakingSearchCriteria");
static_assert(offsetof(FMatchmakingSearchCriteria, Characters) == 0x000000, "Member 'FMatchmakingSearchCriteria::Characters' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_OnlineProfile
// 0x0020 (0x0020 - 0x0000)
struct FOSSVAL_OnlineProfile final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_OnlineProfile) == 0x000008, "Wrong alignment on FOSSVAL_OnlineProfile");
static_assert(sizeof(FOSSVAL_OnlineProfile) == 0x000020, "Wrong size on FOSSVAL_OnlineProfile");
static_assert(offsetof(FOSSVAL_OnlineProfile, UserName) == 0x000000, "Member 'FOSSVAL_OnlineProfile::UserName' has a wrong offset!");
static_assert(offsetof(FOSSVAL_OnlineProfile, Password) == 0x000010, "Member 'FOSSVAL_OnlineProfile::Password' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_SignInResponse
// 0x0048 (0x0048 - 0x0000)
struct FOSSVAL_SignInResponse final
{
public:
	bool                                          bSuccessful;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D13[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Token;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Domain;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Issuer;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Endpoint;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_SignInResponse) == 0x000008, "Wrong alignment on FOSSVAL_SignInResponse");
static_assert(sizeof(FOSSVAL_SignInResponse) == 0x000048, "Wrong size on FOSSVAL_SignInResponse");
static_assert(offsetof(FOSSVAL_SignInResponse, bSuccessful) == 0x000000, "Member 'FOSSVAL_SignInResponse::bSuccessful' has a wrong offset!");
static_assert(offsetof(FOSSVAL_SignInResponse, Token) == 0x000008, "Member 'FOSSVAL_SignInResponse::Token' has a wrong offset!");
static_assert(offsetof(FOSSVAL_SignInResponse, Domain) == 0x000018, "Member 'FOSSVAL_SignInResponse::Domain' has a wrong offset!");
static_assert(offsetof(FOSSVAL_SignInResponse, Issuer) == 0x000028, "Member 'FOSSVAL_SignInResponse::Issuer' has a wrong offset!");
static_assert(offsetof(FOSSVAL_SignInResponse, Endpoint) == 0x000038, "Member 'FOSSVAL_SignInResponse::Endpoint' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_ChatCensorResponse
// 0x0018 (0x0018 - 0x0000)
struct FOSSVAL_ChatCensorResponse final
{
public:
	bool                                          bSuccessful;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D14[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ErrorCode;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_ChatCensorResponse) == 0x000008, "Wrong alignment on FOSSVAL_ChatCensorResponse");
static_assert(sizeof(FOSSVAL_ChatCensorResponse) == 0x000018, "Wrong size on FOSSVAL_ChatCensorResponse");
static_assert(offsetof(FOSSVAL_ChatCensorResponse, bSuccessful) == 0x000000, "Member 'FOSSVAL_ChatCensorResponse::bSuccessful' has a wrong offset!");
static_assert(offsetof(FOSSVAL_ChatCensorResponse, ErrorCode) == 0x000004, "Member 'FOSSVAL_ChatCensorResponse::ErrorCode' has a wrong offset!");
static_assert(offsetof(FOSSVAL_ChatCensorResponse, Message) == 0x000008, "Member 'FOSSVAL_ChatCensorResponse::Message' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_MatchmakingCustomErrorContainer
// 0x0050 (0x0050 - 0x0000)
struct FOSSVAL_MatchmakingCustomErrorContainer final
{
public:
	TMap<int32, class FText>                      ErrorCodeTextTable;                                // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_MatchmakingCustomErrorContainer) == 0x000008, "Wrong alignment on FOSSVAL_MatchmakingCustomErrorContainer");
static_assert(sizeof(FOSSVAL_MatchmakingCustomErrorContainer) == 0x000050, "Wrong size on FOSSVAL_MatchmakingCustomErrorContainer");
static_assert(offsetof(FOSSVAL_MatchmakingCustomErrorContainer, ErrorCodeTextTable) == 0x000000, "Member 'FOSSVAL_MatchmakingCustomErrorContainer::ErrorCodeTextTable' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_ControlMessage
// 0x0030 (0x0030 - 0x0000)
struct FOSSVAL_ControlMessage final
{
public:
	EOnlineSystemMessageType                      RouterType;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EControlMessageType                           ControlMessageType;                                // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D15[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Content;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FromWorldName;                                     // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageTargetType;                                 // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D16[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOSSVAL_ControlMessage) == 0x000008, "Wrong alignment on FOSSVAL_ControlMessage");
static_assert(sizeof(FOSSVAL_ControlMessage) == 0x000030, "Wrong size on FOSSVAL_ControlMessage");
static_assert(offsetof(FOSSVAL_ControlMessage, RouterType) == 0x000000, "Member 'FOSSVAL_ControlMessage::RouterType' has a wrong offset!");
static_assert(offsetof(FOSSVAL_ControlMessage, ControlMessageType) == 0x000001, "Member 'FOSSVAL_ControlMessage::ControlMessageType' has a wrong offset!");
static_assert(offsetof(FOSSVAL_ControlMessage, Content) == 0x000008, "Member 'FOSSVAL_ControlMessage::Content' has a wrong offset!");
static_assert(offsetof(FOSSVAL_ControlMessage, FromWorldName) == 0x000018, "Member 'FOSSVAL_ControlMessage::FromWorldName' has a wrong offset!");
static_assert(offsetof(FOSSVAL_ControlMessage, MessageTargetType) == 0x000028, "Member 'FOSSVAL_ControlMessage::MessageTargetType' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.OSSVAL_ChatMessage_Context
// 0x0020 (0x0020 - 0x0000)
struct FOSSVAL_ChatMessage_Context final
{
public:
	int32                                         MessageTargetType;                                 // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D17[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SenderWorldLocation;                               // 0x0008(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOSSVAL_ChatMessage_Context) == 0x000008, "Wrong alignment on FOSSVAL_ChatMessage_Context");
static_assert(sizeof(FOSSVAL_ChatMessage_Context) == 0x000020, "Wrong size on FOSSVAL_ChatMessage_Context");
static_assert(offsetof(FOSSVAL_ChatMessage_Context, MessageTargetType) == 0x000000, "Member 'FOSSVAL_ChatMessage_Context::MessageTargetType' has a wrong offset!");
static_assert(offsetof(FOSSVAL_ChatMessage_Context, SenderWorldLocation) == 0x000008, "Member 'FOSSVAL_ChatMessage_Context::SenderWorldLocation' has a wrong offset!");

// ScriptStruct OnlineSubsystemValeria.ValeriaPresenceData
// 0x0040 (0x0040 - 0x0000)
struct FValeriaPresenceData final
{
public:
	class FString                                 ServerId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerMap;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameStatus;                                        // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaPresenceData) == 0x000008, "Wrong alignment on FValeriaPresenceData");
static_assert(sizeof(FValeriaPresenceData) == 0x000040, "Wrong size on FValeriaPresenceData");
static_assert(offsetof(FValeriaPresenceData, ServerId) == 0x000000, "Member 'FValeriaPresenceData::ServerId' has a wrong offset!");
static_assert(offsetof(FValeriaPresenceData, ServerMap) == 0x000010, "Member 'FValeriaPresenceData::ServerMap' has a wrong offset!");
static_assert(offsetof(FValeriaPresenceData, UserId) == 0x000020, "Member 'FValeriaPresenceData::UserId' has a wrong offset!");
static_assert(offsetof(FValeriaPresenceData, GameStatus) == 0x000030, "Member 'FValeriaPresenceData::GameStatus' has a wrong offset!");

}

