#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Base_Head

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ABP_Base_Head_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Palia_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Base_Head.ABP_Base_Head_C
// 0x07A0 (0x0AF0 - 0x0350)
class UABP_Base_Head_C : public UAnimInstance
{
public:
	uint8                                         Pad_5293[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Base_Head::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0358(0x0002)(HasGetValueTypeHash)
	uint8                                         Pad_5294[0x6];                                     // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0360(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0368(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0370(0x0020)()
	struct FAnimNode_PoseBlendNode                AnimGraphNode_PoseBlendNode;                       // 0x0390(0x00D0)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0460(0x00F0)()
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh;                    // 0x0550(0x0158)(ContainsInstancedReference)
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x06A8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x06F0(0x0048)()
	struct FAnimNode_PlaySequenceByMapping        AnimGraphNode_PlaySequenceByMapping;               // 0x0738(0x00C0)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x07F8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0818(0x00C8)()
	struct FAnimNode_PlayBlendSpaceByMapping      AnimGraphNode_PlayBlendSpaceByMapping;             // 0x08E0(0x00B8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0998(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x09B8(0x00C8)()
	bool                                          K2Node_PropertyAccess_3;                           // 0x0A80(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5295[0x7];                                     // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_PropertyAccess_2;                           // 0x0A88(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_1;                           // 0x0AA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5296[0x7];                                     // 0x0AA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_PropertyAccess;                             // 0x0AA8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Last_Used_Anim_Was_Blend_Space;                    // 0x0AC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5297[0x7];                                     // 0x0AC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaCharacter*                      ValeriaCharacter;                                  // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AValeriaVillagerCharacter*              As_Valeria_Villager_Character;                     // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SuccessCastToValeriaCharacter;                     // 0x0AE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SuccessCastToValeriaVillagerCharacter;             // 0x0AE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintBeginPlay();
	void BlueprintInitializeAnimation();
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime, double CallFunc_VSize_ReturnValue, double CallFunc_VSize_ReturnValue_1);
	void ExecuteUbergraph_ABP_Base_Head(int32 EntryPoint, EValeriaFuncResult CallFunc_GetValeriaCharacter_OutResult, class AValeriaCharacter* CallFunc_GetValeriaCharacter_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, class APawn* CallFunc_TryGetPawnOwner_ReturnValue, class AValeriaVillagerCharacter* K2Node_DynamicCast_AsValeria_Villager_Character, bool K2Node_DynamicCast_bSuccess);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Base_Head_C">();
	}
	static class UABP_Base_Head_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Base_Head_C>();
	}
};
static_assert(alignof(UABP_Base_Head_C) == 0x000010, "Wrong alignment on UABP_Base_Head_C");
static_assert(sizeof(UABP_Base_Head_C) == 0x000AF0, "Wrong size on UABP_Base_Head_C");
static_assert(offsetof(UABP_Base_Head_C, UberGraphFrame) == 0x000350, "Member 'UABP_Base_Head_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, __AnimBlueprintMutables) == 0x000358, "Member 'UABP_Base_Head_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimBlueprintExtension_PropertyAccess) == 0x000360, "Member 'UABP_Base_Head_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimBlueprintExtension_Base) == 0x000368, "Member 'UABP_Base_Head_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_Root) == 0x000370, "Member 'UABP_Base_Head_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_PoseBlendNode) == 0x000390, "Member 'UABP_Base_Head_C::AnimGraphNode_PoseBlendNode' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_LayeredBoneBlend) == 0x000460, "Member 'UABP_Base_Head_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_CopyPoseFromMesh) == 0x000550, "Member 'UABP_Base_Head_C::AnimGraphNode_CopyPoseFromMesh' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_Slot) == 0x0006A8, "Member 'UABP_Base_Head_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_BlendListByBool) == 0x0006F0, "Member 'UABP_Base_Head_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_PlaySequenceByMapping) == 0x000738, "Member 'UABP_Base_Head_C::AnimGraphNode_PlaySequenceByMapping' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_StateResult_1) == 0x0007F8, "Member 'UABP_Base_Head_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_StateMachine_1) == 0x000818, "Member 'UABP_Base_Head_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_PlayBlendSpaceByMapping) == 0x0008E0, "Member 'UABP_Base_Head_C::AnimGraphNode_PlayBlendSpaceByMapping' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_StateResult) == 0x000998, "Member 'UABP_Base_Head_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, AnimGraphNode_StateMachine) == 0x0009B8, "Member 'UABP_Base_Head_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, K2Node_PropertyAccess_3) == 0x000A80, "Member 'UABP_Base_Head_C::K2Node_PropertyAccess_3' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, K2Node_PropertyAccess_2) == 0x000A88, "Member 'UABP_Base_Head_C::K2Node_PropertyAccess_2' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, K2Node_PropertyAccess_1) == 0x000AA0, "Member 'UABP_Base_Head_C::K2Node_PropertyAccess_1' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, K2Node_PropertyAccess) == 0x000AA8, "Member 'UABP_Base_Head_C::K2Node_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, Last_Used_Anim_Was_Blend_Space) == 0x000AC0, "Member 'UABP_Base_Head_C::Last_Used_Anim_Was_Blend_Space' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, ValeriaCharacter) == 0x000AC8, "Member 'UABP_Base_Head_C::ValeriaCharacter' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, Speed) == 0x000AD0, "Member 'UABP_Base_Head_C::Speed' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, As_Valeria_Villager_Character) == 0x000AD8, "Member 'UABP_Base_Head_C::As_Valeria_Villager_Character' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, SuccessCastToValeriaCharacter) == 0x000AE0, "Member 'UABP_Base_Head_C::SuccessCastToValeriaCharacter' has a wrong offset!");
static_assert(offsetof(UABP_Base_Head_C, SuccessCastToValeriaVillagerCharacter) == 0x000AE1, "Member 'UABP_Base_Head_C::SuccessCastToValeriaVillagerCharacter' has a wrong offset!");

}

