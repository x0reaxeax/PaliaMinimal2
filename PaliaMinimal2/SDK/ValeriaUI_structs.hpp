#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValeriaUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Palia_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum ValeriaUI.EVALUI_ModelUIType
// NumValues: 0x0004
enum class EVALUI_ModelUIType : uint8
{
	SingleVariant                            = 0,
	Set                                      = 1,
	Bundle                                   = 2,
	EVALUI_MAX                               = 3,
};

// Enum ValeriaUI.EVALUI_CharCustomization_UpdateLoadoutContext
// NumValues: 0x0006
enum class EVALUI_CharCustomization_UpdateLoadoutContext : uint8
{
	InitialLoadout                           = 0,
	TileSelected                             = 1,
	BodyTypeChanged                          = 2,
	VariantChanged                           = 3,
	BodyDataChanged                          = 4,
	EVALUI_CharCustomization_MAX             = 5,
};

// Enum ValeriaUI.EVAL_CharacterNameType
// NumValues: 0x0003
enum class EVAL_CharacterNameType : uint8
{
	Full                                     = 0,
	Preferred                                = 1,
	EVAL_MAX                                 = 2,
};

// Enum ValeriaUI.EVALUI_ChatInputBarState
// NumValues: 0x0005
enum class EVALUI_ChatInputBarState : uint8
{
	Inactive                                 = 0,
	TypingCommand                            = 1,
	TypingMessage                            = 2,
	TypingEmoji                              = 3,
	EVALUI_MAX                               = 4,
};

// Enum ValeriaUI.EVALUI_PregameState
// NumValues: 0x0004
enum class EVALUI_PregameState : uint8
{
	Login                                    = 0,
	Lobby                                    = 1,
	CharacterCreation                        = 2,
	EVALUI_MAX                               = 3,
};

// Enum ValeriaUI.EVALUI_CharacterCreationState
// NumValues: 0x0007
enum class EVALUI_CharacterCreationState : uint8
{
	LoadingRenderStudio                      = 0,
	OpeningCinematic                         = 1,
	BodyTypeSelection                        = 2,
	BodyTypeTransition                       = 3,
	CharacterCustomization                   = 4,
	ClosingCinematic                         = 5,
	EVALUI_MAX                               = 6,
};

// Enum ValeriaUI.EVALUI_LobbyState
// NumValues: 0x0004
enum class EVALUI_LobbyState : uint8
{
	LoadingRenderStudio                      = 0,
	CharacterSelect                          = 1,
	ServerQueue                              = 2,
	EVALUI_MAX                               = 3,
};

// Enum ValeriaUI.EVALUI_LoginState
// NumValues: 0x0007
enum class EVALUI_LoginState : uint8
{
	Idle                                     = 0,
	LinkSuccess                              = 1,
	Publishing                               = 2,
	RetrievingCharacterList                  = 3,
	CodeOfConduct                            = 4,
	TermsOfService                           = 5,
	EVALUI_MAX                               = 6,
};

// Enum ValeriaUI.EVALUI_ChatPanelState
// NumValues: 0x0006
enum class EVALUI_ChatPanelState : uint8
{
	Inactive                                 = 0,
	Active                                   = 1,
	Unavailable                              = 2,
	RetryingLogin                            = 3,
	InvalidJWT                               = 4,
	EVALUI_MAX                               = 5,
};

// Enum ValeriaUI.EVALUI_LoadingScreenFlags
// NumValues: 0x0004
enum class EVALUI_LoadingScreenFlags : uint8
{
	None                                     = 0,
	QueuedToDisplay                          = 1,
	DisplayedDirectViewport                  = 2,
	EVALUI_MAX                               = 3,
};

// Enum ValeriaUI.EMailboxViewerFilter
// NumValues: 0x0003
enum class EMailboxViewerFilter : uint8
{
	NewMail                                  = 0,
	ReadMail                                 = 1,
	EMailboxViewerFilter_MAX                 = 2,
};

// Enum ValeriaUI.EVALUI_UISize
// NumValues: 0x0003
enum class EVALUI_UISize : uint8
{
	Normal                                   = 0,
	Large                                    = 1,
	EVALUI_MAX                               = 2,
};

// Enum ValeriaUI.EFocusDirection
// NumValues: 0x0007
enum class EFocusDirection : uint8
{
	UpperLeftCorner                          = 0,
	Left                                     = 1,
	LowerLeftCorner                          = 2,
	UpperRightCorner                         = 3,
	Right                                    = 4,
	LowerRightCorner                         = 5,
	EFocusDirection_MAX                      = 6,
};

// Enum ValeriaUI.ECursorState
// NumValues: 0x0004
enum class ECursorState : uint8
{
	Disable                                  = 0,
	FocusOnBackground                        = 1,
	FocusOnButton                            = 2,
	ECursorState_MAX                         = 3,
};

// Enum ValeriaUI.EButtonStyledWithBGState
// NumValues: 0x0005
enum class EButtonStyledWithBGState : uint8
{
	Normal                                   = 0,
	Hovered                                  = 1,
	Pressed                                  = 2,
	Disabled                                 = 3,
	EButtonStyledWithBGState_MAX             = 4,
};

// Enum ValeriaUI.EGamepadKeyHintLocation
// NumValues: 0x0003
enum class EGamepadKeyHintLocation : uint8
{
	BottomLeft                               = 0,
	BottomRight                              = 1,
	EGamepadKeyHintLocation_MAX              = 2,
};

// Enum ValeriaUI.EItemAmountDisplayType
// NumValues: 0x0006
enum class EItemAmountDisplayType : uint8
{
	None                                     = 0,
	ShowAlways                               = 1,
	ShowIfMoreThanOne                        = 2,
	ShowAvailableVsAmount                    = 3,
	ShowAmountVsTotal                        = 4,
	EItemAmountDisplayType_MAX               = 5,
};

// Enum ValeriaUI.EItemEmptyDisplayType
// NumValues: 0x0004
enum class EItemEmptyDisplayType : uint8
{
	Hide                                     = 0,
	Show                                     = 1,
	Dim                                      = 2,
	EItemEmptyDisplayType_MAX                = 3,
};

// Enum ValeriaUI.EVALUI_PremiumCurrencyPurchaseState
// NumValues: 0x0006
enum class EVALUI_PremiumCurrencyPurchaseState : uint8
{
	None                                     = 0,
	InProgress                               = 1,
	Cancelled                                = 2,
	Paid                                     = 3,
	Fulfilled                                = 4,
	EVALUI_MAX                               = 5,
};

// Enum ValeriaUI.EVALUI_PremiumCurrencyProvider
// NumValues: 0x0006
enum class EVALUI_PremiumCurrencyProvider : uint8
{
	Stripe                                   = 0,
	Paypal                                   = 1,
	Switch                                   = 2,
	Steam                                    = 3,
	Count                                    = 4,
	EVALUI_MAX                               = 5,
};

// Enum ValeriaUI.EVALUI_PremiumCurrencyWidgetState
// NumValues: 0x0006
enum class EVALUI_PremiumCurrencyWidgetState : uint8
{
	BundleSelection                          = 0,
	ErrorMessaging                           = 1,
	CheckoutSession                          = 2,
	ValidationMessaging                      = 3,
	FinishMessaging                          = 4,
	EVALUI_MAX                               = 5,
};

// Enum ValeriaUI.EVALUI_PremiumPurchaseButtonState
// NumValues: 0x0004
enum class EVALUI_PremiumPurchaseButtonState : uint8
{
	Enabled                                  = 0,
	NotEnoughCoins                           = 1,
	ZeroCost                                 = 2,
	EVALUI_MAX                               = 3,
};

// Enum ValeriaUI.EVALUI_SaleType
// NumValues: 0x0005
enum class EVALUI_SaleType : uint8
{
	Variant                                  = 0,
	MultipleVariants                         = 1,
	Set                                      = 2,
	Bundle                                   = 3,
	EVALUI_MAX                               = 4,
};

// Enum ValeriaUI.EVALUI_TooltipType
// NumValues: 0x0003
enum class EVALUI_TooltipType : uint8
{
	General                                  = 0,
	Store                                    = 1,
	EVALUI_MAX                               = 2,
};

// ScriptStruct ValeriaUI.VALUI_PremiumStorefrontVariant
// 0x00D8 (0x00D8 - 0x0000)
struct FVALUI_PremiumStorefrontVariant final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasePrice;                                         // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Owned;                                             // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CBA[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TSoftObjectPtr<class UVAL_CharacterCustomizationItemBase>> Items;                                             // 0x0030(0x0050)(BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<struct FGuid>                            ItemIds;                                           // 0x0080(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	EVALUI_ModelUIType                            UIType;                                            // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CBB[0x7];                                     // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVALUI_PremiumStorefrontVariant) == 0x000008, "Wrong alignment on FVALUI_PremiumStorefrontVariant");
static_assert(sizeof(FVALUI_PremiumStorefrontVariant) == 0x0000D8, "Wrong size on FVALUI_PremiumStorefrontVariant");
static_assert(offsetof(FVALUI_PremiumStorefrontVariant, ID) == 0x000000, "Member 'FVALUI_PremiumStorefrontVariant::ID' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontVariant, Name) == 0x000010, "Member 'FVALUI_PremiumStorefrontVariant::Name' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontVariant, DiscountedPrice) == 0x000020, "Member 'FVALUI_PremiumStorefrontVariant::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontVariant, BasePrice) == 0x000024, "Member 'FVALUI_PremiumStorefrontVariant::BasePrice' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontVariant, Owned) == 0x000028, "Member 'FVALUI_PremiumStorefrontVariant::Owned' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontVariant, Items) == 0x000030, "Member 'FVALUI_PremiumStorefrontVariant::Items' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontVariant, ItemIds) == 0x000080, "Member 'FVALUI_PremiumStorefrontVariant::ItemIds' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontVariant, UIType) == 0x0000D0, "Member 'FVALUI_PremiumStorefrontVariant::UIType' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_PremiumStorefrontWidgetModel
// 0x0058 (0x0058 - 0x0000)
struct FVALUI_PremiumStorefrontWidgetModel final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscountedPrice;                                   // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasePrice;                                         // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Owned;                                             // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CBC[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AssetURL;                                          // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVALUI_PremiumStorefrontVariant> Variants;                                          // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EVALUI_ModelUIType                            UIType;                                            // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CBD[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Discount;                                          // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_PremiumStorefrontWidgetModel) == 0x000008, "Wrong alignment on FVALUI_PremiumStorefrontWidgetModel");
static_assert(sizeof(FVALUI_PremiumStorefrontWidgetModel) == 0x000058, "Wrong size on FVALUI_PremiumStorefrontWidgetModel");
static_assert(offsetof(FVALUI_PremiumStorefrontWidgetModel, ID) == 0x000000, "Member 'FVALUI_PremiumStorefrontWidgetModel::ID' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontWidgetModel, Name) == 0x000010, "Member 'FVALUI_PremiumStorefrontWidgetModel::Name' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontWidgetModel, DiscountedPrice) == 0x000020, "Member 'FVALUI_PremiumStorefrontWidgetModel::DiscountedPrice' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontWidgetModel, BasePrice) == 0x000024, "Member 'FVALUI_PremiumStorefrontWidgetModel::BasePrice' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontWidgetModel, Owned) == 0x000028, "Member 'FVALUI_PremiumStorefrontWidgetModel::Owned' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontWidgetModel, AssetURL) == 0x000030, "Member 'FVALUI_PremiumStorefrontWidgetModel::AssetURL' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontWidgetModel, Variants) == 0x000040, "Member 'FVALUI_PremiumStorefrontWidgetModel::Variants' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontWidgetModel, UIType) == 0x000050, "Member 'FVALUI_PremiumStorefrontWidgetModel::UIType' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontWidgetModel, Discount) == 0x000054, "Member 'FVALUI_PremiumStorefrontWidgetModel::Discount' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_PurchaseReward
// 0x00A8 (0x00A8 - 0x0000)
struct FVALUI_PurchaseReward final
{
public:
	int32                                         CoinAmount;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CBE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FGuid>                            RewardIds;                                         // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<TSoftObjectPtr<class UVAL_CharacterCustomizationItemBase>> RewardItems;                                       // 0x0058(0x0050)(BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_PurchaseReward) == 0x000008, "Wrong alignment on FVALUI_PurchaseReward");
static_assert(sizeof(FVALUI_PurchaseReward) == 0x0000A8, "Wrong size on FVALUI_PurchaseReward");
static_assert(offsetof(FVALUI_PurchaseReward, CoinAmount) == 0x000000, "Member 'FVALUI_PurchaseReward::CoinAmount' has a wrong offset!");
static_assert(offsetof(FVALUI_PurchaseReward, RewardIds) == 0x000008, "Member 'FVALUI_PurchaseReward::RewardIds' has a wrong offset!");
static_assert(offsetof(FVALUI_PurchaseReward, RewardItems) == 0x000058, "Member 'FVALUI_PurchaseReward::RewardItems' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_PremiumStorefrontPurchaseRewards
// 0x0010 (0x0010 - 0x0000)
struct FVALUI_PremiumStorefrontPurchaseRewards final
{
public:
	TArray<struct FVALUI_PurchaseReward>          PurchaseRewards;                                   // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_PremiumStorefrontPurchaseRewards) == 0x000008, "Wrong alignment on FVALUI_PremiumStorefrontPurchaseRewards");
static_assert(sizeof(FVALUI_PremiumStorefrontPurchaseRewards) == 0x000010, "Wrong size on FVALUI_PremiumStorefrontPurchaseRewards");
static_assert(offsetof(FVALUI_PremiumStorefrontPurchaseRewards, PurchaseRewards) == 0x000000, "Member 'FVALUI_PremiumStorefrontPurchaseRewards::PurchaseRewards' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_PremiumStorefrontMultipleVariantsDataHelper
// 0x0130 (0x0130 - 0x0000)
struct FVALUI_PremiumStorefrontMultipleVariantsDataHelper final
{
public:
	struct FVALUI_PremiumStorefrontVariant        Variant;                                           // 0x0000(0x00D8)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVALUI_PremiumStorefrontWidgetModel    ParentSet;                                         // 0x00D8(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_PremiumStorefrontMultipleVariantsDataHelper) == 0x000008, "Wrong alignment on FVALUI_PremiumStorefrontMultipleVariantsDataHelper");
static_assert(sizeof(FVALUI_PremiumStorefrontMultipleVariantsDataHelper) == 0x000130, "Wrong size on FVALUI_PremiumStorefrontMultipleVariantsDataHelper");
static_assert(offsetof(FVALUI_PremiumStorefrontMultipleVariantsDataHelper, Variant) == 0x000000, "Member 'FVALUI_PremiumStorefrontMultipleVariantsDataHelper::Variant' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontMultipleVariantsDataHelper, ParentSet) == 0x0000D8, "Member 'FVALUI_PremiumStorefrontMultipleVariantsDataHelper::ParentSet' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_PremiumStorefrontResponse
// 0x0078 (0x0078 - 0x0000)
struct FVALUI_PremiumStorefrontResponse final
{
public:
	TArray<struct FVALUI_PremiumStorefrontWidgetModel> Models;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVALUI_PremiumStorefrontPurchaseRewards PurchaseRewards;                                   // 0x0010(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              LastStoreUpdateTimestamp;                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FVALUI_PremiumStorefrontMultipleVariantsDataHelper> ItemIdToVariantMap;                                // 0x0028(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_PremiumStorefrontResponse) == 0x000008, "Wrong alignment on FVALUI_PremiumStorefrontResponse");
static_assert(sizeof(FVALUI_PremiumStorefrontResponse) == 0x000078, "Wrong size on FVALUI_PremiumStorefrontResponse");
static_assert(offsetof(FVALUI_PremiumStorefrontResponse, Models) == 0x000000, "Member 'FVALUI_PremiumStorefrontResponse::Models' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontResponse, PurchaseRewards) == 0x000010, "Member 'FVALUI_PremiumStorefrontResponse::PurchaseRewards' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontResponse, LastStoreUpdateTimestamp) == 0x000020, "Member 'FVALUI_PremiumStorefrontResponse::LastStoreUpdateTimestamp' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumStorefrontResponse, ItemIdToVariantMap) == 0x000028, "Member 'FVALUI_PremiumStorefrontResponse::ItemIdToVariantMap' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_CharacterNameValidityResponse
// 0x0018 (0x0018 - 0x0000)
struct FVALUI_CharacterNameValidityResponse final
{
public:
	EVAL_CharacterNameType                        CharacterNameType;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CBF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ErrorMessages;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_CharacterNameValidityResponse) == 0x000008, "Wrong alignment on FVALUI_CharacterNameValidityResponse");
static_assert(sizeof(FVALUI_CharacterNameValidityResponse) == 0x000018, "Wrong size on FVALUI_CharacterNameValidityResponse");
static_assert(offsetof(FVALUI_CharacterNameValidityResponse, CharacterNameType) == 0x000000, "Member 'FVALUI_CharacterNameValidityResponse::CharacterNameType' has a wrong offset!");
static_assert(offsetof(FVALUI_CharacterNameValidityResponse, ErrorMessages) == 0x000008, "Member 'FVALUI_CharacterNameValidityResponse::ErrorMessages' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_CharCustomization_UpdateLoadoutContextPayload
// 0x0068 (0x0068 - 0x0000)
struct FVALUI_CharCustomization_UpdateLoadoutContextPayload final
{
public:
	EVALUI_CharCustomization_UpdateLoadoutContext UpdateType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             LoadoutSlotsModified;                              // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                TileItemSelected;                                  // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_ApplyCustomizationToActorContext         ApplyCustomizationContext;                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC1[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVALUI_CharCustomization_UpdateLoadoutContextPayload) == 0x000008, "Wrong alignment on FVALUI_CharCustomization_UpdateLoadoutContextPayload");
static_assert(sizeof(FVALUI_CharCustomization_UpdateLoadoutContextPayload) == 0x000068, "Wrong size on FVALUI_CharCustomization_UpdateLoadoutContextPayload");
static_assert(offsetof(FVALUI_CharCustomization_UpdateLoadoutContextPayload, UpdateType) == 0x000000, "Member 'FVALUI_CharCustomization_UpdateLoadoutContextPayload::UpdateType' has a wrong offset!");
static_assert(offsetof(FVALUI_CharCustomization_UpdateLoadoutContextPayload, LoadoutSlotsModified) == 0x000008, "Member 'FVALUI_CharCustomization_UpdateLoadoutContextPayload::LoadoutSlotsModified' has a wrong offset!");
static_assert(offsetof(FVALUI_CharCustomization_UpdateLoadoutContextPayload, TileItemSelected) == 0x000058, "Member 'FVALUI_CharCustomization_UpdateLoadoutContextPayload::TileItemSelected' has a wrong offset!");
static_assert(offsetof(FVALUI_CharCustomization_UpdateLoadoutContextPayload, ApplyCustomizationContext) == 0x000060, "Member 'FVALUI_CharCustomization_UpdateLoadoutContextPayload::ApplyCustomizationContext' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_SocialTrackingData
// 0x0014 (0x0014 - 0x0000)
struct FVALUI_SocialTrackingData final
{
public:
	int32                                         FriendRequestCount;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyRequestCount;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerSyncRequestCount;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemRequestsCount;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendsOnlineCount;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_SocialTrackingData) == 0x000004, "Wrong alignment on FVALUI_SocialTrackingData");
static_assert(sizeof(FVALUI_SocialTrackingData) == 0x000014, "Wrong size on FVALUI_SocialTrackingData");
static_assert(offsetof(FVALUI_SocialTrackingData, FriendRequestCount) == 0x000000, "Member 'FVALUI_SocialTrackingData::FriendRequestCount' has a wrong offset!");
static_assert(offsetof(FVALUI_SocialTrackingData, PartyRequestCount) == 0x000004, "Member 'FVALUI_SocialTrackingData::PartyRequestCount' has a wrong offset!");
static_assert(offsetof(FVALUI_SocialTrackingData, ServerSyncRequestCount) == 0x000008, "Member 'FVALUI_SocialTrackingData::ServerSyncRequestCount' has a wrong offset!");
static_assert(offsetof(FVALUI_SocialTrackingData, ItemRequestsCount) == 0x00000C, "Member 'FVALUI_SocialTrackingData::ItemRequestsCount' has a wrong offset!");
static_assert(offsetof(FVALUI_SocialTrackingData, FriendsOnlineCount) == 0x000010, "Member 'FVALUI_SocialTrackingData::FriendsOnlineCount' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_ChatChannel
// 0x00B0 (0x00B0 - 0x0000)
struct FVALUI_ChatChannel final
{
public:
	struct FMessageTarget                         MessageTarget;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ChannelColor;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayed;                                        // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC2[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ShortName;                                         // 0x0068(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LongName;                                          // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessagePrefix;                                     // 0x0098(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_ChatChannel) == 0x000008, "Wrong alignment on FVALUI_ChatChannel");
static_assert(sizeof(FVALUI_ChatChannel) == 0x0000B0, "Wrong size on FVALUI_ChatChannel");
static_assert(offsetof(FVALUI_ChatChannel, MessageTarget) == 0x000000, "Member 'FVALUI_ChatChannel::MessageTarget' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatChannel, ChannelColor) == 0x000028, "Member 'FVALUI_ChatChannel::ChannelColor' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatChannel, bDisabled) == 0x000038, "Member 'FVALUI_ChatChannel::bDisabled' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatChannel, bDisplayed) == 0x000039, "Member 'FVALUI_ChatChannel::bDisplayed' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatChannel, Icon) == 0x000040, "Member 'FVALUI_ChatChannel::Icon' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatChannel, ShortName) == 0x000068, "Member 'FVALUI_ChatChannel::ShortName' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatChannel, LongName) == 0x000080, "Member 'FVALUI_ChatChannel::LongName' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatChannel, MessagePrefix) == 0x000098, "Member 'FVALUI_ChatChannel::MessagePrefix' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_NotificationQueueEntry
// 0x0018 (0x0018 - 0x0000)
struct FVALUI_NotificationQueueEntry final
{
public:
	struct FGuid                                  NotificationId;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                NotificationWidget;                                // 0x0010(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_NotificationQueueEntry) == 0x000008, "Wrong alignment on FVALUI_NotificationQueueEntry");
static_assert(sizeof(FVALUI_NotificationQueueEntry) == 0x000018, "Wrong size on FVALUI_NotificationQueueEntry");
static_assert(offsetof(FVALUI_NotificationQueueEntry, NotificationId) == 0x000000, "Member 'FVALUI_NotificationQueueEntry::NotificationId' has a wrong offset!");
static_assert(offsetof(FVALUI_NotificationQueueEntry, NotificationWidget) == 0x000010, "Member 'FVALUI_NotificationQueueEntry::NotificationWidget' has a wrong offset!");

// ScriptStruct ValeriaUI.MailGrantedQuest
// 0x0020 (0x0020 - 0x0000)
struct FMailGrantedQuest final
{
public:
	class FText                                   QuestName;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         QuestConfigId;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC3[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMailGrantedQuest) == 0x000008, "Wrong alignment on FMailGrantedQuest");
static_assert(sizeof(FMailGrantedQuest) == 0x000020, "Wrong size on FMailGrantedQuest");
static_assert(offsetof(FMailGrantedQuest, QuestName) == 0x000000, "Member 'FMailGrantedQuest::QuestName' has a wrong offset!");
static_assert(offsetof(FMailGrantedQuest, QuestConfigId) == 0x000018, "Member 'FMailGrantedQuest::QuestConfigId' has a wrong offset!");

// ScriptStruct ValeriaUI.CrafterUIState
// 0x0008 (0x0008 - 0x0000)
struct FCrafterUIState final
{
public:
	int32                                         SelectedRecipeId;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedRecipeListTab;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrafterUIState) == 0x000004, "Wrong alignment on FCrafterUIState");
static_assert(sizeof(FCrafterUIState) == 0x000008, "Wrong size on FCrafterUIState");
static_assert(offsetof(FCrafterUIState, SelectedRecipeId) == 0x000000, "Member 'FCrafterUIState::SelectedRecipeId' has a wrong offset!");
static_assert(offsetof(FCrafterUIState, SelectedRecipeListTab) == 0x000004, "Member 'FCrafterUIState::SelectedRecipeListTab' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_RadioSliderPaginationSettings
// 0x0098 (0x0098 - 0x0000)
struct FVALUI_RadioSliderPaginationSettings final
{
public:
	bool                                          bShouldPaginate;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtraPreviewPadding;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageElementCount;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationTime;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     AnimationCurve;                                    // 0x0010(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_RadioSliderPaginationSettings) == 0x000008, "Wrong alignment on FVALUI_RadioSliderPaginationSettings");
static_assert(sizeof(FVALUI_RadioSliderPaginationSettings) == 0x000098, "Wrong size on FVALUI_RadioSliderPaginationSettings");
static_assert(offsetof(FVALUI_RadioSliderPaginationSettings, bShouldPaginate) == 0x000000, "Member 'FVALUI_RadioSliderPaginationSettings::bShouldPaginate' has a wrong offset!");
static_assert(offsetof(FVALUI_RadioSliderPaginationSettings, ExtraPreviewPadding) == 0x000004, "Member 'FVALUI_RadioSliderPaginationSettings::ExtraPreviewPadding' has a wrong offset!");
static_assert(offsetof(FVALUI_RadioSliderPaginationSettings, PageElementCount) == 0x000008, "Member 'FVALUI_RadioSliderPaginationSettings::PageElementCount' has a wrong offset!");
static_assert(offsetof(FVALUI_RadioSliderPaginationSettings, AnimationTime) == 0x00000C, "Member 'FVALUI_RadioSliderPaginationSettings::AnimationTime' has a wrong offset!");
static_assert(offsetof(FVALUI_RadioSliderPaginationSettings, AnimationCurve) == 0x000010, "Member 'FVALUI_RadioSliderPaginationSettings::AnimationCurve' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_InstantiatedTabButtonInfo
// 0x0068 (0x0068 - 0x0000)
struct FVALUI_InstantiatedTabButtonInfo final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UButton*                                Button;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              IconSize;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AssociatedContent;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVALUI_Functor_Button_OnClicked*        Functor_OnClicked;                                 // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_InstantiatedTabButtonInfo) == 0x000008, "Wrong alignment on FVALUI_InstantiatedTabButtonInfo");
static_assert(sizeof(FVALUI_InstantiatedTabButtonInfo) == 0x000068, "Wrong size on FVALUI_InstantiatedTabButtonInfo");
static_assert(offsetof(FVALUI_InstantiatedTabButtonInfo, DisplayName) == 0x000000, "Member 'FVALUI_InstantiatedTabButtonInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FVALUI_InstantiatedTabButtonInfo, Button) == 0x000018, "Member 'FVALUI_InstantiatedTabButtonInfo::Button' has a wrong offset!");
static_assert(offsetof(FVALUI_InstantiatedTabButtonInfo, IconTexture) == 0x000020, "Member 'FVALUI_InstantiatedTabButtonInfo::IconTexture' has a wrong offset!");
static_assert(offsetof(FVALUI_InstantiatedTabButtonInfo, IconSize) == 0x000048, "Member 'FVALUI_InstantiatedTabButtonInfo::IconSize' has a wrong offset!");
static_assert(offsetof(FVALUI_InstantiatedTabButtonInfo, AssociatedContent) == 0x000058, "Member 'FVALUI_InstantiatedTabButtonInfo::AssociatedContent' has a wrong offset!");
static_assert(offsetof(FVALUI_InstantiatedTabButtonInfo, Functor_OnClicked) == 0x000060, "Member 'FVALUI_InstantiatedTabButtonInfo::Functor_OnClicked' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_TabButtonPreregistrationInfo
// 0x0068 (0x0068 - 0x0000)
struct FVALUI_TabButtonPreregistrationInfo final
{
public:
	class FName                                   TabName;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TabDisplayName;                                    // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              IconFixedSize;                                     // 0x0048(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                TemplateButton;                                    // 0x0058(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                AssociatedContent;                                 // 0x0060(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_TabButtonPreregistrationInfo) == 0x000008, "Wrong alignment on FVALUI_TabButtonPreregistrationInfo");
static_assert(sizeof(FVALUI_TabButtonPreregistrationInfo) == 0x000068, "Wrong size on FVALUI_TabButtonPreregistrationInfo");
static_assert(offsetof(FVALUI_TabButtonPreregistrationInfo, TabName) == 0x000000, "Member 'FVALUI_TabButtonPreregistrationInfo::TabName' has a wrong offset!");
static_assert(offsetof(FVALUI_TabButtonPreregistrationInfo, TabDisplayName) == 0x000008, "Member 'FVALUI_TabButtonPreregistrationInfo::TabDisplayName' has a wrong offset!");
static_assert(offsetof(FVALUI_TabButtonPreregistrationInfo, IconTexture) == 0x000020, "Member 'FVALUI_TabButtonPreregistrationInfo::IconTexture' has a wrong offset!");
static_assert(offsetof(FVALUI_TabButtonPreregistrationInfo, IconFixedSize) == 0x000048, "Member 'FVALUI_TabButtonPreregistrationInfo::IconFixedSize' has a wrong offset!");
static_assert(offsetof(FVALUI_TabButtonPreregistrationInfo, TemplateButton) == 0x000058, "Member 'FVALUI_TabButtonPreregistrationInfo::TemplateButton' has a wrong offset!");
static_assert(offsetof(FVALUI_TabButtonPreregistrationInfo, AssociatedContent) == 0x000060, "Member 'FVALUI_TabButtonPreregistrationInfo::AssociatedContent' has a wrong offset!");

// ScriptStruct ValeriaUI.MailMessageWidgetData
// 0x0130 (0x0130 - 0x0000)
struct FMailMessageWidgetData final
{
public:
	class FText                                   SenderName;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SenderIcon;                                        // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SealIcon;                                          // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              StampIcon;                                         // 0x0068(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SenderFriendshipLevel;                             // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SenderRomanceLevel;                                // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomHeader;                                  // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC5[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CustomHeader;                                      // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   MessageBody;                                       // 0x00B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int64                                         Timestamp;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVillagerMail;                                   // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC6[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VillagerMailId;                                    // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerMailId;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMailboxViewerFilter                          MailStatus;                                        // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC7[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSingleQuestReward>             Rewards;                                           // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<bool>                                  WasRewardCollected;                                // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMailGrantedQuest>              Quests;                                            // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsHidden;                                         // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC8[0x7];                                     // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMailMessageWidgetData) == 0x000008, "Wrong alignment on FMailMessageWidgetData");
static_assert(sizeof(FMailMessageWidgetData) == 0x000130, "Wrong size on FMailMessageWidgetData");
static_assert(offsetof(FMailMessageWidgetData, SenderName) == 0x000000, "Member 'FMailMessageWidgetData::SenderName' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, SenderIcon) == 0x000018, "Member 'FMailMessageWidgetData::SenderIcon' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, SealIcon) == 0x000040, "Member 'FMailMessageWidgetData::SealIcon' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, StampIcon) == 0x000068, "Member 'FMailMessageWidgetData::StampIcon' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, SenderFriendshipLevel) == 0x000090, "Member 'FMailMessageWidgetData::SenderFriendshipLevel' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, SenderRomanceLevel) == 0x000094, "Member 'FMailMessageWidgetData::SenderRomanceLevel' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, bUseCustomHeader) == 0x000098, "Member 'FMailMessageWidgetData::bUseCustomHeader' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, CustomHeader) == 0x0000A0, "Member 'FMailMessageWidgetData::CustomHeader' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, MessageBody) == 0x0000B8, "Member 'FMailMessageWidgetData::MessageBody' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, Timestamp) == 0x0000D0, "Member 'FMailMessageWidgetData::Timestamp' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, bIsVillagerMail) == 0x0000D8, "Member 'FMailMessageWidgetData::bIsVillagerMail' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, VillagerMailId) == 0x0000DC, "Member 'FMailMessageWidgetData::VillagerMailId' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, PlayerMailId) == 0x0000E0, "Member 'FMailMessageWidgetData::PlayerMailId' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, MailStatus) == 0x0000F0, "Member 'FMailMessageWidgetData::MailStatus' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, Rewards) == 0x0000F8, "Member 'FMailMessageWidgetData::Rewards' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, WasRewardCollected) == 0x000108, "Member 'FMailMessageWidgetData::WasRewardCollected' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, Quests) == 0x000118, "Member 'FMailMessageWidgetData::Quests' has a wrong offset!");
static_assert(offsetof(FMailMessageWidgetData, bIsHidden) == 0x000128, "Member 'FMailMessageWidgetData::bIsHidden' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_CharCustomization_LoadoutSlotData
// 0x0038 (0x0038 - 0x0000)
struct FVALUI_CharCustomization_LoadoutSlotData final
{
public:
	class UWidget*                                ViewWidget;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UVAL_CharacterCustomizationItemBase> ItemClass;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ItemObjects;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UVAL_CharacterCustomizationItemBase>> ItemBaseObjects;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bShouldRefreshAllTileViewsWhenVariantChanged;      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC9[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVALUI_CharCustomization_LoadoutSlotData) == 0x000008, "Wrong alignment on FVALUI_CharCustomization_LoadoutSlotData");
static_assert(sizeof(FVALUI_CharCustomization_LoadoutSlotData) == 0x000038, "Wrong size on FVALUI_CharCustomization_LoadoutSlotData");
static_assert(offsetof(FVALUI_CharCustomization_LoadoutSlotData, ViewWidget) == 0x000000, "Member 'FVALUI_CharCustomization_LoadoutSlotData::ViewWidget' has a wrong offset!");
static_assert(offsetof(FVALUI_CharCustomization_LoadoutSlotData, ItemClass) == 0x000008, "Member 'FVALUI_CharCustomization_LoadoutSlotData::ItemClass' has a wrong offset!");
static_assert(offsetof(FVALUI_CharCustomization_LoadoutSlotData, ItemObjects) == 0x000010, "Member 'FVALUI_CharCustomization_LoadoutSlotData::ItemObjects' has a wrong offset!");
static_assert(offsetof(FVALUI_CharCustomization_LoadoutSlotData, ItemBaseObjects) == 0x000020, "Member 'FVALUI_CharCustomization_LoadoutSlotData::ItemBaseObjects' has a wrong offset!");
static_assert(offsetof(FVALUI_CharCustomization_LoadoutSlotData, bShouldRefreshAllTileViewsWhenVariantChanged) == 0x000030, "Member 'FVALUI_CharCustomization_LoadoutSlotData::bShouldRefreshAllTileViewsWhenVariantChanged' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_ChatTab
// 0x0060 (0x0060 - 0x0000)
struct FVALUI_ChatTab final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UWidget*                                MessagePanelWidget;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                SidePanelWidget;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVALUI_ChatChannel>             Channels;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMessageTarget                         CachedMessageTarget;                               // 0x0038(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_ChatTab) == 0x000008, "Wrong alignment on FVALUI_ChatTab");
static_assert(sizeof(FVALUI_ChatTab) == 0x000060, "Wrong size on FVALUI_ChatTab");
static_assert(offsetof(FVALUI_ChatTab, DisplayName) == 0x000000, "Member 'FVALUI_ChatTab::DisplayName' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatTab, MessagePanelWidget) == 0x000018, "Member 'FVALUI_ChatTab::MessagePanelWidget' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatTab, SidePanelWidget) == 0x000020, "Member 'FVALUI_ChatTab::SidePanelWidget' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatTab, Channels) == 0x000028, "Member 'FVALUI_ChatTab::Channels' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatTab, CachedMessageTarget) == 0x000038, "Member 'FVALUI_ChatTab::CachedMessageTarget' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_ChatMessageConfig
// 0x000C (0x000C - 0x0000)
struct FVALUI_ChatMessageConfig final
{
public:
	class FName                                   TabId;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChannelIndex;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_ChatMessageConfig) == 0x000004, "Wrong alignment on FVALUI_ChatMessageConfig");
static_assert(sizeof(FVALUI_ChatMessageConfig) == 0x00000C, "Wrong size on FVALUI_ChatMessageConfig");
static_assert(offsetof(FVALUI_ChatMessageConfig, TabId) == 0x000000, "Member 'FVALUI_ChatMessageConfig::TabId' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatMessageConfig, ChannelIndex) == 0x000008, "Member 'FVALUI_ChatMessageConfig::ChannelIndex' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_ChatMessageFetchFilter
// 0x0058 (0x0058 - 0x0000)
struct FVALUI_ChatMessageFetchFilter final
{
public:
	TSet<EChatMessageType>                        Types;                                             // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MessageCount;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CCA[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVALUI_ChatMessageFetchFilter) == 0x000008, "Wrong alignment on FVALUI_ChatMessageFetchFilter");
static_assert(sizeof(FVALUI_ChatMessageFetchFilter) == 0x000058, "Wrong size on FVALUI_ChatMessageFetchFilter");
static_assert(offsetof(FVALUI_ChatMessageFetchFilter, Types) == 0x000000, "Member 'FVALUI_ChatMessageFetchFilter::Types' has a wrong offset!");
static_assert(offsetof(FVALUI_ChatMessageFetchFilter, MessageCount) == 0x000050, "Member 'FVALUI_ChatMessageFetchFilter::MessageCount' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_Crafter
// 0x0050 (0x0050 - 0x0000)
struct FVALUI_Crafter final
{
public:
	TMap<class FName, class UWidget*>             Widgets;                                           // 0x0000(0x0050)(Edit, BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_Crafter) == 0x000008, "Wrong alignment on FVALUI_Crafter");
static_assert(sizeof(FVALUI_Crafter) == 0x000050, "Wrong size on FVALUI_Crafter");
static_assert(offsetof(FVALUI_Crafter, Widgets) == 0x000000, "Member 'FVALUI_Crafter::Widgets' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_ErrorDisplayPayload
// 0x0018 (0x0018 - 0x0000)
struct FVALUI_ErrorDisplayPayload final
{
public:
	class FText                                   MessageText;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_ErrorDisplayPayload) == 0x000008, "Wrong alignment on FVALUI_ErrorDisplayPayload");
static_assert(sizeof(FVALUI_ErrorDisplayPayload) == 0x000018, "Wrong size on FVALUI_ErrorDisplayPayload");
static_assert(offsetof(FVALUI_ErrorDisplayPayload, MessageText) == 0x000000, "Member 'FVALUI_ErrorDisplayPayload::MessageText' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_MainHUDState
// 0x000C (0x000C - 0x0000)
struct FVALUI_MainHUDState final
{
public:
	bool                                          bChatPanelOpened;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSocialPanelOpened;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToolWheelOpened;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmoteWheelOpened;                                 // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVillagerStoreOpened;                              // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDialogueOpened;                                   // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CCB[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumRequestingRightElementsBeHidden;                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_MainHUDState) == 0x000004, "Wrong alignment on FVALUI_MainHUDState");
static_assert(sizeof(FVALUI_MainHUDState) == 0x00000C, "Wrong size on FVALUI_MainHUDState");
static_assert(offsetof(FVALUI_MainHUDState, bChatPanelOpened) == 0x000000, "Member 'FVALUI_MainHUDState::bChatPanelOpened' has a wrong offset!");
static_assert(offsetof(FVALUI_MainHUDState, bSocialPanelOpened) == 0x000001, "Member 'FVALUI_MainHUDState::bSocialPanelOpened' has a wrong offset!");
static_assert(offsetof(FVALUI_MainHUDState, bToolWheelOpened) == 0x000002, "Member 'FVALUI_MainHUDState::bToolWheelOpened' has a wrong offset!");
static_assert(offsetof(FVALUI_MainHUDState, bEmoteWheelOpened) == 0x000003, "Member 'FVALUI_MainHUDState::bEmoteWheelOpened' has a wrong offset!");
static_assert(offsetof(FVALUI_MainHUDState, bVillagerStoreOpened) == 0x000004, "Member 'FVALUI_MainHUDState::bVillagerStoreOpened' has a wrong offset!");
static_assert(offsetof(FVALUI_MainHUDState, bDialogueOpened) == 0x000005, "Member 'FVALUI_MainHUDState::bDialogueOpened' has a wrong offset!");
static_assert(offsetof(FVALUI_MainHUDState, NumRequestingRightElementsBeHidden) == 0x000008, "Member 'FVALUI_MainHUDState::NumRequestingRightElementsBeHidden' has a wrong offset!");

// ScriptStruct ValeriaUI.VALUI_PaliaPassHUDState
// 0x0001 (0x0001 - 0x0000)
struct FVALUI_PaliaPassHUDState final
{
public:
	uint8                                         Pad_2CCC[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVALUI_PaliaPassHUDState) == 0x000001, "Wrong alignment on FVALUI_PaliaPassHUDState");
static_assert(sizeof(FVALUI_PaliaPassHUDState) == 0x000001, "Wrong size on FVALUI_PaliaPassHUDState");

// ScriptStruct ValeriaUI.VALUI_PremiumCurrencyBundle
// 0x0078 (0x0078 - 0x0000)
struct FVALUI_PremiumCurrencyBundle final
{
public:
	struct FGuid                                  BundleId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BundleAmount;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusAmount;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BundlePrice;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CCD[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyCode;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TaxMessage;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayPriceText;                                  // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayRegularPriceText;                           // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALUI_PremiumCurrencyBundle) == 0x000008, "Wrong alignment on FVALUI_PremiumCurrencyBundle");
static_assert(sizeof(FVALUI_PremiumCurrencyBundle) == 0x000078, "Wrong size on FVALUI_PremiumCurrencyBundle");
static_assert(offsetof(FVALUI_PremiumCurrencyBundle, BundleId) == 0x000000, "Member 'FVALUI_PremiumCurrencyBundle::BundleId' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumCurrencyBundle, BundleAmount) == 0x000010, "Member 'FVALUI_PremiumCurrencyBundle::BundleAmount' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumCurrencyBundle, BonusAmount) == 0x000014, "Member 'FVALUI_PremiumCurrencyBundle::BonusAmount' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumCurrencyBundle, BundlePrice) == 0x000018, "Member 'FVALUI_PremiumCurrencyBundle::BundlePrice' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumCurrencyBundle, CurrencyCode) == 0x000020, "Member 'FVALUI_PremiumCurrencyBundle::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumCurrencyBundle, TaxMessage) == 0x000030, "Member 'FVALUI_PremiumCurrencyBundle::TaxMessage' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumCurrencyBundle, DisplayPriceText) == 0x000048, "Member 'FVALUI_PremiumCurrencyBundle::DisplayPriceText' has a wrong offset!");
static_assert(offsetof(FVALUI_PremiumCurrencyBundle, DisplayRegularPriceText) == 0x000060, "Member 'FVALUI_PremiumCurrencyBundle::DisplayRegularPriceText' has a wrong offset!");

}

