#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S6UICore

#include "Basic.hpp"

#include "EnhancedInput_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S6Core_structs.hpp"


namespace SDK
{

// Enum S6UICore.ES6UI_DynamicGridEdge
// NumValues: 0x0008
enum class ES6UI_DynamicGridEdge : uint8
{
	Invalid                                  = 0,
	First                                    = 1,
	Last                                     = 2,
	Top_Left                                 = 3,
	Top_Right                                = 4,
	Buttom_Left                              = 5,
	Buttom_Right                             = 6,
	ES6UI_MAX                                = 7,
};

// Enum S6UICore.ES6UI_NavGroupType
// NumValues: 0x0005
enum class ES6UI_NavGroupType : uint8
{
	Explicit                                 = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	Grid2D                                   = 3,
	ES6UI_MAX                                = 4,
};

// Enum S6UICore.ES6UI_ModalWidgetState
// NumValues: 0x0006
enum class ES6UI_ModalWidgetState : uint8
{
	Initial                                  = 0,
	Opening                                  = 1,
	Opened                                   = 2,
	Closing                                  = 3,
	Closed                                   = 4,
	ES6UI_MAX                                = 5,
};

// Enum S6UICore.ES6UI_InputModeType
// NumValues: 0x0004
enum class ES6UI_InputModeType : uint8
{
	UIOnly                                   = 0,
	GameOnly                                 = 1,
	GameAndUI                                = 2,
	ES6UI_MAX                                = 3,
};

// Enum S6UICore.ES6UI_MouseLockMode
// NumValues: 0x0005
enum class ES6UI_MouseLockMode : uint8
{
	DoNotLock                                = 0,
	LockOnCapture                            = 1,
	LockAlways                               = 2,
	LockInFullscreen                         = 3,
	ES6UI_MAX                                = 4,
};

// ScriptStruct S6UICore.S6UI_NavExplicitData
// 0x0014 (0x0014 - 0x0000)
struct FS6UI_NavExplicitData final
{
public:
	int32                                         Widget;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LeftWidget;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightWidget;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpWidget;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DownWidget;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6UI_NavExplicitData) == 0x000004, "Wrong alignment on FS6UI_NavExplicitData");
static_assert(sizeof(FS6UI_NavExplicitData) == 0x000014, "Wrong size on FS6UI_NavExplicitData");
static_assert(offsetof(FS6UI_NavExplicitData, Widget) == 0x000000, "Member 'FS6UI_NavExplicitData::Widget' has a wrong offset!");
static_assert(offsetof(FS6UI_NavExplicitData, LeftWidget) == 0x000004, "Member 'FS6UI_NavExplicitData::LeftWidget' has a wrong offset!");
static_assert(offsetof(FS6UI_NavExplicitData, RightWidget) == 0x000008, "Member 'FS6UI_NavExplicitData::RightWidget' has a wrong offset!");
static_assert(offsetof(FS6UI_NavExplicitData, UpWidget) == 0x00000C, "Member 'FS6UI_NavExplicitData::UpWidget' has a wrong offset!");
static_assert(offsetof(FS6UI_NavExplicitData, DownWidget) == 0x000010, "Member 'FS6UI_NavExplicitData::DownWidget' has a wrong offset!");

// ScriptStruct S6UICore.S6UI_NavigationGroupTranstionData
// 0x0040 (0x0040 - 0x0000)
struct FS6UI_NavigationGroupTranstionData final
{
public:
	EUINavigation                                 Navigation;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OriginalWidgetID;                                  // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ES6UI_DynamicGridEdge                         OriginDynamicGridEdge;                             // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5D[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class US6UI_CustomNavigationGroup> TargetNavigationGroup;                             // 0x0010(0x0028)(BlueprintVisible, ExportObject, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetWidgetID;                                    // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ES6UI_DynamicGridEdge                         TargetDynamicGridEdge;                             // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5E[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6UI_NavigationGroupTranstionData) == 0x000008, "Wrong alignment on FS6UI_NavigationGroupTranstionData");
static_assert(sizeof(FS6UI_NavigationGroupTranstionData) == 0x000040, "Wrong size on FS6UI_NavigationGroupTranstionData");
static_assert(offsetof(FS6UI_NavigationGroupTranstionData, Navigation) == 0x000000, "Member 'FS6UI_NavigationGroupTranstionData::Navigation' has a wrong offset!");
static_assert(offsetof(FS6UI_NavigationGroupTranstionData, OriginalWidgetID) == 0x000004, "Member 'FS6UI_NavigationGroupTranstionData::OriginalWidgetID' has a wrong offset!");
static_assert(offsetof(FS6UI_NavigationGroupTranstionData, OriginDynamicGridEdge) == 0x000008, "Member 'FS6UI_NavigationGroupTranstionData::OriginDynamicGridEdge' has a wrong offset!");
static_assert(offsetof(FS6UI_NavigationGroupTranstionData, TargetNavigationGroup) == 0x000010, "Member 'FS6UI_NavigationGroupTranstionData::TargetNavigationGroup' has a wrong offset!");
static_assert(offsetof(FS6UI_NavigationGroupTranstionData, TargetWidgetID) == 0x000038, "Member 'FS6UI_NavigationGroupTranstionData::TargetWidgetID' has a wrong offset!");
static_assert(offsetof(FS6UI_NavigationGroupTranstionData, TargetDynamicGridEdge) == 0x00003C, "Member 'FS6UI_NavigationGroupTranstionData::TargetDynamicGridEdge' has a wrong offset!");

// ScriptStruct S6UICore.S6UI_ContextMenu
// 0x0020 (0x0020 - 0x0000)
struct FS6UI_ContextMenu final
{
public:
	class UUserWidget*                            MenuContentWidget;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E5F[0x18];                                    // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6UI_ContextMenu) == 0x000008, "Wrong alignment on FS6UI_ContextMenu");
static_assert(sizeof(FS6UI_ContextMenu) == 0x000020, "Wrong size on FS6UI_ContextMenu");
static_assert(offsetof(FS6UI_ContextMenu, MenuContentWidget) == 0x000000, "Member 'FS6UI_ContextMenu::MenuContentWidget' has a wrong offset!");

// ScriptStruct S6UICore.S6UI_RegisteredInputActionBinding
// 0x0030 (0x0030 - 0x0000)
struct FS6UI_RegisteredInputActionBinding final
{
public:
	struct FGuid                                  BindingId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETriggerEvent                                 TriggerEventType;                                  // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E60[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, class UInputAction* SourceAction)> DynamicDelegate;                                   // 0x001C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E61[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6UI_RegisteredInputActionBinding) == 0x000008, "Wrong alignment on FS6UI_RegisteredInputActionBinding");
static_assert(sizeof(FS6UI_RegisteredInputActionBinding) == 0x000030, "Wrong size on FS6UI_RegisteredInputActionBinding");
static_assert(offsetof(FS6UI_RegisteredInputActionBinding, BindingId) == 0x000000, "Member 'FS6UI_RegisteredInputActionBinding::BindingId' has a wrong offset!");
static_assert(offsetof(FS6UI_RegisteredInputActionBinding, InputAction) == 0x000010, "Member 'FS6UI_RegisteredInputActionBinding::InputAction' has a wrong offset!");
static_assert(offsetof(FS6UI_RegisteredInputActionBinding, TriggerEventType) == 0x000018, "Member 'FS6UI_RegisteredInputActionBinding::TriggerEventType' has a wrong offset!");
static_assert(offsetof(FS6UI_RegisteredInputActionBinding, DynamicDelegate) == 0x00001C, "Member 'FS6UI_RegisteredInputActionBinding::DynamicDelegate' has a wrong offset!");

// ScriptStruct S6UICore.S6UI_RegisteredInputMappingContext
// 0x0010 (0x0010 - 0x0000)
struct FS6UI_RegisteredInputMappingContext final
{
public:
	class UInputMappingContext*                   InputMappingContext;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E62[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6UI_RegisteredInputMappingContext) == 0x000008, "Wrong alignment on FS6UI_RegisteredInputMappingContext");
static_assert(sizeof(FS6UI_RegisteredInputMappingContext) == 0x000010, "Wrong size on FS6UI_RegisteredInputMappingContext");
static_assert(offsetof(FS6UI_RegisteredInputMappingContext, InputMappingContext) == 0x000000, "Member 'FS6UI_RegisteredInputMappingContext::InputMappingContext' has a wrong offset!");
static_assert(offsetof(FS6UI_RegisteredInputMappingContext, Priority) == 0x000008, "Member 'FS6UI_RegisteredInputMappingContext::Priority' has a wrong offset!");

// ScriptStruct S6UICore.S6UI_InputMode
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FS6UI_InputMode final
{
public:
	ES6UI_InputModeType                           Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ES6UI_MouseLockMode                           MouseLockMode;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideCursorDuringCapture;                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCursor;                                       // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockHUDInput;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E63[0xB];                                     // 0x0005(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6UI_InputMode) == 0x000004, "Wrong alignment on FS6UI_InputMode");
static_assert(sizeof(FS6UI_InputMode) == 0x000010, "Wrong size on FS6UI_InputMode");
static_assert(offsetof(FS6UI_InputMode, Type) == 0x000000, "Member 'FS6UI_InputMode::Type' has a wrong offset!");
static_assert(offsetof(FS6UI_InputMode, MouseLockMode) == 0x000001, "Member 'FS6UI_InputMode::MouseLockMode' has a wrong offset!");
static_assert(offsetof(FS6UI_InputMode, bHideCursorDuringCapture) == 0x000002, "Member 'FS6UI_InputMode::bHideCursorDuringCapture' has a wrong offset!");
static_assert(offsetof(FS6UI_InputMode, bShowCursor) == 0x000003, "Member 'FS6UI_InputMode::bShowCursor' has a wrong offset!");
static_assert(offsetof(FS6UI_InputMode, bBlockHUDInput) == 0x000004, "Member 'FS6UI_InputMode::bBlockHUDInput' has a wrong offset!");

// ScriptStruct S6UICore.S6UI_UIManagerCrossPlatformStateTypeItem
// 0x0078 (0x0078 - 0x0000)
struct FS6UI_UIManagerCrossPlatformStateTypeItem final
{
public:
	TSoftClassPtr<class UClass>                   DefaultRedirectStateType;                          // 0x0000(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ERedirectsPlatform, TSoftClassPtr<class UClass>> RedirectStateTypes;                                // 0x0028(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6UI_UIManagerCrossPlatformStateTypeItem) == 0x000008, "Wrong alignment on FS6UI_UIManagerCrossPlatformStateTypeItem");
static_assert(sizeof(FS6UI_UIManagerCrossPlatformStateTypeItem) == 0x000078, "Wrong size on FS6UI_UIManagerCrossPlatformStateTypeItem");
static_assert(offsetof(FS6UI_UIManagerCrossPlatformStateTypeItem, DefaultRedirectStateType) == 0x000000, "Member 'FS6UI_UIManagerCrossPlatformStateTypeItem::DefaultRedirectStateType' has a wrong offset!");
static_assert(offsetof(FS6UI_UIManagerCrossPlatformStateTypeItem, RedirectStateTypes) == 0x000028, "Member 'FS6UI_UIManagerCrossPlatformStateTypeItem::RedirectStateTypes' has a wrong offset!");

// ScriptStruct S6UICore.S6UI_UIManagerCrossPlatformModalTypeItem
// 0x0078 (0x0078 - 0x0000)
struct FS6UI_UIManagerCrossPlatformModalTypeItem final
{
public:
	TSoftClassPtr<class UClass>                   DefaultRedirectModalType;                          // 0x0000(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ERedirectsPlatform, TSoftClassPtr<class UClass>> RedirectModalTypes;                                // 0x0028(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6UI_UIManagerCrossPlatformModalTypeItem) == 0x000008, "Wrong alignment on FS6UI_UIManagerCrossPlatformModalTypeItem");
static_assert(sizeof(FS6UI_UIManagerCrossPlatformModalTypeItem) == 0x000078, "Wrong size on FS6UI_UIManagerCrossPlatformModalTypeItem");
static_assert(offsetof(FS6UI_UIManagerCrossPlatformModalTypeItem, DefaultRedirectModalType) == 0x000000, "Member 'FS6UI_UIManagerCrossPlatformModalTypeItem::DefaultRedirectModalType' has a wrong offset!");
static_assert(offsetof(FS6UI_UIManagerCrossPlatformModalTypeItem, RedirectModalTypes) == 0x000028, "Member 'FS6UI_UIManagerCrossPlatformModalTypeItem::RedirectModalTypes' has a wrong offset!");

}

