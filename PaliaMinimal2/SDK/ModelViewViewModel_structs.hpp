#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModelViewViewModel

#include "Basic.hpp"


namespace SDK
{

// Enum ModelViewViewModel.EMVVMExecutionMode
// NumValues: 0x0005
enum class EMVVMExecutionMode : uint8
{
	Immediate                                = 0,
	Delayed                                  = 1,
	Tick                                     = 2,
	DelayedWhenSharedElseImmediate           = 3,
	EMVVMExecutionMode_MAX                   = 4,
};

// Enum ModelViewViewModel.EMVVMBindingMode
// NumValues: 0x0006
enum class EMVVMBindingMode : uint8
{
	OneTimeToDestination                     = 0,
	OneWayToDestination                      = 1,
	TwoWay                                   = 2,
	OneTimeToSource                          = 3,
	OneWayToSource                           = 4,
	EMVVMBindingMode_MAX                     = 5,
};

// ScriptStruct ModelViewViewModel.MVVMBindingName
// 0x0008 (0x0008 - 0x0000)
struct FMVVMBindingName final
{
public:
	class FName                                   BindingName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMVVMBindingName) == 0x000004, "Wrong alignment on FMVVMBindingName");
static_assert(sizeof(FMVVMBindingName) == 0x000008, "Wrong size on FMVVMBindingName");
static_assert(offsetof(FMVVMBindingName, BindingName) == 0x000000, "Member 'FMVVMBindingName::BindingName' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMAvailableBinding
// 0x000C (0x000C - 0x0000)
struct FMVVMAvailableBinding final
{
public:
	struct FMVVMBindingName                       BindingName;                                       // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsReadable;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsWritable;                                       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasNotify;                                        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E43[0x1];                                     // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMVVMAvailableBinding) == 0x000004, "Wrong alignment on FMVVMAvailableBinding");
static_assert(sizeof(FMVVMAvailableBinding) == 0x00000C, "Wrong size on FMVVMAvailableBinding");
static_assert(offsetof(FMVVMAvailableBinding, BindingName) == 0x000000, "Member 'FMVVMAvailableBinding::BindingName' has a wrong offset!");
static_assert(offsetof(FMVVMAvailableBinding, bIsReadable) == 0x000008, "Member 'FMVVMAvailableBinding::bIsReadable' has a wrong offset!");
static_assert(offsetof(FMVVMAvailableBinding, bIsWritable) == 0x000009, "Member 'FMVVMAvailableBinding::bIsWritable' has a wrong offset!");
static_assert(offsetof(FMVVMAvailableBinding, bHasNotify) == 0x00000A, "Member 'FMVVMAvailableBinding::bHasNotify' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMViewModelContext
// 0x0010 (0x0010 - 0x0000)
struct FMVVMViewModelContext final
{
public:
	TSubclassOf<class UMVVMViewModelBase>         ContextClass;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContextName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMVVMViewModelContext) == 0x000008, "Wrong alignment on FMVVMViewModelContext");
static_assert(sizeof(FMVVMViewModelContext) == 0x000010, "Wrong size on FMVVMViewModelContext");
static_assert(offsetof(FMVVMViewModelContext, ContextClass) == 0x000000, "Member 'FMVVMViewModelContext::ContextClass' has a wrong offset!");
static_assert(offsetof(FMVVMViewModelContext, ContextName) == 0x000008, "Member 'FMVVMViewModelContext::ContextName' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMEventField
// 0x0001 (0x0001 - 0x0000)
struct FMVVMEventField final
{
public:
	uint8                                         Pad_1E44[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMVVMEventField) == 0x000001, "Wrong alignment on FMVVMEventField");
static_assert(sizeof(FMVVMEventField) == 0x000001, "Wrong size on FMVVMEventField");

// ScriptStruct ModelViewViewModel.MVVMViewModelContextInstance
// 0x0018 (0x0018 - 0x0000)
struct FMVVMViewModelContextInstance final
{
public:
	struct FMVVMViewModelContext                  Context;                                           // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	class UMVVMViewModelBase*                     Instance;                                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMVVMViewModelContextInstance) == 0x000008, "Wrong alignment on FMVVMViewModelContextInstance");
static_assert(sizeof(FMVVMViewModelContextInstance) == 0x000018, "Wrong size on FMVVMViewModelContextInstance");
static_assert(offsetof(FMVVMViewModelContextInstance, Context) == 0x000000, "Member 'FMVVMViewModelContextInstance::Context' has a wrong offset!");
static_assert(offsetof(FMVVMViewModelContextInstance, Instance) == 0x000010, "Member 'FMVVMViewModelContextInstance::Instance' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMVCompiledFields
// 0x0010 (0x0010 - 0x0000)
struct FMVVMVCompiledFields final
{
public:
	class UStruct*                                ClassOrScriptStruct;                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int16                                         LibraryStartIndex;                                 // 0x0008(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int16                                         NumberOfProperties;                                // 0x000A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int16                                         NumberOfFunctions;                                 // 0x000C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int16                                         NumberOfFieldIds;                                  // 0x000E(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMVVMVCompiledFields) == 0x000008, "Wrong alignment on FMVVMVCompiledFields");
static_assert(sizeof(FMVVMVCompiledFields) == 0x000010, "Wrong size on FMVVMVCompiledFields");
static_assert(offsetof(FMVVMVCompiledFields, ClassOrScriptStruct) == 0x000000, "Member 'FMVVMVCompiledFields::ClassOrScriptStruct' has a wrong offset!");
static_assert(offsetof(FMVVMVCompiledFields, LibraryStartIndex) == 0x000008, "Member 'FMVVMVCompiledFields::LibraryStartIndex' has a wrong offset!");
static_assert(offsetof(FMVVMVCompiledFields, NumberOfProperties) == 0x00000A, "Member 'FMVVMVCompiledFields::NumberOfProperties' has a wrong offset!");
static_assert(offsetof(FMVVMVCompiledFields, NumberOfFunctions) == 0x00000C, "Member 'FMVVMVCompiledFields::NumberOfFunctions' has a wrong offset!");
static_assert(offsetof(FMVVMVCompiledFields, NumberOfFieldIds) == 0x00000E, "Member 'FMVVMVCompiledFields::NumberOfFieldIds' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMVCompiledFieldPath
// 0x0004 (0x0004 - 0x0000)
struct FMVVMVCompiledFieldPath final
{
public:
	int16                                         StartIndex;                                        // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int16                                         Num;                                               // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMVVMVCompiledFieldPath) == 0x000002, "Wrong alignment on FMVVMVCompiledFieldPath");
static_assert(sizeof(FMVVMVCompiledFieldPath) == 0x000004, "Wrong size on FMVVMVCompiledFieldPath");
static_assert(offsetof(FMVVMVCompiledFieldPath, StartIndex) == 0x000000, "Member 'FMVVMVCompiledFieldPath::StartIndex' has a wrong offset!");
static_assert(offsetof(FMVVMVCompiledFieldPath, Num) == 0x000002, "Member 'FMVVMVCompiledFieldPath::Num' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMVCompiledFieldId
// 0x0002 (0x0002 - 0x0000)
struct FMVVMVCompiledFieldId final
{
public:
	int16                                         FieldIdIndex;                                      // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMVVMVCompiledFieldId) == 0x000002, "Wrong alignment on FMVVMVCompiledFieldId");
static_assert(sizeof(FMVVMVCompiledFieldId) == 0x000002, "Wrong size on FMVVMVCompiledFieldId");
static_assert(offsetof(FMVVMVCompiledFieldId, FieldIdIndex) == 0x000000, "Member 'FMVVMVCompiledFieldId::FieldIdIndex' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMCompiledLoadedPropertyOrFunctionIndex
// 0x0004 (0x0004 - 0x0000)
struct FMVVMCompiledLoadedPropertyOrFunctionIndex final
{
public:
	int16                                         Index;                                             // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsObjectProperty : 1;                             // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsScriptStructProperty : 1;                       // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bIsProperty : 1;                                   // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_1E45[0x1];                                     // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMVVMCompiledLoadedPropertyOrFunctionIndex) == 0x000002, "Wrong alignment on FMVVMCompiledLoadedPropertyOrFunctionIndex");
static_assert(sizeof(FMVVMCompiledLoadedPropertyOrFunctionIndex) == 0x000004, "Wrong size on FMVVMCompiledLoadedPropertyOrFunctionIndex");
static_assert(offsetof(FMVVMCompiledLoadedPropertyOrFunctionIndex, Index) == 0x000000, "Member 'FMVVMCompiledLoadedPropertyOrFunctionIndex::Index' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMVCompiledBinding
// 0x000E (0x000E - 0x0000)
struct FMVVMVCompiledBinding final
{
public:
	struct FMVVMVCompiledFieldPath                SourceFieldPath;                                   // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FMVVMVCompiledFieldPath                DestinationFieldPath;                              // 0x0004(0x0004)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FMVVMVCompiledFieldPath                ConversionFunctionFieldPath;                       // 0x0008(0x0004)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Flags;                                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E46[0x1];                                     // 0x000D(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMVVMVCompiledBinding) == 0x000002, "Wrong alignment on FMVVMVCompiledBinding");
static_assert(sizeof(FMVVMVCompiledBinding) == 0x00000E, "Wrong size on FMVVMVCompiledBinding");
static_assert(offsetof(FMVVMVCompiledBinding, SourceFieldPath) == 0x000000, "Member 'FMVVMVCompiledBinding::SourceFieldPath' has a wrong offset!");
static_assert(offsetof(FMVVMVCompiledBinding, DestinationFieldPath) == 0x000004, "Member 'FMVVMVCompiledBinding::DestinationFieldPath' has a wrong offset!");
static_assert(offsetof(FMVVMVCompiledBinding, ConversionFunctionFieldPath) == 0x000008, "Member 'FMVVMVCompiledBinding::ConversionFunctionFieldPath' has a wrong offset!");
static_assert(offsetof(FMVVMVCompiledBinding, Flags) == 0x00000C, "Member 'FMVVMVCompiledBinding::Flags' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMCompiledBindingLibrary
// 0x0060 (0x0060 - 0x0000)
struct FMVVMCompiledBindingLibrary final
{
public:
	uint8                                         Pad_1E47[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFunction*>                      LoadedFunctions;                                   // 0x0010(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E48[0x10];                                    // 0x0020(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMVVMCompiledLoadedPropertyOrFunctionIndex> FieldPaths;                                        // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMVVMVCompiledFields>           CompiledFields;                                    // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           CompiledFieldNames;                                // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMVVMCompiledBindingLibrary) == 0x000008, "Wrong alignment on FMVVMCompiledBindingLibrary");
static_assert(sizeof(FMVVMCompiledBindingLibrary) == 0x000060, "Wrong size on FMVVMCompiledBindingLibrary");
static_assert(offsetof(FMVVMCompiledBindingLibrary, LoadedFunctions) == 0x000010, "Member 'FMVVMCompiledBindingLibrary::LoadedFunctions' has a wrong offset!");
static_assert(offsetof(FMVVMCompiledBindingLibrary, FieldPaths) == 0x000030, "Member 'FMVVMCompiledBindingLibrary::FieldPaths' has a wrong offset!");
static_assert(offsetof(FMVVMCompiledBindingLibrary, CompiledFields) == 0x000040, "Member 'FMVVMCompiledBindingLibrary::CompiledFields' has a wrong offset!");
static_assert(offsetof(FMVVMCompiledBindingLibrary, CompiledFieldNames) == 0x000050, "Member 'FMVVMCompiledBindingLibrary::CompiledFieldNames' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMViewModelCollection
// 0x0028 (0x0028 - 0x0000)
struct FMVVMViewModelCollection final
{
public:
	TArray<struct FMVVMViewModelContextInstance>  ViewModelInstances;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E49[0x18];                                    // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMVVMViewModelCollection) == 0x000008, "Wrong alignment on FMVVMViewModelCollection");
static_assert(sizeof(FMVVMViewModelCollection) == 0x000028, "Wrong size on FMVVMViewModelCollection");
static_assert(offsetof(FMVVMViewModelCollection, ViewModelInstances) == 0x000000, "Member 'FMVVMViewModelCollection::ViewModelInstances' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMViewSource
// 0x0018 (0x0018 - 0x0000)
struct FMVVMViewSource final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegisteredCount;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreatedSource;                                    // 0x0014(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetManually;                                      // 0x0015(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssignedToUserWidgetProperty;                     // 0x0016(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4A[0x1];                                     // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMVVMViewSource) == 0x000008, "Wrong alignment on FMVVMViewSource");
static_assert(sizeof(FMVVMViewSource) == 0x000018, "Wrong size on FMVVMViewSource");
static_assert(offsetof(FMVVMViewSource, Source) == 0x000000, "Member 'FMVVMViewSource::Source' has a wrong offset!");
static_assert(offsetof(FMVVMViewSource, SourceName) == 0x000008, "Member 'FMVVMViewSource::SourceName' has a wrong offset!");
static_assert(offsetof(FMVVMViewSource, RegisteredCount) == 0x000010, "Member 'FMVVMViewSource::RegisteredCount' has a wrong offset!");
static_assert(offsetof(FMVVMViewSource, bCreatedSource) == 0x000014, "Member 'FMVVMViewSource::bCreatedSource' has a wrong offset!");
static_assert(offsetof(FMVVMViewSource, bSetManually) == 0x000015, "Member 'FMVVMViewSource::bSetManually' has a wrong offset!");
static_assert(offsetof(FMVVMViewSource, bAssignedToUserWidgetProperty) == 0x000016, "Member 'FMVVMViewSource::bAssignedToUserWidgetProperty' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMViewClass_SourceCreator
// 0x0038 (0x0038 - 0x0000)
struct FMVVMViewClass_SourceCreator final
{
public:
	TSubclassOf<class UObject>                    ExpectedSourceType;                                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMVVMViewModelContextResolver*          Resolver;                                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMVVMViewModelContext                  GlobalViewModelInstance;                           // 0x0010(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FMVVMVCompiledFieldPath                FieldPath;                                         // 0x0020(0x0004)(NoDestructor, NativeAccessSpecifierPrivate)
	class FName                                   PropertyName;                                      // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ParentSourceName;                                  // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flags;                                             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E4B[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMVVMViewClass_SourceCreator) == 0x000008, "Wrong alignment on FMVVMViewClass_SourceCreator");
static_assert(sizeof(FMVVMViewClass_SourceCreator) == 0x000038, "Wrong size on FMVVMViewClass_SourceCreator");
static_assert(offsetof(FMVVMViewClass_SourceCreator, ExpectedSourceType) == 0x000000, "Member 'FMVVMViewClass_SourceCreator::ExpectedSourceType' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_SourceCreator, Resolver) == 0x000008, "Member 'FMVVMViewClass_SourceCreator::Resolver' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_SourceCreator, GlobalViewModelInstance) == 0x000010, "Member 'FMVVMViewClass_SourceCreator::GlobalViewModelInstance' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_SourceCreator, FieldPath) == 0x000020, "Member 'FMVVMViewClass_SourceCreator::FieldPath' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_SourceCreator, PropertyName) == 0x000024, "Member 'FMVVMViewClass_SourceCreator::PropertyName' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_SourceCreator, ParentSourceName) == 0x00002C, "Member 'FMVVMViewClass_SourceCreator::ParentSourceName' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_SourceCreator, Flags) == 0x000034, "Member 'FMVVMViewClass_SourceCreator::Flags' has a wrong offset!");

// ScriptStruct ModelViewViewModel.MVVMViewClass_CompiledBinding
// 0x0020 (0x0020 - 0x0000)
struct FMVVMViewClass_CompiledBinding final
{
public:
	struct FMVVMVCompiledFieldId                  FieldId;                                           // 0x0000(0x0002)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E4C[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SourcePropertyName;                                // 0x0004(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMVVMVCompiledBinding                  Binding;                                           // 0x000C(0x000E)(NoDestructor, NativeAccessSpecifierPrivate)
	EMVVMExecutionMode                            ExecutionMode;                                     // 0x001A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int8                                          EvaluateSourceCreatorIndex;                        // 0x001B(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Flags;                                             // 0x001C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E4D[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMVVMViewClass_CompiledBinding) == 0x000004, "Wrong alignment on FMVVMViewClass_CompiledBinding");
static_assert(sizeof(FMVVMViewClass_CompiledBinding) == 0x000020, "Wrong size on FMVVMViewClass_CompiledBinding");
static_assert(offsetof(FMVVMViewClass_CompiledBinding, FieldId) == 0x000000, "Member 'FMVVMViewClass_CompiledBinding::FieldId' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_CompiledBinding, SourcePropertyName) == 0x000004, "Member 'FMVVMViewClass_CompiledBinding::SourcePropertyName' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_CompiledBinding, Binding) == 0x00000C, "Member 'FMVVMViewClass_CompiledBinding::Binding' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_CompiledBinding, ExecutionMode) == 0x00001A, "Member 'FMVVMViewClass_CompiledBinding::ExecutionMode' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_CompiledBinding, EvaluateSourceCreatorIndex) == 0x00001B, "Member 'FMVVMViewClass_CompiledBinding::EvaluateSourceCreatorIndex' has a wrong offset!");
static_assert(offsetof(FMVVMViewClass_CompiledBinding, Flags) == 0x00001C, "Member 'FMVVMViewClass_CompiledBinding::Flags' has a wrong offset!");

}

