#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Timer

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_Timer.WBP_Timer_C.ExecuteUbergraph_WBP_Timer
// 0x0040 (0x0040 - 0x0000)
struct WBP_Timer_C_ExecuteUbergraph_WBP_Timer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Timer_C_ExecuteUbergraph_WBP_Timer) == 0x000004, "Wrong alignment on WBP_Timer_C_ExecuteUbergraph_WBP_Timer");
static_assert(sizeof(WBP_Timer_C_ExecuteUbergraph_WBP_Timer) == 0x000040, "Wrong size on WBP_Timer_C_ExecuteUbergraph_WBP_Timer");
static_assert(offsetof(WBP_Timer_C_ExecuteUbergraph_WBP_Timer, EntryPoint) == 0x000000, "Member 'WBP_Timer_C_ExecuteUbergraph_WBP_Timer::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_ExecuteUbergraph_WBP_Timer, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_Timer_C_ExecuteUbergraph_WBP_Timer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_ExecuteUbergraph_WBP_Timer, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WBP_Timer_C_ExecuteUbergraph_WBP_Timer::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WBP_Timer.WBP_Timer_C.HandleTimerHidden
// 0x0008 (0x0008 - 0x0000)
struct WBP_Timer_C_HandleTimerHidden final
{
public:
	int32                                         CallFunc_AkEventGlobal_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTimerStarted_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Timer_C_HandleTimerHidden) == 0x000004, "Wrong alignment on WBP_Timer_C_HandleTimerHidden");
static_assert(sizeof(WBP_Timer_C_HandleTimerHidden) == 0x000008, "Wrong size on WBP_Timer_C_HandleTimerHidden");
static_assert(offsetof(WBP_Timer_C_HandleTimerHidden, CallFunc_AkEventGlobal_ReturnValue) == 0x000000, "Member 'WBP_Timer_C_HandleTimerHidden::CallFunc_AkEventGlobal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_HandleTimerHidden, CallFunc_HasTimerStarted_ReturnValue) == 0x000004, "Member 'WBP_Timer_C_HandleTimerHidden::CallFunc_HasTimerStarted_ReturnValue' has a wrong offset!");

// Function WBP_Timer.WBP_Timer_C.HideTimer
// 0x0002 (0x0002 - 0x0000)
struct WBP_Timer_C_HideTimer final
{
public:
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Timer_C_HideTimer) == 0x000001, "Wrong alignment on WBP_Timer_C_HideTimer");
static_assert(sizeof(WBP_Timer_C_HideTimer) == 0x000002, "Wrong size on WBP_Timer_C_HideTimer");
static_assert(offsetof(WBP_Timer_C_HideTimer, CallFunc_GetVisibility_ReturnValue) == 0x000000, "Member 'WBP_Timer_C_HideTimer::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_HideTimer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WBP_Timer_C_HideTimer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WBP_Timer.WBP_Timer_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_Timer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Timer_C_Tick) == 0x000004, "Wrong alignment on WBP_Timer_C_Tick");
static_assert(sizeof(WBP_Timer_C_Tick) == 0x00003C, "Wrong size on WBP_Timer_C_Tick");
static_assert(offsetof(WBP_Timer_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_Timer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_Timer_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_Timer.WBP_Timer_C.Update Timer to Display
// 0x0028 (0x0028 - 0x0000)
struct WBP_Timer_C_Update_Timer_to_Display final
{
public:
	class UVAL_TimerComponent*                    Param_TimerComponent;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVAL_TimerDefinition*                   TimerDefinition;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         Hours;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         Minutes;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         Seconds;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Timer_C_Update_Timer_to_Display) == 0x000008, "Wrong alignment on WBP_Timer_C_Update_Timer_to_Display");
static_assert(sizeof(WBP_Timer_C_Update_Timer_to_Display) == 0x000028, "Wrong size on WBP_Timer_C_Update_Timer_to_Display");
static_assert(offsetof(WBP_Timer_C_Update_Timer_to_Display, Param_TimerComponent) == 0x000000, "Member 'WBP_Timer_C_Update_Timer_to_Display::Param_TimerComponent' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_Update_Timer_to_Display, TimerDefinition) == 0x000008, "Member 'WBP_Timer_C_Update_Timer_to_Display::TimerDefinition' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_Update_Timer_to_Display, Hours) == 0x000010, "Member 'WBP_Timer_C_Update_Timer_to_Display::Hours' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_Update_Timer_to_Display, Minutes) == 0x000018, "Member 'WBP_Timer_C_Update_Timer_to_Display::Minutes' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_Update_Timer_to_Display, Seconds) == 0x000020, "Member 'WBP_Timer_C_Update_Timer_to_Display::Seconds' has a wrong offset!");

// Function WBP_Timer.WBP_Timer_C.UpdateText
// 0x0028 (0x0028 - 0x0000)
struct WBP_Timer_C_UpdateText final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52C1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_GetSecondsOnTimer_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_FormatTime_HHMMSS_FormattedTime;          // 0x0010(0x0018)()
};
static_assert(alignof(WBP_Timer_C_UpdateText) == 0x000008, "Wrong alignment on WBP_Timer_C_UpdateText");
static_assert(sizeof(WBP_Timer_C_UpdateText) == 0x000028, "Wrong size on WBP_Timer_C_UpdateText");
static_assert(offsetof(WBP_Timer_C_UpdateText, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WBP_Timer_C_UpdateText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_UpdateText, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'WBP_Timer_C_UpdateText::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_UpdateText, CallFunc_GetSecondsOnTimer_ReturnValue) == 0x000008, "Member 'WBP_Timer_C_UpdateText::CallFunc_GetSecondsOnTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_UpdateText, CallFunc_FormatTime_HHMMSS_FormattedTime) == 0x000010, "Member 'WBP_Timer_C_UpdateText::CallFunc_FormatTime_HHMMSS_FormattedTime' has a wrong offset!");

// Function WBP_Timer.WBP_Timer_C.UpdateVisibility
// 0x0018 (0x0018 - 0x0000)
struct WBP_Timer_C_UpdateVisibility final
{
public:
	bool                                          CallFunc_HasTimerStarted_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52C2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_GetSecondsOnTimer_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_Int64Int64_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Timer_C_UpdateVisibility) == 0x000008, "Wrong alignment on WBP_Timer_C_UpdateVisibility");
static_assert(sizeof(WBP_Timer_C_UpdateVisibility) == 0x000018, "Wrong size on WBP_Timer_C_UpdateVisibility");
static_assert(offsetof(WBP_Timer_C_UpdateVisibility, CallFunc_HasTimerStarted_ReturnValue) == 0x000000, "Member 'WBP_Timer_C_UpdateVisibility::CallFunc_HasTimerStarted_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_UpdateVisibility, CallFunc_GetSecondsOnTimer_ReturnValue) == 0x000008, "Member 'WBP_Timer_C_UpdateVisibility::CallFunc_GetSecondsOnTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_UpdateVisibility, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_Timer_C_UpdateVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_UpdateVisibility, CallFunc_Greater_Int64Int64_ReturnValue) == 0x000011, "Member 'WBP_Timer_C_UpdateVisibility::CallFunc_Greater_Int64Int64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_UpdateVisibility, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'WBP_Timer_C_UpdateVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Timer_C_UpdateVisibility, CallFunc_IsValid_ReturnValue_1) == 0x000013, "Member 'WBP_Timer_C_UpdateVisibility::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

}

