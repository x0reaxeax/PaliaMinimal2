#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhotographyRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "PhotographyRuntime_structs.hpp"
#include "S6UICore_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class PhotographyRuntime.VALUI_PhotoCameraScreenBase
// 0x0030 (0x0588 - 0x0558)
class UVALUI_PhotoCameraScreenBase : public US6UI_StateUserWidget
{
public:
	EVALUI_PhotoCameraScreenLookMode              LookMode;                                          // 0x0558(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33B8[0x2F];                                    // 0x0559(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AccumulateLookModeInput(struct FGeometry& InGeometry, struct FPointerEvent& InMouseEvent, bool bInvertYAxis);
	void SetLookMode(EVALUI_PhotoCameraScreenLookMode Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VALUI_PhotoCameraScreenBase">();
	}
	static class UVALUI_PhotoCameraScreenBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVALUI_PhotoCameraScreenBase>();
	}
};
static_assert(alignof(UVALUI_PhotoCameraScreenBase) == 0x000008, "Wrong alignment on UVALUI_PhotoCameraScreenBase");
static_assert(sizeof(UVALUI_PhotoCameraScreenBase) == 0x000588, "Wrong size on UVALUI_PhotoCameraScreenBase");
static_assert(offsetof(UVALUI_PhotoCameraScreenBase, LookMode) == 0x000558, "Member 'UVALUI_PhotoCameraScreenBase::LookMode' has a wrong offset!");

// Class PhotographyRuntime.VAL_OnlinePhotoAlbumSubsystem
// 0x0110 (0x0140 - 0x0030)
class UVAL_OnlinePhotoAlbumSubsystem final : public ULocalPlayerSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnOurOnlinePhotosChanged;                          // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<struct FGuid, class UVAL_OnlinePhotograph*> PhotoIdToCachedOnlinePhotoMap;                     // 0x0040(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_33BA[0xB0];                                    // 0x0090(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool DeleteOnlinePhoto(struct FGuid& PhotoId);
	bool GetOnlinePhoto(struct FGuid& AccountId, struct FGuid& PhotoId, TDelegate<void(class UVAL_OnlinePhotoAlbumSubsystem* OnlinePhotoAlbumSubsystem, struct FGuid& AccountId, struct FGuid& PhotoId, class UVAL_OnlinePhotograph* Photo)>& OnSucceeded, TDelegate<void(class UVAL_OnlinePhotoAlbumSubsystem* OnlinePhotoAlbumSubsystem, struct FGuid& AccountId, struct FGuid& PhotoId, class FText& Error)>& OnFailed);
	void OnGetOnlinePhotoFailed__DelegateSignature(class UVAL_OnlinePhotoAlbumSubsystem* OnlinePhotoAlbumSubsystem, struct FGuid& AccountId, struct FGuid& PhotoId, class FText& Error);
	void OnGetOnlinePhotoSucceeded__DelegateSignature(class UVAL_OnlinePhotoAlbumSubsystem* OnlinePhotoAlbumSubsystem, struct FGuid& AccountId, struct FGuid& PhotoId, class UVAL_OnlinePhotograph* Photo);
	void OnOnlinePhotosChanged__DelegateSignature(class UVAL_OnlinePhotoAlbumSubsystem* OnlinePhotoAlbumSubsystem, TSet<struct FGuid>& DeletedPhotoIds, TSet<struct FGuid>& AddedPhotoIds);
	void OnUploadPhotoFailed__DelegateSignature(class UVAL_OnlinePhotoAlbumSubsystem* OnlinePhotoAlbumSubsystem, class UVAL_CapturedPhotograph* OriginalPhotograph, class FText& Error);
	void OnUploadPhotoSucceeded__DelegateSignature(class UVAL_OnlinePhotoAlbumSubsystem* OnlinePhotoAlbumSubsystem, class UVAL_CapturedPhotograph* OriginalPhotograph, struct FGuid& PhotoId);
	void RefreshOurOnlinePhotos();
	bool UploadPhoto(class UVAL_CapturedPhotograph* Photograph, TDelegate<void(class UVAL_OnlinePhotoAlbumSubsystem* OnlinePhotoAlbumSubsystem, class UVAL_CapturedPhotograph* OriginalPhotograph, struct FGuid& PhotoId)>& OnSucceeded, TDelegate<void(class UVAL_OnlinePhotoAlbumSubsystem* OnlinePhotoAlbumSubsystem, class UVAL_CapturedPhotograph* OriginalPhotograph, class FText& Error)>& OnFailed);

	struct FGuid GetOnlinePhotoIdForRecentPhoto(class UVAL_CapturedPhotograph* RecentPhoto) const;
	TArray<class UVAL_OnlinePhotograph*> GetOurOnlinePhotos() const;
	TSet<class UVAL_CapturedPhotograph*> GetRecentPhotosBeingUploaded() const;
	TSet<class UVAL_CapturedPhotograph*> GetRecentPhotosUploaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_OnlinePhotoAlbumSubsystem">();
	}
	static class UVAL_OnlinePhotoAlbumSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVAL_OnlinePhotoAlbumSubsystem>();
	}
};
static_assert(alignof(UVAL_OnlinePhotoAlbumSubsystem) == 0x000008, "Wrong alignment on UVAL_OnlinePhotoAlbumSubsystem");
static_assert(sizeof(UVAL_OnlinePhotoAlbumSubsystem) == 0x000140, "Wrong size on UVAL_OnlinePhotoAlbumSubsystem");
static_assert(offsetof(UVAL_OnlinePhotoAlbumSubsystem, OnOurOnlinePhotosChanged) == 0x000030, "Member 'UVAL_OnlinePhotoAlbumSubsystem::OnOurOnlinePhotosChanged' has a wrong offset!");
static_assert(offsetof(UVAL_OnlinePhotoAlbumSubsystem, PhotoIdToCachedOnlinePhotoMap) == 0x000040, "Member 'UVAL_OnlinePhotoAlbumSubsystem::PhotoIdToCachedOnlinePhotoMap' has a wrong offset!");

// Class PhotographyRuntime.VAL_PhotographyManager
// 0x0088 (0x00B8 - 0x0030)
class UVAL_PhotographyManager final : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_33BE[0x8];                                     // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStartingCapture;                                 // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCaptureTaken;                                    // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UVAL_CapturedPhotograph*>        PhotosFromThisSession;                             // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_33BF[0x50];                                    // 0x0068(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FGuid CreateCapturedPhotograph();
	void OnCaptureTaken__DelegateSignature(class UVAL_PhotographyManager* PhotographyManager, class UVAL_CapturedPhotograph* CapturedPhotograph);
	void OnStartingCapture__DelegateSignature(class UVAL_PhotographyManager* PhotographyManager);

	TArray<class UVAL_CapturedPhotograph*> GetCapturedPhotographs() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_PhotographyManager">();
	}
	static class UVAL_PhotographyManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVAL_PhotographyManager>();
	}
};
static_assert(alignof(UVAL_PhotographyManager) == 0x000008, "Wrong alignment on UVAL_PhotographyManager");
static_assert(sizeof(UVAL_PhotographyManager) == 0x0000B8, "Wrong size on UVAL_PhotographyManager");
static_assert(offsetof(UVAL_PhotographyManager, OnStartingCapture) == 0x000038, "Member 'UVAL_PhotographyManager::OnStartingCapture' has a wrong offset!");
static_assert(offsetof(UVAL_PhotographyManager, OnCaptureTaken) == 0x000048, "Member 'UVAL_PhotographyManager::OnCaptureTaken' has a wrong offset!");
static_assert(offsetof(UVAL_PhotographyManager, PhotosFromThisSession) == 0x000058, "Member 'UVAL_PhotographyManager::PhotosFromThisSession' has a wrong offset!");

// Class PhotographyRuntime.VAL_CapturedPhotograph
// 0x0078 (0x00A0 - 0x0028)
class UVAL_CapturedPhotograph final : public UObject
{
public:
	uint8                                         Pad_33C0[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  UniqueID;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateTimeAtCapture;                                 // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CapturedTexture;                                   // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FUniqueNetIdRepl>                 PlayersInView;                                     // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_CapturedPhotograph">();
	}
	static class UVAL_CapturedPhotograph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVAL_CapturedPhotograph>();
	}
};
static_assert(alignof(UVAL_CapturedPhotograph) == 0x000008, "Wrong alignment on UVAL_CapturedPhotograph");
static_assert(sizeof(UVAL_CapturedPhotograph) == 0x0000A0, "Wrong size on UVAL_CapturedPhotograph");
static_assert(offsetof(UVAL_CapturedPhotograph, UniqueID) == 0x000030, "Member 'UVAL_CapturedPhotograph::UniqueID' has a wrong offset!");
static_assert(offsetof(UVAL_CapturedPhotograph, DateTimeAtCapture) == 0x000040, "Member 'UVAL_CapturedPhotograph::DateTimeAtCapture' has a wrong offset!");
static_assert(offsetof(UVAL_CapturedPhotograph, CapturedTexture) == 0x000048, "Member 'UVAL_CapturedPhotograph::CapturedTexture' has a wrong offset!");
static_assert(offsetof(UVAL_CapturedPhotograph, PlayersInView) == 0x000050, "Member 'UVAL_CapturedPhotograph::PlayersInView' has a wrong offset!");

// Class PhotographyRuntime.VAL_OnlinePhotograph
// 0x0060 (0x0088 - 0x0028)
class UVAL_OnlinePhotograph final : public UObject
{
public:
	uint8                                         Pad_33C1[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PhotoId;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  AccountId;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageURL;                                          // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 CachedImageResourceObject;                         // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnImageResourceObjectChanged;                      // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_33C2[0x10];                                    // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnImageResourceObjectChanged__DelegateSignature(class UVAL_OnlinePhotograph* OnlinePhotograph);
	void RefreshFromImageURL();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_OnlinePhotograph">();
	}
	static class UVAL_OnlinePhotograph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVAL_OnlinePhotograph>();
	}
};
static_assert(alignof(UVAL_OnlinePhotograph) == 0x000008, "Wrong alignment on UVAL_OnlinePhotograph");
static_assert(sizeof(UVAL_OnlinePhotograph) == 0x000088, "Wrong size on UVAL_OnlinePhotograph");
static_assert(offsetof(UVAL_OnlinePhotograph, PhotoId) == 0x000030, "Member 'UVAL_OnlinePhotograph::PhotoId' has a wrong offset!");
static_assert(offsetof(UVAL_OnlinePhotograph, AccountId) == 0x000040, "Member 'UVAL_OnlinePhotograph::AccountId' has a wrong offset!");
static_assert(offsetof(UVAL_OnlinePhotograph, ImageURL) == 0x000050, "Member 'UVAL_OnlinePhotograph::ImageURL' has a wrong offset!");
static_assert(offsetof(UVAL_OnlinePhotograph, CachedImageResourceObject) == 0x000060, "Member 'UVAL_OnlinePhotograph::CachedImageResourceObject' has a wrong offset!");
static_assert(offsetof(UVAL_OnlinePhotograph, OnImageResourceObjectChanged) == 0x000068, "Member 'UVAL_OnlinePhotograph::OnImageResourceObjectChanged' has a wrong offset!");

// Class PhotographyRuntime.VAL_PhotographySettings
// 0x0038 (0x0070 - 0x0038)
class UVAL_PhotographySettings final : public UDeveloperSettings
{
public:
	int32                                         PhotographCaptureWidth;                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PhotographCaptureHeight;                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FailedToUploadPhotoErrorMessageFormat;             // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	class FText                                   FailedToGetOnlinePhotoErrorMessageFormat;          // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_PhotographySettings">();
	}
	static class UVAL_PhotographySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVAL_PhotographySettings>();
	}
};
static_assert(alignof(UVAL_PhotographySettings) == 0x000008, "Wrong alignment on UVAL_PhotographySettings");
static_assert(sizeof(UVAL_PhotographySettings) == 0x000070, "Wrong size on UVAL_PhotographySettings");
static_assert(offsetof(UVAL_PhotographySettings, PhotographCaptureWidth) == 0x000038, "Member 'UVAL_PhotographySettings::PhotographCaptureWidth' has a wrong offset!");
static_assert(offsetof(UVAL_PhotographySettings, PhotographCaptureHeight) == 0x00003C, "Member 'UVAL_PhotographySettings::PhotographCaptureHeight' has a wrong offset!");
static_assert(offsetof(UVAL_PhotographySettings, FailedToUploadPhotoErrorMessageFormat) == 0x000040, "Member 'UVAL_PhotographySettings::FailedToUploadPhotoErrorMessageFormat' has a wrong offset!");
static_assert(offsetof(UVAL_PhotographySettings, FailedToGetOnlinePhotoErrorMessageFormat) == 0x000058, "Member 'UVAL_PhotographySettings::FailedToGetOnlinePhotoErrorMessageFormat' has a wrong offset!");

// Class PhotographyRuntime.VAL_RichMarkupPhotographInterface
// 0x0000 (0x0028 - 0x0028)
class IVAL_RichMarkupPhotographInterface final : public IInterface
{
public:
	class UObject* GetPhotographImageResourceObject() const;
	TSet<struct FUniqueNetIdRepl> GetPlayersInPhotograph() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VAL_RichMarkupPhotographInterface">();
	}
	static class IVAL_RichMarkupPhotographInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IVAL_RichMarkupPhotographInterface>();
	}
};
static_assert(alignof(IVAL_RichMarkupPhotographInterface) == 0x000008, "Wrong alignment on IVAL_RichMarkupPhotographInterface");
static_assert(sizeof(IVAL_RichMarkupPhotographInterface) == 0x000028, "Wrong size on IVAL_RichMarkupPhotographInterface");

}

