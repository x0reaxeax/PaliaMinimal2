#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S6Core

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum S6Core.ES6DayOfWeek
// NumValues: 0x0008
enum class ES6DayOfWeek : uint8
{
	Monday                                   = 0,
	Tuesday                                  = 1,
	Wednesday                                = 2,
	Thursday                                 = 3,
	Friday                                   = 4,
	Saturday                                 = 5,
	Sunday                                   = 6,
	ES6DayOfWeek_MAX                         = 7,
};

// Enum S6Core.ERedirectsPlatform
// NumValues: 0x000A
enum class ERedirectsPlatform : uint8
{
	Invalid                                  = 0,
	Windows                                  = 1,
	XSX                                      = 2,
	XboxOne                                  = 3,
	PS5                                      = 4,
	PS4                                      = 5,
	Switch                                   = 6,
	Android                                  = 7,
	IOS                                      = 8,
	ERedirectsPlatform_MAX                   = 9,
};

// Enum S6Core.ESingleTagFilterType
// NumValues: 0x0004
enum class ESingleTagFilterType : uint8
{
	None                                     = 0,
	Any                                      = 1,
	AnyOfTags                                = 2,
	ESingleTagFilterType_MAX                 = 3,
};

// Enum S6Core.ETagFilterType
// NumValues: 0x0005
enum class ETagFilterType : uint8
{
	AlwaysFalse                              = 0,
	AlwaysTrue                               = 1,
	AnyTag                                   = 2,
	AllTags                                  = 3,
	ETagFilterType_MAX                       = 4,
};

// ScriptStruct S6Core.AsyncReadPixelsRequest
// 0x0038 (0x0038 - 0x0000)
struct FAsyncReadPixelsRequest final
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD1[0x30];                                    // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAsyncReadPixelsRequest) == 0x000008, "Wrong alignment on FAsyncReadPixelsRequest");
static_assert(sizeof(FAsyncReadPixelsRequest) == 0x000038, "Wrong size on FAsyncReadPixelsRequest");
static_assert(offsetof(FAsyncReadPixelsRequest, RenderTarget) == 0x000000, "Member 'FAsyncReadPixelsRequest::RenderTarget' has a wrong offset!");

// ScriptStruct S6Core.TagList
// 0x0020 (0x0020 - 0x0000)
struct FTagList final
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagList) == 0x000008, "Wrong alignment on FTagList");
static_assert(sizeof(FTagList) == 0x000020, "Wrong size on FTagList");
static_assert(offsetof(FTagList, GameplayTags) == 0x000000, "Member 'FTagList::GameplayTags' has a wrong offset!");

// ScriptStruct S6Core.SingleTagFilter
// 0x0028 (0x0028 - 0x0000)
struct FSingleTagFilter final
{
public:
	ESingleTagFilterType                          Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTagList                               GameplayTags;                                      // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSingleTagFilter) == 0x000008, "Wrong alignment on FSingleTagFilter");
static_assert(sizeof(FSingleTagFilter) == 0x000028, "Wrong size on FSingleTagFilter");
static_assert(offsetof(FSingleTagFilter, Type) == 0x000000, "Member 'FSingleTagFilter::Type' has a wrong offset!");
static_assert(offsetof(FSingleTagFilter, GameplayTags) == 0x000008, "Member 'FSingleTagFilter::GameplayTags' has a wrong offset!");

// ScriptStruct S6Core.TagFilter
// 0x0028 (0x0028 - 0x0000)
struct FTagFilter final
{
public:
	ETagFilterType                                Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTagList                               GameplayTags;                                      // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagFilter) == 0x000008, "Wrong alignment on FTagFilter");
static_assert(sizeof(FTagFilter) == 0x000028, "Wrong size on FTagFilter");
static_assert(offsetof(FTagFilter, Type) == 0x000000, "Member 'FTagFilter::Type' has a wrong offset!");
static_assert(offsetof(FTagFilter, GameplayTags) == 0x000008, "Member 'FTagFilter::GameplayTags' has a wrong offset!");

// ScriptStruct S6Core.S6AsyncReadPixels
// 0x0050 (0x0050 - 0x0000)
struct FS6AsyncReadPixels final
{
public:
	TArray<struct FAsyncReadPixelsRequest>        Queued;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1CD4[0x40];                                    // 0x0010(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6AsyncReadPixels) == 0x000008, "Wrong alignment on FS6AsyncReadPixels");
static_assert(sizeof(FS6AsyncReadPixels) == 0x000050, "Wrong size on FS6AsyncReadPixels");
static_assert(offsetof(FS6AsyncReadPixels, Queued) == 0x000000, "Member 'FS6AsyncReadPixels::Queued' has a wrong offset!");

// ScriptStruct S6Core.S6Core_StatData
// 0x000C (0x000C - 0x0000)
struct FS6Core_StatData final
{
public:
	float                                         Average;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6Core_StatData) == 0x000004, "Wrong alignment on FS6Core_StatData");
static_assert(sizeof(FS6Core_StatData) == 0x00000C, "Wrong size on FS6Core_StatData");
static_assert(offsetof(FS6Core_StatData, Average) == 0x000000, "Member 'FS6Core_StatData::Average' has a wrong offset!");
static_assert(offsetof(FS6Core_StatData, Min) == 0x000004, "Member 'FS6Core_StatData::Min' has a wrong offset!");
static_assert(offsetof(FS6Core_StatData, Max) == 0x000008, "Member 'FS6Core_StatData::Max' has a wrong offset!");

// ScriptStruct S6Core.S6HARNVPair
// 0x0020 (0x0020 - 0x0000)
struct FS6HARNVPair final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6HARNVPair) == 0x000008, "Wrong alignment on FS6HARNVPair");
static_assert(sizeof(FS6HARNVPair) == 0x000020, "Wrong size on FS6HARNVPair");
static_assert(offsetof(FS6HARNVPair, Name) == 0x000000, "Member 'FS6HARNVPair::Name' has a wrong offset!");
static_assert(offsetof(FS6HARNVPair, Value) == 0x000010, "Member 'FS6HARNVPair::Value' has a wrong offset!");

// ScriptStruct S6Core.S6HARPostData
// 0x0020 (0x0020 - 0x0000)
struct FS6HARPostData final
{
public:
	class FString                                 MimeType;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6HARPostData) == 0x000008, "Wrong alignment on FS6HARPostData");
static_assert(sizeof(FS6HARPostData) == 0x000020, "Wrong size on FS6HARPostData");
static_assert(offsetof(FS6HARPostData, MimeType) == 0x000000, "Member 'FS6HARPostData::MimeType' has a wrong offset!");
static_assert(offsetof(FS6HARPostData, Text) == 0x000010, "Member 'FS6HARPostData::Text' has a wrong offset!");

// ScriptStruct S6Core.S6HARRequest
// 0x0088 (0x0088 - 0x0000)
struct FS6HARRequest final
{
public:
	class FString                                 Method;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HttpVersion;                                       // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FS6HARNVPair>                   Cookies;                                           // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FS6HARNVPair>                   Headers;                                           // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FS6HARNVPair>                   QueryString;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FS6HARPostData                         PostData;                                          // 0x0060(0x0020)(NativeAccessSpecifierPublic)
	int32                                         HeaderSize;                                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bodySize;                                          // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6HARRequest) == 0x000008, "Wrong alignment on FS6HARRequest");
static_assert(sizeof(FS6HARRequest) == 0x000088, "Wrong size on FS6HARRequest");
static_assert(offsetof(FS6HARRequest, Method) == 0x000000, "Member 'FS6HARRequest::Method' has a wrong offset!");
static_assert(offsetof(FS6HARRequest, URL) == 0x000010, "Member 'FS6HARRequest::URL' has a wrong offset!");
static_assert(offsetof(FS6HARRequest, HttpVersion) == 0x000020, "Member 'FS6HARRequest::HttpVersion' has a wrong offset!");
static_assert(offsetof(FS6HARRequest, Cookies) == 0x000030, "Member 'FS6HARRequest::Cookies' has a wrong offset!");
static_assert(offsetof(FS6HARRequest, Headers) == 0x000040, "Member 'FS6HARRequest::Headers' has a wrong offset!");
static_assert(offsetof(FS6HARRequest, QueryString) == 0x000050, "Member 'FS6HARRequest::QueryString' has a wrong offset!");
static_assert(offsetof(FS6HARRequest, PostData) == 0x000060, "Member 'FS6HARRequest::PostData' has a wrong offset!");
static_assert(offsetof(FS6HARRequest, HeaderSize) == 0x000080, "Member 'FS6HARRequest::HeaderSize' has a wrong offset!");
static_assert(offsetof(FS6HARRequest, bodySize) == 0x000084, "Member 'FS6HARRequest::bodySize' has a wrong offset!");

// ScriptStruct S6Core.S6HAREntry
// 0x00A0 (0x00A0 - 0x0000)
struct FS6HAREntry final
{
public:
	class FString                                 StartedDateTime;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD5[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS6HARRequest                          Request;                                           // 0x0018(0x0088)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6HAREntry) == 0x000008, "Wrong alignment on FS6HAREntry");
static_assert(sizeof(FS6HAREntry) == 0x0000A0, "Wrong size on FS6HAREntry");
static_assert(offsetof(FS6HAREntry, StartedDateTime) == 0x000000, "Member 'FS6HAREntry::StartedDateTime' has a wrong offset!");
static_assert(offsetof(FS6HAREntry, Time) == 0x000010, "Member 'FS6HAREntry::Time' has a wrong offset!");
static_assert(offsetof(FS6HAREntry, Request) == 0x000018, "Member 'FS6HAREntry::Request' has a wrong offset!");

// ScriptStruct S6Core.S6Core_PlatformPrivilegeResponse
// 0x0001 (0x0001 - 0x0000)
struct FS6Core_PlatformPrivilegeResponse final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FS6Core_PlatformPrivilegeResponse) == 0x000001, "Wrong alignment on FS6Core_PlatformPrivilegeResponse");
static_assert(sizeof(FS6Core_PlatformPrivilegeResponse) == 0x000001, "Wrong size on FS6Core_PlatformPrivilegeResponse");
static_assert(offsetof(FS6Core_PlatformPrivilegeResponse, bAllowed) == 0x000000, "Member 'FS6Core_PlatformPrivilegeResponse::bAllowed' has a wrong offset!");

}

