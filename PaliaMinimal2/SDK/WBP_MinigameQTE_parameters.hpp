#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MinigameQTE

#include "Basic.hpp"

#include "Palia_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.ExecuteUbergraph_WBP_MinigameQTE
// 0x01A0 (0x01A0 - 0x0000)
struct WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPaused_ReturnValue;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5176[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPaused_ReturnValue_1;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue_1;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5177[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0018(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5178[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_MinigameQTEInput2_C*               CallFunc_Get_Next_Inactive_Indicator_Indicator;    // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5179[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517A[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeElapsed_ReturnValue;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517B[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517C[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCompletion_ReturnValue;                // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517D[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517E[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_517F[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UWBP_MinigameQTEInput2_C*         Temp_object_Variable;                              // 0x00D0(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTargetPosition_ReturnValue;            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5180[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTargetPosition_ReturnValue_1;          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5181[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_MinigameQTEInput2_C*               CallFunc_Array_Get_Item;                           // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5182[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_MinigameQTEInput2_C*               CallFunc_Array_Get_Item_1;                         // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_4;                    // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5183[0x1];                                     // 0x0103(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5184[0x2];                                     // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5185[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_MinigameQTEInput2_C*               CallFunc_Array_Get_Item_2;                         // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5186[0x3];                                     // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5187[0x2];                                     // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5188[0x3];                                     // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5189[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_MinigameQTEInput2_C*               CallFunc_Array_Get_Item_3;                         // 0x0140(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdatePredictorColor_ElapsedTime_ImplicitCast; // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_CurTime_ImplicitCast;           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518A[0x4];                                     // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_IntFloat_B_ImplicitCast;         // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Start_TargetTime_ImplicitCast;            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Start_EndTime_ImplicitCast;               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ForcePosition_NormalizedTime_ImplicitCast; // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ForcePosition_NormalizedTime_ImplicitCast_1; // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ForcePosition_NormalizedTime_ImplicitCast_2; // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE) == 0x000008, "Wrong alignment on WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE");
static_assert(sizeof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE) == 0x0001A0, "Wrong size on WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, EntryPoint) == 0x000000, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_IsPaused_ReturnValue) == 0x000005, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_IsPaused_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_IsPlaying_ReturnValue) == 0x000007, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, Temp_int_Variable) == 0x00000C, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_IsValid_ReturnValue_1) == 0x000010, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_IsPaused_ReturnValue_1) == 0x000011, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_IsPaused_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Not_PreBool_ReturnValue_1) == 0x000012, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_IsPlaying_ReturnValue_1) == 0x000013, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_IsPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_BooleanAND_ReturnValue_1) == 0x000014, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, K2Node_Event_MyGeometry) == 0x000018, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, K2Node_Event_InDeltaTime) == 0x000050, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Get_Next_Inactive_Indicator_Indicator) == 0x000058, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Get_Next_Inactive_Indicator_Indicator' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_IsValid_ReturnValue_2) == 0x000060, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, K2Node_SwitchEnum_CmpSuccess) == 0x000068, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, Temp_int_Array_Index_Variable) == 0x00006C, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_GetTimeElapsed_ReturnValue) == 0x000070, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_GetTimeElapsed_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000078, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, K2Node_SwitchEnum_CmpSuccess_1) == 0x000080, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000081, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000088, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000090, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000A0, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Array_Length_ReturnValue_1) == 0x0000A8, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_GetCompletion_ReturnValue) == 0x0000AC, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_GetCompletion_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, Temp_int_Loop_Counter_Variable) == 0x0000B0, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B4, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000B8, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x0000C0, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000C8, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, Temp_object_Variable) == 0x0000D0, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_GetTargetPosition_ReturnValue) == 0x0000D8, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_GetTargetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, K2Node_SwitchEnum_CmpSuccess_2) == 0x0000DC, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_GetTargetPosition_ReturnValue_1) == 0x0000E0, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_GetTargetPosition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, Temp_int_Array_Index_Variable_1) == 0x0000F0, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Array_Get_Item_1) == 0x0000F8, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, K2Node_SwitchEnum_CmpSuccess_3) == 0x000100, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000101, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, K2Node_SwitchEnum_CmpSuccess_4) == 0x000102, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::K2Node_SwitchEnum_CmpSuccess_4' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, Temp_int_Loop_Counter_Variable_1) == 0x000104, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_IsValid_ReturnValue_3) == 0x000108, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Less_IntInt_ReturnValue) == 0x000109, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Add_IntInt_ReturnValue_3) == 0x00010C, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, Temp_int_Variable_1) == 0x000110, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Array_Get_Item_2) == 0x000118, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_IsValid_ReturnValue_4) == 0x000120, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Array_Length_ReturnValue_2) == 0x000124, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Array_RemoveItem_ReturnValue) == 0x000128, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Less_IntInt_ReturnValue_1) == 0x000129, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, Temp_int_Loop_Counter_Variable_2) == 0x00012C, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Less_IntInt_ReturnValue_2) == 0x000130, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Add_IntInt_ReturnValue_4) == 0x000134, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, Temp_int_Array_Index_Variable_2) == 0x000138, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Array_Get_Item_3) == 0x000140, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_UpdatePredictorColor_ElapsedTime_ImplicitCast) == 0x000148, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_UpdatePredictorColor_ElapsedTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, K2Node_VariableSet_CurTime_ImplicitCast) == 0x000150, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::K2Node_VariableSet_CurTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000158, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Delay_Duration_ImplicitCast) == 0x000160, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Multiply_IntFloat_B_ImplicitCast) == 0x000168, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Multiply_IntFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000170, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Start_TargetTime_ImplicitCast) == 0x000178, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Start_TargetTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_Start_EndTime_ImplicitCast) == 0x000180, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_Start_EndTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_ForcePosition_NormalizedTime_ImplicitCast) == 0x000188, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_ForcePosition_NormalizedTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_ForcePosition_NormalizedTime_ImplicitCast_1) == 0x000190, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_ForcePosition_NormalizedTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE, CallFunc_ForcePosition_NormalizedTime_ImplicitCast_2) == 0x000198, "Member 'WBP_MinigameQTE_C_ExecuteUbergraph_WBP_MinigameQTE::CallFunc_ForcePosition_NormalizedTime_ImplicitCast_2' has a wrong offset!");

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.ExpectedInputMissed
// 0x0008 (0x0008 - 0x0000)
struct WBP_MinigameQTE_C_ExpectedInputMissed final
{
public:
	class UMinigameComponentMasterQTE*            Comp;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MinigameQTE_C_ExpectedInputMissed) == 0x000008, "Wrong alignment on WBP_MinigameQTE_C_ExpectedInputMissed");
static_assert(sizeof(WBP_MinigameQTE_C_ExpectedInputMissed) == 0x000008, "Wrong size on WBP_MinigameQTE_C_ExpectedInputMissed");
static_assert(offsetof(WBP_MinigameQTE_C_ExpectedInputMissed, Comp) == 0x000000, "Member 'WBP_MinigameQTE_C_ExpectedInputMissed::Comp' has a wrong offset!");

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.Get Next Inactive Indicator
// 0x0048 (0x0048 - 0x0000)
struct WBP_MinigameQTE_C_Get_Next_Inactive_Indicator final
{
public:
	class UWBP_MinigameQTEInput2_C*               Indicator;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518B[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_MinigameQTEInput2_C*               CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_MinigameQTEInput2_C*               CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator) == 0x000008, "Wrong alignment on WBP_MinigameQTE_C_Get_Next_Inactive_Indicator");
static_assert(sizeof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator) == 0x000048, "Wrong size on WBP_MinigameQTE_C_Get_Next_Inactive_Indicator");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, Indicator) == 0x000000, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::Indicator' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, Temp_int_Array_Index_Variable) == 0x000008, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, Temp_bool_True_if_break_was_hit_Variable) == 0x00000C, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_Create_ReturnValue) == 0x000018, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_AddChild_ReturnValue) == 0x000028, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_Array_Add_ReturnValue) == 0x000030, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_Array_Get_Item) == 0x000038, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_IsValid_ReturnValue) == 0x000042, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Get_Next_Inactive_Indicator, CallFunc_IsVisible_ReturnValue) == 0x000043, "Member 'WBP_MinigameQTE_C_Get_Next_Inactive_Indicator::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.MinigameOnStateChanged
// 0x0018 (0x0018 - 0x0000)
struct WBP_MinigameQTE_C_MinigameOnStateChanged final
{
public:
	class UMinigameComponentBase*                 Comp;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EMinigameState                                PrevState;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMinigameState                                NewState;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518C[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MinigameQTE_C_MinigameOnStateChanged) == 0x000008, "Wrong alignment on WBP_MinigameQTE_C_MinigameOnStateChanged");
static_assert(sizeof(WBP_MinigameQTE_C_MinigameOnStateChanged) == 0x000018, "Wrong size on WBP_MinigameQTE_C_MinigameOnStateChanged");
static_assert(offsetof(WBP_MinigameQTE_C_MinigameOnStateChanged, Comp) == 0x000000, "Member 'WBP_MinigameQTE_C_MinigameOnStateChanged::Comp' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_MinigameOnStateChanged, PrevState) == 0x000008, "Member 'WBP_MinigameQTE_C_MinigameOnStateChanged::PrevState' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_MinigameOnStateChanged, NewState) == 0x000009, "Member 'WBP_MinigameQTE_C_MinigameOnStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_MinigameOnStateChanged, K2Node_SwitchEnum_CmpSuccess) == 0x00000A, "Member 'WBP_MinigameQTE_C_MinigameOnStateChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_MinigameOnStateChanged, CallFunc_PlayAnimationForward_ReturnValue) == 0x000010, "Member 'WBP_MinigameQTE_C_MinigameOnStateChanged::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.MistimedInputReceived
// 0x0028 (0x0028 - 0x0000)
struct WBP_MinigameQTE_C_MistimedInputReceived final
{
public:
	class UMinigameComponentMasterQTE*            Comp;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AkEventGlobal_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x000C(0x0014)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MinigameQTE_C_MistimedInputReceived) == 0x000008, "Wrong alignment on WBP_MinigameQTE_C_MistimedInputReceived");
static_assert(sizeof(WBP_MinigameQTE_C_MistimedInputReceived) == 0x000028, "Wrong size on WBP_MinigameQTE_C_MistimedInputReceived");
static_assert(offsetof(WBP_MinigameQTE_C_MistimedInputReceived, Comp) == 0x000000, "Member 'WBP_MinigameQTE_C_MistimedInputReceived::Comp' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_MistimedInputReceived, CallFunc_AkEventGlobal_ReturnValue) == 0x000008, "Member 'WBP_MinigameQTE_C_MistimedInputReceived::CallFunc_AkEventGlobal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_MistimedInputReceived, K2Node_MakeStruct_SlateColor) == 0x00000C, "Member 'WBP_MinigameQTE_C_MistimedInputReceived::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_MistimedInputReceived, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'WBP_MinigameQTE_C_MistimedInputReceived::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.OnMinigameLinked
// 0x0048 (0x0048 - 0x0000)
struct WBP_MinigameQTE_C_OnMinigameLinked final
{
public:
	class UCrafterComponent*                      Crafter;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMinigameQTEStyle                             Temp_byte_Variable_4;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMinigameQTEStyle                             Temp_byte_Variable_10;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_11;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_12;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_13;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_14;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_15;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_16;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMinigameQTEStyle                             Temp_byte_Variable_17;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MinigameQTE_C_OnMinigameLinked) == 0x000008, "Wrong alignment on WBP_MinigameQTE_C_OnMinigameLinked");
static_assert(sizeof(WBP_MinigameQTE_C_OnMinigameLinked) == 0x000048, "Wrong size on WBP_MinigameQTE_C_OnMinigameLinked");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Crafter) == 0x000000, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Crafter' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable) == 0x000008, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_1) == 0x000009, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_2) == 0x00000A, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_3) == 0x00000B, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_4) == 0x00000C, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_5) == 0x00000D, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_6) == 0x00000E, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_7) == 0x00000F, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_8) == 0x000010, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_9) == 0x000011, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_10) == 0x000012, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_11) == 0x000013, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_12) == 0x000014, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_13) == 0x000015, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_14) == 0x000016, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_15) == 0x000017, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, K2Node_Select_Default) == 0x000018, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, K2Node_Select_Default_1) == 0x000019, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_16) == 0x00001A, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_16' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, Temp_byte_Variable_17) == 0x00001B, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::Temp_byte_Variable_17' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, K2Node_Select_Default_2) == 0x00001C, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000028, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000038, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_OnMinigameLinked, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000040, "Member 'WBP_MinigameQTE_C_OnMinigameLinked::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.SetCursorPosition
// 0x0070 (0x0070 - 0x0000)
struct WBP_MinigameQTE_C_SetCursorPosition final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518E[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCursorPosition_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_518F[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5190[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5191[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MinigameQTE_C_SetCursorPosition) == 0x000008, "Wrong alignment on WBP_MinigameQTE_C_SetCursorPosition");
static_assert(sizeof(WBP_MinigameQTE_C_SetCursorPosition) == 0x000070, "Wrong size on WBP_MinigameQTE_C_SetCursorPosition");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, Temp_byte_Variable) == 0x000000, "Member 'WBP_MinigameQTE_C_SetCursorPosition::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, Temp_byte_Variable_1) == 0x000001, "Member 'WBP_MinigameQTE_C_SetCursorPosition::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, Temp_bool_Variable) == 0x000002, "Member 'WBP_MinigameQTE_C_SetCursorPosition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WBP_MinigameQTE_C_SetCursorPosition::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, CallFunc_GetPosition_ReturnValue) == 0x000010, "Member 'WBP_MinigameQTE_C_SetCursorPosition::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, CallFunc_GetCursorPosition_ReturnValue) == 0x000020, "Member 'WBP_MinigameQTE_C_SetCursorPosition::CallFunc_GetCursorPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, CallFunc_BreakVector2D_X) == 0x000028, "Member 'WBP_MinigameQTE_C_SetCursorPosition::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, CallFunc_BreakVector2D_Y) == 0x000030, "Member 'WBP_MinigameQTE_C_SetCursorPosition::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'WBP_MinigameQTE_C_SetCursorPosition::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000040, "Member 'WBP_MinigameQTE_C_SetCursorPosition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, CallFunc_MakeVector2D_ReturnValue) == 0x000048, "Member 'WBP_MinigameQTE_C_SetCursorPosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, K2Node_Select_Default) == 0x000058, "Member 'WBP_MinigameQTE_C_SetCursorPosition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000060, "Member 'WBP_MinigameQTE_C_SetCursorPosition::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SetCursorPosition, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000068, "Member 'WBP_MinigameQTE_C_SetCursorPosition::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.SuccessfulInputReceived
// 0x0020 (0x0020 - 0x0000)
struct WBP_MinigameQTE_C_SuccessfulInputReceived final
{
public:
	class UMinigameComponentMasterQTE*            Comp;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0014)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MinigameQTE_C_SuccessfulInputReceived) == 0x000008, "Wrong alignment on WBP_MinigameQTE_C_SuccessfulInputReceived");
static_assert(sizeof(WBP_MinigameQTE_C_SuccessfulInputReceived) == 0x000020, "Wrong size on WBP_MinigameQTE_C_SuccessfulInputReceived");
static_assert(offsetof(WBP_MinigameQTE_C_SuccessfulInputReceived, Comp) == 0x000000, "Member 'WBP_MinigameQTE_C_SuccessfulInputReceived::Comp' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SuccessfulInputReceived, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'WBP_MinigameQTE_C_SuccessfulInputReceived::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_SuccessfulInputReceived, K2Node_SwitchEnum_CmpSuccess) == 0x00001C, "Member 'WBP_MinigameQTE_C_SuccessfulInputReceived::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_MinigameQTE_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MinigameQTE_C_Tick) == 0x000004, "Wrong alignment on WBP_MinigameQTE_C_Tick");
static_assert(sizeof(WBP_MinigameQTE_C_Tick) == 0x00003C, "Wrong size on WBP_MinigameQTE_C_Tick");
static_assert(offsetof(WBP_MinigameQTE_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_MinigameQTE_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_MinigameQTE_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.UpdatePredictorColor
// 0x0060 (0x0060 - 0x0000)
struct WBP_MinigameQTE_C_UpdatePredictorColor final
{
public:
	double                                        ElapsedTime;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5192[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5193[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WouldInputNowBeSuccess_ReturnValue;       // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5194[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x004C(0x0014)()
};
static_assert(alignof(WBP_MinigameQTE_C_UpdatePredictorColor) == 0x000008, "Wrong alignment on WBP_MinigameQTE_C_UpdatePredictorColor");
static_assert(sizeof(WBP_MinigameQTE_C_UpdatePredictorColor) == 0x000060, "Wrong size on WBP_MinigameQTE_C_UpdatePredictorColor");
static_assert(offsetof(WBP_MinigameQTE_C_UpdatePredictorColor, ElapsedTime) == 0x000000, "Member 'WBP_MinigameQTE_C_UpdatePredictorColor::ElapsedTime' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdatePredictorColor, Temp_bool_Variable) == 0x000008, "Member 'WBP_MinigameQTE_C_UpdatePredictorColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdatePredictorColor, Temp_struct_Variable) == 0x00000C, "Member 'WBP_MinigameQTE_C_UpdatePredictorColor::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdatePredictorColor, Temp_struct_Variable_1) == 0x00001C, "Member 'WBP_MinigameQTE_C_UpdatePredictorColor::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdatePredictorColor, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000030, "Member 'WBP_MinigameQTE_C_UpdatePredictorColor::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdatePredictorColor, K2Node_SwitchEnum_CmpSuccess) == 0x000038, "Member 'WBP_MinigameQTE_C_UpdatePredictorColor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdatePredictorColor, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000039, "Member 'WBP_MinigameQTE_C_UpdatePredictorColor::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdatePredictorColor, CallFunc_WouldInputNowBeSuccess_ReturnValue) == 0x00003A, "Member 'WBP_MinigameQTE_C_UpdatePredictorColor::CallFunc_WouldInputNowBeSuccess_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdatePredictorColor, K2Node_Select_Default) == 0x00003C, "Member 'WBP_MinigameQTE_C_UpdatePredictorColor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdatePredictorColor, K2Node_MakeStruct_SlateColor) == 0x00004C, "Member 'WBP_MinigameQTE_C_UpdatePredictorColor::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function WBP_MinigameQTE.WBP_MinigameQTE_C.UpdateSuccessCount
// 0x00B8 (0x00B8 - 0x0000)
struct WBP_MinigameQTE_C_UpdateSuccessCount final
{
public:
	bool                                          CachedFinished;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5195[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CachedSuccess;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5196[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5197[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5198[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_MinigameQTEInput2_C*               CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5199[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519A[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00A0(0x0018)()
};
static_assert(alignof(WBP_MinigameQTE_C_UpdateSuccessCount) == 0x000008, "Wrong alignment on WBP_MinigameQTE_C_UpdateSuccessCount");
static_assert(sizeof(WBP_MinigameQTE_C_UpdateSuccessCount) == 0x0000B8, "Wrong size on WBP_MinigameQTE_C_UpdateSuccessCount");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CachedFinished) == 0x000000, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CachedFinished' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CachedSuccess) == 0x000004, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CachedSuccess' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, Alpha) == 0x000008, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::Alpha' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, Temp_bool_Variable) == 0x000010, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, Temp_byte_Variable) == 0x000011, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, Temp_byte_Variable_1) == 0x000012, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, Temp_int_Array_Index_Variable) == 0x000014, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000018, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, K2Node_Select_Default) == 0x000020, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000028, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Array_Get_Item) == 0x000040, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, K2Node_SwitchEnum_CmpSuccess) == 0x00004C, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Less_IntInt_ReturnValue) == 0x00004D, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_PlayAnimation_ReturnValue) == 0x000050, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Conv_IntToString_ReturnValue) == 0x000058, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Concat_StrStr_ReturnValue) == 0x000068, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000078, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000088, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000090, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MinigameQTE_C_UpdateSuccessCount, CallFunc_Conv_StringToText_ReturnValue) == 0x0000A0, "Member 'WBP_MinigameQTE_C_UpdateSuccessCount::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

}

