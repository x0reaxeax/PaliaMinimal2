#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Palia

#include "Basic.hpp"

#include "NetCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ValeriaDTOs_structs.hpp"
#include "S6EnhancedInputExtended_structs.hpp"
#include "S6Persist_structs.hpp"
#include "Engine_structs.hpp"
#include "KeyRebinding_structs.hpp"
#include "OnlineSubsystemValeria_structs.hpp"
#include "S6Core_structs.hpp"
#include "AkAudio_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// Enum Palia.ESubgameState
// NumValues: 0x0005
enum class ESubgameState : uint8
{
	None                                     = 0,
	WaitingToStart                           = 1,
	Active                                   = 2,
	Complete                                 = 3,
	ESubgameState_MAX                        = 4,
};

// Enum Palia.EVAL_CharacterBodyType
// NumValues: 0x0005
enum class EVAL_CharacterBodyType : uint8
{
	Male                                     = 0,
	Female                                   = 1,
	ValerianMale                             = 2,
	ValerianFemale                           = 3,
	EVAL_MAX                                 = 4,
};

// Enum Palia.EVAL_CharacterRenderStudioState
// NumValues: 0x0006
enum class EVAL_CharacterRenderStudioState : uint8
{
	Idle                                     = 0,
	LoadingLevel                             = 1,
	PresentingLevel                          = 2,
	ClosingStudio                            = 3,
	Closed                                   = 4,
	EVAL_MAX                                 = 5,
};

// Enum Palia.ENotificationSpecialType
// NumValues: 0x0005
enum class ENotificationSpecialType : uint8
{
	General                                  = 0,
	InventoryFull                            = 1,
	Error                                    = 2,
	Minor                                    = 3,
	ENotificationSpecialType_MAX             = 4,
};

// Enum Palia.ETimeOfDayPeriod
// NumValues: 0x0006
enum class ETimeOfDayPeriod : uint8
{
	Morning                                  = 0,
	Day                                      = 1,
	Evening                                  = 2,
	Night                                    = 3,
	Custom                                   = 4,
	ETimeOfDayPeriod_MAX                     = 5,
};

// Enum Palia.ETravelDestinationType
// NumValues: 0x0006
enum class ETravelDestinationType : uint8
{
	None                                     = 0,
	Home                                     = 1,
	Stable                                   = 2,
	PrivateSpace                             = 3,
	SpecificLocation                         = 4,
	ETravelDestinationType_MAX               = 5,
};

// Enum Palia.EStoragePoolType
// NumValues: 0x0004
enum class EStoragePoolType : uint8
{
	None                                     = 0,
	Primary                                  = 1,
	Lockbox                                  = 2,
	Max                                      = 3,
};

// Enum Palia.EVillagerGiftRewardLevel
// NumValues: 0x0007
enum class EVillagerGiftRewardLevel : uint8
{
	Love                                     = 0,
	Like                                     = 1,
	Neutral                                  = 2,
	Dislike                                  = 3,
	Hate                                     = 4,
	INVALID                                  = 5,
	EVillagerGiftRewardLevel_MAX             = 6,
};

// Enum Palia.ERomanceState
// NumValues: 0x0003
enum class ERomanceState : uint8
{
	Inactive                                 = 0,
	Dating                                   = 1,
	ERomanceState_MAX                        = 2,
};

// Enum Palia.EVAL_BoolOverride
// NumValues: 0x0004
enum class EVAL_BoolOverride : uint8
{
	NotOverridden                            = 0,
	OverrideFalse                            = 1,
	OverrideTrue                             = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EHousingSlotType
// NumValues: 0x0003
enum class EHousingSlotType : uint8
{
	PlayerOwned                              = 0,
	PlayerPurchased                          = 1,
	EHousingSlotType_MAX                     = 2,
};

// Enum Palia.EBagUpgradeType
// NumValues: 0x0003
enum class EBagUpgradeType : uint8
{
	Storage                                  = 0,
	Ammo                                     = 1,
	EBagUpgradeType_MAX                      = 2,
};

// Enum Palia.ENumericalOperation
// NumValues: 0x0004
enum class ENumericalOperation : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	Subtract                                 = 2,
	ENumericalOperation_MAX                  = 3,
};

// Enum Palia.ESkillType
// NumValues: 0x0011
enum class ESkillType : uint8
{
	None                                     = 0,
	Fishing                                  = 1,
	Cooking                                  = 2,
	Alchemy                                  = 3,
	Gardening                                = 4,
	Blacksmithing                            = 5,
	AnimalHusbandry                          = 6,
	Mining                                   = 7,
	Hunting                                  = 8,
	Combat                                   = 9,
	BugCatching                              = 10,
	Lumberjacking                            = 11,
	Master                                   = 12,
	Foraging                                 = 13,
	FurnitureMaking                          = 14,
	Num                                      = 15,
	ESkillType_MAX                           = 16,
};

// Enum Palia.ERomanceStateChange
// NumValues: 0x0004
enum class ERomanceStateChange : uint8
{
	None                                     = 0,
	StartDating                              = 1,
	BreakUp                                  = 7,
	ERomanceStateChange_MAX                  = 8,
};

// Enum Palia.EVitalType
// NumValues: 0x000B
enum class EVitalType : uint8
{
	None                                     = 0,
	Coins                                    = 1,
	CommunityPoints                          = 2,
	Stamina                                  = 3,
	Health                                   = 4,
	PremiumCurrency                          = 5,
	MedalFishing                             = 6,
	Focus                                    = 7,
	RestedFocus                              = 8,
	Num                                      = 9,
	EVitalType_MAX                           = 10,
};

// Enum Palia.EVAL_QuestNeedsResetReason
// NumValues: 0x0008
enum class EVAL_QuestNeedsResetReason : uint8
{
	InvalidResult                            = 18446744073709551614,
	NoResetNeeded                            = 0,
	VersionMismatch                          = 1,
	QuestDeleted                             = 2,
	Cheat                                    = 3,
	StateError                               = 4,
	StateMismatch                            = 5,
	EVAL_MAX                                 = 6,
};

// Enum Palia.EVAL_QuestPlayerStateChangeType
// NumValues: 0x0008
enum class EVAL_QuestPlayerStateChangeType : uint8
{
	Invalid                                  = 0,
	Reward                                   = 1,
	Deduction                                = 2,
	DialogueViewed                           = 3,
	VisitStarted                             = 4,
	VisitCompleted                           = 5,
	QuestReset                               = 6,
	EVAL_MAX                                 = 7,
};

// Enum Palia.EVAL_QuestBranchingGoalChoiceStatus
// NumValues: 0x0004
enum class EVAL_QuestBranchingGoalChoiceStatus : uint8
{
	Undecided                                = 0,
	Rejected                                 = 1,
	Chosen                                   = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EVitalPersistType
// NumValues: 0x000B
enum class EVitalPersistType : uint8
{
	None                                     = 0,
	Coins                                    = 1,
	CommunityPoints                          = 2,
	Stamina                                  = 3,
	Health                                   = 4,
	PremiumCurrency                          = 5,
	MedalFishing                             = 6,
	Focus                                    = 7,
	RestedFocus                              = 8,
	Num                                      = 9,
	EVitalPersistType_MAX                    = 10,
};

// Enum Palia.EHousingPermissionLevel
// NumValues: 0x000B
enum class EHousingPermissionLevel : uint8
{
	Owner                                    = 0,
	CoOwner                                  = 1,
	Companion                                = 2,
	BFF                                      = 3,
	Editor                                   = 4,
	Contractor                               = 5,
	NoEntry                                  = 6,
	ViewOnly                                 = 7,
	Default                                  = 8,
	Unknown                                  = 9,
	EHousingPermissionLevel_MAX              = 10,
};

// Enum Palia.EInventoryAmount
// NumValues: 0x0003
enum class EInventoryAmount : uint8
{
	FullStack                                = 0,
	SplitStack                               = 1,
	EInventoryAmount_MAX                     = 2,
};

// Enum Palia.EMapAreaTransformationNotificationType
// NumValues: 0x0002
enum class EMapAreaTransformationNotificationType : uint8
{
	FlowTreeGroveSpawned                     = 0,
	EMapAreaTransformationNotificationType_MAX = 1,
};

// Enum Palia.EDebugCheatStatType
// NumValues: 0x0005
enum class EDebugCheatStatType : uint8
{
	Bool                                     = 0,
	Int                                      = 1,
	Float                                    = 2,
	Double                                   = 3,
	EDebugCheatStatType_MAX                  = 4,
};

// Enum Palia.EInteractEventIndex
// NumValues: 0x0008
enum class EInteractEventIndex : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	MousePrimary                             = 2,
	MouseSecondary                           = 3,
	Tertiary                                 = 4,
	Quaternary                               = 5,
	Count                                    = 6,
	EInteractEventIndex_MAX                  = 7,
};

// Enum Palia.EInputType
// NumValues: 0x0004
enum class EInputType : uint8
{
	Keyboard                                 = 0,
	Gamepad                                  = 1,
	Touch                                    = 2,
	EInputType_MAX                           = 3,
};

// Enum Palia.EVAL_PartyManagerState
// NumValues: 0x0004
enum class EVAL_PartyManagerState : uint8
{
	Idle                                     = 0,
	AwaitingPartyCreation                    = 1,
	InParty                                  = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EGardenActionType
// NumValues: 0x000A
enum class EGardenActionType : uint8
{
	None                                     = 0,
	Plant                                    = 1,
	Harvest                                  = 2,
	Water                                    = 3,
	Fertilize                                = 4,
	TillPartial                              = 5,
	Till                                     = 6,
	Weed                                     = 7,
	MaxActionType                            = 8,
	EGardenActionType_MAX                    = 9,
};

// Enum Palia.EHousingVisitationState
// NumValues: 0x0005
enum class EHousingVisitationState : uint8
{
	Friends                                  = 0,
	Closed                                   = 1,
	Request                                  = 2,
	Open                                     = 3,
	EHousingVisitationState_MAX              = 4,
};

// Enum Palia.EHousingSlotAction
// NumValues: 0x0007
enum class EHousingSlotAction : uint8
{
	Activate                                 = 0,
	Rename                                   = 1,
	Purchase                                 = 2,
	Delete                                   = 3,
	VisitationChange                         = 4,
	Add                                      = 5,
	EHousingSlotAction_MAX                   = 6,
};

// Enum Palia.EVAL_ShrineType
// NumValues: 0x0003
enum class EVAL_ShrineType : uint8
{
	Phoenix                                  = 0,
	Dragon                                   = 1,
	EVAL_MAX                                 = 2,
};

// Enum Palia.ETransitiveDecorStimulusType
// NumValues: 0x0007
enum class ETransitiveDecorStimulusType : uint8
{
	None                                     = 0,
	TimeSeconds                              = 1,
	ValeriaDays                              = 2,
	Water                                    = 3,
	Fertilizer                               = 4,
	RewardPickup                             = 5,
	ETransitiveDecorStimulusType_MAX         = 6,
};

// Enum Palia.EVillagerQuestStatus
// NumValues: 0x0006
enum class EVillagerQuestStatus : uint8
{
	NotStarted                               = 0,
	InProgress                               = 1,
	Completed                                = 2,
	Expired                                  = 3,
	Invalid                                  = 4,
	EVillagerQuestStatus_MAX                 = 5,
};

// Enum Palia.EChappaChaseState
// NumValues: 0x0004
enum class EChappaChaseState : uint8
{
	UnInitialized                            = 0,
	ReadyToPlay                              = 1,
	InProgress                               = 2,
	EChappaChaseState_MAX                    = 3,
};

// Enum Palia.EValeriaCharacterEvent
// NumValues: 0x0004
enum class EValeriaCharacterEvent : uint8
{
	Deserialized                             = 0,
	NewCharacter                             = 1,
	Replicated                               = 2,
	EValeriaCharacterEvent_MAX               = 3,
};

// Enum Palia.EWorldLocationContext
// NumValues: 0x0007
enum class EWorldLocationContext : uint8
{
	Default                                  = 0,
	LimitedEvent                             = 1,
	Visit                                    = 2,
	PrivateSpace                             = 3,
	EWS                                      = 4,
	DialogueRoom                             = 5,
	EWorldLocationContext_MAX                = 6,
};

// Enum Palia.EValeriaClimbDashDirection
// NumValues: 0x0007
enum class EValeriaClimbDashDirection : uint8
{
	Invalid                                  = 0,
	Left                                     = 1,
	UpAndLeft                                = 2,
	Up                                       = 3,
	UpAndRight                               = 4,
	Right                                    = 5,
	EValeriaClimbDashDirection_MAX           = 6,
};

// Enum Palia.EPlayerInfoState
// NumValues: 0x0009
enum class EPlayerInfoState : uint8
{
	NotSpecified                             = 0,
	Cheats                                   = 1,
	Currencies                               = 2,
	Map                                      = 3,
	Quests                                   = 4,
	Recipes                                  = 5,
	Relationships                            = 6,
	Skills                                   = 7,
	EPlayerInfoState_MAX                     = 8,
};

// Enum Palia.ECrafterState
// NumValues: 0x0007
enum class ECrafterState : uint8
{
	Invalid                                  = 0,
	SelectingRecipe                          = 1,
	ActionsRequired                          = 2,
	Crafting                                 = 3,
	FinalCook                                = 4,
	CollectionReady                          = 5,
	ECrafterState_MAX                        = 6,
};

// Enum Palia.EComplexRecipeProducerAllProductState
// NumValues: 0x0004
enum class EComplexRecipeProducerAllProductState : uint8
{
	None                                     = 0,
	Needs                                    = 1,
	Complete                                 = 5,
	EComplexRecipeProducerAllProductState_MAX = 6,
};

// Enum Palia.EComplexRecipeCrafterCurrentProductState
// NumValues: 0x0005
enum class EComplexRecipeCrafterCurrentProductState : uint8
{
	None                                     = 0,
	Complete                                 = 5,
	Fail                                     = 2,
	InProgress                               = 4,
	EComplexRecipeCrafterCurrentProductState_MAX = 6,
};

// Enum Palia.ERecipeStepStartType
// NumValues: 0x0006
enum class ERecipeStepStartType : uint8
{
	PreviousStepFinish                       = 0,
	PreviousStepStart                        = 1,
	ParentStepStart                          = 2,
	RecipeStart                              = 3,
	SpecificStepsFinished                    = 4,
	ERecipeStepStartType_MAX                 = 5,
};

// Enum Palia.ERecipeStepType
// NumValues: 0x0004
enum class ERecipeStepType : uint8
{
	None                                     = 0,
	RequireItem                              = 1,
	RequireInteraction                       = 2,
	ERecipeStepType_MAX                      = 3,
};

// Enum Palia.EVillagerDialogueIcon
// NumValues: 0x000F
enum class EVillagerDialogueIcon : uint8
{
	None                                     = 0,
	Chat                                     = 1,
	QuestBegin                               = 2,
	QuestHint                                = 3,
	QuestTurnIn                              = 4,
	GiftHint                                 = 5,
	Flirt                                    = 6,
	FirePersonalityIcon                      = 7,
	WaterPersonalityIcon                     = 8,
	EarthPersonalityIcon                     = 9,
	AirPersonalityIcon                       = 10,
	BasicResponse                            = 11,
	QuestComplete                            = 12,
	ImportantDialogue                        = 13,
	EVillagerDialogueIcon_MAX                = 14,
};

// Enum Palia.EEquipmentType
// NumValues: 0x0006
enum class EEquipmentType : uint8
{
	Invalid                                  = 0,
	Gear                                     = 1,
	Tool                                     = 2,
	Primary                                  = 3,
	Temporary                                = 4,
	EEquipmentType_MAX                       = 5,
};

// Enum Palia.EAnimStateFish
// NumValues: 0x0007
enum class EAnimStateFish : uint8
{
	None                                     = 0,
	Idle                                     = 1,
	Bite                                     = 2,
	Hooked                                   = 3,
	Caught                                   = 4,
	StraightJump                             = 5,
	EAnimStateFish_MAX                       = 6,
};

// Enum Palia.EFishingMiniGameResult
// NumValues: 0x0007
enum class EFishingMiniGameResult : uint8
{
	None                                     = 0,
	Success                                  = 1,
	Failure                                  = 2,
	Cancelled                                = 3,
	CancelledCast                            = 4,
	EmptyHanded                              = 5,
	EFishingMiniGameResult_MAX               = 6,
};

// Enum Palia.EFishingNibbleLevel
// NumValues: 0x0006
enum class EFishingNibbleLevel : uint8
{
	Aggressive                               = 0,
	Cautious                                 = 1,
	Normal                                   = 2,
	Strategic                                = 3,
	Uncertain                                = 4,
	EFishingNibbleLevel_MAX                  = 5,
};

// Enum Palia.EFishingMiniGameState
// NumValues: 0x000C
enum class EFishingMiniGameState : uint8
{
	Inactive                                 = 0,
	AimingCast                               = 1,
	CancellingCast                           = 2,
	DeployingCast                            = 3,
	SelectingLoot                            = 4,
	Waiting                                  = 5,
	Nibbling                                 = 6,
	Biting                                   = 7,
	Reeling                                  = 8,
	Finished                                 = 9,
	Catching                                 = 10,
	EFishingMiniGameState_MAX                = 11,
};

// Enum Palia.EPlantingState
// NumValues: 0x0005
enum class EPlantingState : uint8
{
	None                                     = 0,
	Open                                     = 1,
	NotAvailable                             = 2,
	Preview                                  = 3,
	EPlantingState_MAX                       = 4,
};

// Enum Palia.ECharacterAttachPoint
// NumValues: 0x0005
enum class ECharacterAttachPoint : uint8
{
	None                                     = 0,
	LeftHand                                 = 1,
	RightHand                                = 2,
	Explicit                                 = 3,
	ECharacterAttachPoint_MAX                = 4,
};

// Enum Palia.ETrackedItemType
// NumValues: 0x0008
enum class ETrackedItemType : uint8
{
	Default                                  = 0,
	LocalPlayer                              = 1,
	RemotePlayer                             = 2,
	NPC                                      = 3,
	MapActor                                 = 4,
	Waypoint                                 = 5,
	QuestMarker                              = 6,
	ETrackedItemType_MAX                     = 7,
};

// Enum Palia.EMinigameState
// NumValues: 0x000A
enum class EMinigameState : uint8
{
	None                                     = 0,
	WaitingToStart                           = 1,
	WaitingForRelease                        = 2,
	WaitingForPress                          = 3,
	Start                                    = 4,
	Running                                  = 5,
	Penalty                                  = 6,
	Failure                                  = 7,
	Success                                  = 8,
	EMinigameState_MAX                       = 9,
};

// Enum Palia.ESubgameResult
// NumValues: 0x0004
enum class ESubgameResult : uint8
{
	None                                     = 0,
	Failure                                  = 1,
	Success                                  = 2,
	ESubgameResult_MAX                       = 3,
};

// Enum Palia.EVitalChangeFlags
// NumValues: 0x0007
enum class EVitalChangeFlags : uint8
{
	None                                     = 0,
	NotifyItemCarousel                       = 1,
	TrackStat                                = 2,
	CreateShippingBinNotification            = 4,
	NotifyCarouselAndTrackStat               = 3,
	NotifyCarouselWithShippingBinNotificationAndTrackStat = 7,
	EVitalChangeFlags_MAX                    = 8,
};

// Enum Palia.EItemCategory
// NumValues: 0x001C
enum class EItemCategory : uint8
{
	NotSpecified                             = 0,
	Consumable                               = 1,
	Material                                 = 2,
	Equipment                                = 3,
	Customization                            = 4,
	Vegetable                                = 5,
	Fruit                                    = 6,
	Fish                                     = 7,
	Meat                                     = 8,
	Spice                                    = 9,
	Ingredient                               = 10,
	Storage                                  = 11,
	Tool                                     = 12,
	Crafter                                  = 13,
	Junk                                     = 14,
	Book                                     = 15,
	Fertilizer                               = 16,
	Bug                                      = 17,
	Seed                                     = 18,
	Product                                  = 19,
	Crop                                     = 20,
	Gatherable                               = 21,
	Wallpaper                                = 22,
	FloorTiling                              = 23,
	ExteriorWallpaper                        = 24,
	Quest                                    = 25,
	Instrument                               = 26,
	EItemCategory_MAX                        = 27,
};

// Enum Palia.EMailSenderType
// NumValues: 0x0003
enum class EMailSenderType : uint8
{
	Player                                   = 0,
	Character                                = 1,
	EMailSenderType_MAX                      = 2,
};

// Enum Palia.EActionableState
// NumValues: 0x0005
enum class EActionableState : uint8
{
	Unactionable                             = 0,
	Actionable                               = 1,
	InAction                                 = 2,
	ActionComplete                           = 3,
	EActionableState_MAX                     = 4,
};

// Enum Palia.EReadStatus
// NumValues: 0x0005
enum class EReadStatus : uint8
{
	New                                      = 0,
	Opened                                   = 1,
	Archived                                 = 2,
	Deleted                                  = 3,
	EReadStatus_MAX                          = 4,
};

// Enum Palia.EMailType
// NumValues: 0x0005
enum class EMailType : uint8
{
	Unknown                                  = 0,
	Text                                     = 1,
	Reward                                   = 2,
	Gift                                     = 3,
	EMailType_MAX                            = 4,
};

// Enum Palia.EMessageTargetType
// NumValues: 0x0009
enum class EMessageTargetType : uint8
{
	Invalid                                  = 0,
	Server                                   = 1,
	Direct                                   = 2,
	Group                                    = 3,
	Party                                    = 4,
	PlayerGuild                              = 5,
	Development                              = 6,
	Proximity                                = 7,
	EMessageTargetType_MAX                   = 8,
};

// Enum Palia.EChatMessageType
// NumValues: 0x0004
enum class EChatMessageType : uint8
{
	Text                                     = 0,
	Image                                    = 1,
	Notification                             = 2,
	EChatMessageType_MAX                     = 3,
};

// Enum Palia.EVAL_PresenceStatus
// NumValues: 0x0007
enum class EVAL_PresenceStatus : uint8
{
	Online                                   = 0,
	Offline                                  = 1,
	Away                                     = 2,
	ExtendedAway                             = 3,
	DoNotDisturb                             = 4,
	Chat                                     = 5,
	EVAL_MAX                                 = 6,
};

// Enum Palia.ETravelManagerStatus
// NumValues: 0x000C
enum class ETravelManagerStatus : uint8
{
	None                                     = 0,
	FindingSessions                          = 1,
	WaitingForReservation                    = 2,
	JoiningSession                           = 3,
	PreparingForTravel                       = 4,
	TravelFailure                            = 5,
	ReservationFailed                        = 6,
	NoSessionsFound                          = 7,
	JoinSessionFailed                        = 8,
	ConnectionFailure                        = 9,
	UnknownFailure                           = 10,
	ETravelManagerStatus_MAX                 = 11,
};

// Enum Palia.EVAL_LoadoutErrorType
// NumValues: 0x0007
enum class EVAL_LoadoutErrorType : uint8
{
	DisabledItem                             = 0,
	InvalidVariantChannel                    = 1,
	MissingVariantOption                     = 2,
	BodyTypeIncompatibility                  = 3,
	NullInMandatorySlot                      = 4,
	NoEntitlement                            = 5,
	EVAL_MAX                                 = 6,
};

// Enum Palia.EShaderBasedAnimEventEdge
// NumValues: 0x0004
enum class EShaderBasedAnimEventEdge : uint8
{
	Triggered                                = 0,
	Started                                  = 1,
	Ended                                    = 2,
	EShaderBasedAnimEventEdge_MAX            = 3,
};

// Enum Palia.ECharacterState
// NumValues: 0x001E
enum class ECharacterState : uint8
{
	Empty                                    = 0,
	World                                    = 1,
	Fishing                                  = 2,
	Placement                                = 3,
	Aiming                                   = 5,
	HousingUpgrades                          = 13,
	Strafing                                 = 17,
	GardenPlanting                           = 18,
	Minigame                                 = 19,
	MinigameTouch                            = 20,
	Subgame                                  = 54,
	Crafter                                  = 25,
	BowAiming                                = 33,
	SwingReady                               = 34,
	Watering                                 = 35,
	WaterRefill                              = 36,
	GardenFertilizing                        = 40,
	Arcade                                   = 41,
	Carrying                                 = 42,
	Teleporting                              = 43,
	TakingPhotos                             = 45,
	FlowSprite                               = 51,
	PlayingInstrument                        = 52,
	GardenTilling                            = 53,
	SwingingTool                             = 56,
	Dialogue                                 = 9,
	SocialPanel                              = 22,
	GiveGift                                 = 32,
	InspirationRecipeSelect                  = 49,
	ECharacterState_MAX                      = 57,
};

// Enum Palia.EVAL_HUDOpacity
// NumValues: 0x0004
enum class EVAL_HUDOpacity : uint8
{
	Default                                  = 0,
	Light                                    = 1,
	Darkened                                 = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EAudioMixProfiles
// NumValues: 0x0004
enum class EAudioMixProfiles : uint8
{
	Default                                  = 0,
	Midnight                                 = 1,
	Studio                                   = 2,
	EAudioMixProfiles_MAX                    = 3,
};

// Enum Palia.ESprintType
// NumValues: 0x0005
enum class ESprintType : uint8
{
	Undefined                                = 0,
	HoldToSprint                             = 1,
	TapToSprint                              = 2,
	ToggleSprint                             = 3,
	ESprintType_MAX                          = 4,
};

// Enum Palia.EVAL_QuestCategory
// NumValues: 0x0009
enum class EVAL_QuestCategory : uint8
{
	Default                                  = 0,
	Mastery                                  = 1,
	Skills                                   = 2,
	Villager                                 = 3,
	Event                                    = 4,
	Main                                     = 5,
	Completed                                = 254,
	Pinned                                   = 255,
	EVAL_MAX                                 = 256,
};

// Enum Palia.EVillagerActivityStatus
// NumValues: 0x0003
enum class EVillagerActivityStatus : uint8
{
	Traveling                                = 0,
	Action                                   = 1,
	EVillagerActivityStatus_MAX              = 2,
};

// Enum Palia.ERelationshipType
// NumValues: 0x0004
enum class ERelationshipType : uint8
{
	INVALID                                  = 0,
	Friendship                               = 1,
	Romance                                  = 2,
	ERelationshipType_MAX                    = 3,
};

// Enum Palia.EMovementRelativeTo
// NumValues: 0x0003
enum class EMovementRelativeTo : uint8
{
	Camera                                   = 0,
	ControlRotation                          = 1,
	EMovementRelativeTo_MAX                  = 2,
};

// Enum Palia.ECharacterMoveMode
// NumValues: 0x0005
enum class ECharacterMoveMode : uint8
{
	Custom                                   = 0,
	Normal                                   = 1,
	Strafe                                   = 2,
	StrafeWalk                               = 3,
	ECharacterMoveMode_MAX                   = 4,
};

// Enum Palia.EVAL_ChatPermissions
// NumValues: 0x0006
enum class EVAL_ChatPermissions : uint8
{
	None                                     = 0,
	AllowedToSendMessages                    = 1,
	ChatPanelVisible                         = 2,
	PlatformAllowsOnlineCommunication        = 4,
	All                                      = 7,
	EVAL_MAX                                 = 8,
};

// Enum Palia.EComplexRecipeState
// NumValues: 0x0004
enum class EComplexRecipeState : uint8
{
	Invalid                                  = 0,
	Active                                   = 1,
	Ended                                    = 2,
	EComplexRecipeState_MAX                  = 3,
};

// Enum Palia.ECrafterMode
// NumValues: 0x0005
enum class ECrafterMode : uint8
{
	None                                     = 0,
	AutoCraft                                = 1,
	SemiAuto                                 = 2,
	Manual                                   = 3,
	ECrafterMode_MAX                         = 4,
};

// Enum Palia.EComplexRecipeCueState
// NumValues: 0x0008
enum class EComplexRecipeCueState : uint8
{
	None                                     = 0,
	Needs                                    = 1,
	Fail                                     = 2,
	Browsing                                 = 3,
	InProgress                               = 4,
	Complete                                 = 5,
	Holding                                  = 6,
	EComplexRecipeCueState_MAX               = 7,
};

// Enum Palia.EValeriaFuncResult
// NumValues: 0x0003
enum class EValeriaFuncResult : uint8
{
	Success                                  = 0,
	Failure                                  = 1,
	EValeriaFuncResult_MAX                   = 2,
};

// Enum Palia.EHotPotTurnState
// NumValues: 0x0004
enum class EHotPotTurnState : uint8
{
	None                                     = 0,
	Draw                                     = 1,
	Discard                                  = 2,
	EHotPotTurnState_MAX                     = 3,
};

// Enum Palia.EHotPotTileFood
// NumValues: 0x001A
enum class EHotPotTileFood : uint8
{
	None                                     = 0,
	Chapaa                                   = 1,
	Sernuk                                   = 2,
	Muujin                                   = 3,
	MountainMorel                            = 4,
	Brightshroom                             = 5,
	EnokiMushroom                            = 6,
	BokChoy                                  = 7,
	NapaCabbage                              = 8,
	GreenOnion                               = 9,
	Ramen                                    = 10,
	Udon                                     = 11,
	Crystal                                  = 12,
	Fish                                     = 13,
	Crab                                     = 14,
	Shrimp                                   = 15,
	Corn                                     = 16,
	Potato                                   = 17,
	Carrot                                   = 18,
	Garlic                                   = 19,
	HeatRoot                                 = 20,
	DariCloves                               = 21,
	Tofu                                     = 22,
	RiceCake                                 = 23,
	Dumpling                                 = 24,
	Max                                      = 25,
};

// Enum Palia.EHotPotTileColor
// NumValues: 0x000A
enum class EHotPotTileColor : uint8
{
	None                                     = 0,
	Red                                      = 1,
	Purple                                   = 2,
	Green                                    = 3,
	Tan                                      = 4,
	Blue                                     = 5,
	Yellow                                   = 6,
	Orange                                   = 7,
	White                                    = 8,
	Max                                      = 9,
};

// Enum Palia.EHotPotNavigationDirection
// NumValues: 0x0006
enum class EHotPotNavigationDirection : uint8
{
	None                                     = 0,
	Up                                       = 1,
	Down                                     = 2,
	Left                                     = 3,
	Right                                    = 4,
	EHotPotNavigationDirection_MAX           = 5,
};

// Enum Palia.EHotPotActionType
// NumValues: 0x0006
enum class EHotPotActionType : uint8
{
	None                                     = 0,
	Draw                                     = 1,
	Discard                                  = 2,
	Pass                                     = 3,
	ClaimWin                                 = 4,
	Max                                      = 5,
};

// Enum Palia.EInventoryRequestStatus
// NumValues: 0x0004
enum class EInventoryRequestStatus : uint8
{
	Open                                     = 0,
	Filled                                   = 1,
	Claimed                                  = 2,
	EInventoryRequestStatus_MAX              = 3,
};

// Enum Palia.EInvitationFailureReason
// NumValues: 0x0003
enum class EInvitationFailureReason : uint8
{
	AlreadyOnServer                          = 0,
	DifferentMap                             = 1,
	EInvitationFailureReason_MAX             = 2,
};

// Enum Palia.EPaliaScreenState
// NumValues: 0x0008
enum class EPaliaScreenState : uint8
{
	Down                                     = 0,
	DownToBlack                              = 1,
	Black                                    = 2,
	BlackToDown                              = 3,
	BlackToLoadingScreen                     = 4,
	LoadingScreen                            = 5,
	LoadingScreenToBlack                     = 6,
	EPaliaScreenState_MAX                    = 7,
};

// Enum Palia.EVAL_ServerSpaceType
// NumValues: 0x0004
enum class EVAL_ServerSpaceType : uint8
{
	Invalid                                  = 0,
	HousingPlot                              = 1,
	CommunityCenter                          = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EMapTravelReason
// NumValues: 0x0007
enum class EMapTravelReason : uint8
{
	MAP_TRAVEL_UNKNOWN                       = 0,
	MAP_TRAVEL_PORTAL                        = 1,
	MAP_TRAVEL_STABLES                       = 2,
	MAP_TRAVEL_HOUSE                         = 3,
	MAP_TRAVEL_LOBBY                         = 4,
	MAP_TRAVEL_CHEATS                        = 5,
	MAP_TRAVEL_MAX                           = 6,
};

// Enum Palia.EVAL_ApplyCustomizationToActorContext
// NumValues: 0x000C
enum class EVAL_ApplyCustomizationToActorContext : uint8
{
	None                                     = 0,
	OpeningWardrobe                          = 1,
	ChangingWardrobeItem                     = 2,
	FinishCharacterCreation                  = 3,
	ChangeCharacterPreview                   = 4,
	ChangeItemPremiumStore                   = 5,
	SelectCharacter                          = 6,
	PreOpeningCinematic                      = 7,
	RandomizeCharacter                       = 8,
	ChangeBodyType                           = 9,
	RenderRequestsForUI                      = 10,
	EVAL_MAX                                 = 11,
};

// Enum Palia.EVAL_UpdateSpawnedPetContext
// NumValues: 0x0003
enum class EVAL_UpdateSpawnedPetContext : uint8
{
	LoadoutChanged                           = 0,
	PostTeleport                             = 1,
	EVAL_MAX                                 = 2,
};

// Enum Palia.EVAL_FootprintEffectType
// NumValues: 0x0004
enum class EVAL_FootprintEffectType : uint8
{
	None                                     = 0,
	Replace                                  = 1,
	Additive                                 = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EVAL_SocialBlockError
// NumValues: 0x0006
enum class EVAL_SocialBlockError : uint8
{
	None                                     = 0,
	AlreadyBlocked                           = 1,
	NotBlocked                               = 2,
	BlockYourself                            = 3,
	MiscFail                                 = 4,
	EVAL_MAX                                 = 5,
};

// Enum Palia.EVAL_PlayerGuildQuestRarity
// NumValues: 0x0005
enum class EVAL_PlayerGuildQuestRarity : uint8
{
	Common                                   = 0,
	Uncommon                                 = 1,
	Rare                                     = 2,
	Num                                      = 3,
	EVAL_MAX                                 = 4,
};

// Enum Palia.EVAL_PlayerGuildQuestSize
// NumValues: 0x0004
enum class EVAL_PlayerGuildQuestSize : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EVAL_PlayerGuildMemberRole
// NumValues: 0x0004
enum class EVAL_PlayerGuildMemberRole : uint8
{
	Member                                   = 0,
	Officer                                  = 1,
	Leader                                   = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EVAL_PlayerGuildInvitationPolicy
// NumValues: 0x0004
enum class EVAL_PlayerGuildInvitationPolicy : uint8
{
	LeaderInviteOnly                         = 0,
	OfficerInviteOnly                        = 1,
	Open                                     = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EVAL_PlayerGuildApplicationPolicy
// NumValues: 0x0005
enum class EVAL_PlayerGuildApplicationPolicy : uint8
{
	Closed                                   = 0,
	LeaderApprovalRequired                   = 1,
	OfficerApprovalRequired                  = 2,
	Open                                     = 3,
	EVAL_MAX                                 = 4,
};

// Enum Palia.EAimingAnimationAimOffset
// NumValues: 0x0009
enum class EAimingAnimationAimOffset : uint8
{
	Unspecified                              = 0,
	BowFiring                                = 1,
	Throwing                                 = 2,
	Slot3                                    = 3,
	Slot4                                    = 4,
	Slot5                                    = 5,
	Slot6                                    = 6,
	Slot7                                    = 7,
	EAimingAnimationAimOffset_MAX            = 8,
};

// Enum Palia.EPlantSize
// NumValues: 0x0004
enum class EPlantSize : uint8
{
	Default                                  = 0,
	TwoByTwo                                 = 1,
	ThreeByThree                             = 2,
	EPlantSize_MAX                           = 3,
};

// Enum Palia.EItemStorageCategory
// NumValues: 0x000F
enum class EItemStorageCategory : uint8
{
	NotSpecified                             = 0,
	Alchemy                                  = 1,
	All                                      = 2,
	Bugs                                     = 3,
	Cooking                                  = 4,
	Crops                                    = 5,
	Decor                                    = 6,
	Equipment                                = 7,
	Fish                                     = 8,
	Gatherable                               = 9,
	Materials                                = 10,
	Products                                 = 11,
	Seeds                                    = 12,
	Sorted                                   = 13,
	EItemStorageCategory_MAX                 = 14,
};

// Enum Palia.EItemQuality
// NumValues: 0x0008
enum class EItemQuality : uint8
{
	NotSpecified                             = 0,
	Simple                                   = 1,
	Standard                                 = 2,
	Fine                                     = 3,
	Exquisite                                = 4,
	Impeccable                               = 5,
	Perfect                                  = 6,
	EItemQuality_MAX                         = 7,
};

// Enum Palia.EItemRarity
// NumValues: 0x0008
enum class EItemRarity : uint8
{
	NotSpecified                             = 0,
	Abundant                                 = 1,
	Common                                   = 2,
	Uncommon                                 = 3,
	Rare                                     = 4,
	Epic                                     = 5,
	Legendary                                = 6,
	EItemRarity_MAX                          = 7,
};

// Enum Palia.EFencePlacementType
// NumValues: 0x0005
enum class EFencePlacementType : uint8
{
	NotAFence                                = 0,
	Fence                                    = 1,
	FenceColumn                              = 2,
	FenceGate                                = 3,
	EFencePlacementType_MAX                  = 4,
};

// Enum Palia.EValeriaGameAction
// NumValues: 0x0004
enum class EValeriaGameAction : uint8
{
	TillSoil                                 = 0,
	WaterTile                                = 1,
	PullWeed                                 = 2,
	EValeriaGameAction_MAX                   = 3,
};

// Enum Palia.EVillagerQuestBranchingCategory
// NumValues: 0x0005
enum class EVillagerQuestBranchingCategory : uint8
{
	Mandatory                                = 0,
	BranchingCategory1                       = 1,
	BranchingCategory2                       = 2,
	BranchingCategory3                       = 3,
	EVillagerQuestBranchingCategory_MAX      = 4,
};

// Enum Palia.EVillagerQuestRequirementType
// NumValues: 0x001D
enum class EVillagerQuestRequirementType : uint8
{
	Item                                     = 0,
	MeetVillager                             = 1,
	CatchFish                                = 2,
	CraftItem                                = 3,
	CompleteBillboard                        = 4,
	HasSeenDialogue                          = 5,
	Vital                                    = 6,
	LearnRecipe                              = 7,
	GiftAVillager                            = 8,
	AcquireHouseStructure                    = 9,
	AcquireSkillLevel                        = 10,
	GatherItem                               = 11,
	Purchase                                 = 12,
	Sell                                     = 13,
	Harvest                                  = 14,
	ViewMail                                 = 15,
	PlayerTag                                = 16,
	Kill                                     = 17,
	ContributeToBillboard                    = 18,
	DiscoverVillagerGiftPreference           = 19,
	UseItem                                  = 20,
	Loot                                     = 21,
	Acquire                                  = 22,
	Currency                                 = 23,
	Spend                                    = 24,
	PlotValue                                = 25,
	GameAction                               = 26,
	StatReached                              = 27,
	EVillagerQuestRequirementType_MAX        = 28,
};

// Enum Palia.EQuestIconToUse
// NumValues: 0x0004
enum class EQuestIconToUse : uint8
{
	None                                     = 0,
	VillagerIcon                             = 1,
	CustomIcon                               = 2,
	EQuestIconToUse_MAX                      = 3,
};

// Enum Palia.EBuffStackingRule
// NumValues: 0x0008
enum class EBuffStackingRule : uint8
{
	NotSpecified                             = 0,
	Infinite                                 = 1,
	Unique                                   = 3,
	UniqueReplace                            = 4,
	Stacks                                   = 6,
	ReplaceIfInSameGroup                     = 7,
	StrongestInGroupReplacesOrRefreshes      = 8,
	EBuffStackingRule_MAX                    = 9,
};

// Enum Palia.EBuffEffect
// NumValues: 0x0009
enum class EBuffEffect : uint8
{
	NotSpecified                             = 0,
	HealthMax                                = 5,
	MovementAcceleration                     = 6,
	MovementRotation                         = 7,
	MovementSpeed                            = 8,
	FocusBonusExperiencePercent              = 11,
	ClimbingSpeed                            = 12,
	GlideSpeed                               = 13,
	EBuffEffect_MAX                          = 14,
};

// Enum Palia.EBuffDisplayType
// NumValues: 0x0005
enum class EBuffDisplayType : uint8
{
	NotSpecified                             = 0,
	Buff                                     = 1,
	Debuff                                   = 2,
	Appetite                                 = 3,
	EBuffDisplayType_MAX                     = 4,
};

// Enum Palia.EShopCostScalingType
// NumValues: 0x0003
enum class EShopCostScalingType : uint8
{
	None                                     = 0,
	NumberPurchased                          = 1,
	EShopCostScalingType_MAX                 = 2,
};

// Enum Palia.EScalingRewardType
// NumValues: 0x0005
enum class EScalingRewardType : uint8
{
	Disabled                                 = 0,
	AddVital                                 = 1,
	AddVitalMax                              = 2,
	Currency                                 = 3,
	EScalingRewardType_MAX                   = 4,
};

// Enum Palia.ESkillCategory
// NumValues: 0x0004
enum class ESkillCategory : uint8
{
	None                                     = 0,
	Gathering                                = 1,
	Crafting                                 = 2,
	ESkillCategory_MAX                       = 3,
};

// Enum Palia.ERelationshipDifficulty
// NumValues: 0x0004
enum class ERelationshipDifficulty : uint8
{
	Easy                                     = 0,
	Medium                                   = 1,
	Hard                                     = 2,
	ERelationshipDifficulty_MAX              = 3,
};

// Enum Palia.EVillagerGiftDifficultyGrouping
// NumValues: 0x0006
enum class EVillagerGiftDifficultyGrouping : uint8
{
	Unspecified                              = 0,
	Difficulty1                              = 1,
	Difficulty2                              = 2,
	Difficulty3                              = 3,
	Difficulty4                              = 4,
	EVillagerGiftDifficultyGrouping_MAX      = 5,
};

// Enum Palia.EValeriaPersonalityElement
// NumValues: 0x0006
enum class EValeriaPersonalityElement : uint8
{
	None                                     = 0,
	Air                                      = 1,
	Earth                                    = 2,
	Fire                                     = 3,
	Water                                    = 4,
	EValeriaPersonalityElement_MAX           = 5,
};

// Enum Palia.EModificationCostType
// NumValues: 0x0005
enum class EModificationCostType : uint8
{
	Vital                                    = 0,
	Currency                                 = 1,
	Item                                     = 2,
	Num                                      = 3,
	EModificationCostType_MAX                = 4,
};

// Enum Palia.EAmmoType
// NumValues: 0x0006
enum class EAmmoType : uint8
{
	None                                     = 0,
	FishingBait                              = 1,
	HuntingAmmo                              = 2,
	InsectBall                               = 3,
	COUNT                                    = 4,
	EAmmoType_MAX                            = 5,
};

// Enum Palia.EDialogueType
// NumValues: 0x0010
enum class EDialogueType : uint8
{
	Default                                  = 0,
	FirstMeeting                             = 1,
	Greeting                                 = 2,
	Dismiss                                  = 3,
	ChoiceResponse                           = 4,
	GiftResponse                             = 5,
	Chat                                     = 6,
	Flirt                                    = 7,
	GiftHint                                 = 9,
	QuestStart                               = 20,
	QuestHint                                = 21,
	QuestGoal                                = 22,
	QuestTurnIn                              = 23,
	QuestComplete                            = 24,
	ImportantDialogue                        = 30,
	EDialogueType_MAX                        = 31,
};

// Enum Palia.EQuestDurationType
// NumValues: 0x0003
enum class EQuestDurationType : uint8
{
	TimeBased                                = 0,
	ThruAvailability                         = 1,
	EQuestDurationType_MAX                   = 2,
};

// Enum Palia.EQuestRequirementType
// NumValues: 0x0003
enum class EQuestRequirementType : uint8
{
	None                                     = 0,
	Item                                     = 1,
	EQuestRequirementType_MAX                = 2,
};

// Enum Palia.EQuestRewardType
// NumValues: 0x0011
enum class EQuestRewardType : uint8
{
	None                                     = 0,
	Item                                     = 1,
	Vital                                    = 2,
	Relationship                             = 3,
	Recipe                                   = 4,
	Buff                                     = 5,
	Skill                                    = 6,
	ItemUse                                  = 7,
	BagUpgrade                               = 8,
	TriggerQuest                             = 9,
	Misc                                     = 10,
	Mail                                     = 11,
	GiftPreference                           = 12,
	PlayerTag                                = 13,
	Visit                                    = 15,
	Currency                                 = 16,
	EQuestRewardType_MAX                     = 17,
};

// Enum Palia.EItemSortType
// NumValues: 0x0003
enum class EItemSortType : uint8
{
	NotSpecified                             = 0,
	Alphabetical                             = 1,
	EItemSortType_MAX                        = 2,
};

// Enum Palia.EPlacementHoverType
// NumValues: 0x0005
enum class EPlacementHoverType : uint8
{
	None                                     = 0,
	HousingPlotUnlock                        = 1,
	Actor                                    = 2,
	Alteration                               = 3,
	EPlacementHoverType_MAX                  = 4,
};

// Enum Palia.EVillagerScheduleActivityType
// NumValues: 0x0007
enum class EVillagerScheduleActivityType : uint8
{
	None                                     = 0,
	Work                                     = 1,
	FreeTime                                 = 2,
	Follow                                   = 3,
	PrivateSpace                             = 4,
	Absent                                   = 5,
	EVillagerScheduleActivityType_MAX        = 6,
};

// Enum Palia.ELootFilterResult
// NumValues: 0x0010
enum class ELootFilterResult : uint8
{
	Success                                  = 0,
	GenericFail                              = 1,
	AlreadyOwns                              = 2,
	IncorrectTimeOfDay                       = 3,
	IncorrectWeather                         = 4,
	DoesntMeetFriendshipReq                  = 5,
	DoesntMeetRomanceReq                     = 6,
	TooManyForTagReq                         = 7,
	TooFewForTagReq                          = 8,
	QuestFilterFail                          = 9,
	MissingRequiredItems                     = 10,
	MissingRequiredVitals                    = 11,
	MissingRequiredAccomplishments           = 12,
	MissingRequiredRecipes                   = 13,
	ContentBatchDisabled                     = 14,
	ELootFilterResult_MAX                    = 15,
};

// Enum Palia.EVAL_TeleportCompFlags
// NumValues: 0x0003
enum class EVAL_TeleportCompFlags : uint8
{
	None                                     = 0,
	LockedControl                            = 1,
	EVAL_MAX                                 = 2,
};

// Enum Palia.ETeleportTravelType
// NumValues: 0x0008
enum class ETeleportTravelType : uint8
{
	Default                                  = 0,
	PrivateSpace                             = 1,
	HomePlot                                 = 2,
	VisitingPlot                             = 3,
	SpecificLocation                         = 4,
	LimitedEvent                             = 5,
	ViewOnlyPlot                             = 6,
	ETeleportTravelType_MAX                  = 7,
};

// Enum Palia.EValeriaStatModificationType
// NumValues: 0x0007
enum class EValeriaStatModificationType : uint8
{
	None                                     = 0,
	Smallest                                 = 1,
	Largest                                  = 2,
	Increment                                = 3,
	Decrement                                = 4,
	Set                                      = 5,
	EValeriaStatModificationType_MAX         = 6,
};

// Enum Palia.EAimingState
// NumValues: 0x0006
enum class EAimingState : uint8
{
	ZoomingIn                                = 0,
	ZoomedIn                                 = 1,
	ZoomingOut                               = 2,
	ZoomedOut                                = 3,
	INVALID                                  = 4,
	EAimingState_MAX                         = 5,
};

// Enum Palia.EValeriaNoiseEventVolume
// NumValues: 0x0005
enum class EValeriaNoiseEventVolume : uint8
{
	Undefined                                = 0,
	Quiet                                    = 1,
	Normal                                   = 2,
	Loud                                     = 3,
	EValeriaNoiseEventVolume_MAX             = 4,
};

// Enum Palia.EValeriaNoiseStealthType
// NumValues: 0x0002
enum class EValeriaNoiseStealthType : uint8
{
	SmokeCandle                              = 0,
	EValeriaNoiseStealthType_MAX             = 1,
};

// Enum Palia.EAnimMappingCachePolicy
// NumValues: 0x0004
enum class EAnimMappingCachePolicy : uint8
{
	NoCaching                                = 0,
	TryToStore                               = 1,
	TryToUseCached                           = 2,
	EAnimMappingCachePolicy_MAX              = 3,
};

// Enum Palia.EEscapeTypeOld
// NumValues: 0x0004
enum class EEscapeTypeOld : uint8
{
	None                                     = 0,
	Water                                    = 1,
	Tree                                     = 2,
	EEscapeTypeOld_MAX                       = 3,
};

// Enum Palia.EBuffClientActionType
// NumValues: 0x0003
enum class EBuffClientActionType : uint8
{
	None                                     = 0,
	Remove                                   = 1,
	EBuffClientActionType_MAX                = 2,
};

// Enum Palia.EVAL_BugCatchingLODFeature
// NumValues: 0x0003
enum class EVAL_BugCatchingLODFeature : uint8
{
	EVALBCCC_MainTick                        = 0,
	EVALBCCC_VAT                             = 1,
	EVALBCCC_Max                             = 2,
};

// Enum Palia.BundleType
// NumValues: 0x0006
enum class EBundleType : uint8
{
	Unspecified                              = 0,
	Water                                    = 1,
	Fire                                     = 2,
	Air                                      = 3,
	Earth                                    = 4,
	BundleType_MAX                           = 5,
};

// Enum Palia.CameraTargetMode
// NumValues: 0x0004
enum class ECameraTargetMode : uint8
{
	HardLock                                 = 0,
	HardLockRotate                           = 1,
	FreeLook                                 = 2,
	CameraTargetMode_MAX                     = 3,
};

// Enum Palia.ECharacterCreationHairColor
// NumValues: 0x0008
enum class ECharacterCreationHairColor : uint8
{
	Black                                    = 0,
	Blonde                                   = 1,
	Blue                                     = 2,
	Brown                                    = 3,
	Green                                    = 4,
	Red                                      = 5,
	White                                    = 6,
	ECharacterCreationHairColor_MAX          = 7,
};

// Enum Palia.ECustomizationItemSlot
// NumValues: 0x0004
enum class ECustomizationItemSlot : uint8
{
	FullBody                                 = 0,
	Torso                                    = 1,
	Legs                                     = 2,
	ECustomizationItemSlot_MAX               = 3,
};

// Enum Palia.EMouseControlMode
// NumValues: 0x0004
enum class EMouseControlMode : uint8
{
	GameOnly                                 = 0,
	UiOnly                                   = 1,
	UiAndGame                                = 2,
	EMouseControlMode_MAX                    = 3,
};

// Enum Palia.EVAL_ChatManagerStateFlags
// NumValues: 0x0006
enum class EVAL_ChatManagerStateFlags : uint8
{
	None                                     = 0,
	CurrentlyQueryingChannels                = 1,
	QueuedToQueryChannels                    = 2,
	AttemptingToLogin                        = 4,
	EmittedInitialPlayNotifications          = 8,
	EVAL_MAX                                 = 9,
};

// Enum Palia.ECrafterEngageResult
// NumValues: 0x0006
enum class ECrafterEngageResult : uint8
{
	None                                     = 0,
	Ok                                       = 1,
	Ok_MatchesDesiredState                   = 2,
	Fail_TooFarAway                          = 3,
	Fail_OtherPlayerEngaging                 = 4,
	ECrafterEngageResult_MAX                 = 5,
};

// Enum Palia.ECrafterStepState
// NumValues: 0x0007
enum class ECrafterStepState : uint8
{
	NotStarted                               = 0,
	InProgress                               = 1,
	Paused                                   = 2,
	Completed                                = 4,
	Expired                                  = 8,
	Done                                     = 12,
	ECrafterStepState_MAX                    = 13,
};

// Enum Palia.EComplexRecipeIngredientState
// NumValues: 0x0004
enum class EComplexRecipeIngredientState : uint8
{
	None                                     = 0,
	Browsing                                 = 3,
	Holding                                  = 6,
	EComplexRecipeIngredientState_MAX        = 7,
};

// Enum Palia.ECraftingRequestItemMode
// NumValues: 0x0004
enum class ECraftingRequestItemMode : uint8
{
	None                                     = 0,
	AutoFetch                                = 1,
	Manual                                   = 2,
	ECraftingRequestItemMode_MAX             = 3,
};

// Enum Palia.EValeriaNoiseEventType
// NumValues: 0x0008
enum class EValeriaNoiseEventType : uint8
{
	NetSwing                                 = 0,
	SprintFootstep                           = 1,
	RunFootstep                              = 2,
	WalkFootstep                             = 3,
	JumpLanding                              = 4,
	AxeHit                                   = 5,
	PickaxeHit                               = 6,
	EValeriaNoiseEventType_MAX               = 7,
};

// Enum Palia.ECurrentBehavior
// NumValues: 0x000D
enum class ECurrentBehavior : uint8
{
	INVALID                                  = 0,
	Wander                                   = 1,
	BecomeAware                              = 2,
	Evade                                    = 3,
	Death                                    = 4,
	Despawn                                  = 5,
	HitReact                                 = 6,
	Stunned                                  = 7,
	FallIntoPit                              = 8,
	Escape                                   = 9,
	PrepareToDespawn                         = 10,
	SpecialAbility                           = 11,
	ECurrentBehavior_MAX                     = 12,
};

// Enum Palia.EDialoguePreloadPhase
// NumValues: 0x0005
enum class EDialoguePreloadPhase : uint8
{
	Idle                                     = 0,
	DialogueAssets                           = 1,
	Characters                               = 2,
	Animations                               = 3,
	EDialoguePreloadPhase_MAX                = 4,
};

// Enum Palia.EErrorMessageType
// NumValues: 0x0004
enum class EErrorMessageType : uint8
{
	Error                                    = 0,
	Info                                     = 1,
	Success                                  = 2,
	EErrorMessageType_MAX                    = 3,
};

// Enum Palia.EFactionRelationshipType
// NumValues: 0x0005
enum class EFactionRelationshipType : uint8
{
	Ally                                     = 0,
	Enemy                                    = 1,
	Neutral                                  = 2,
	Ignore                                   = 3,
	EFactionRelationshipType_MAX             = 4,
};

// Enum Palia.EFenceMeshType
// NumValues: 0x0008
enum class EFenceMeshType : uint8
{
	FenceStartPost                           = 0,
	FenceEndPost                             = 1,
	FenceSpan                                = 2,
	GateStartPost                            = 3,
	GateEndPost                              = 4,
	Gate                                     = 5,
	Column                                   = 6,
	EFenceMeshType_MAX                       = 7,
};

// Enum Palia.EFishSpawnBuckets
// NumValues: 0x000A
enum class EFishSpawnBuckets : uint8
{
	Invalid                                  = 0,
	Common                                   = 1,
	Uncommon                                 = 2,
	Rare                                     = 3,
	Epic                                     = 4,
	Legendary                                = 5,
	Trash                                    = 6,
	QuestCommon                              = 7,
	QuestRare                                = 8,
	EFishSpawnBuckets_MAX                    = 9,
};

// Enum Palia.EFishingCastIndicatorStatus
// NumValues: 0x0003
enum class EFishingCastIndicatorStatus : uint8
{
	UnfishableGround                         = 0,
	FishableWater                            = 1,
	EFishingCastIndicatorStatus_MAX          = 2,
};

// Enum Palia.EFishingState_NEW
// NumValues: 0x0009
enum class EFishingState_NEW : uint8
{
	None                                     = 0,
	Aiming                                   = 1,
	CastInProgress                           = 2,
	WaitingForBite                           = 3,
	Bite                                     = 4,
	Reeling                                  = 5,
	FishCaught                               = 6,
	Celebration                              = 7,
	EFishingState_MAX                        = 8,
};

// Enum Palia.EFishingCelebrationTier
// NumValues: 0x0005
enum class EFishingCelebrationTier : uint8
{
	None                                     = 0,
	Basic                                    = 1,
	Medium                                   = 2,
	High                                     = 3,
	EFishingCelebrationTier_MAX              = 4,
};

// Enum Palia.EFishingState_OLD
// NumValues: 0x0006
enum class EFishingState_OLD : uint8
{
	None                                     = 0,
	AimingCast                               = 1,
	RotatingToCast                           = 2,
	DeployingCast                            = 3,
	PlayingMiniGame                          = 4,
	EFishingState_MAX                        = 5,
};

// Enum Palia.FFishingLevelSegmentActionType
// NumValues: 0x0003
enum class EFFishingLevelSegmentActionType : uint8
{
	MoveTo                                   = 0,
	JumpTo                                   = 1,
	FFishingLevelSegmentActionType_MAX       = 2,
};

// Enum Palia.EFishingViewStatePhase
// NumValues: 0x0004
enum class EFishingViewStatePhase : uint8
{
	Idle                                     = 0,
	Active                                   = 1,
	Ended                                    = 2,
	EFishingViewStatePhase_MAX               = 3,
};

// Enum Palia.EFishingSafeTier
// NumValues: 0x0004
enum class EFishingSafeTier : uint8
{
	Safe                                     = 0,
	Caution                                  = 1,
	Danger                                   = 2,
	EFishingSafeTier_MAX                     = 3,
};

// Enum Palia.EFishingBobberHitSomethingResult
// NumValues: 0x0005
enum class EFishingBobberHitSomethingResult : uint8
{
	FishableWater                            = 0,
	UnfishableWater                          = 1,
	TooShallowOrTooLowWater                  = 2,
	Other                                    = 3,
	EFishingBobberHitSomethingResult_MAX     = 4,
};

// Enum Palia.EFriendStatus
// NumValues: 0x0007
enum class EFriendStatus : uint8
{
	Unknown                                  = 0,
	Accepted                                 = 1,
	PendingInbound                           = 2,
	PendingOutbound                          = 3,
	Blocked                                  = 4,
	Suggested                                = 5,
	EFriendStatus_MAX                        = 6,
};

// Enum Palia.EVAL_GameplayConditionStatus
// NumValues: 0x0004
enum class EVAL_GameplayConditionStatus : uint8
{
	Error                                    = 0,
	ConditionMet                             = 1,
	ConditionNotMet                          = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EVAL_GameplayConditionDebugCheatStatus
// NumValues: 0x0005
enum class EVAL_GameplayConditionDebugCheatStatus : uint8
{
	Error                                    = 0,
	DebugNotImplemented                      = 1,
	DebugActionTaken                         = 2,
	DebugActionNotTaken                      = 3,
	EVAL_MAX                                 = 4,
};

// Enum Palia.EKnowsRecipeConditionStatus
// NumValues: 0x0003
enum class EKnowsRecipeConditionStatus : uint8
{
	HasNotLearned                            = 0,
	HasLearned                               = 1,
	EKnowsRecipeConditionStatus_MAX          = 2,
};

// Enum Palia.ECompletedBundleConditionStatus
// NumValues: 0x0005
enum class ECompletedBundleConditionStatus : uint8
{
	NotStarted                               = 0,
	InProgress                               = 1,
	Completed                                = 2,
	RewardGranted                            = 3,
	ECompletedBundleConditionStatus_MAX      = 4,
};

// Enum Palia.EQuestProgressConditionStatus
// NumValues: 0x0005
enum class EQuestProgressConditionStatus : uint8
{
	NotStarted                               = 0,
	InProgress                               = 1,
	Completed                                = 2,
	Expired                                  = 3,
	EQuestProgressConditionStatus_MAX        = 4,
};

// Enum Palia.EVisitProgressConditionStatus
// NumValues: 0x0004
enum class EVisitProgressConditionStatus : uint8
{
	NotStarted                               = 0,
	InProgress                               = 1,
	Completed                                = 2,
	EVisitProgressConditionStatus_MAX        = 3,
};

// Enum Palia.EVAL_GameplayEventSourceTargetType
// NumValues: 0x0005
enum class EVAL_GameplayEventSourceTargetType : uint8
{
	Any                                      = 0,
	Player                                   = 1,
	Villager                                 = 2,
	Creature                                 = 3,
	EVAL_MAX                                 = 4,
};

// Enum Palia.EVAL_GameplayEventPlayerRelationship
// NumValues: 0x0003
enum class EVAL_GameplayEventPlayerRelationship : uint8
{
	Any                                      = 0,
	Self                                     = 1,
	EVAL_MAX                                 = 2,
};

// Enum Palia.EVAL_GE_AcquireItem_Method
// NumValues: 0x0008
enum class EVAL_GE_AcquireItem_Method : uint8
{
	Any                                      = 0,
	Gather                                   = 1,
	Craft                                    = 2,
	Loot                                     = 4,
	Harvest                                  = 8,
	Purchase                                 = 16,
	Mail                                     = 32,
	EVAL_GE_AcquireItem_MAX                  = 33,
};

// Enum Palia.EVAL_GE_ReleaseItem_Method
// NumValues: 0x0006
enum class EVAL_GE_ReleaseItem_Method : uint8
{
	Any                                      = 0,
	Discard                                  = 1,
	Sell                                     = 2,
	Use                                      = 4,
	FulfillRequest                           = 8,
	EVAL_GE_ReleaseItem_MAX                  = 9,
};

// Enum Palia.EGameplayPopupType
// NumValues: 0x0003
enum class EGameplayPopupType : uint8
{
	QuickModal                               = 0,
	Tutorial                                 = 1,
	EGameplayPopupType_MAX                   = 2,
};

// Enum Palia.EModalHorizontalAlignment
// NumValues: 0x0004
enum class EModalHorizontalAlignment : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	EModalHorizontalAlignment_MAX            = 3,
};

// Enum Palia.EModalVerticalAlignment
// NumValues: 0x0003
enum class EModalVerticalAlignment : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	EModalVerticalAlignment_MAX              = 2,
};

// Enum Palia.EGardenTileDirection
// NumValues: 0x0009
enum class EGardenTileDirection : uint8
{
	N                                        = 0,
	NE                                       = 1,
	E                                        = 2,
	SE                                       = 3,
	S                                        = 4,
	SW                                       = 5,
	W                                        = 6,
	NW                                       = 7,
	EGardenTileDirection_MAX                 = 8,
};

// Enum Palia.EGardenTileNeighborAdjacency
// NumValues: 0x0005
enum class EGardenTileNeighborAdjacency : uint8
{
	Invalid                                  = 0,
	Border                                   = 1,
	Corner                                   = 2,
	BorderAndCorner                          = 3,
	EGardenTileNeighborAdjacency_MAX         = 4,
};

// Enum Palia.EGardeningWeedingMinigameInteractStyle
// NumValues: 0x0006
enum class EGardeningWeedingMinigameInteractStyle : uint8
{
	None                                     = 0,
	PressToWeed                              = 1,
	HoldToRelease                            = 2,
	HoldToReleaseRetry                       = 3,
	Default                                  = 1,
	EGardeningWeedingMinigameInteractStyle_MAX = 4,
};

// Enum Palia.EGearChangeResult
// NumValues: 0x0007
enum class EGearChangeResult : uint8
{
	Success                                  = 0,
	Failure                                  = 1,
	NotEnoughInventorySpace                  = 2,
	ItemToAddNotAGear                        = 3,
	RomancePinSlotOnCooldown                 = 4,
	FishingIsActive                          = 5,
	EGearChangeResult_MAX                    = 6,
};

// Enum Palia.EUseEventType
// NumValues: 0x0004
enum class EUseEventType : uint8
{
	None                                     = 0,
	Pressed                                  = 1,
	Released                                 = 2,
	EUseEventType_MAX                        = 3,
};

// Enum Palia.EInteractEventType
// NumValues: 0x0004
enum class EInteractEventType : uint8
{
	None                                     = 0,
	Pressed                                  = 1,
	Released                                 = 3,
	EInteractEventType_MAX                   = 4,
};

// Enum Palia.ERpcMontageAction
// NumValues: 0x0004
enum class ERpcMontageAction : uint8
{
	None                                     = 0,
	Start                                    = 1,
	Stop                                     = 2,
	ERpcMontageAction_MAX                    = 3,
};

// Enum Palia.ERpcAction
// NumValues: 0x0008
enum class ERpcAction : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Synchronous                              = 2,
	ClientToServer                           = 3,
	ServerToClient                           = 4,
	ServerMulticast                          = 5,
	ServerMulticastRemote                    = 6,
	ERpcAction_MAX                           = 7,
};

// Enum Palia.ERequirementType
// NumValues: 0x0004
enum class ERequirementType : uint8
{
	Default                                  = 0,
	ItemUse                                  = 1,
	PlayerActionUse                          = 2,
	ERequirementType_MAX                     = 3,
};

// Enum Palia.EHitReactionType
// NumValues: 0x0005
enum class EHitReactionType : uint8
{
	None                                     = 0,
	Flinch                                   = 1,
	Stagger                                  = 2,
	Knockback                                = 3,
	EHitReactionType_MAX                     = 4,
};

// Enum Palia.EHotPotCheatType
// NumValues: 0x0003
enum class EHotPotCheatType : uint8
{
	StartGame                                = 0,
	EndGame                                  = 1,
	EHotPotCheatType_MAX                     = 2,
};

// Enum Palia.EHotPotEndGameReason
// NumValues: 0x0005
enum class EHotPotEndGameReason : uint8
{
	Cheat                                    = 0,
	Abandon                                  = 1,
	NoMoreTiles                              = 2,
	Winner                                   = 3,
	EHotPotEndGameReason_MAX                 = 4,
};

// Enum Palia.EHotPotSpiceType
// NumValues: 0x0005
enum class EHotPotSpiceType : uint8
{
	Salty                                    = 0,
	Spicy                                    = 1,
	Tangy                                    = 2,
	Umami                                    = 3,
	EHotPotSpiceType_MAX                     = 4,
};

// Enum Palia.EHotPotTileZoneType
// NumValues: 0x0006
enum class EHotPotTileZoneType : uint8
{
	None                                     = 0,
	Hand                                     = 1,
	Pending                                  = 2,
	Discard                                  = 3,
	Draw                                     = 4,
	EHotPotTileZoneType_MAX                  = 5,
};

// Enum Palia.ETeleportState
// NumValues: 0x0005
enum class ETeleportState : uint8
{
	Inactive                                 = 0,
	Preparing                                = 1,
	CoolingDown                              = 2,
	Disrupted                                = 3,
	ETeleportState_MAX                       = 4,
};

// Enum Palia.EInstrumentType
// NumValues: 0x0003
enum class EInstrumentType : uint8
{
	Invalid                                  = 0,
	Wind                                     = 1,
	EInstrumentType_MAX                      = 2,
};

// Enum Palia.EInteractablePlateVerticalOffsetDirection
// NumValues: 0x0003
enum class EInteractablePlateVerticalOffsetDirection : uint8
{
	Up                                       = 0,
	Down                                     = 1,
	EInteractablePlateVerticalOffsetDirection_MAX = 2,
};

// Enum Palia.EVAL_InteractorOperation
// NumValues: 0x0003
enum class EVAL_InteractorOperation : uint8
{
	UnlockPlayer                             = 0,
	LockPlayer                               = 1,
	EVAL_MAX                                 = 2,
};

// Enum Palia.EInventoryAddItemFlags
// NumValues: 0x0010
enum class EInventoryAddItemFlags : uint8
{
	None                                     = 0,
	NotifyItemCarousel                       = 1,
	AllowOverflow                            = 2,
	Carry                                    = 4,
	TrackStat                                = 8,
	AllowPickupRewards                       = 16,
	SendOverflowToStorage                    = 32,
	NotifyCarouselAndAllowOverflow           = 3,
	NotifyCarouselAndSendOverflowToStorage   = 33,
	NotifyCarouselAndTrackStat               = 9,
	NotifyCarouselAndTrackStatWithOverflow   = 11,
	NotifyCarouselAndTrackStatAndSendOverflowToStorage = 41,
	NotifyCarouselAndAllowOverflowWithPickupRewards = 19,
	NotifyCarouselAndTrackStatAndAllowOverflowWithPickupRewards = 27,
	NotifyCarouselAndTrackStatAndSendOverflowToStorageWithPickupRewards = 57,
	EInventoryAddItemFlags_MAX               = 58,
};

// Enum Palia.EInventoryOperation
// NumValues: 0x0005
enum class EInventoryOperation : uint8
{
	None                                     = 0,
	Add                                      = 1,
	Remove                                   = 2,
	AddRemove                                = 3,
	EInventoryOperation_MAX                  = 4,
};

// Enum Palia.EGardenBuffEffectType
// NumValues: 0x0008
enum class EGardenBuffEffectType : uint8
{
	None                                     = 0,
	PreventWeedGrowth                        = 1,
	HarvestBooster                           = 2,
	IncreaseOutputQuality                    = 3,
	RetainWater                              = 4,
	DoubleGrowthRate                         = 5,
	MaxEffectType                            = 6,
	EGardenBuffEffectType_MAX                = 7,
};

// Enum Palia.EWateringTilePattern
// NumValues: 0x0004
enum class EWateringTilePattern : uint8
{
	SingleTile                               = 0,
	BorderTiles                              = 1,
	BorderAndCornerTiles                     = 2,
	EWateringTilePattern_MAX                 = 3,
};

// Enum Palia.EValeriaStorageType
// NumValues: 0x0007
enum class EValeriaStorageType : uint8
{
	None                                     = 0,
	Carried                                  = 1,
	CraftingShelved                          = 2,
	Inventory                                = 4,
	PlayerStorage                            = 8,
	All                                      = 255,
	EValeriaStorageType_MAX                  = 256,
};

// Enum Palia.EIOMode
// NumValues: 0x0003
enum class EIOMode : uint8
{
	ReadOnly                                 = 0,
	ReadWrite                                = 1,
	EIOMode_MAX                              = 2,
};

// Enum Palia.ELootAchievementCreditType
// NumValues: 0x0006
enum class ELootAchievementCreditType : uint8
{
	None                                     = 0,
	Hunting                                  = 1,
	Mining                                   = 2,
	BugCatching                              = 3,
	TreeChopping                             = 4,
	ELootAchievementCreditType_MAX           = 5,
};

// Enum Palia.ELootType
// NumValues: 0x0005
enum class ELootType : uint8
{
	None                                     = 0,
	LootActor                                = 1,
	LootPerVitalChange                       = 2,
	LootPerVitalChangeBanked                 = 3,
	ELootType_MAX                            = 4,
};

// Enum Palia.EMapAreaTransformationType
// NumValues: 0x0004
enum class EMapAreaTransformationType : uint8
{
	None                                     = 0,
	Convert                                  = 1,
	Spawn                                    = 2,
	EMapAreaTransformationType_MAX           = 3,
};

// Enum Palia.EActorConversionType
// NumValues: 0x0003
enum class EActorConversionType : uint8
{
	None                                     = 0,
	ConvertToFlow                            = 1,
	EActorConversionType_MAX                 = 2,
};

// Enum Palia.EMeleeAttackType
// NumValues: 0x0007
enum class EMeleeAttackType : uint8
{
	INVALID                                  = 0,
	LightAttack1                             = 1,
	LightAttack2                             = 2,
	LightAttack3                             = 3,
	HeavyAttack                              = 4,
	AttackWindup                             = 5,
	EMeleeAttackType_MAX                     = 6,
};

// Enum Palia.EMinigameQTEStyle
// NumValues: 0x0006
enum class EMinigameQTEStyle : uint8
{
	Hold                                     = 0,
	PressAndReleaseCycle                     = 1,
	Mash                                     = 2,
	Beat                                     = 3,
	BeatPingPong                             = 4,
	EMinigameQTEStyle_MAX                    = 5,
};

// Enum Palia.ENotificationType
// NumValues: 0x0005
enum class ENotificationType : uint8
{
	Informational                            = 0,
	Presence                                 = 1,
	Invite                                   = 2,
	Party                                    = 3,
	ENotificationType_MAX                    = 4,
};

// Enum Palia.ELightingModificationType
// NumValues: 0x0005
enum class ELightingModificationType : uint8
{
	NoModification                           = 0,
	AdditiveBlend                            = 1,
	OverrideBlend                            = 2,
	Modification                             = 3,
	ELightingModificationType_MAX            = 4,
};

// Enum Palia.EPaliaScreenStateRequest
// NumValues: 0x0003
enum class EPaliaScreenStateRequest : uint8
{
	DesiredScreenState_None                  = 0,
	DesiredScreenState_PutUp                 = 1,
	DesiredScreenState_MAX                   = 2,
};

// Enum Palia.EPaliaScreenTypeRequest
// NumValues: 0x0004
enum class EPaliaScreenTypeRequest : uint8
{
	DesiredScreenType_None                   = 0,
	DesiredScreenType_SimpleBlack            = 1,
	DesiredScreenType_FullLoading            = 2,
	DesiredScreenType_MAX                    = 3,
};

// Enum Palia.EPaliaTargetState
// NumValues: 0x0004
enum class EPaliaTargetState : uint8
{
	TargetState_Down                         = 0,
	TargetState_Black                        = 1,
	TargetState_LoadingScreen                = 2,
	TargetState_MAX                          = 3,
};

// Enum Palia.EVAL_BagGroup
// NumValues: 0x0005
enum class EVAL_BagGroup : uint8
{
	Standard                                 = 0,
	Quest                                    = 1,
	Ammo                                     = 2,
	Event                                    = 3,
	EVAL_MAX                                 = 4,
};

// Enum Palia.EVAL_PostFadeType
// NumValues: 0x0004
enum class EVAL_PostFadeType : uint8
{
	Nothing                                  = 0,
	Destroy                                  = 1,
	Hide                                     = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EVillagerMarkerStatus
// NumValues: 0x0007
enum class EVillagerMarkerStatus : uint8
{
	None                                     = 0,
	ImportantDialogue                        = 1,
	TrackedDialogue                          = 2,
	DailyChatDialogue                        = 6,
	AvailableQuest                           = 10,
	CompletableQuest                         = 11,
	EVillagerMarkerStatus_MAX                = 12,
};

// Enum Palia.EVillagerVisitOccurrence
// NumValues: 0x0003
enum class EVillagerVisitOccurrence : uint8
{
	OneTime                                  = 0,
	Repeatable                               = 1,
	EVillagerVisitOccurrence_MAX             = 2,
};

// Enum Palia.ECompassDisplaySettings
// NumValues: 0x0004
enum class ECompassDisplaySettings : uint8
{
	DisableCompass                           = 0,
	HideFarOffTrackers                       = 1,
	HideDistance                             = 2,
	ECompassDisplaySettings_MAX              = 3,
};

// Enum Palia.ECooldownTimerType
// NumValues: 0x0005
enum class ECooldownTimerType : uint8
{
	Explicit                                 = 0,
	RealWorldDay                             = 1,
	PalianDay                                = 2,
	WeeklyReset                              = 3,
	ECooldownTimerType_MAX                   = 4,
};

// Enum Palia.ES6UnstuckType
// NumValues: 0x0007
enum class ES6UnstuckType : uint8
{
	NONE                                     = 0,
	CLIENT_CALL                              = 1,
	KILL_Z                                   = 2,
	OUT_OF_BOUNDS                            = 3,
	CONSOLE_CALL                             = 4,
	UNEXPECTED_SPEED                         = 5,
	ES6UnstuckType_MAX                       = 6,
};

// Enum Palia.EWorldMapType
// NumValues: 0x0003
enum class EWorldMapType : uint8
{
	Default                                  = 0,
	HousingPlot                              = 1,
	EWorldMapType_MAX                        = 2,
};

// Enum Palia.EWorldMapDisplayType
// NumValues: 0x0004
enum class EWorldMapDisplayType : uint8
{
	Map                                      = 0,
	Picture                                  = 1,
	Nothing                                  = 2,
	EWorldMapDisplayType_MAX                 = 3,
};

// Enum Palia.EPersistAnchorType
// NumValues: 0x0004
enum class EPersistAnchorType : uint8
{
	None                                     = 0,
	Spawner                                  = 1,
	PlacementRegion                          = 2,
	EPersistAnchorType_MAX                   = 3,
};

// Enum Palia.EItemToPlaceSource
// NumValues: 0x0006
enum class EItemToPlaceSource : uint8
{
	None                                     = 0,
	FromInventory                            = 1,
	FromHouseInventory                       = 2,
	FromStorage                              = 3,
	MoveExistingStructure                    = 4,
	EItemToPlaceSource_MAX                   = 5,
};

// Enum Palia.EItemPlacementState
// NumValues: 0x0005
enum class EItemPlacementState : uint8
{
	NotPlacing                               = 0,
	SingleStage                              = 1,
	FenceOriginStage                         = 2,
	FenceExtentStage                         = 3,
	EItemPlacementState_MAX                  = 4,
};

// Enum Palia.EUnlocksPlotsCheckResponse
// NumValues: 0x0006
enum class EUnlocksPlotsCheckResponse : uint64
{
	Fail_Invalid                             = 18446744073709551615,
	Fail_Checked                             = 0,
	Pass_Checked                             = 1,
	Pass_FullyUnlocked                       = 2,
	Pass_CheckIrrelevant                     = 3,
	EUnlocksPlotsCheckResponse_MAX           = 4,
};

// Enum Palia.EPlayerCompassMultipleSameTargetResolution
// NumValues: 0x0003
enum class EPlayerCompassMultipleSameTargetResolution : uint8
{
	None                                     = 0,
	ShowOneClosest                           = 1,
	EPlayerCompassMultipleSameTargetResolution_MAX = 2,
};

// Enum Palia.EPlayerMapLayer
// NumValues: 0x0003
enum class EPlayerMapLayer : uint8
{
	None                                     = 0,
	DebugSpawning                            = 1,
	EPlayerMapLayer_MAX                      = 2,
};

// Enum Palia.EPrivateSpaceCharacterState
// NumValues: 0x0005
enum class EPrivateSpaceCharacterState : uint8
{
	None                                     = 0,
	RequestingLoad                           = 1,
	InPrivateSpace                           = 2,
	RequestingUnload                         = 3,
	EPrivateSpaceCharacterState_MAX          = 4,
};

// Enum Palia.EVAL_QuestShowGoalCount
// NumValues: 0x0004
enum class EVAL_QuestShowGoalCount : uint8
{
	Default                                  = 0,
	ForceShowCount                           = 1,
	ForceHideCount                           = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EQuestRewardSourceType
// NumValues: 0x0014
enum class EQuestRewardSourceType : uint8
{
	Unspecified                              = 0,
	Crafted                                  = 1,
	Gathered                                 = 2,
	Consumption                              = 3,
	Quest                                    = 4,
	Dialogue                                 = 5,
	Gift                                     = 6,
	Mail                                     = 7,
	Purchase                                 = 8,
	Cheat                                    = 9,
	Book                                     = 10,
	Bundle                                   = 11,
	Challenge                                = 12,
	Garden                                   = 13,
	Subgame                                  = 14,
	ItemPickup                               = 15,
	DataCorrection                           = 16,
	SkillLevel                               = 17,
	RelationshipLevel                        = 18,
	EQuestRewardSourceType_MAX               = 19,
};

// Enum Palia.ERecipeInteractionMode
// NumValues: 0x0003
enum class ERecipeInteractionMode : uint8
{
	Wait                                     = 0,
	Minigame                                 = 1,
	ERecipeInteractionMode_MAX               = 2,
};

// Enum Palia.ERecipePropPhase
// NumValues: 0x0008
enum class ERecipePropPhase : uint8
{
	Start                                    = 0,
	Cooking                                  = 1,
	Burned                                   = 2,
	Cooked                                   = 3,
	CookedStale                              = 4,
	Num                                      = 5,
	INVALID                                  = 255,
	ERecipePropPhase_MAX                     = 256,
};

// Enum Palia.ERecipeAvailability
// NumValues: 0x0005
enum class ERecipeAvailability : uint8
{
	Not                                      = 0,
	Restricted                               = 1,
	Available                                = 2,
	Recommended                              = 3,
	ERecipeAvailability_MAX                  = 4,
};

// Enum Palia.ERecipePhaseRequirement
// NumValues: 0x0004
enum class ERecipePhaseRequirement : uint8
{
	ToStart                                  = 0,
	AddDuring                                = 1,
	ToCraft                                  = 2,
	ERecipePhaseRequirement_MAX              = 3,
};

// Enum Palia.ERecipeLearnedFromType
// NumValues: 0x0007
enum class ERecipeLearnedFromType : uint8
{
	Unspecified                              = 0,
	PurchasedAtVillagerStore                 = 1,
	Cheats                                   = 2,
	QuestReward                              = 3,
	Inspiration                              = 4,
	LevelUp                                  = 5,
	ERecipeLearnedFromType_MAX               = 6,
};

// Enum Palia.EVAL_PlayerGameSessionFlags
// NumValues: 0x0003
enum class EVAL_PlayerGameSessionFlags : uint8
{
	None                                     = 0,
	MultiplayerSessionStarted                = 1,
	EVAL_MAX                                 = 2,
};

// Enum Palia.EShaderBasedAnimPlaybackCycle
// NumValues: 0x0005
enum class EShaderBasedAnimPlaybackCycle : uint8
{
	Looping                                  = 0,
	Once                                     = 1,
	Clamp                                    = 2,
	PingPong                                 = 3,
	EShaderBasedAnimPlaybackCycle_MAX        = 4,
};

// Enum Palia.EShaderBasedAnimPlaybackLayer
// NumValues: 0x0003
enum class EShaderBasedAnimPlaybackLayer : uint8
{
	Normal                                   = 0,
	OneOff                                   = 10,
	EShaderBasedAnimPlaybackLayer_MAX        = 11,
};

// Enum Palia.ESpawnerMode
// NumValues: 0x0005
enum class ESpawnerMode : uint8
{
	Radius                                   = 0,
	SpawnPoints                              = 1,
	SpawnOnFoliage                           = 2,
	AttachedToOtherActor                     = 3,
	ESpawnerMode_MAX                         = 4,
};

// Enum Palia.ESpawnerKind
// NumValues: 0x0003
enum class ESpawnerKind : uint8
{
	Weighted                                 = 0,
	FixedAmount                              = 1,
	ESpawnerKind_MAX                         = 2,
};

// Enum Palia.ESecondaryActorToSpawnMethod
// NumValues: 0x0004
enum class ESecondaryActorToSpawnMethod : uint8
{
	Never                                    = 0,
	AfterPrimaryActorDestroyed               = 1,
	SpawnsWithPrimaryActor_Deprecated        = 2,
	ESecondaryActorToSpawnMethod_MAX         = 3,
};

// Enum Palia.EWhereToSpawnActors
// NumValues: 0x0004
enum class EWhereToSpawnActors : uint8
{
	AtSpawnPoints                            = 0,
	AtSpawnPointsButDontOccupy               = 1,
	OnNavMeshWithinRadius                    = 2,
	EWhereToSpawnActors_MAX                  = 3,
};

// Enum Palia.EResourceSpawnedReason
// NumValues: 0x0005
enum class EResourceSpawnedReason : uint8
{
	Unknown                                  = 0,
	Spawner                                  = 1,
	AfterActorDestroyed                      = 2,
	AroundAoe                                = 3,
	EResourceSpawnedReason_MAX               = 4,
};

// Enum Palia.ESpawnOnFoliageStatus
// NumValues: 0x0004
enum class ESpawnOnFoliageStatus : uint8
{
	NotLoaded                                = 0,
	Loading                                  = 1,
	Loaded                                   = 2,
	ESpawnOnFoliageStatus_MAX                = 3,
};

// Enum Palia.EStorageUsageDisplayType
// NumValues: 0x0006
enum class EStorageUsageDisplayType : uint8
{
	NotSpecified                             = 0,
	StorageUsed                              = 1,
	StorageFree                              = 2,
	StorageCapacity                          = 3,
	StorageMaxCapacity                       = 4,
	EStorageUsageDisplayType_MAX             = 5,
};

// Enum Palia.ESlidingPuzzleCardinalDirections
// NumValues: 0x0006
enum class ESlidingPuzzleCardinalDirections : uint8
{
	North                                    = 0,
	South                                    = 1,
	East                                     = 2,
	West                                     = 3,
	Invalid                                  = 4,
	ESlidingPuzzleCardinalDirections_MAX     = 5,
};

// Enum Palia.ESlidingPuzzleOpenPieceSlot
// NumValues: 0x0005
enum class ESlidingPuzzleOpenPieceSlot : uint8
{
	BottomRight                              = 0,
	TopRight                                 = 1,
	TopLeft                                  = 2,
	BottomLeft                               = 3,
	ESlidingPuzzleOpenPieceSlot_MAX          = 4,
};

// Enum Palia.EArcadeCommandType
// NumValues: 0x0007
enum class EArcadeCommandType : uint8
{
	None                                     = 0,
	LockMachine                              = 1,
	UnlockMachine                            = 2,
	AddLeaderboardScore                      = 3,
	GetLeaderboardScores                     = 4,
	AddReplayFrame                           = 5,
	EArcadeCommandType_MAX                   = 6,
};

// Enum Palia.EMontageEventResult
// NumValues: 0x0005
enum class EMontageEventResult : uint8
{
	Completed                                = 0,
	OnBlendOut                               = 1,
	OnInterrupted                            = 2,
	OnCancelled                              = 3,
	EMontageEventResult_MAX                  = 4,
};

// Enum Palia.ECrossMapTracking
// NumValues: 0x0006
enum class ECrossMapTracking : uint8
{
	None                                     = 0,
	Villager                                 = 1,
	QuestLocation                            = 2,
	Visit                                    = 3,
	All                                      = 255,
	ECrossMapTracking_MAX                    = 256,
};

// Enum Palia.ETimeOfDayAudioBehavior
// NumValues: 0x0005
enum class ETimeOfDayAudioBehavior : uint8
{
	AtActorLocation                          = 0,
	RandomLocation                           = 1,
	SpecificDirection                        = 2,
	DoNothing                                = 3,
	ETimeOfDayAudioBehavior_MAX              = 4,
};

// Enum Palia.EPlayerTrackingOn
// NumValues: 0x0005
enum class EPlayerTrackingOn : uint8
{
	None                                     = 0,
	Compass                                  = 1,
	WorldMap                                 = 2,
	All                                      = 255,
	EPlayerTrackingOn_MAX                    = 256,
};

// Enum Palia.EValeriaMoveSimulationFlag
// NumValues: 0x0008
enum class EValeriaMoveSimulationFlag : uint8
{
	NO_FLAGS                                 = 0,
	VALID_Position                           = 1,
	VALID_Rotation                           = 2,
	VALID_PositionAndRotation                = 3,
	SIM_Direct                               = 4,
	SIM_FaceVelocity                         = 8,
	CONTROL_ServerAuthority                  = 16,
	EValeriaMoveSimulationFlag_MAX           = 17,
};

// Enum Palia.EVALM_ThrottleType
// NumValues: 0x0006
enum class EVALM_ThrottleType : uint8
{
	Unrestricted                             = 0,
	Wide                                     = 1,
	Narrow                                   = 2,
	Restricted                               = 3,
	Max                                      = 4,
	INVALID                                  = 4,
};

// Enum Palia.EVALM_ThrottleBucket
// NumValues: 0x0006
enum class EVALM_ThrottleBucket : uint8
{
	WithinMinDistance                        = 0,
	WithinMaxDistance                        = 1,
	BeyondMaxDistance                        = 2,
	MeshNotRelevant                          = 3,
	INVALID                                  = 4,
	EVALM_MAX                                = 5,
};

// Enum Palia.EVALM_ThrottleFrustumState
// NumValues: 0x0004
enum class EVALM_ThrottleFrustumState : uint8
{
	Inside                                   = 0,
	Outside                                  = 1,
	INVALID                                  = 2,
	EVALM_MAX                                = 3,
};

// Enum Palia.EVAL_PermanentUnlockVerifyResult
// NumValues: 0x0006
enum class EVAL_PermanentUnlockVerifyResult : uint8
{
	NoActionNecessary                        = 0,
	UnableToVerify                           = 1,
	UnlockFound                              = 2,
	UnlockMissing_Rewarded                   = 3,
	UnlockMissing_FailedToReward             = 4,
	EVAL_MAX                                 = 5,
};

// Enum Palia.EEmoteTargetType
// NumValues: 0x0005
enum class EEmoteTargetType : uint8
{
	Invalid                                  = 0,
	Player                                   = 1,
	NPC                                      = 2,
	Creatures                                = 3,
	EEmoteTargetType_MAX                     = 4,
};

// Enum Palia.EValeriaErrorMsgId
// NumValues: 0x0004
enum class EValeriaErrorMsgId : uint8
{
	None                                     = 0,
	GenericDisconnect                        = 1,
	InactivityDisconnect                     = 2,
	EValeriaErrorMsgId_MAX                   = 3,
};

// Enum Palia.EVAL_GameSessionFlags
// NumValues: 0x0007
enum class EVAL_GameSessionFlags : uint8
{
	None                                     = 0,
	MarkedServerOnline                       = 1,
	EmptyPlayers                             = 2,
	AgonesReserveQueued                      = 4,
	AgonesAllocated                          = 8,
	ServerMaintenanceScheduled               = 16,
	EVAL_MAX                                 = 17,
};

// Enum Palia.ValeriaGASAbilityInputID
// NumValues: 0x000A
enum class EValeriaGASAbilityInputID : uint8
{
	INVALID                                  = 0,
	LMBPress                                 = 50,
	RMBPress                                 = 51,
	Spacebar                                 = 100,
	AdditionalAbility1                       = 201,
	AdditionalAbility2                       = 202,
	AdditionalAbility3                       = 203,
	AdditionalAbility4                       = 204,
	AdditionalAbility5                       = 205,
	ValeriaGASAbilityInputID_MAX             = 206,
};

// Enum Palia.ValeriaGASAbilityInput
// NumValues: 0x0005
enum class EValeriaGASAbilityInput : uint8
{
	GASUseActiveAbility1                     = 0,
	GASUseActiveAbility2                     = 1,
	GASUseActiveAbility3                     = 2,
	GASUseActiveAbility4                     = 3,
	ValeriaGASAbilityInput_MAX               = 4,
};

// Enum Palia.EValeriaReplicationPolicy
// NumValues: 0x000A
enum class EValeriaReplicationPolicy : uint8
{
	NotRouted                                = 0,
	AlwaysRelevant                           = 1,
	AlwaysRelevantToConnection               = 2,
	Grid_Static                              = 3,
	Grid_Dynamic                             = 4,
	Grid_Dormant                             = 5,
	HousingPlot                              = 6,
	ImportantActors                          = 7,
	GameplayDebugger                         = 8,
	EValeriaReplicationPolicy_MAX            = 9,
};

// Enum Palia.ESpatialVolumeType
// NumValues: 0x0006
enum class ESpatialVolumeType : uint8
{
	Room                                     = 0,
	Ambience                                 = 1,
	Reverb                                   = 2,
	ReverbOverride                           = 3,
	Trigger                                  = 4,
	ESpatialVolumeType_MAX                   = 5,
};

// Enum Palia.ESpatialVolumePriority
// NumValues: 0x000B
enum class ESpatialVolumePriority : uint8
{
	Global                                   = 0,
	ExteriorLow                              = 1,
	ExteriorHi                               = 2,
	InteriorLow                              = 3,
	InteriorMed                              = 4,
	InteriorHi                               = 5,
	SpecialLow                               = 6,
	SpecialMed                               = 7,
	SpecialHi                                = 8,
	Custom                                   = 9,
	ESpatialVolumePriority_MAX               = 10,
};

// Enum Palia.EVillagerState
// NumValues: 0x0004
enum class EVillagerState : uint8
{
	Activities                               = 0,
	Visiting                                 = 1,
	PrivateSpace                             = 2,
	EVillagerState_MAX                       = 3,
};

// Enum Palia.EVAL_ApplyCustomizationToActorState
// NumValues: 0x0006
enum class EVAL_ApplyCustomizationToActorState : uint8
{
	Idle                                     = 0,
	PlayTransition                           = 1,
	LoadPrimaryAssets                        = 2,
	LoadSecondaryAssets                      = 3,
	ApplyCustomizations                      = 4,
	EVAL_MAX                                 = 5,
};

// Enum Palia.EVAL_ApplyCustomizationToActorOutcome
// NumValues: 0x0005
enum class EVAL_ApplyCustomizationToActorOutcome : uint8
{
	Completed                                = 0,
	Failed                                   = 1,
	Interrupted                              = 2,
	Stubbed                                  = 3,
	EVAL_MAX                                 = 4,
};

// Enum Palia.EVAL_CharacterCustomizationHideSlotFlags
// NumValues: 0x0011
enum class EVAL_CharacterCustomizationHideSlotFlags : uint8
{
	Invalid                                  = 0,
	Hair                                     = 1,
	Head                                     = 2,
	Torso                                    = 3,
	Legs                                     = 4,
	Hat                                      = 5,
	FaceMask                                 = 6,
	FacialHair                               = 7,
	FaceTattoo                               = 8,
	BodyTattoo                               = 9,
	Makeup                                   = 10,
	FaceComplexion                           = 11,
	BodyComplexion                           = 12,
	Glider                                   = 13,
	GliderTrail                              = 14,
	Pet                                      = 15,
	EVAL_MAX                                 = 16,
};

// Enum Palia.EVAL_CharacterCustomization_CosmeticTagType
// NumValues: 0x0006
enum class EVAL_CharacterCustomization_CosmeticTagType : uint8
{
	None                                     = 0,
	Set                                      = 1,
	Brand                                    = 2,
	Style                                    = 3,
	PerformanceComplexity                    = 4,
	EVAL_CharacterCustomization_MAX          = 5,
};

// Enum Palia.EVAL_CharacterCustomization_MeshType
// NumValues: 0x0009
enum class EVAL_CharacterCustomization_MeshType : uint8
{
	None                                     = 0,
	Hair                                     = 1,
	Head                                     = 2,
	Torso                                    = 3,
	Legs                                     = 4,
	Hat                                      = 5,
	FaceMask                                 = 6,
	FacialHair                               = 7,
	EVAL_CharacterCustomization_MAX          = 8,
};

// Enum Palia.EVAL_CharacterCustomizationItemType
// NumValues: 0x0003
enum class EVAL_CharacterCustomizationItemType : uint8
{
	Normal                                   = 0,
	Premium                                  = 1,
	EVAL_MAX                                 = 2,
};

// Enum Palia.EVAL_VariantOption_UIDisplayType
// NumValues: 0x0004
enum class EVAL_VariantOption_UIDisplayType : uint8
{
	Icon                                     = 0,
	Color                                    = 1,
	ManualColor                              = 2,
	EVAL_VariantOption_MAX                   = 3,
};

// Enum Palia.EVAL_DirectMessageResult
// NumValues: 0x0007
enum class EVAL_DirectMessageResult : uint8
{
	Sent                                     = 0,
	MiscFail                                 = 1,
	SendMessageToYourself                    = 2,
	CouldNotFindCharacterWithName            = 3,
	CharacterOffline                         = 4,
	NotFriends                               = 5,
	EVAL_MAX                                 = 6,
};

// Enum Palia.EVAL_DirectMessageState
// NumValues: 0x0003
enum class EVAL_DirectMessageState : uint8
{
	SearchCharacterByName                    = 0,
	SearchPresence                           = 1,
	EVAL_MAX                                 = 2,
};

// Enum Palia.EVAL_CollectionsTabState
// NumValues: 0x0003
enum class EVAL_CollectionsTabState : uint8
{
	Emotes                                   = 0,
	Pets                                     = 1,
	EVAL_MAX                                 = 2,
};

// Enum Palia.EBatchAvailability
// NumValues: 0x0004
enum class EBatchAvailability : uint8
{
	Disabled                                 = 0,
	DevelopmentOnly                          = 1,
	Enabled                                  = 2,
	EBatchAvailability_MAX                   = 3,
};

// Enum Palia.EContentBatchStatus
// NumValues: 0x0004
enum class EContentBatchStatus : uint8
{
	Error                                    = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	EContentBatchStatus_MAX                  = 3,
};

// Enum Palia.EDialogueTypeCategory
// NumValues: 0x0003
enum class EDialogueTypeCategory : uint8
{
	Generic                                  = 0,
	NonChat                                  = 1,
	EDialogueTypeCategory_MAX                = 2,
};

// Enum Palia.EVAL_EntitlementStatus
// NumValues: 0x0003
enum class EVAL_EntitlementStatus : uint8
{
	Success                                  = 0,
	Failure                                  = 1,
	EVAL_MAX                                 = 2,
};

// Enum Palia.EVAL_EnvProfileTime
// NumValues: 0x0007
enum class EVAL_EnvProfileTime : uint8
{
	EPT_SUNRISE                              = 0,
	EPT_DAY                                  = 1,
	EPT_SUNSET                               = 2,
	EPT_TWILIGHT                             = 3,
	EPT_NIGHT                                = 4,
	EPT_DAWN                                 = 5,
	EPT_MAX                                  = 6,
};

// Enum Palia.EVAL_CharacterCustomizationMode
// NumValues: 0x0004
enum class EVAL_CharacterCustomizationMode : uint8
{
	CharacterCreation                        = 0,
	Wardrobe                                 = 1,
	CharacterRespec                          = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EVAL_OpenStoreContext
// NumValues: 0x0004
enum class EVAL_OpenStoreContext : uint8
{
	Wardrobe                                 = 0,
	Menu                                     = 1,
	InteractableComponent                    = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EVAL_GameplayMenuMode
// NumValues: 0x0013
enum class EVAL_GameplayMenuMode : uint8
{
	NotSpecified                             = 0,
	Cheats                                   = 1,
	Currencies                               = 2,
	Map                                      = 3,
	Quests                                   = 4,
	Recipes                                  = 5,
	Relationships                            = 6,
	Skills                                   = 7,
	Guidebook                                = 8,
	Inventory                                = 9,
	Guild                                    = 10,
	Store                                    = 11,
	PlayerGuild                              = 12,
	Accomplishments                          = 13,
	Emotes                                   = 14,
	Events                                   = 15,
	NewsInbox                                = 16,
	PaliaPass                                = 17,
	EVAL_MAX                                 = 18,
};

// Enum Palia.EVAL_DirectXVersion
// NumValues: 0x0004
enum class EVAL_DirectXVersion : uint8
{
	DirectXVersion12                         = 0,
	DirectXVersion11                         = 1,
	Unknown                                  = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EVAL_TextComparisonLevel
// NumValues: 0x0007
enum class EVAL_TextComparisonLevel : uint8
{
	Default                                  = 0,
	Primary                                  = 1,
	Secondary                                = 2,
	Tertiary                                 = 3,
	Quaternary                               = 4,
	Quinary                                  = 5,
	EVAL_MAX                                 = 6,
};

// Enum Palia.EVALItemType
// NumValues: 0x0006
enum class EVALItemType : uint8
{
	Invalid                                  = 0,
	CustomizationNormal                      = 1,
	CustomizationPremium                     = 2,
	CurrencyPremium                          = 3,
	Inventory                                = 4,
	EVALItemType_MAX                         = 5,
};

// Enum Palia.EVAL_NewsInboxMessageType
// NumValues: 0x0019
enum class EVAL_NewsInboxMessageType : uint8
{
	Invalid                                  = 0,
	Generic                                  = 1,
	PlayerSupportProgression                 = 2,
	PromotionReferralReferrer                = 3,
	PromotionReferralReferred                = 4,
	PromotionEarlyBird                       = 5,
	ApologyDowntime                          = 6,
	FeaturePets                              = 7,
	PromotionDailyReward                     = 8,
	GenericNewContent                        = 9,
	PromotionWelcomeBack                     = 10,
	ActionMuteIndefinite                     = 11,
	ActionMuteTemporary                      = 12,
	ActionWarning                            = 13,
	ActionNameChange                         = 14,
	GenericMissingItem                       = 15,
	PressGiftPreview                         = 16,
	GenericPartnerGift                       = 17,
	CharacterRespectAnnounce                 = 18,
	PromotionLoginPf                         = 19,
	PromotionAccountLinkingPf                = 20,
	PromotionExtraPf                         = 21,
	ApologyTechIssues                        = 22,
	MultiCraftExploitWarning                 = 23,
	EVAL_MAX                                 = 24,
};

// Enum Palia.EVAL_PlayerGuildQuestAction
// NumValues: 0x0002
enum class EVAL_PlayerGuildQuestAction : uint8
{
	Collect                                  = 0,
	EVAL_MAX                                 = 1,
};

// Enum Palia.EVAL_PlayerGuildQuest_SortType
// NumValues: 0x0002
enum class EVAL_PlayerGuildQuest_SortType : uint8
{
	DateTime                                 = 0,
	EVAL_PlayerGuildQuest_MAX                = 1,
};

// Enum Palia.EVAL_PremiumPaymentStatus
// NumValues: 0x0005
enum class EVAL_PremiumPaymentStatus : uint8
{
	Created                                  = 0,
	Failed                                   = 1,
	Paid                                     = 2,
	Fulfilled                                = 3,
	EVAL_MAX                                 = 4,
};

// Enum Palia.EVALUI_PremiumStoreState
// NumValues: 0x0005
enum class EVALUI_PremiumStoreState : uint8
{
	Storefront                               = 0,
	CurrencyPurchase                         = 1,
	ItemSelection                            = 2,
	ItemPurchase                             = 3,
	EVALUI_MAX                               = 4,
};

// Enum Palia.EVAL_ShrineReadiness
// NumValues: 0x0006
enum class EVAL_ShrineReadiness : uint8
{
	CannotCommune                            = 0,
	FirstCommunionReady                      = 1,
	RepeatCommunionReady                     = 2,
	RepeatCommunionInsufficient              = 3,
	RepeatCommunionMaxed                     = 4,
	EVAL_MAX                                 = 5,
};

// Enum Palia.ETimerDirection
// NumValues: 0x0003
enum class ETimerDirection : uint8
{
	CountDown                                = 0,
	CountUp                                  = 1,
	ETimerDirection_MAX                      = 2,
};

// Enum Palia.ETimerEventType
// NumValues: 0x0009
enum class ETimerEventType : uint8
{
	Start                                    = 0,
	Stop                                     = 1,
	Pause                                    = 2,
	Unpause                                  = 3,
	TimeElapsed                              = 4,
	TimeRemaining                            = 5,
	TimeElapsedInterval                      = 6,
	TimeRemainingInterval                    = 7,
	ETimerEventType_MAX                      = 8,
};

// Enum Palia.EVAL_TravelLoadingScreenStateRequesterState
// NumValues: 0x0007
enum class EVAL_TravelLoadingScreenStateRequesterState : uint8
{
	Idle                                     = 0,
	AwaitingPreloadMapStart                  = 1,
	LoadingMap                               = 2,
	WaitingForPawn                           = 3,
	WaitingForCharacterTeleport              = 4,
	WaitingForAsyncLoading                   = 5,
	EVAL_MAX                                 = 6,
};

// Enum Palia.EGiftPredictedResponse
// NumValues: 0x0006
enum class EGiftPredictedResponse : uint8
{
	Unknown                                  = 0,
	CantGift                                 = 1,
	Love                                     = 2,
	Like                                     = 3,
	NoItem                                   = 4,
	EGiftPredictedResponse_MAX               = 5,
};

// Enum Palia.EVillagerQuestCompleteResult
// NumValues: 0x0004
enum class EVillagerQuestCompleteResult : uint8
{
	Failure                                  = 0,
	MovedToNextStep                          = 1,
	Success                                  = 2,
	EVillagerQuestCompleteResult_MAX         = 3,
};

// Enum Palia.EStoreTab
// NumValues: 0x0004
enum class EStoreTab : uint8
{
	Undefined                                = 0,
	Recipes                                  = 1,
	Items                                    = 2,
	EStoreTab_MAX                            = 3,
};

// Enum Palia.EVitalRelevance
// NumValues: 0x0004
enum class EVitalRelevance : uint8
{
	All                                      = 0,
	PlayerOnly                               = 1,
	SpecifiedOnly                            = 2,
	EVitalRelevance_MAX                      = 3,
};

// Enum Palia.EVAL_WaterFillType
// NumValues: 0x0004
enum class EVAL_WaterFillType : uint8
{
	Empty                                    = 0,
	Partial                                  = 1,
	Full                                     = 2,
	EVAL_MAX                                 = 3,
};

// Enum Palia.EWishType
// NumValues: 0x0007
enum class EWishType : uint8
{
	Blank                                    = 0,
	Connection                               = 1,
	Luck                                     = 2,
	Longevity                                = 3,
	Path                                     = 4,
	Prosperity                               = 5,
	Max                                      = 6,
};

// ScriptStruct Palia.ItemMetadataEntry
// 0x0020 (0x0020 - 0x0000)
struct FItemMetadataEntry final
{
public:
	struct FGameplayTag                           MetadataTag;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MetadataString;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MetadataInt;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205E[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemMetadataEntry) == 0x000008, "Wrong alignment on FItemMetadataEntry");
static_assert(sizeof(FItemMetadataEntry) == 0x000020, "Wrong size on FItemMetadataEntry");
static_assert(offsetof(FItemMetadataEntry, MetadataTag) == 0x000000, "Member 'FItemMetadataEntry::MetadataTag' has a wrong offset!");
static_assert(offsetof(FItemMetadataEntry, MetadataString) == 0x000008, "Member 'FItemMetadataEntry::MetadataString' has a wrong offset!");
static_assert(offsetof(FItemMetadataEntry, MetadataInt) == 0x000018, "Member 'FItemMetadataEntry::MetadataInt' has a wrong offset!");

// ScriptStruct Palia.ItemMetaData
// 0x0028 (0x0028 - 0x0000)
struct FItemMetaData final
{
public:
	uint8                                         Level;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         QualityStars;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaterAmount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SellValueOfInputs;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TintPersistID;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2060[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GrowthLevel;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2061[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FItemMetadataEntry>             TaggedMetadata;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemMetaData) == 0x000008, "Wrong alignment on FItemMetaData");
static_assert(sizeof(FItemMetaData) == 0x000028, "Wrong size on FItemMetaData");
static_assert(offsetof(FItemMetaData, Level) == 0x000000, "Member 'FItemMetaData::Level' has a wrong offset!");
static_assert(offsetof(FItemMetaData, QualityStars) == 0x000001, "Member 'FItemMetaData::QualityStars' has a wrong offset!");
static_assert(offsetof(FItemMetaData, WaterAmount) == 0x000004, "Member 'FItemMetaData::WaterAmount' has a wrong offset!");
static_assert(offsetof(FItemMetaData, SellValueOfInputs) == 0x000008, "Member 'FItemMetaData::SellValueOfInputs' has a wrong offset!");
static_assert(offsetof(FItemMetaData, TintPersistID) == 0x00000C, "Member 'FItemMetaData::TintPersistID' has a wrong offset!");
static_assert(offsetof(FItemMetaData, GrowthLevel) == 0x000010, "Member 'FItemMetaData::GrowthLevel' has a wrong offset!");
static_assert(offsetof(FItemMetaData, TaggedMetadata) == 0x000018, "Member 'FItemMetaData::TaggedMetadata' has a wrong offset!");

// ScriptStruct Palia.ItemMetaData_UseLimit
// 0x0004 (0x0004 - 0x0000)
struct FItemMetaData_UseLimit final
{
public:
	int32                                         UseAmountLeft;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemMetaData_UseLimit) == 0x000004, "Wrong alignment on FItemMetaData_UseLimit");
static_assert(sizeof(FItemMetaData_UseLimit) == 0x000004, "Wrong size on FItemMetaData_UseLimit");
static_assert(offsetof(FItemMetaData_UseLimit, UseAmountLeft) == 0x000000, "Member 'FItemMetaData_UseLimit::UseAmountLeft' has a wrong offset!");

// ScriptStruct Palia.ValeriaItemPersist
// 0x0038 (0x0038 - 0x0000)
struct FValeriaItemPersist final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemPersistId;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemMetaData                          MetaData;                                          // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FItemMetaData_UseLimit                 MetaDataUse;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2062[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaItemPersist) == 0x000008, "Wrong alignment on FValeriaItemPersist");
static_assert(sizeof(FValeriaItemPersist) == 0x000038, "Wrong size on FValeriaItemPersist");
static_assert(offsetof(FValeriaItemPersist, Amount) == 0x000000, "Member 'FValeriaItemPersist::Amount' has a wrong offset!");
static_assert(offsetof(FValeriaItemPersist, ItemPersistId) == 0x000004, "Member 'FValeriaItemPersist::ItemPersistId' has a wrong offset!");
static_assert(offsetof(FValeriaItemPersist, MetaData) == 0x000008, "Member 'FValeriaItemPersist::MetaData' has a wrong offset!");
static_assert(offsetof(FValeriaItemPersist, MetaDataUse) == 0x000030, "Member 'FValeriaItemPersist::MetaDataUse' has a wrong offset!");

// ScriptStruct Palia.StoragePersistBlock
// 0x0020 (0x0060 - 0x0040)
struct FStoragePersistBlock final : public FS6PersistBlock
{
public:
	EStoragePoolType                              StoragePoolType;                                   // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2063[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FValeriaItemPersist>            Items;                                             // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ItemCapacity;                                      // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemMax;                                           // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoragePersistBlock) == 0x000008, "Wrong alignment on FStoragePersistBlock");
static_assert(sizeof(FStoragePersistBlock) == 0x000060, "Wrong size on FStoragePersistBlock");
static_assert(offsetof(FStoragePersistBlock, StoragePoolType) == 0x000040, "Member 'FStoragePersistBlock::StoragePoolType' has a wrong offset!");
static_assert(offsetof(FStoragePersistBlock, Items) == 0x000048, "Member 'FStoragePersistBlock::Items' has a wrong offset!");
static_assert(offsetof(FStoragePersistBlock, ItemCapacity) == 0x000058, "Member 'FStoragePersistBlock::ItemCapacity' has a wrong offset!");
static_assert(offsetof(FStoragePersistBlock, ItemMax) == 0x00005C, "Member 'FStoragePersistBlock::ItemMax' has a wrong offset!");

// ScriptStruct Palia.VAL_EnvProfStackEntry
// 0x0018 (0x0018 - 0x0000)
struct FVAL_EnvProfStackEntry final
{
public:
	class AVAL_EnvironmentBoundary*               Boundary;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_EnvironmentProfileSet*             EnvProfSet;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_EnvironmentProfile*                StaticEnvProf;                                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_EnvProfStackEntry) == 0x000008, "Wrong alignment on FVAL_EnvProfStackEntry");
static_assert(sizeof(FVAL_EnvProfStackEntry) == 0x000018, "Wrong size on FVAL_EnvProfStackEntry");
static_assert(offsetof(FVAL_EnvProfStackEntry, Boundary) == 0x000000, "Member 'FVAL_EnvProfStackEntry::Boundary' has a wrong offset!");
static_assert(offsetof(FVAL_EnvProfStackEntry, EnvProfSet) == 0x000008, "Member 'FVAL_EnvProfStackEntry::EnvProfSet' has a wrong offset!");
static_assert(offsetof(FVAL_EnvProfStackEntry, StaticEnvProf) == 0x000010, "Member 'FVAL_EnvProfStackEntry::StaticEnvProf' has a wrong offset!");

// ScriptStruct Palia.PersistentTagFilter
// 0x0020 (0x0020 - 0x0000)
struct FPersistentTagFilter final
{
public:
	struct FGameplayTag                           TagToCheck;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumAcceptedValue;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumAcceptedValue;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagPrereq;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TagPrereq_MinimumAcceptedValue;                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TagPrereq_MaximumAcceptedValue;                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersistentTagFilter) == 0x000004, "Wrong alignment on FPersistentTagFilter");
static_assert(sizeof(FPersistentTagFilter) == 0x000020, "Wrong size on FPersistentTagFilter");
static_assert(offsetof(FPersistentTagFilter, TagToCheck) == 0x000000, "Member 'FPersistentTagFilter::TagToCheck' has a wrong offset!");
static_assert(offsetof(FPersistentTagFilter, MinimumAcceptedValue) == 0x000008, "Member 'FPersistentTagFilter::MinimumAcceptedValue' has a wrong offset!");
static_assert(offsetof(FPersistentTagFilter, MaximumAcceptedValue) == 0x00000C, "Member 'FPersistentTagFilter::MaximumAcceptedValue' has a wrong offset!");
static_assert(offsetof(FPersistentTagFilter, TagPrereq) == 0x000010, "Member 'FPersistentTagFilter::TagPrereq' has a wrong offset!");
static_assert(offsetof(FPersistentTagFilter, TagPrereq_MinimumAcceptedValue) == 0x000018, "Member 'FPersistentTagFilter::TagPrereq_MinimumAcceptedValue' has a wrong offset!");
static_assert(offsetof(FPersistentTagFilter, TagPrereq_MaximumAcceptedValue) == 0x00001C, "Member 'FPersistentTagFilter::TagPrereq_MaximumAcceptedValue' has a wrong offset!");

// ScriptStruct Palia.HousingSlotGrant
// 0x0018 (0x0018 - 0x0000)
struct FHousingSlotGrant final
{
public:
	EHousingSlotType                              Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2064[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHousingSlotGrant) == 0x000008, "Wrong alignment on FHousingSlotGrant");
static_assert(sizeof(FHousingSlotGrant) == 0x000018, "Wrong size on FHousingSlotGrant");
static_assert(offsetof(FHousingSlotGrant, Type) == 0x000000, "Member 'FHousingSlotGrant::Type' has a wrong offset!");
static_assert(offsetof(FHousingSlotGrant, Name) == 0x000008, "Member 'FHousingSlotGrant::Name' has a wrong offset!");

// ScriptStruct Palia.AdditionalItemChance
// 0x0018 (0x0018 - 0x0000)
struct FAdditionalItemChance final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PercentChance;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2065[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdditionalItemChance) == 0x000008, "Wrong alignment on FAdditionalItemChance");
static_assert(sizeof(FAdditionalItemChance) == 0x000018, "Wrong size on FAdditionalItemChance");
static_assert(offsetof(FAdditionalItemChance, ItemType) == 0x000000, "Member 'FAdditionalItemChance::ItemType' has a wrong offset!");
static_assert(offsetof(FAdditionalItemChance, Amount) == 0x000008, "Member 'FAdditionalItemChance::Amount' has a wrong offset!");
static_assert(offsetof(FAdditionalItemChance, QualityStars) == 0x00000C, "Member 'FAdditionalItemChance::QualityStars' has a wrong offset!");
static_assert(offsetof(FAdditionalItemChance, PercentChance) == 0x000010, "Member 'FAdditionalItemChance::PercentChance' has a wrong offset!");

// ScriptStruct Palia.VisitGrant
// 0x0004 (0x0004 - 0x0000)
struct FVisitGrant final
{
public:
	int32                                         VillagerConfigId;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVisitGrant) == 0x000004, "Wrong alignment on FVisitGrant");
static_assert(sizeof(FVisitGrant) == 0x000004, "Wrong size on FVisitGrant");
static_assert(offsetof(FVisitGrant, VillagerConfigId) == 0x000000, "Member 'FVisitGrant::VillagerConfigId' has a wrong offset!");

// ScriptStruct Palia.VillagerGiftPreferenceInfo
// 0x0020 (0x0020 - 0x0000)
struct FVillagerGiftPreferenceInfo final
{
public:
	struct FDataTableRowHandle                    Villager;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    GiftPreference;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerGiftPreferenceInfo) == 0x000008, "Wrong alignment on FVillagerGiftPreferenceInfo");
static_assert(sizeof(FVillagerGiftPreferenceInfo) == 0x000020, "Wrong size on FVillagerGiftPreferenceInfo");
static_assert(offsetof(FVillagerGiftPreferenceInfo, Villager) == 0x000000, "Member 'FVillagerGiftPreferenceInfo::Villager' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceInfo, GiftPreference) == 0x000010, "Member 'FVillagerGiftPreferenceInfo::GiftPreference' has a wrong offset!");

// ScriptStruct Palia.VAL_ValidatableStruct
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FVAL_ValidatableStruct
{
public:
	uint8                                         Pad_2066[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_ValidatableStruct) == 0x000008, "Wrong alignment on FVAL_ValidatableStruct");
static_assert(sizeof(FVAL_ValidatableStruct) == 0x000008, "Wrong size on FVAL_ValidatableStruct");

// ScriptStruct Palia.PersistentTagWriteback
// 0x0010 (0x0018 - 0x0008)
struct FPersistentTagWriteback final : public FVAL_ValidatableStruct
{
public:
	struct FGameplayTag                           TagToModify;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountToApply;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENumericalOperation                           OperationToApply;                                  // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2067[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersistentTagWriteback) == 0x000008, "Wrong alignment on FPersistentTagWriteback");
static_assert(sizeof(FPersistentTagWriteback) == 0x000018, "Wrong size on FPersistentTagWriteback");
static_assert(offsetof(FPersistentTagWriteback, TagToModify) == 0x000008, "Member 'FPersistentTagWriteback::TagToModify' has a wrong offset!");
static_assert(offsetof(FPersistentTagWriteback, AmountToApply) == 0x000010, "Member 'FPersistentTagWriteback::AmountToApply' has a wrong offset!");
static_assert(offsetof(FPersistentTagWriteback, OperationToApply) == 0x000014, "Member 'FPersistentTagWriteback::OperationToApply' has a wrong offset!");

// ScriptStruct Palia.ItemUseChangeConfig
// 0x0008 (0x0008 - 0x0000)
struct FItemUseChangeConfig final
{
public:
	int32                                         UseChange;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CurrentlyEquipped;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2068[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemUseChangeConfig) == 0x000004, "Wrong alignment on FItemUseChangeConfig");
static_assert(sizeof(FItemUseChangeConfig) == 0x000008, "Wrong size on FItemUseChangeConfig");
static_assert(offsetof(FItemUseChangeConfig, UseChange) == 0x000000, "Member 'FItemUseChangeConfig::UseChange' has a wrong offset!");
static_assert(offsetof(FItemUseChangeConfig, CurrentlyEquipped) == 0x000004, "Member 'FItemUseChangeConfig::CurrentlyEquipped' has a wrong offset!");

// ScriptStruct Palia.QuestRewardConfig
// 0x0170 (0x0178 - 0x0008)
struct FQuestRewardConfig final : public FVAL_ValidatableStruct
{
public:
	TArray<struct FPersistentTagFilter>           PlayerTagRequirements;                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EVAL_BoolOverride                             OverrideIsCriticalReward;                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_BoolOverride                             OverrideIsPermanentUnlock;                         // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2069[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206A[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAdditionalItemChance>          AdditionalItems;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206B[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    RecipeConfig;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    Loot;                                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          DisallowItemsGrantingAccomplishmentProgress;       // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    VitalType;                                         // 0x0069(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206C[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VitalAmount;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VitalRewardIsUpgrade;                              // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206D[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurrencyConfig*                        CurrencyConfig;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyAmount;                                    // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206E[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    RelationshipVillager;                              // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    RelationshipVillagerCore;                          // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         FriendshipChange;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RomanceChange;                                     // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERomanceStateChange                           RomanceStateChange;                                // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206F[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    MailMessage;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    MailMessageToDeleteIfUnread;                       // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVillagerGiftPreferenceInfo            GiftPreferenceRevealed;                            // 0x00D8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVisitGrant                            VisitToGrant;                                      // 0x00F8(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2070[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    BuffConfig;                                        // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SkillXpEarnings;                                   // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagWriteback>        PlayerTagWriteback;                                // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          GrantBagUpgrade;                                   // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBagUpgradeType                               BagUpgradeType;                                    // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2071[0x2];                                     // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemUseChangeConfig                   ItemUseChange;                                     // 0x0134(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LanternFuelTime;                                   // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHousingSlotGrant>              GrantedHousingSlots;                               // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_QuestDef>           QuestToStart;                                      // 0x0150(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestRewardConfig) == 0x000008, "Wrong alignment on FQuestRewardConfig");
static_assert(sizeof(FQuestRewardConfig) == 0x000178, "Wrong size on FQuestRewardConfig");
static_assert(offsetof(FQuestRewardConfig, PlayerTagRequirements) == 0x000008, "Member 'FQuestRewardConfig::PlayerTagRequirements' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, OverrideIsCriticalReward) == 0x000018, "Member 'FQuestRewardConfig::OverrideIsCriticalReward' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, OverrideIsPermanentUnlock) == 0x000019, "Member 'FQuestRewardConfig::OverrideIsPermanentUnlock' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, ItemType) == 0x000020, "Member 'FQuestRewardConfig::ItemType' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, ItemAmount) == 0x000028, "Member 'FQuestRewardConfig::ItemAmount' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, AdditionalItems) == 0x000030, "Member 'FQuestRewardConfig::AdditionalItems' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, QualityStars) == 0x000040, "Member 'FQuestRewardConfig::QualityStars' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, RecipeConfig) == 0x000048, "Member 'FQuestRewardConfig::RecipeConfig' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, Loot) == 0x000058, "Member 'FQuestRewardConfig::Loot' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, DisallowItemsGrantingAccomplishmentProgress) == 0x000068, "Member 'FQuestRewardConfig::DisallowItemsGrantingAccomplishmentProgress' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, VitalType) == 0x000069, "Member 'FQuestRewardConfig::VitalType' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, VitalAmount) == 0x00006C, "Member 'FQuestRewardConfig::VitalAmount' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, VitalRewardIsUpgrade) == 0x000070, "Member 'FQuestRewardConfig::VitalRewardIsUpgrade' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, CurrencyConfig) == 0x000078, "Member 'FQuestRewardConfig::CurrencyConfig' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, CurrencyAmount) == 0x000080, "Member 'FQuestRewardConfig::CurrencyAmount' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, RelationshipVillager) == 0x000088, "Member 'FQuestRewardConfig::RelationshipVillager' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, RelationshipVillagerCore) == 0x000098, "Member 'FQuestRewardConfig::RelationshipVillagerCore' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, FriendshipChange) == 0x0000A8, "Member 'FQuestRewardConfig::FriendshipChange' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, RomanceChange) == 0x0000AC, "Member 'FQuestRewardConfig::RomanceChange' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, RomanceStateChange) == 0x0000B0, "Member 'FQuestRewardConfig::RomanceStateChange' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, MailMessage) == 0x0000B8, "Member 'FQuestRewardConfig::MailMessage' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, MailMessageToDeleteIfUnread) == 0x0000C8, "Member 'FQuestRewardConfig::MailMessageToDeleteIfUnread' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, GiftPreferenceRevealed) == 0x0000D8, "Member 'FQuestRewardConfig::GiftPreferenceRevealed' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, VisitToGrant) == 0x0000F8, "Member 'FQuestRewardConfig::VisitToGrant' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, BuffConfig) == 0x000100, "Member 'FQuestRewardConfig::BuffConfig' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, SkillXpEarnings) == 0x000110, "Member 'FQuestRewardConfig::SkillXpEarnings' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, PlayerTagWriteback) == 0x000120, "Member 'FQuestRewardConfig::PlayerTagWriteback' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, GrantBagUpgrade) == 0x000130, "Member 'FQuestRewardConfig::GrantBagUpgrade' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, BagUpgradeType) == 0x000131, "Member 'FQuestRewardConfig::BagUpgradeType' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, ItemUseChange) == 0x000134, "Member 'FQuestRewardConfig::ItemUseChange' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, LanternFuelTime) == 0x00013C, "Member 'FQuestRewardConfig::LanternFuelTime' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, GrantedHousingSlots) == 0x000140, "Member 'FQuestRewardConfig::GrantedHousingSlots' has a wrong offset!");
static_assert(offsetof(FQuestRewardConfig, QuestToStart) == 0x000150, "Member 'FQuestRewardConfig::QuestToStart' has a wrong offset!");

// ScriptStruct Palia.VillagerRelationshipLevelConfig
// 0x01A8 (0x01B0 - 0x0008)
struct FVillagerRelationshipLevelConfig final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelationshipType                             Type;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2072[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredValue;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2073[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LevelName;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LevelDescription;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    VillagerCoreConfig;                                // 0x0048(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2074[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            LevelTextColor;                                    // 0x0060(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             RewardsForLevel;                                   // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              RewardsForLevelIcon;                               // 0x0140(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RewardsForLevelTooltip;                            // 0x0168(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            AssociatedVillagerQuestConfigs;                    // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UVAL_QuestDef>>   AssociatedVillagerQuestDefs;                       // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagWriteback>        PlayerTagWriteback;                                // 0x01A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerRelationshipLevelConfig) == 0x000010, "Wrong alignment on FVillagerRelationshipLevelConfig");
static_assert(sizeof(FVillagerRelationshipLevelConfig) == 0x0001B0, "Wrong size on FVillagerRelationshipLevelConfig");
static_assert(offsetof(FVillagerRelationshipLevelConfig, Level) == 0x000008, "Member 'FVillagerRelationshipLevelConfig::Level' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, Type) == 0x00000C, "Member 'FVillagerRelationshipLevelConfig::Type' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, RequiredValue) == 0x000010, "Member 'FVillagerRelationshipLevelConfig::RequiredValue' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, LevelName) == 0x000018, "Member 'FVillagerRelationshipLevelConfig::LevelName' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, LevelDescription) == 0x000030, "Member 'FVillagerRelationshipLevelConfig::LevelDescription' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, VillagerCoreConfig) == 0x000048, "Member 'FVillagerRelationshipLevelConfig::VillagerCoreConfig' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, LevelTextColor) == 0x000060, "Member 'FVillagerRelationshipLevelConfig::LevelTextColor' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, RewardsForLevel) == 0x000130, "Member 'FVillagerRelationshipLevelConfig::RewardsForLevel' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, RewardsForLevelIcon) == 0x000140, "Member 'FVillagerRelationshipLevelConfig::RewardsForLevelIcon' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, RewardsForLevelTooltip) == 0x000168, "Member 'FVillagerRelationshipLevelConfig::RewardsForLevelTooltip' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, AssociatedVillagerQuestConfigs) == 0x000180, "Member 'FVillagerRelationshipLevelConfig::AssociatedVillagerQuestConfigs' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, AssociatedVillagerQuestDefs) == 0x000190, "Member 'FVillagerRelationshipLevelConfig::AssociatedVillagerQuestDefs' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipLevelConfig, PlayerTagWriteback) == 0x0001A0, "Member 'FVillagerRelationshipLevelConfig::PlayerTagWriteback' has a wrong offset!");

// ScriptStruct Palia.VitalPrereq
// 0x0008 (0x0008 - 0x0000)
struct FVitalPrereq final
{
public:
	EVitalType                                    VitalType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2075[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumAmount;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVitalPrereq) == 0x000004, "Wrong alignment on FVitalPrereq");
static_assert(sizeof(FVitalPrereq) == 0x000008, "Wrong size on FVitalPrereq");
static_assert(offsetof(FVitalPrereq, VitalType) == 0x000000, "Member 'FVitalPrereq::VitalType' has a wrong offset!");
static_assert(offsetof(FVitalPrereq, MinimumAmount) == 0x000004, "Member 'FVitalPrereq::MinimumAmount' has a wrong offset!");

// ScriptStruct Palia.SubBundleReqsData
// 0x000C (0x000C - 0x0000)
struct FSubBundleReqsData final
{
public:
	int32                                         RequirementConfigId;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentValue;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2076[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubBundleReqsData) == 0x000004, "Wrong alignment on FSubBundleReqsData");
static_assert(sizeof(FSubBundleReqsData) == 0x00000C, "Wrong size on FSubBundleReqsData");
static_assert(offsetof(FSubBundleReqsData, RequirementConfigId) == 0x000000, "Member 'FSubBundleReqsData::RequirementConfigId' has a wrong offset!");
static_assert(offsetof(FSubBundleReqsData, CurrentValue) == 0x000004, "Member 'FSubBundleReqsData::CurrentValue' has a wrong offset!");
static_assert(offsetof(FSubBundleReqsData, bCompleted) == 0x000008, "Member 'FSubBundleReqsData::bCompleted' has a wrong offset!");

// ScriptStruct Palia.SubBundleData
// 0x0020 (0x0020 - 0x0000)
struct FSubBundleData final
{
public:
	int32                                         SubBundleConfigId;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2077[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSubBundleReqsData>             SubBundleReqs;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMiniRewardsGranted;                               // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2078[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubBundleData) == 0x000008, "Wrong alignment on FSubBundleData");
static_assert(sizeof(FSubBundleData) == 0x000020, "Wrong size on FSubBundleData");
static_assert(offsetof(FSubBundleData, SubBundleConfigId) == 0x000000, "Member 'FSubBundleData::SubBundleConfigId' has a wrong offset!");
static_assert(offsetof(FSubBundleData, SubBundleReqs) == 0x000008, "Member 'FSubBundleData::SubBundleReqs' has a wrong offset!");
static_assert(offsetof(FSubBundleData, bMiniRewardsGranted) == 0x000018, "Member 'FSubBundleData::bMiniRewardsGranted' has a wrong offset!");

// ScriptStruct Palia.CarryVisualizationInfo
// 0x0028 (0x0028 - 0x0000)
struct FCarryVisualizationInfo final
{
public:
	struct FGameplayTagContainer                  TagsToMatch;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           VisualizationItemType;                             // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCarryVisualizationInfo) == 0x000008, "Wrong alignment on FCarryVisualizationInfo");
static_assert(sizeof(FCarryVisualizationInfo) == 0x000028, "Wrong size on FCarryVisualizationInfo");
static_assert(offsetof(FCarryVisualizationInfo, TagsToMatch) == 0x000000, "Member 'FCarryVisualizationInfo::TagsToMatch' has a wrong offset!");
static_assert(offsetof(FCarryVisualizationInfo, VisualizationItemType) == 0x000020, "Member 'FCarryVisualizationInfo::VisualizationItemType' has a wrong offset!");

// ScriptStruct Palia.VAL_BreakableStages
// 0x0018 (0x0018 - 0x0000)
struct FVAL_BreakableStages final
{
public:
	int32                                         HitsUntilNextStage;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPick;                                             // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAxe;                                              // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectile;                                       // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2079[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AValeriaProjectile>> ValidProjectiles;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_BreakableStages) == 0x000008, "Wrong alignment on FVAL_BreakableStages");
static_assert(sizeof(FVAL_BreakableStages) == 0x000018, "Wrong size on FVAL_BreakableStages");
static_assert(offsetof(FVAL_BreakableStages, HitsUntilNextStage) == 0x000000, "Member 'FVAL_BreakableStages::HitsUntilNextStage' has a wrong offset!");
static_assert(offsetof(FVAL_BreakableStages, bPick) == 0x000004, "Member 'FVAL_BreakableStages::bPick' has a wrong offset!");
static_assert(offsetof(FVAL_BreakableStages, bAxe) == 0x000005, "Member 'FVAL_BreakableStages::bAxe' has a wrong offset!");
static_assert(offsetof(FVAL_BreakableStages, bProjectile) == 0x000006, "Member 'FVAL_BreakableStages::bProjectile' has a wrong offset!");
static_assert(offsetof(FVAL_BreakableStages, ValidProjectiles) == 0x000008, "Member 'FVAL_BreakableStages::ValidProjectiles' has a wrong offset!");

// ScriptStruct Palia.Notification
// 0x0030 (0x0030 - 0x0000)
struct FNotification final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundToPlay;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENotificationSpecialType                      NotificationSpecialType;                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldNotificationPersist;                        // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207A[0x6];                                     // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNotification) == 0x000008, "Wrong alignment on FNotification");
static_assert(sizeof(FNotification) == 0x000030, "Wrong size on FNotification");
static_assert(offsetof(FNotification, Icon) == 0x000000, "Member 'FNotification::Icon' has a wrong offset!");
static_assert(offsetof(FNotification, Text) == 0x000008, "Member 'FNotification::Text' has a wrong offset!");
static_assert(offsetof(FNotification, SoundToPlay) == 0x000020, "Member 'FNotification::SoundToPlay' has a wrong offset!");
static_assert(offsetof(FNotification, NotificationSpecialType) == 0x000028, "Member 'FNotification::NotificationSpecialType' has a wrong offset!");
static_assert(offsetof(FNotification, bShouldNotificationPersist) == 0x000029, "Member 'FNotification::bShouldNotificationPersist' has a wrong offset!");

// ScriptStruct Palia.Recipe_RequireItem
// 0x0018 (0x0018 - 0x0000)
struct FRecipe_RequireItem final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipe_RequireItem) == 0x000008, "Wrong alignment on FRecipe_RequireItem");
static_assert(sizeof(FRecipe_RequireItem) == 0x000018, "Wrong size on FRecipe_RequireItem");
static_assert(offsetof(FRecipe_RequireItem, ItemType) == 0x000000, "Member 'FRecipe_RequireItem::ItemType' has a wrong offset!");
static_assert(offsetof(FRecipe_RequireItem, GameplayTag) == 0x000008, "Member 'FRecipe_RequireItem::GameplayTag' has a wrong offset!");
static_assert(offsetof(FRecipe_RequireItem, ItemAmount) == 0x000010, "Member 'FRecipe_RequireItem::ItemAmount' has a wrong offset!");

// ScriptStruct Palia.Recipe_ValueBasedProduction
// 0x0010 (0x0010 - 0x0000)
struct FRecipe_ValueBasedProduction final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           ItemTypeToProduce;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldValueMultiplier;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldValueModifier;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipe_ValueBasedProduction) == 0x000008, "Wrong alignment on FRecipe_ValueBasedProduction");
static_assert(sizeof(FRecipe_ValueBasedProduction) == 0x000010, "Wrong size on FRecipe_ValueBasedProduction");
static_assert(offsetof(FRecipe_ValueBasedProduction, ItemTypeToProduce) == 0x000000, "Member 'FRecipe_ValueBasedProduction::ItemTypeToProduce' has a wrong offset!");
static_assert(offsetof(FRecipe_ValueBasedProduction, GoldValueMultiplier) == 0x000008, "Member 'FRecipe_ValueBasedProduction::GoldValueMultiplier' has a wrong offset!");
static_assert(offsetof(FRecipe_ValueBasedProduction, GoldValueModifier) == 0x00000C, "Member 'FRecipe_ValueBasedProduction::GoldValueModifier' has a wrong offset!");

// ScriptStruct Palia.SkillPointRequirement
// 0x0008 (0x0008 - 0x0000)
struct FSkillPointRequirement final
{
public:
	ESkillType                                    SkillType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelMin;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillPointRequirement) == 0x000004, "Wrong alignment on FSkillPointRequirement");
static_assert(sizeof(FSkillPointRequirement) == 0x000008, "Wrong size on FSkillPointRequirement");
static_assert(offsetof(FSkillPointRequirement, SkillType) == 0x000000, "Member 'FSkillPointRequirement::SkillType' has a wrong offset!");
static_assert(offsetof(FSkillPointRequirement, LevelMin) == 0x000004, "Member 'FSkillPointRequirement::LevelMin' has a wrong offset!");

// ScriptStruct Palia.Recipe_RequireInteraction
// 0x0018 (0x0018 - 0x0000)
struct FRecipe_RequireInteraction final
{
public:
	class URecipeInteractionConfig*               Config;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionTimeSecs;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredSuccessCount;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerMarkerMovementEasingFuncBlendExp;            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207D[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipe_RequireInteraction) == 0x000008, "Wrong alignment on FRecipe_RequireInteraction");
static_assert(sizeof(FRecipe_RequireInteraction) == 0x000018, "Wrong size on FRecipe_RequireInteraction");
static_assert(offsetof(FRecipe_RequireInteraction, Config) == 0x000000, "Member 'FRecipe_RequireInteraction::Config' has a wrong offset!");
static_assert(offsetof(FRecipe_RequireInteraction, InteractionTimeSecs) == 0x000008, "Member 'FRecipe_RequireInteraction::InteractionTimeSecs' has a wrong offset!");
static_assert(offsetof(FRecipe_RequireInteraction, RequiredSuccessCount) == 0x00000C, "Member 'FRecipe_RequireInteraction::RequiredSuccessCount' has a wrong offset!");
static_assert(offsetof(FRecipe_RequireInteraction, PlayerMarkerMovementEasingFuncBlendExp) == 0x000010, "Member 'FRecipe_RequireInteraction::PlayerMarkerMovementEasingFuncBlendExp' has a wrong offset!");

// ScriptStruct Palia.RecipeStepConfig
// 0x0058 (0x0058 - 0x0000)
struct FRecipeStepConfig final
{
public:
	ERecipeStepType                               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRecipe_RequireItem                    Type_Item;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FRecipe_RequireInteraction             Type_Interaction;                                  // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	ERecipeStepStartType                          StartType;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207F[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ParentStep;                                        // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 StepIndices;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         RevealTime;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequestExpirationTime;                             // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipeStepConfig) == 0x000008, "Wrong alignment on FRecipeStepConfig");
static_assert(sizeof(FRecipeStepConfig) == 0x000058, "Wrong size on FRecipeStepConfig");
static_assert(offsetof(FRecipeStepConfig, Type) == 0x000000, "Member 'FRecipeStepConfig::Type' has a wrong offset!");
static_assert(offsetof(FRecipeStepConfig, Type_Item) == 0x000008, "Member 'FRecipeStepConfig::Type_Item' has a wrong offset!");
static_assert(offsetof(FRecipeStepConfig, Type_Interaction) == 0x000020, "Member 'FRecipeStepConfig::Type_Interaction' has a wrong offset!");
static_assert(offsetof(FRecipeStepConfig, StartType) == 0x000038, "Member 'FRecipeStepConfig::StartType' has a wrong offset!");
static_assert(offsetof(FRecipeStepConfig, ParentStep) == 0x00003C, "Member 'FRecipeStepConfig::ParentStep' has a wrong offset!");
static_assert(offsetof(FRecipeStepConfig, StepIndices) == 0x000040, "Member 'FRecipeStepConfig::StepIndices' has a wrong offset!");
static_assert(offsetof(FRecipeStepConfig, RevealTime) == 0x000050, "Member 'FRecipeStepConfig::RevealTime' has a wrong offset!");
static_assert(offsetof(FRecipeStepConfig, RequestExpirationTime) == 0x000054, "Member 'FRecipeStepConfig::RequestExpirationTime' has a wrong offset!");

// ScriptStruct Palia.CraftingVfxBundleConfig
// 0x00A0 (0x00A8 - 0x0008)
struct FCraftingVfxBundleConfig final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UParticleSystem>         Bundle_Start;                                      // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Bundle_Cooking;                                    // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Bundle_Burned;                                     // 0x0058(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         Bundle_Cooked;                                     // 0x0080(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingVfxBundleConfig) == 0x000008, "Wrong alignment on FCraftingVfxBundleConfig");
static_assert(sizeof(FCraftingVfxBundleConfig) == 0x0000A8, "Wrong size on FCraftingVfxBundleConfig");
static_assert(offsetof(FCraftingVfxBundleConfig, Bundle_Start) == 0x000008, "Member 'FCraftingVfxBundleConfig::Bundle_Start' has a wrong offset!");
static_assert(offsetof(FCraftingVfxBundleConfig, Bundle_Cooking) == 0x000030, "Member 'FCraftingVfxBundleConfig::Bundle_Cooking' has a wrong offset!");
static_assert(offsetof(FCraftingVfxBundleConfig, Bundle_Burned) == 0x000058, "Member 'FCraftingVfxBundleConfig::Bundle_Burned' has a wrong offset!");
static_assert(offsetof(FCraftingVfxBundleConfig, Bundle_Cooked) == 0x000080, "Member 'FCraftingVfxBundleConfig::Bundle_Cooked' has a wrong offset!");

// ScriptStruct Palia.RecipePropConfigs
// 0x0158 (0x0158 - 0x0000)
struct FRecipePropConfigs final
{
public:
	TSoftClassPtr<class UClass>                   Prop_Start;                                        // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Prop_Cooking;                                      // 0x0028(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Prop_Burned;                                       // 0x0050(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Prop_Cooked;                                       // 0x0078(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    VfxBundle;                                         // 0x00A0(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCraftingVfxBundleConfig               VfxOverride;                                       // 0x00B0(0x00A8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipePropConfigs) == 0x000008, "Wrong alignment on FRecipePropConfigs");
static_assert(sizeof(FRecipePropConfigs) == 0x000158, "Wrong size on FRecipePropConfigs");
static_assert(offsetof(FRecipePropConfigs, Prop_Start) == 0x000000, "Member 'FRecipePropConfigs::Prop_Start' has a wrong offset!");
static_assert(offsetof(FRecipePropConfigs, Prop_Cooking) == 0x000028, "Member 'FRecipePropConfigs::Prop_Cooking' has a wrong offset!");
static_assert(offsetof(FRecipePropConfigs, Prop_Burned) == 0x000050, "Member 'FRecipePropConfigs::Prop_Burned' has a wrong offset!");
static_assert(offsetof(FRecipePropConfigs, Prop_Cooked) == 0x000078, "Member 'FRecipePropConfigs::Prop_Cooked' has a wrong offset!");
static_assert(offsetof(FRecipePropConfigs, VfxBundle) == 0x0000A0, "Member 'FRecipePropConfigs::VfxBundle' has a wrong offset!");
static_assert(offsetof(FRecipePropConfigs, VfxOverride) == 0x0000B0, "Member 'FRecipePropConfigs::VfxOverride' has a wrong offset!");

// ScriptStruct Palia.RecipeConfig
// 0x0238 (0x0240 - 0x0008)
struct FRecipeConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2080[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            AllowedCrafters;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CraftTime;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2081[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRecipe_RequireItem>            SimpleIngredients;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         TimeLimit;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2082[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVAL_ItemTypeDefinitionAsset*           ItemTypeToProduce;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    AdditionalLoot;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ItemAmountToProduce;                               // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2083[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRecipe_ValueBasedProduction>   ValueBasedProduction;                              // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSkillPointRequirement>         RewardAtSkillLevels;                               // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardSubRecipes;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SkillXpEarnings;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FRecipePropConfigs                     PropConfigs;                                       // 0x00C0(0x0158)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FRecipeStepConfig>              Requests;                                          // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bSubRecipe;                                        // 0x0228(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyAwardLootOnFirstCraft;                        // 0x0229(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInCarousel;                                   // 0x022A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisibleInRecipeList;                               // 0x022B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x022C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysAvailable;                                   // 0x022D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2084[0x2];                                     // 0x022E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    SellValueConfig;                                   // 0x0230(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipeConfig) == 0x000008, "Wrong alignment on FRecipeConfig");
static_assert(sizeof(FRecipeConfig) == 0x000240, "Wrong size on FRecipeConfig");
static_assert(offsetof(FRecipeConfig, PersistId) == 0x000008, "Member 'FRecipeConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, Tags) == 0x000010, "Member 'FRecipeConfig::Tags' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, AllowedCrafters) == 0x000030, "Member 'FRecipeConfig::AllowedCrafters' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, CraftTime) == 0x000040, "Member 'FRecipeConfig::CraftTime' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, SimpleIngredients) == 0x000048, "Member 'FRecipeConfig::SimpleIngredients' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, TimeLimit) == 0x000058, "Member 'FRecipeConfig::TimeLimit' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, ItemTypeToProduce) == 0x000060, "Member 'FRecipeConfig::ItemTypeToProduce' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, AdditionalLoot) == 0x000068, "Member 'FRecipeConfig::AdditionalLoot' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, ItemAmountToProduce) == 0x000078, "Member 'FRecipeConfig::ItemAmountToProduce' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, ValueBasedProduction) == 0x000080, "Member 'FRecipeConfig::ValueBasedProduction' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, RewardAtSkillLevels) == 0x000090, "Member 'FRecipeConfig::RewardAtSkillLevels' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, RewardSubRecipes) == 0x0000A0, "Member 'FRecipeConfig::RewardSubRecipes' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, SkillXpEarnings) == 0x0000B0, "Member 'FRecipeConfig::SkillXpEarnings' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, PropConfigs) == 0x0000C0, "Member 'FRecipeConfig::PropConfigs' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, Requests) == 0x000218, "Member 'FRecipeConfig::Requests' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, bSubRecipe) == 0x000228, "Member 'FRecipeConfig::bSubRecipe' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, bOnlyAwardLootOnFirstCraft) == 0x000229, "Member 'FRecipeConfig::bOnlyAwardLootOnFirstCraft' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, bShowInCarousel) == 0x00022A, "Member 'FRecipeConfig::bShowInCarousel' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, VisibleInRecipeList) == 0x00022B, "Member 'FRecipeConfig::VisibleInRecipeList' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, Enabled) == 0x00022C, "Member 'FRecipeConfig::Enabled' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, AlwaysAvailable) == 0x00022D, "Member 'FRecipeConfig::AlwaysAvailable' has a wrong offset!");
static_assert(offsetof(FRecipeConfig, SellValueConfig) == 0x000230, "Member 'FRecipeConfig::SellValueConfig' has a wrong offset!");

// ScriptStruct Palia.DefaultVariantMaterialAssignment
// 0x0018 (0x0018 - 0x0000)
struct FDefaultVariantMaterialAssignment final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultVariantMaterialAssignment) == 0x000008, "Wrong alignment on FDefaultVariantMaterialAssignment");
static_assert(sizeof(FDefaultVariantMaterialAssignment) == 0x000018, "Wrong size on FDefaultVariantMaterialAssignment");
static_assert(offsetof(FDefaultVariantMaterialAssignment, Primitive) == 0x000000, "Member 'FDefaultVariantMaterialAssignment::Primitive' has a wrong offset!");
static_assert(offsetof(FDefaultVariantMaterialAssignment, Materials) == 0x000008, "Member 'FDefaultVariantMaterialAssignment::Materials' has a wrong offset!");

// ScriptStruct Palia.VillagerGiftHistoryPersist
// 0x0018 (0x0018 - 0x0000)
struct FVillagerGiftHistoryPersist final
{
public:
	int32                                         VillagerCoreId;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemPersistId;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LastGiftedMs;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssociatedPreferenceVersion;                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2085[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVillagerGiftHistoryPersist) == 0x000008, "Wrong alignment on FVillagerGiftHistoryPersist");
static_assert(sizeof(FVillagerGiftHistoryPersist) == 0x000018, "Wrong size on FVillagerGiftHistoryPersist");
static_assert(offsetof(FVillagerGiftHistoryPersist, VillagerCoreId) == 0x000000, "Member 'FVillagerGiftHistoryPersist::VillagerCoreId' has a wrong offset!");
static_assert(offsetof(FVillagerGiftHistoryPersist, ItemPersistId) == 0x000004, "Member 'FVillagerGiftHistoryPersist::ItemPersistId' has a wrong offset!");
static_assert(offsetof(FVillagerGiftHistoryPersist, LastGiftedMs) == 0x000008, "Member 'FVillagerGiftHistoryPersist::LastGiftedMs' has a wrong offset!");
static_assert(offsetof(FVillagerGiftHistoryPersist, AssociatedPreferenceVersion) == 0x000010, "Member 'FVillagerGiftHistoryPersist::AssociatedPreferenceVersion' has a wrong offset!");

// ScriptStruct Palia.GiftHistoryPersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FGiftHistoryPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FVillagerGiftHistoryPersist>    History;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGiftHistoryPersistBlock) == 0x000008, "Wrong alignment on FGiftHistoryPersistBlock");
static_assert(sizeof(FGiftHistoryPersistBlock) == 0x000050, "Wrong size on FGiftHistoryPersistBlock");
static_assert(offsetof(FGiftHistoryPersistBlock, History) == 0x000040, "Member 'FGiftHistoryPersistBlock::History' has a wrong offset!");

// ScriptStruct Palia.VAL_RenderStudioLevelData
// 0x00D0 (0x00D0 - 0x0000)
struct FVAL_RenderStudioLevelData final
{
public:
	TSoftObjectPtr<class UWorld>                  MainLevel;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelStreamingDynamic*                 StreamingMainLevel;                                // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UWorld>> SubLevels;                                         // 0x0030(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, class ULevelStreamingDynamic*> StreamingSubLevels;                                // 0x0080(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_RenderStudioLevelData) == 0x000008, "Wrong alignment on FVAL_RenderStudioLevelData");
static_assert(sizeof(FVAL_RenderStudioLevelData) == 0x0000D0, "Wrong size on FVAL_RenderStudioLevelData");
static_assert(offsetof(FVAL_RenderStudioLevelData, MainLevel) == 0x000000, "Member 'FVAL_RenderStudioLevelData::MainLevel' has a wrong offset!");
static_assert(offsetof(FVAL_RenderStudioLevelData, StreamingMainLevel) == 0x000028, "Member 'FVAL_RenderStudioLevelData::StreamingMainLevel' has a wrong offset!");
static_assert(offsetof(FVAL_RenderStudioLevelData, SubLevels) == 0x000030, "Member 'FVAL_RenderStudioLevelData::SubLevels' has a wrong offset!");
static_assert(offsetof(FVAL_RenderStudioLevelData, StreamingSubLevels) == 0x000080, "Member 'FVAL_RenderStudioLevelData::StreamingSubLevels' has a wrong offset!");

// ScriptStruct Palia.LevelerRewardsGranted
// 0x0020 (0x0020 - 0x0000)
struct FLevelerRewardsGranted final
{
public:
	struct FGuid                                  Owner;                                             // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Levels;                                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelerRewardsGranted) == 0x000008, "Wrong alignment on FLevelerRewardsGranted");
static_assert(sizeof(FLevelerRewardsGranted) == 0x000020, "Wrong size on FLevelerRewardsGranted");
static_assert(offsetof(FLevelerRewardsGranted, Owner) == 0x000000, "Member 'FLevelerRewardsGranted::Owner' has a wrong offset!");
static_assert(offsetof(FLevelerRewardsGranted, Levels) == 0x000010, "Member 'FLevelerRewardsGranted::Levels' has a wrong offset!");

// ScriptStruct Palia.VALDATA_PlayerGuildQuestPersist
// 0x0014 (0x0014 - 0x0000)
struct FVALDATA_PlayerGuildQuestPersist final
{
public:
	bool                                          bIsPinned;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2086[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PersistGuid;                                       // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALDATA_PlayerGuildQuestPersist) == 0x000004, "Wrong alignment on FVALDATA_PlayerGuildQuestPersist");
static_assert(sizeof(FVALDATA_PlayerGuildQuestPersist) == 0x000014, "Wrong size on FVALDATA_PlayerGuildQuestPersist");
static_assert(offsetof(FVALDATA_PlayerGuildQuestPersist, bIsPinned) == 0x000000, "Member 'FVALDATA_PlayerGuildQuestPersist::bIsPinned' has a wrong offset!");
static_assert(offsetof(FVALDATA_PlayerGuildQuestPersist, PersistGuid) == 0x000004, "Member 'FVALDATA_PlayerGuildQuestPersist::PersistGuid' has a wrong offset!");

// ScriptStruct Palia.VAL_StaticBoundaryEntry
// 0x0020 (0x0020 - 0x0000)
struct FVAL_StaticBoundaryEntry final
{
public:
	bool                                          bBlendingIn;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendingOut;                                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlagForRemoval;                                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2087[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendDelta;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendDuration;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriorityIndex;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVAL_EnvironmentBoundary*               Boundary;                                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_EnvironmentProfile*                StaticProfile;                                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_StaticBoundaryEntry) == 0x000008, "Wrong alignment on FVAL_StaticBoundaryEntry");
static_assert(sizeof(FVAL_StaticBoundaryEntry) == 0x000020, "Wrong size on FVAL_StaticBoundaryEntry");
static_assert(offsetof(FVAL_StaticBoundaryEntry, bBlendingIn) == 0x000000, "Member 'FVAL_StaticBoundaryEntry::bBlendingIn' has a wrong offset!");
static_assert(offsetof(FVAL_StaticBoundaryEntry, bBlendingOut) == 0x000001, "Member 'FVAL_StaticBoundaryEntry::bBlendingOut' has a wrong offset!");
static_assert(offsetof(FVAL_StaticBoundaryEntry, bFlagForRemoval) == 0x000002, "Member 'FVAL_StaticBoundaryEntry::bFlagForRemoval' has a wrong offset!");
static_assert(offsetof(FVAL_StaticBoundaryEntry, BlendDelta) == 0x000004, "Member 'FVAL_StaticBoundaryEntry::BlendDelta' has a wrong offset!");
static_assert(offsetof(FVAL_StaticBoundaryEntry, BlendDuration) == 0x000008, "Member 'FVAL_StaticBoundaryEntry::BlendDuration' has a wrong offset!");
static_assert(offsetof(FVAL_StaticBoundaryEntry, PriorityIndex) == 0x00000C, "Member 'FVAL_StaticBoundaryEntry::PriorityIndex' has a wrong offset!");
static_assert(offsetof(FVAL_StaticBoundaryEntry, Boundary) == 0x000010, "Member 'FVAL_StaticBoundaryEntry::Boundary' has a wrong offset!");
static_assert(offsetof(FVAL_StaticBoundaryEntry, StaticProfile) == 0x000018, "Member 'FVAL_StaticBoundaryEntry::StaticProfile' has a wrong offset!");

// ScriptStruct Palia.VAL_GameplayEventListenerId
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FVAL_GameplayEventListenerId final
{
public:
	uint8                                         Pad_2088[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_GameplayEventListenerId) == 0x000008, "Wrong alignment on FVAL_GameplayEventListenerId");
static_assert(sizeof(FVAL_GameplayEventListenerId) == 0x000010, "Wrong size on FVAL_GameplayEventListenerId");

// ScriptStruct Palia.GardenPlantPersist
// 0x00E0 (0x00E0 - 0x0000)
struct FGardenPlantPersist final
{
public:
	int32                                         PlantId;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DayPlanted;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRepeatHarvests;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasEverBeenWatered;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighQualitySeed;                                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2089[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DayLastWatered;                                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DaysOfGrowthRecorded;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208A[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OccupiedTiles;                                     // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         QualityFertilizerGrowths;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HarvestBoostGrowths;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentWater;                                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208B[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            FertilizerBuffGrowths;                             // 0x0040(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, int32>                            AdjacencyBuffGrowths;                              // 0x0090(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardenPlantPersist) == 0x000008, "Wrong alignment on FGardenPlantPersist");
static_assert(sizeof(FGardenPlantPersist) == 0x0000E0, "Wrong size on FGardenPlantPersist");
static_assert(offsetof(FGardenPlantPersist, PlantId) == 0x000000, "Member 'FGardenPlantPersist::PlantId' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, ItemType) == 0x000004, "Member 'FGardenPlantPersist::ItemType' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, DayPlanted) == 0x000008, "Member 'FGardenPlantPersist::DayPlanted' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, NumRepeatHarvests) == 0x00000C, "Member 'FGardenPlantPersist::NumRepeatHarvests' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, bHasEverBeenWatered) == 0x000010, "Member 'FGardenPlantPersist::bHasEverBeenWatered' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, bHighQualitySeed) == 0x000011, "Member 'FGardenPlantPersist::bHighQualitySeed' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, DayLastWatered) == 0x000014, "Member 'FGardenPlantPersist::DayLastWatered' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, DaysOfGrowthRecorded) == 0x000018, "Member 'FGardenPlantPersist::DaysOfGrowthRecorded' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, OccupiedTiles) == 0x000020, "Member 'FGardenPlantPersist::OccupiedTiles' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, QualityFertilizerGrowths) == 0x000030, "Member 'FGardenPlantPersist::QualityFertilizerGrowths' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, HarvestBoostGrowths) == 0x000034, "Member 'FGardenPlantPersist::HarvestBoostGrowths' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, CurrentWater) == 0x000038, "Member 'FGardenPlantPersist::CurrentWater' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, FertilizerBuffGrowths) == 0x000040, "Member 'FGardenPlantPersist::FertilizerBuffGrowths' has a wrong offset!");
static_assert(offsetof(FGardenPlantPersist, AdjacencyBuffGrowths) == 0x000090, "Member 'FGardenPlantPersist::AdjacencyBuffGrowths' has a wrong offset!");

// ScriptStruct Palia.GardenManagementPersistBlock
// 0x0028 (0x0068 - 0x0040)
struct FGardenManagementPersistBlock final : public FS6PersistBlock
{
public:
	int32                                         UnprocessedGrowthPhases;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnprocessedWeedPoints;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DaysOfGrowthRecorded;                              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextInstanceId;                                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugDaysTimeWarped;                               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208C[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGardenPlantPersist>            Plants;                                            // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardenManagementPersistBlock) == 0x000008, "Wrong alignment on FGardenManagementPersistBlock");
static_assert(sizeof(FGardenManagementPersistBlock) == 0x000068, "Wrong size on FGardenManagementPersistBlock");
static_assert(offsetof(FGardenManagementPersistBlock, UnprocessedGrowthPhases) == 0x000040, "Member 'FGardenManagementPersistBlock::UnprocessedGrowthPhases' has a wrong offset!");
static_assert(offsetof(FGardenManagementPersistBlock, UnprocessedWeedPoints) == 0x000044, "Member 'FGardenManagementPersistBlock::UnprocessedWeedPoints' has a wrong offset!");
static_assert(offsetof(FGardenManagementPersistBlock, DaysOfGrowthRecorded) == 0x000048, "Member 'FGardenManagementPersistBlock::DaysOfGrowthRecorded' has a wrong offset!");
static_assert(offsetof(FGardenManagementPersistBlock, NextInstanceId) == 0x00004C, "Member 'FGardenManagementPersistBlock::NextInstanceId' has a wrong offset!");
static_assert(offsetof(FGardenManagementPersistBlock, DebugDaysTimeWarped) == 0x000050, "Member 'FGardenManagementPersistBlock::DebugDaysTimeWarped' has a wrong offset!");
static_assert(offsetof(FGardenManagementPersistBlock, Plants) == 0x000058, "Member 'FGardenManagementPersistBlock::Plants' has a wrong offset!");

// ScriptStruct Palia.BagSlotLocation
// 0x0008 (0x0008 - 0x0000)
struct FBagSlotLocation final
{
public:
	int32                                         BagIndex;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBagSlotLocation) == 0x000004, "Wrong alignment on FBagSlotLocation");
static_assert(sizeof(FBagSlotLocation) == 0x000008, "Wrong size on FBagSlotLocation");
static_assert(offsetof(FBagSlotLocation, BagIndex) == 0x000000, "Member 'FBagSlotLocation::BagIndex' has a wrong offset!");
static_assert(offsetof(FBagSlotLocation, SlotIndex) == 0x000004, "Member 'FBagSlotLocation::SlotIndex' has a wrong offset!");

// ScriptStruct Palia.VitalsChangeContext
// 0x0030 (0x0030 - 0x0000)
struct FVitalsChangeContext final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVitalsChangeContext) == 0x000008, "Wrong alignment on FVitalsChangeContext");
static_assert(sizeof(FVitalsChangeContext) == 0x000030, "Wrong size on FVitalsChangeContext");
static_assert(offsetof(FVitalsChangeContext, Actor) == 0x000000, "Member 'FVitalsChangeContext::Actor' has a wrong offset!");
static_assert(offsetof(FVitalsChangeContext, ItemType) == 0x000008, "Member 'FVitalsChangeContext::ItemType' has a wrong offset!");

// ScriptStruct Palia.VitalsChange
// 0x0040 (0x0040 - 0x0000)
struct FVitalsChange final
{
public:
	EVitalType                                    VitalType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AmountChanged;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalChangeFlags                             Flags;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVitalsChangeContext                   Context;                                           // 0x0010(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVitalsChange) == 0x000008, "Wrong alignment on FVitalsChange");
static_assert(sizeof(FVitalsChange) == 0x000040, "Wrong size on FVitalsChange");
static_assert(offsetof(FVitalsChange, VitalType) == 0x000000, "Member 'FVitalsChange::VitalType' has a wrong offset!");
static_assert(offsetof(FVitalsChange, AmountChanged) == 0x000004, "Member 'FVitalsChange::AmountChanged' has a wrong offset!");
static_assert(offsetof(FVitalsChange, Flags) == 0x000008, "Member 'FVitalsChange::Flags' has a wrong offset!");
static_assert(offsetof(FVitalsChange, Context) == 0x000010, "Member 'FVitalsChange::Context' has a wrong offset!");

// ScriptStruct Palia.VAL_ServerMaintenanceData
// 0x0010 (0x0010 - 0x0000)
struct FVAL_ServerMaintenanceData final
{
public:
	struct FDateTime                              MaintenanceStartTimestamp;                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ServiceRestoreApproximateTimestamp;                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_ServerMaintenanceData) == 0x000008, "Wrong alignment on FVAL_ServerMaintenanceData");
static_assert(sizeof(FVAL_ServerMaintenanceData) == 0x000010, "Wrong size on FVAL_ServerMaintenanceData");
static_assert(offsetof(FVAL_ServerMaintenanceData, MaintenanceStartTimestamp) == 0x000000, "Member 'FVAL_ServerMaintenanceData::MaintenanceStartTimestamp' has a wrong offset!");
static_assert(offsetof(FVAL_ServerMaintenanceData, ServiceRestoreApproximateTimestamp) == 0x000008, "Member 'FVAL_ServerMaintenanceData::ServiceRestoreApproximateTimestamp' has a wrong offset!");

// ScriptStruct Palia.VALDATA_PlayerGuildQuestPersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FVALDATA_PlayerGuildQuestPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FVALDATA_PlayerGuildQuestPersist> GuildQuests;                                       // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALDATA_PlayerGuildQuestPersistBlock) == 0x000008, "Wrong alignment on FVALDATA_PlayerGuildQuestPersistBlock");
static_assert(sizeof(FVALDATA_PlayerGuildQuestPersistBlock) == 0x000050, "Wrong size on FVALDATA_PlayerGuildQuestPersistBlock");
static_assert(offsetof(FVALDATA_PlayerGuildQuestPersistBlock, GuildQuests) == 0x000040, "Member 'FVALDATA_PlayerGuildQuestPersistBlock::GuildQuests' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_BodyData
// 0x0010 (0x0010 - 0x0000)
struct FVAL_CharacterCustomization_BodyData final
{
public:
	float                                         HeightScalar;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThicknessScalar;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenderExpressionScalar;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MuscularExpressionScalar;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_BodyData) == 0x000004, "Wrong alignment on FVAL_CharacterCustomization_BodyData");
static_assert(sizeof(FVAL_CharacterCustomization_BodyData) == 0x000010, "Wrong size on FVAL_CharacterCustomization_BodyData");
static_assert(offsetof(FVAL_CharacterCustomization_BodyData, HeightScalar) == 0x000000, "Member 'FVAL_CharacterCustomization_BodyData::HeightScalar' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_BodyData, ThicknessScalar) == 0x000004, "Member 'FVAL_CharacterCustomization_BodyData::ThicknessScalar' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_BodyData, GenderExpressionScalar) == 0x000008, "Member 'FVAL_CharacterCustomization_BodyData::GenderExpressionScalar' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_BodyData, MuscularExpressionScalar) == 0x00000C, "Member 'FVAL_CharacterCustomization_BodyData::MuscularExpressionScalar' has a wrong offset!");

// ScriptStruct Palia.VAL_StaticBoundaries
// 0x0010 (0x0010 - 0x0000)
struct FVAL_StaticBoundaries final
{
public:
	TArray<struct FVAL_StaticBoundaryEntry>       StaticBoundaries;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_StaticBoundaries) == 0x000008, "Wrong alignment on FVAL_StaticBoundaries");
static_assert(sizeof(FVAL_StaticBoundaries) == 0x000010, "Wrong size on FVAL_StaticBoundaries");
static_assert(offsetof(FVAL_StaticBoundaries, StaticBoundaries) == 0x000000, "Member 'FVAL_StaticBoundaries::StaticBoundaries' has a wrong offset!");

// ScriptStruct Palia.SlimDialogueHistoryEntry
// 0x0010 (0x0010 - 0x0000)
struct FSlimDialogueHistoryEntry final
{
public:
	int64                                         DialoguePersistId;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DialogueRepetitionNumber;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_208F[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlimDialogueHistoryEntry) == 0x000008, "Wrong alignment on FSlimDialogueHistoryEntry");
static_assert(sizeof(FSlimDialogueHistoryEntry) == 0x000010, "Wrong size on FSlimDialogueHistoryEntry");
static_assert(offsetof(FSlimDialogueHistoryEntry, DialoguePersistId) == 0x000000, "Member 'FSlimDialogueHistoryEntry::DialoguePersistId' has a wrong offset!");
static_assert(offsetof(FSlimDialogueHistoryEntry, DialogueRepetitionNumber) == 0x000008, "Member 'FSlimDialogueHistoryEntry::DialogueRepetitionNumber' has a wrong offset!");

// ScriptStruct Palia.HouseInventoryItem
// 0x0008 (0x0008 - 0x0000)
struct FHouseInventoryItem final
{
public:
	int32                                         PersistId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHouseInventoryItem) == 0x000004, "Wrong alignment on FHouseInventoryItem");
static_assert(sizeof(FHouseInventoryItem) == 0x000008, "Wrong size on FHouseInventoryItem");
static_assert(offsetof(FHouseInventoryItem, PersistId) == 0x000000, "Member 'FHouseInventoryItem::PersistId' has a wrong offset!");
static_assert(offsetof(FHouseInventoryItem, Level) == 0x000004, "Member 'FHouseInventoryItem::Level' has a wrong offset!");

// ScriptStruct Palia.HouseInventoryData
// 0x0010 (0x0010 - 0x0000)
struct FHouseInventoryData final
{
public:
	TArray<struct FHouseInventoryItem>            Houses;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHouseInventoryData) == 0x000008, "Wrong alignment on FHouseInventoryData");
static_assert(sizeof(FHouseInventoryData) == 0x000010, "Wrong size on FHouseInventoryData");
static_assert(offsetof(FHouseInventoryData, Houses) == 0x000000, "Member 'FHouseInventoryData::Houses' has a wrong offset!");

// ScriptStruct Palia.VAL_AsyncMessageKickPlayer
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FVAL_AsyncMessageKickPlayer final
{
public:
	uint8                                         Pad_2090[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_AsyncMessageKickPlayer) == 0x000004, "Wrong alignment on FVAL_AsyncMessageKickPlayer");
static_assert(sizeof(FVAL_AsyncMessageKickPlayer) == 0x000020, "Wrong size on FVAL_AsyncMessageKickPlayer");

// ScriptStruct Palia.PersistActorsToDestroyQueue_List
// 0x0010 (0x0010 - 0x0000)
struct FPersistActorsToDestroyQueue_List final
{
public:
	TArray<class UPersistComponent*>              Pending;                                           // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersistActorsToDestroyQueue_List) == 0x000008, "Wrong alignment on FPersistActorsToDestroyQueue_List");
static_assert(sizeof(FPersistActorsToDestroyQueue_List) == 0x000010, "Wrong size on FPersistActorsToDestroyQueue_List");
static_assert(offsetof(FPersistActorsToDestroyQueue_List, Pending) == 0x000000, "Member 'FPersistActorsToDestroyQueue_List::Pending' has a wrong offset!");

// ScriptStruct Palia.PersistActorsToDestroyQueue
// 0x0050 (0x0050 - 0x0000)
struct FPersistActorsToDestroyQueue final
{
public:
	TMap<class FString, struct FPersistActorsToDestroyQueue_List> Queues;                                            // 0x0000(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersistActorsToDestroyQueue) == 0x000008, "Wrong alignment on FPersistActorsToDestroyQueue");
static_assert(sizeof(FPersistActorsToDestroyQueue) == 0x000050, "Wrong size on FPersistActorsToDestroyQueue");
static_assert(offsetof(FPersistActorsToDestroyQueue, Queues) == 0x000000, "Member 'FPersistActorsToDestroyQueue::Queues' has a wrong offset!");

// ScriptStruct Palia.PlaceableAlterationsPersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FPlaceableAlterationsPersistBlock final : public FS6PersistBlock
{
public:
	TArray<int32>                                 SelectedAlterations;                               // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableAlterationsPersistBlock) == 0x000008, "Wrong alignment on FPlaceableAlterationsPersistBlock");
static_assert(sizeof(FPlaceableAlterationsPersistBlock) == 0x000050, "Wrong size on FPlaceableAlterationsPersistBlock");
static_assert(offsetof(FPlaceableAlterationsPersistBlock, SelectedAlterations) == 0x000040, "Member 'FPlaceableAlterationsPersistBlock::SelectedAlterations' has a wrong offset!");

// ScriptStruct Palia.TravelDestination
// 0x0018 (0x0018 - 0x0000)
struct FTravelDestination final
{
public:
	ETravelDestinationType                        Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2091[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTravelDestination) == 0x000008, "Wrong alignment on FTravelDestination");
static_assert(sizeof(FTravelDestination) == 0x000018, "Wrong size on FTravelDestination");
static_assert(offsetof(FTravelDestination, Type) == 0x000000, "Member 'FTravelDestination::Type' has a wrong offset!");
static_assert(offsetof(FTravelDestination, ID) == 0x000008, "Member 'FTravelDestination::ID' has a wrong offset!");

// ScriptStruct Palia.KickedTicket
// 0x0020 (0x0020 - 0x0000)
struct FKickedTicket final
{
public:
	struct FGuid                                  KickedCharacterId;                                 // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         KickedStartTime;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         KickDuration;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKickedTicket) == 0x000008, "Wrong alignment on FKickedTicket");
static_assert(sizeof(FKickedTicket) == 0x000020, "Wrong size on FKickedTicket");
static_assert(offsetof(FKickedTicket, KickedCharacterId) == 0x000000, "Member 'FKickedTicket::KickedCharacterId' has a wrong offset!");
static_assert(offsetof(FKickedTicket, KickedStartTime) == 0x000010, "Member 'FKickedTicket::KickedStartTime' has a wrong offset!");
static_assert(offsetof(FKickedTicket, KickDuration) == 0x000018, "Member 'FKickedTicket::KickDuration' has a wrong offset!");

// ScriptStruct Palia.HouseOwnershipTitlePersist
// 0x0028 (0x0028 - 0x0000)
struct FHouseOwnershipTitlePersist final
{
public:
	struct FGuid                                  HouseId;                                           // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OwnerId;                                           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHousingPermissionLevel                       OwnershipLevel;                                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2092[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHouseOwnershipTitlePersist) == 0x000004, "Wrong alignment on FHouseOwnershipTitlePersist");
static_assert(sizeof(FHouseOwnershipTitlePersist) == 0x000028, "Wrong size on FHouseOwnershipTitlePersist");
static_assert(offsetof(FHouseOwnershipTitlePersist, HouseId) == 0x000000, "Member 'FHouseOwnershipTitlePersist::HouseId' has a wrong offset!");
static_assert(offsetof(FHouseOwnershipTitlePersist, OwnerId) == 0x000010, "Member 'FHouseOwnershipTitlePersist::OwnerId' has a wrong offset!");
static_assert(offsetof(FHouseOwnershipTitlePersist, OwnershipLevel) == 0x000020, "Member 'FHouseOwnershipTitlePersist::OwnershipLevel' has a wrong offset!");
static_assert(offsetof(FHouseOwnershipTitlePersist, Slot) == 0x000024, "Member 'FHouseOwnershipTitlePersist::Slot' has a wrong offset!");

// ScriptStruct Palia.ValeriaCharacterBasePersistBlock
// 0x0120 (0x0160 - 0x0040)
struct FValeriaCharacterBasePersistBlock final : public FS6PersistBlock
{
public:
	class FString                                 ContainerHash;                                     // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2093[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        LastSavedAtMs;                                     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TimeLastLoggedOffMs;                               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         UnstuckLastUsageTime;                              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnstuckCooldownSeconds;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHouseOwnershipTitlePersist            PrimaryHome;                                       // 0x0084(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LastKnownPrimaryHousingPlotValue;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastValidLocation;                                 // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LastValidRotation;                                 // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int64                                         ReturnHomeLastUsageTime;                           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnHomeCooldownSeconds;                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEatingWhenFull;                              // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2094[0x3];                                     // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            CorrectionsApplied;                                // 0x0100(0x0050)(NativeAccessSpecifierPublic)
	int32                                         AccumulatedHarvestDaysAwayFromHousingPlot;         // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2095[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         LastPermanentUnlockVerificationTime;               // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaCharacterBasePersistBlock) == 0x000008, "Wrong alignment on FValeriaCharacterBasePersistBlock");
static_assert(sizeof(FValeriaCharacterBasePersistBlock) == 0x000160, "Wrong size on FValeriaCharacterBasePersistBlock");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, ContainerHash) == 0x000040, "Member 'FValeriaCharacterBasePersistBlock::ContainerHash' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, ItemType) == 0x000050, "Member 'FValeriaCharacterBasePersistBlock::ItemType' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, LastSavedAtMs) == 0x000058, "Member 'FValeriaCharacterBasePersistBlock::LastSavedAtMs' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, CharacterName) == 0x000060, "Member 'FValeriaCharacterBasePersistBlock::CharacterName' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, TimeLastLoggedOffMs) == 0x000070, "Member 'FValeriaCharacterBasePersistBlock::TimeLastLoggedOffMs' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, UnstuckLastUsageTime) == 0x000078, "Member 'FValeriaCharacterBasePersistBlock::UnstuckLastUsageTime' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, UnstuckCooldownSeconds) == 0x000080, "Member 'FValeriaCharacterBasePersistBlock::UnstuckCooldownSeconds' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, PrimaryHome) == 0x000084, "Member 'FValeriaCharacterBasePersistBlock::PrimaryHome' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, LastKnownPrimaryHousingPlotValue) == 0x0000AC, "Member 'FValeriaCharacterBasePersistBlock::LastKnownPrimaryHousingPlotValue' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, MapName) == 0x0000B0, "Member 'FValeriaCharacterBasePersistBlock::MapName' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, LastValidLocation) == 0x0000C0, "Member 'FValeriaCharacterBasePersistBlock::LastValidLocation' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, LastValidRotation) == 0x0000D8, "Member 'FValeriaCharacterBasePersistBlock::LastValidRotation' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, ReturnHomeLastUsageTime) == 0x0000F0, "Member 'FValeriaCharacterBasePersistBlock::ReturnHomeLastUsageTime' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, ReturnHomeCooldownSeconds) == 0x0000F8, "Member 'FValeriaCharacterBasePersistBlock::ReturnHomeCooldownSeconds' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, bAllowEatingWhenFull) == 0x0000FC, "Member 'FValeriaCharacterBasePersistBlock::bAllowEatingWhenFull' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, CorrectionsApplied) == 0x000100, "Member 'FValeriaCharacterBasePersistBlock::CorrectionsApplied' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, AccumulatedHarvestDaysAwayFromHousingPlot) == 0x000150, "Member 'FValeriaCharacterBasePersistBlock::AccumulatedHarvestDaysAwayFromHousingPlot' has a wrong offset!");
static_assert(offsetof(FValeriaCharacterBasePersistBlock, LastPermanentUnlockVerificationTime) == 0x000158, "Member 'FValeriaCharacterBasePersistBlock::LastPermanentUnlockVerificationTime' has a wrong offset!");

// ScriptStruct Palia.SkillPersist
// 0x000C (0x000C - 0x0000)
struct FSkillPersist final
{
public:
	ESkillType                                    SkillType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2096[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpGainedThisLevel;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillPersist) == 0x000004, "Wrong alignment on FSkillPersist");
static_assert(sizeof(FSkillPersist) == 0x00000C, "Wrong size on FSkillPersist");
static_assert(offsetof(FSkillPersist, SkillType) == 0x000000, "Member 'FSkillPersist::SkillType' has a wrong offset!");
static_assert(offsetof(FSkillPersist, Level) == 0x000004, "Member 'FSkillPersist::Level' has a wrong offset!");
static_assert(offsetof(FSkillPersist, XpGainedThisLevel) == 0x000008, "Member 'FSkillPersist::XpGainedThisLevel' has a wrong offset!");

// ScriptStruct Palia.SkillsPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FSkillsPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FSkillPersist>                  Skills;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESkillType                                    MostRecentlyProgressedSkill;                       // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2097[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillsPersistBlock) == 0x000008, "Wrong alignment on FSkillsPersistBlock");
static_assert(sizeof(FSkillsPersistBlock) == 0x000058, "Wrong size on FSkillsPersistBlock");
static_assert(offsetof(FSkillsPersistBlock, Skills) == 0x000040, "Member 'FSkillsPersistBlock::Skills' has a wrong offset!");
static_assert(offsetof(FSkillsPersistBlock, MostRecentlyProgressedSkill) == 0x000050, "Member 'FSkillsPersistBlock::MostRecentlyProgressedSkill' has a wrong offset!");

// ScriptStruct Palia.BuffPersist
// 0x0030 (0x0030 - 0x0000)
struct FBuffPersist final
{
public:
	struct FGuid                                  AppliedByPlayer;                                   // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffConfigId;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2098[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TimeStart;                                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TimeEnd;                                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Instance;                                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuffPersist) == 0x000008, "Wrong alignment on FBuffPersist");
static_assert(sizeof(FBuffPersist) == 0x000030, "Wrong size on FBuffPersist");
static_assert(offsetof(FBuffPersist, AppliedByPlayer) == 0x000000, "Member 'FBuffPersist::AppliedByPlayer' has a wrong offset!");
static_assert(offsetof(FBuffPersist, BuffConfigId) == 0x000010, "Member 'FBuffPersist::BuffConfigId' has a wrong offset!");
static_assert(offsetof(FBuffPersist, TimeStart) == 0x000018, "Member 'FBuffPersist::TimeStart' has a wrong offset!");
static_assert(offsetof(FBuffPersist, TimeEnd) == 0x000020, "Member 'FBuffPersist::TimeEnd' has a wrong offset!");
static_assert(offsetof(FBuffPersist, Instance) == 0x000028, "Member 'FBuffPersist::Instance' has a wrong offset!");
static_assert(offsetof(FBuffPersist, Stacks) == 0x00002C, "Member 'FBuffPersist::Stacks' has a wrong offset!");

// ScriptStruct Palia.BuffPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FBuffPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FBuffPersist>                   Buffs;                                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NextInstanceId;                                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2099[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffPersistBlock) == 0x000008, "Wrong alignment on FBuffPersistBlock");
static_assert(sizeof(FBuffPersistBlock) == 0x000058, "Wrong size on FBuffPersistBlock");
static_assert(offsetof(FBuffPersistBlock, Buffs) == 0x000040, "Member 'FBuffPersistBlock::Buffs' has a wrong offset!");
static_assert(offsetof(FBuffPersistBlock, NextInstanceId) == 0x000050, "Member 'FBuffPersistBlock::NextInstanceId' has a wrong offset!");

// ScriptStruct Palia.VitalPersist
// 0x0018 (0x0018 - 0x0000)
struct FVitalPersist final
{
public:
	EVitalPersistType                             Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartAmount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAmount;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Partial;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalMaxAmount;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVitalPersist) == 0x000004, "Wrong alignment on FVitalPersist");
static_assert(sizeof(FVitalPersist) == 0x000018, "Wrong size on FVitalPersist");
static_assert(offsetof(FVitalPersist, Type) == 0x000000, "Member 'FVitalPersist::Type' has a wrong offset!");
static_assert(offsetof(FVitalPersist, StartAmount) == 0x000004, "Member 'FVitalPersist::StartAmount' has a wrong offset!");
static_assert(offsetof(FVitalPersist, MaxAmount) == 0x000008, "Member 'FVitalPersist::MaxAmount' has a wrong offset!");
static_assert(offsetof(FVitalPersist, Partial) == 0x00000C, "Member 'FVitalPersist::Partial' has a wrong offset!");
static_assert(offsetof(FVitalPersist, Amount) == 0x000010, "Member 'FVitalPersist::Amount' has a wrong offset!");
static_assert(offsetof(FVitalPersist, AdditionalMaxAmount) == 0x000014, "Member 'FVitalPersist::AdditionalMaxAmount' has a wrong offset!");

// ScriptStruct Palia.VitalsPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FVitalsPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FVitalPersist>                  Vitals;                                            // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVitalsPersistBlock) == 0x000008, "Wrong alignment on FVitalsPersistBlock");
static_assert(sizeof(FVitalsPersistBlock) == 0x000058, "Wrong size on FVitalsPersistBlock");
static_assert(offsetof(FVitalsPersistBlock, Vitals) == 0x000040, "Member 'FVitalsPersistBlock::Vitals' has a wrong offset!");
static_assert(offsetof(FVitalsPersistBlock, Health) == 0x000050, "Member 'FVitalsPersistBlock::Health' has a wrong offset!");
static_assert(offsetof(FVitalsPersistBlock, MaxHealth) == 0x000054, "Member 'FVitalsPersistBlock::MaxHealth' has a wrong offset!");

// ScriptStruct Palia.VALDATA_PremiumStoreEntitlements
// 0x0010 (0x0050 - 0x0040)
struct FVALDATA_PremiumStoreEntitlements final : public FS6PersistBlock
{
public:
	TArray<struct FGuid>                          EntitlementsNotSeen;                               // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALDATA_PremiumStoreEntitlements) == 0x000008, "Wrong alignment on FVALDATA_PremiumStoreEntitlements");
static_assert(sizeof(FVALDATA_PremiumStoreEntitlements) == 0x000050, "Wrong size on FVALDATA_PremiumStoreEntitlements");
static_assert(offsetof(FVALDATA_PremiumStoreEntitlements, EntitlementsNotSeen) == 0x000040, "Member 'FVALDATA_PremiumStoreEntitlements::EntitlementsNotSeen' has a wrong offset!");

// ScriptStruct Palia.QuestProgressPersistBlock
// 0x0000 (0x0040 - 0x0040)
struct FQuestProgressPersistBlock final : public FS6PersistBlock
{
};
static_assert(alignof(FQuestProgressPersistBlock) == 0x000008, "Wrong alignment on FQuestProgressPersistBlock");
static_assert(sizeof(FQuestProgressPersistBlock) == 0x000040, "Wrong size on FQuestProgressPersistBlock");

// ScriptStruct Palia.VAL_GameplayConditionContextPersistEntry
// 0x0020 (0x0020 - 0x0000)
struct FVAL_GameplayConditionContextPersistEntry final
{
public:
	bool                                          bConditionMet;                                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConditionValue;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionGoal;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ChildIndexStack;                                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_GameplayConditionContextPersistEntry) == 0x000008, "Wrong alignment on FVAL_GameplayConditionContextPersistEntry");
static_assert(sizeof(FVAL_GameplayConditionContextPersistEntry) == 0x000020, "Wrong size on FVAL_GameplayConditionContextPersistEntry");
static_assert(offsetof(FVAL_GameplayConditionContextPersistEntry, bConditionMet) == 0x000000, "Member 'FVAL_GameplayConditionContextPersistEntry::bConditionMet' has a wrong offset!");
static_assert(offsetof(FVAL_GameplayConditionContextPersistEntry, ConditionValue) == 0x000004, "Member 'FVAL_GameplayConditionContextPersistEntry::ConditionValue' has a wrong offset!");
static_assert(offsetof(FVAL_GameplayConditionContextPersistEntry, ConditionGoal) == 0x000008, "Member 'FVAL_GameplayConditionContextPersistEntry::ConditionGoal' has a wrong offset!");
static_assert(offsetof(FVAL_GameplayConditionContextPersistEntry, ChildIndexStack) == 0x000010, "Member 'FVAL_GameplayConditionContextPersistEntry::ChildIndexStack' has a wrong offset!");

// ScriptStruct Palia.VAL_GameplayConditionContextPersist
// 0x0010 (0x0010 - 0x0000)
struct FVAL_GameplayConditionContextPersist final
{
public:
	TArray<struct FVAL_GameplayConditionContextPersistEntry> PersistEntries;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_GameplayConditionContextPersist) == 0x000008, "Wrong alignment on FVAL_GameplayConditionContextPersist");
static_assert(sizeof(FVAL_GameplayConditionContextPersist) == 0x000010, "Wrong size on FVAL_GameplayConditionContextPersist");
static_assert(offsetof(FVAL_GameplayConditionContextPersist, PersistEntries) == 0x000000, "Member 'FVAL_GameplayConditionContextPersist::PersistEntries' has a wrong offset!");

// ScriptStruct Palia.VAL_QuestGoalState
// 0x0068 (0x0068 - 0x0000)
struct FVAL_QuestGoalState final
{
public:
	int32                                         CurrentProgress;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalAmount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoalMet;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsQuantityCondition;                              // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x000A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209D[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_QuestDef>           ParentQuestDef;                                    // 0x0010(0x0028)(Transient, RepSkip, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ParentStepIndex;                                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ParentGoalIndex;                                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UObject*                                Owner;                                             // 0x0040(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVAL_GameplayConditionContext*          Context;                                           // 0x0048(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVAL_GameplayConditionContextPersist   PersistedConditionContext;                         // 0x0050(0x0010)(RepSkip, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsBranchingGoal;                                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_209E[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_QuestGoalState) == 0x000008, "Wrong alignment on FVAL_QuestGoalState");
static_assert(sizeof(FVAL_QuestGoalState) == 0x000068, "Wrong size on FVAL_QuestGoalState");
static_assert(offsetof(FVAL_QuestGoalState, CurrentProgress) == 0x000000, "Member 'FVAL_QuestGoalState::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, GoalAmount) == 0x000004, "Member 'FVAL_QuestGoalState::GoalAmount' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, bGoalMet) == 0x000008, "Member 'FVAL_QuestGoalState::bGoalMet' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, bIsQuantityCondition) == 0x000009, "Member 'FVAL_QuestGoalState::bIsQuantityCondition' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, bActive) == 0x00000A, "Member 'FVAL_QuestGoalState::bActive' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, ParentQuestDef) == 0x000010, "Member 'FVAL_QuestGoalState::ParentQuestDef' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, ParentStepIndex) == 0x000038, "Member 'FVAL_QuestGoalState::ParentStepIndex' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, ParentGoalIndex) == 0x00003C, "Member 'FVAL_QuestGoalState::ParentGoalIndex' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, Owner) == 0x000040, "Member 'FVAL_QuestGoalState::Owner' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, Context) == 0x000048, "Member 'FVAL_QuestGoalState::Context' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, PersistedConditionContext) == 0x000050, "Member 'FVAL_QuestGoalState::PersistedConditionContext' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalState, bIsBranchingGoal) == 0x000060, "Member 'FVAL_QuestGoalState::bIsBranchingGoal' has a wrong offset!");

// ScriptStruct Palia.VAL_QuestBranchingGoalState
// 0x0070 (0x0070 - 0x0000)
struct FVAL_QuestBranchingGoalState final
{
public:
	struct FVAL_QuestGoalState                    GoalState;                                         // 0x0000(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EVAL_QuestBranchingGoalChoiceStatus           ChoiceStatus;                                      // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209F[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_QuestBranchingGoalState) == 0x000008, "Wrong alignment on FVAL_QuestBranchingGoalState");
static_assert(sizeof(FVAL_QuestBranchingGoalState) == 0x000070, "Wrong size on FVAL_QuestBranchingGoalState");
static_assert(offsetof(FVAL_QuestBranchingGoalState, GoalState) == 0x000000, "Member 'FVAL_QuestBranchingGoalState::GoalState' has a wrong offset!");
static_assert(offsetof(FVAL_QuestBranchingGoalState, ChoiceStatus) == 0x000068, "Member 'FVAL_QuestBranchingGoalState::ChoiceStatus' has a wrong offset!");

// ScriptStruct Palia.VAL_QuestStepState
// 0x0070 (0x0070 - 0x0000)
struct FVAL_QuestStepState final
{
public:
	int64                                         StartedAtMs;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CompletedAtMs;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVAL_QuestGoalState>            GoalStates;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVAL_QuestBranchingGoalState>   BranchingGoalStates;                               // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCanBeCompleted;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A0[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_QuestDef>           ParentQuestDef;                                    // 0x0038(0x0028)(Transient, RepSkip, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                Owner;                                             // 0x0060(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ParentStepIndex;                                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20A1[0x4];                                     // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_QuestStepState) == 0x000008, "Wrong alignment on FVAL_QuestStepState");
static_assert(sizeof(FVAL_QuestStepState) == 0x000070, "Wrong size on FVAL_QuestStepState");
static_assert(offsetof(FVAL_QuestStepState, StartedAtMs) == 0x000000, "Member 'FVAL_QuestStepState::StartedAtMs' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepState, CompletedAtMs) == 0x000008, "Member 'FVAL_QuestStepState::CompletedAtMs' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepState, GoalStates) == 0x000010, "Member 'FVAL_QuestStepState::GoalStates' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepState, BranchingGoalStates) == 0x000020, "Member 'FVAL_QuestStepState::BranchingGoalStates' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepState, bCanBeCompleted) == 0x000030, "Member 'FVAL_QuestStepState::bCanBeCompleted' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepState, ParentQuestDef) == 0x000038, "Member 'FVAL_QuestStepState::ParentQuestDef' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepState, Owner) == 0x000060, "Member 'FVAL_QuestStepState::Owner' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepState, ParentStepIndex) == 0x000068, "Member 'FVAL_QuestStepState::ParentStepIndex' has a wrong offset!");

// ScriptStruct Palia.ValeriaVital
// 0x0008 (0x0008 - 0x0000)
struct FValeriaVital final
{
public:
	EVitalType                                    VitalType;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VitalAmount;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaVital) == 0x000004, "Wrong alignment on FValeriaVital");
static_assert(sizeof(FValeriaVital) == 0x000008, "Wrong size on FValeriaVital");
static_assert(offsetof(FValeriaVital, VitalType) == 0x000000, "Member 'FValeriaVital::VitalType' has a wrong offset!");
static_assert(offsetof(FValeriaVital, VitalAmount) == 0x000004, "Member 'FValeriaVital::VitalAmount' has a wrong offset!");

// ScriptStruct Palia.QuestCurrencyRewardPersist
// 0x0014 (0x0014 - 0x0000)
struct FQuestCurrencyRewardPersist final
{
public:
	struct FGuid                                  ConfigId;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestCurrencyRewardPersist) == 0x000004, "Wrong alignment on FQuestCurrencyRewardPersist");
static_assert(sizeof(FQuestCurrencyRewardPersist) == 0x000014, "Wrong size on FQuestCurrencyRewardPersist");
static_assert(offsetof(FQuestCurrencyRewardPersist, ConfigId) == 0x000000, "Member 'FQuestCurrencyRewardPersist::ConfigId' has a wrong offset!");
static_assert(offsetof(FQuestCurrencyRewardPersist, Amount) == 0x000010, "Member 'FQuestCurrencyRewardPersist::Amount' has a wrong offset!");

// ScriptStruct Palia.QuestReward
// 0x00E8 (0x00E8 - 0x0000)
struct FQuestReward final
{
public:
	TArray<struct FPersistentTagFilter>           PlayerTagRequirements;                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FValeriaItemPersist>            Items;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          DisallowItemsGrantingAccomplishmentProgress;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A3[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FValeriaVital>                  Vitals;                                            // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuestCurrencyRewardPersist>    Currencies;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RelationshipVillagerId;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationshipVillagerCoreId;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendshipChange;                                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RomanceChange;                                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERomanceStateChange                           RomanceStateChange;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AwardRecipesAsInspiration;                         // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A4[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RecipeConfigIds;                                   // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BuffConfigId;                                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillType                                    SkillType;                                         // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A5[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillAmount;                                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemUseChangeConfig                   ItemUseChange;                                     // 0x007C(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MailMessageId;                                     // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MailMessageToDeleteIfUnreadId;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A6[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVillagerGiftPreferenceInfo            GiftPreferenceRevealed;                            // 0x0090(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagWriteback>        PlayerTagWriteback;                                // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          GrantBagUpgrade;                                   // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBagUpgradeType                               BagUpgradeType;                                    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecalcVitals;                                      // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A7[0x1];                                     // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LanternFuelTime;                                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHousingSlotGrant>              GrantedHousingSlots;                               // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         QuestIdToStart;                                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_BoolOverride                             OverrideIsCriticalReward;                          // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_BoolOverride                             OverrideIsPermanentUnlock;                         // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A8[0x2];                                     // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         GeneratedTimestamp;                                // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestReward) == 0x000008, "Wrong alignment on FQuestReward");
static_assert(sizeof(FQuestReward) == 0x0000E8, "Wrong size on FQuestReward");
static_assert(offsetof(FQuestReward, PlayerTagRequirements) == 0x000000, "Member 'FQuestReward::PlayerTagRequirements' has a wrong offset!");
static_assert(offsetof(FQuestReward, Items) == 0x000010, "Member 'FQuestReward::Items' has a wrong offset!");
static_assert(offsetof(FQuestReward, DisallowItemsGrantingAccomplishmentProgress) == 0x000020, "Member 'FQuestReward::DisallowItemsGrantingAccomplishmentProgress' has a wrong offset!");
static_assert(offsetof(FQuestReward, Vitals) == 0x000028, "Member 'FQuestReward::Vitals' has a wrong offset!");
static_assert(offsetof(FQuestReward, Currencies) == 0x000038, "Member 'FQuestReward::Currencies' has a wrong offset!");
static_assert(offsetof(FQuestReward, RelationshipVillagerId) == 0x000048, "Member 'FQuestReward::RelationshipVillagerId' has a wrong offset!");
static_assert(offsetof(FQuestReward, RelationshipVillagerCoreId) == 0x00004C, "Member 'FQuestReward::RelationshipVillagerCoreId' has a wrong offset!");
static_assert(offsetof(FQuestReward, FriendshipChange) == 0x000050, "Member 'FQuestReward::FriendshipChange' has a wrong offset!");
static_assert(offsetof(FQuestReward, RomanceChange) == 0x000054, "Member 'FQuestReward::RomanceChange' has a wrong offset!");
static_assert(offsetof(FQuestReward, RomanceStateChange) == 0x000058, "Member 'FQuestReward::RomanceStateChange' has a wrong offset!");
static_assert(offsetof(FQuestReward, AwardRecipesAsInspiration) == 0x000059, "Member 'FQuestReward::AwardRecipesAsInspiration' has a wrong offset!");
static_assert(offsetof(FQuestReward, RecipeConfigIds) == 0x000060, "Member 'FQuestReward::RecipeConfigIds' has a wrong offset!");
static_assert(offsetof(FQuestReward, BuffConfigId) == 0x000070, "Member 'FQuestReward::BuffConfigId' has a wrong offset!");
static_assert(offsetof(FQuestReward, SkillType) == 0x000074, "Member 'FQuestReward::SkillType' has a wrong offset!");
static_assert(offsetof(FQuestReward, SkillAmount) == 0x000078, "Member 'FQuestReward::SkillAmount' has a wrong offset!");
static_assert(offsetof(FQuestReward, ItemUseChange) == 0x00007C, "Member 'FQuestReward::ItemUseChange' has a wrong offset!");
static_assert(offsetof(FQuestReward, MailMessageId) == 0x000084, "Member 'FQuestReward::MailMessageId' has a wrong offset!");
static_assert(offsetof(FQuestReward, MailMessageToDeleteIfUnreadId) == 0x000088, "Member 'FQuestReward::MailMessageToDeleteIfUnreadId' has a wrong offset!");
static_assert(offsetof(FQuestReward, GiftPreferenceRevealed) == 0x000090, "Member 'FQuestReward::GiftPreferenceRevealed' has a wrong offset!");
static_assert(offsetof(FQuestReward, PlayerTagWriteback) == 0x0000B0, "Member 'FQuestReward::PlayerTagWriteback' has a wrong offset!");
static_assert(offsetof(FQuestReward, GrantBagUpgrade) == 0x0000C0, "Member 'FQuestReward::GrantBagUpgrade' has a wrong offset!");
static_assert(offsetof(FQuestReward, BagUpgradeType) == 0x0000C1, "Member 'FQuestReward::BagUpgradeType' has a wrong offset!");
static_assert(offsetof(FQuestReward, RecalcVitals) == 0x0000C2, "Member 'FQuestReward::RecalcVitals' has a wrong offset!");
static_assert(offsetof(FQuestReward, LanternFuelTime) == 0x0000C4, "Member 'FQuestReward::LanternFuelTime' has a wrong offset!");
static_assert(offsetof(FQuestReward, GrantedHousingSlots) == 0x0000C8, "Member 'FQuestReward::GrantedHousingSlots' has a wrong offset!");
static_assert(offsetof(FQuestReward, QuestIdToStart) == 0x0000D8, "Member 'FQuestReward::QuestIdToStart' has a wrong offset!");
static_assert(offsetof(FQuestReward, OverrideIsCriticalReward) == 0x0000DC, "Member 'FQuestReward::OverrideIsCriticalReward' has a wrong offset!");
static_assert(offsetof(FQuestReward, OverrideIsPermanentUnlock) == 0x0000DD, "Member 'FQuestReward::OverrideIsPermanentUnlock' has a wrong offset!");
static_assert(offsetof(FQuestReward, GeneratedTimestamp) == 0x0000E0, "Member 'FQuestReward::GeneratedTimestamp' has a wrong offset!");

// ScriptStruct Palia.VAL_ConditionDeductionRecord
// 0x0040 (0x0040 - 0x0000)
struct FVAL_ConditionDeductionRecord final
{
public:
	struct FValeriaItemPersist                    ItemsDeducted;                                     // 0x0000(0x0038)(NativeAccessSpecifierPublic)
	struct FValeriaVital                          VitalsDeducted;                                    // 0x0038(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_ConditionDeductionRecord) == 0x000008, "Wrong alignment on FVAL_ConditionDeductionRecord");
static_assert(sizeof(FVAL_ConditionDeductionRecord) == 0x000040, "Wrong size on FVAL_ConditionDeductionRecord");
static_assert(offsetof(FVAL_ConditionDeductionRecord, ItemsDeducted) == 0x000000, "Member 'FVAL_ConditionDeductionRecord::ItemsDeducted' has a wrong offset!");
static_assert(offsetof(FVAL_ConditionDeductionRecord, VitalsDeducted) == 0x000038, "Member 'FVAL_ConditionDeductionRecord::VitalsDeducted' has a wrong offset!");

// ScriptStruct Palia.VAL_QuestReset_SavedVisit
// 0x0020 (0x0020 - 0x0000)
struct FVAL_QuestReset_SavedVisit final
{
public:
	struct FGuid                                  VisitId;                                           // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PrivateSpaceId;                                    // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_QuestReset_SavedVisit) == 0x000004, "Wrong alignment on FVAL_QuestReset_SavedVisit");
static_assert(sizeof(FVAL_QuestReset_SavedVisit) == 0x000020, "Wrong size on FVAL_QuestReset_SavedVisit");
static_assert(offsetof(FVAL_QuestReset_SavedVisit, VisitId) == 0x000000, "Member 'FVAL_QuestReset_SavedVisit::VisitId' has a wrong offset!");
static_assert(offsetof(FVAL_QuestReset_SavedVisit, PrivateSpaceId) == 0x000010, "Member 'FVAL_QuestReset_SavedVisit::PrivateSpaceId' has a wrong offset!");

// ScriptStruct Palia.VAL_QuestPlayerStateChangeRecord
// 0x00C0 (0x00C0 - 0x0000)
struct FVAL_QuestPlayerStateChangeRecord final
{
public:
	EVAL_QuestPlayerStateChangeType               StateChangeType;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TimestampMs;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StepIdx;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuestReward>                   RewardsGranted;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVAL_ConditionDeductionRecord>  Deductions;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PreResetVersion;                                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreResetStepIdx;                                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_QuestNeedsResetReason                    ResetReason;                                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20AA[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestReward>                   DeductionsRefunded;                                // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuestReward>                   RewardsReturned;                                   // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DialoguesReset;                                    // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVAL_QuestReset_SavedVisit>     SavedVisitsReset;                                  // 0x0078(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          CompletedVisitsReset;                              // 0x0088(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DialogueViewed;                                    // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VisitGuid;                                         // 0x009C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VisitPrivateSpaceGuid;                             // 0x00AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20AB[0x4];                                     // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_QuestPlayerStateChangeRecord) == 0x000008, "Wrong alignment on FVAL_QuestPlayerStateChangeRecord");
static_assert(sizeof(FVAL_QuestPlayerStateChangeRecord) == 0x0000C0, "Wrong size on FVAL_QuestPlayerStateChangeRecord");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, StateChangeType) == 0x000000, "Member 'FVAL_QuestPlayerStateChangeRecord::StateChangeType' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, TimestampMs) == 0x000008, "Member 'FVAL_QuestPlayerStateChangeRecord::TimestampMs' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, Version) == 0x000010, "Member 'FVAL_QuestPlayerStateChangeRecord::Version' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, StepIdx) == 0x000014, "Member 'FVAL_QuestPlayerStateChangeRecord::StepIdx' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, RewardsGranted) == 0x000018, "Member 'FVAL_QuestPlayerStateChangeRecord::RewardsGranted' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, Deductions) == 0x000028, "Member 'FVAL_QuestPlayerStateChangeRecord::Deductions' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, PreResetVersion) == 0x000038, "Member 'FVAL_QuestPlayerStateChangeRecord::PreResetVersion' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, PreResetStepIdx) == 0x00003C, "Member 'FVAL_QuestPlayerStateChangeRecord::PreResetStepIdx' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, ResetReason) == 0x000040, "Member 'FVAL_QuestPlayerStateChangeRecord::ResetReason' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, DeductionsRefunded) == 0x000048, "Member 'FVAL_QuestPlayerStateChangeRecord::DeductionsRefunded' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, RewardsReturned) == 0x000058, "Member 'FVAL_QuestPlayerStateChangeRecord::RewardsReturned' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, DialoguesReset) == 0x000068, "Member 'FVAL_QuestPlayerStateChangeRecord::DialoguesReset' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, SavedVisitsReset) == 0x000078, "Member 'FVAL_QuestPlayerStateChangeRecord::SavedVisitsReset' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, CompletedVisitsReset) == 0x000088, "Member 'FVAL_QuestPlayerStateChangeRecord::CompletedVisitsReset' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, DialogueViewed) == 0x000098, "Member 'FVAL_QuestPlayerStateChangeRecord::DialogueViewed' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, VisitGuid) == 0x00009C, "Member 'FVAL_QuestPlayerStateChangeRecord::VisitGuid' has a wrong offset!");
static_assert(offsetof(FVAL_QuestPlayerStateChangeRecord, VisitPrivateSpaceGuid) == 0x0000AC, "Member 'FVAL_QuestPlayerStateChangeRecord::VisitPrivateSpaceGuid' has a wrong offset!");

// ScriptStruct Palia.VAL_QuestState
// 0x0098 (0x0098 - 0x0000)
struct FVAL_QuestState final
{
public:
	int32                                         PersistId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_QuestDef>           QuestDef;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, RepSkip, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         StartedAtMs;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CompletedAtMs;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ExpiredAtMs;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentStepIdx;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Pinned;                                            // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20AC[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaCharacter*                      VC;                                                // 0x0050(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVAL_QuestStepState>            StepStates;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVAL_QuestPlayerStateChangeRecord> PlayerStateChanges;                                // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	class UVAL_QuestDef*                          CachedQuestDef;                                    // 0x0078(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVAL_GameplayConditionContext*          ExpirationConditionContext;                        // 0x0080(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVAL_GameplayConditionContextPersist   PersistedExpirationConditionContext;               // 0x0088(0x0010)(RepSkip, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FVAL_QuestState) == 0x000008, "Wrong alignment on FVAL_QuestState");
static_assert(sizeof(FVAL_QuestState) == 0x000098, "Wrong size on FVAL_QuestState");
static_assert(offsetof(FVAL_QuestState, PersistId) == 0x000000, "Member 'FVAL_QuestState::PersistId' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, Version) == 0x000004, "Member 'FVAL_QuestState::Version' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, QuestDef) == 0x000008, "Member 'FVAL_QuestState::QuestDef' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, StartedAtMs) == 0x000030, "Member 'FVAL_QuestState::StartedAtMs' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, CompletedAtMs) == 0x000038, "Member 'FVAL_QuestState::CompletedAtMs' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, ExpiredAtMs) == 0x000040, "Member 'FVAL_QuestState::ExpiredAtMs' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, CurrentStepIdx) == 0x000048, "Member 'FVAL_QuestState::CurrentStepIdx' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, Pinned) == 0x00004C, "Member 'FVAL_QuestState::Pinned' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, VC) == 0x000050, "Member 'FVAL_QuestState::VC' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, StepStates) == 0x000058, "Member 'FVAL_QuestState::StepStates' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, PlayerStateChanges) == 0x000068, "Member 'FVAL_QuestState::PlayerStateChanges' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, CachedQuestDef) == 0x000078, "Member 'FVAL_QuestState::CachedQuestDef' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, ExpirationConditionContext) == 0x000080, "Member 'FVAL_QuestState::ExpirationConditionContext' has a wrong offset!");
static_assert(offsetof(FVAL_QuestState, PersistedExpirationConditionContext) == 0x000088, "Member 'FVAL_QuestState::PersistedExpirationConditionContext' has a wrong offset!");

// ScriptStruct Palia.VAL_QuestProgressPersistBlock
// 0x0060 (0x00A0 - 0x0040)
struct FVAL_QuestProgressPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FVAL_QuestState>                ActiveQuests;                                      // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PendingStartQuestIds;                              // 0x0050(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	TArray<struct FVAL_QuestState>                InactiveQuests;                                    // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVAL_QuestState>                QuarantinedQuests;                                 // 0x0070(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	TArray<struct FVAL_QuestState>                DeletedQuests;                                     // 0x0080(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	TArray<int32>                                 PendingDeleteQuestIds;                             // 0x0090(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_QuestProgressPersistBlock) == 0x000008, "Wrong alignment on FVAL_QuestProgressPersistBlock");
static_assert(sizeof(FVAL_QuestProgressPersistBlock) == 0x0000A0, "Wrong size on FVAL_QuestProgressPersistBlock");
static_assert(offsetof(FVAL_QuestProgressPersistBlock, ActiveQuests) == 0x000040, "Member 'FVAL_QuestProgressPersistBlock::ActiveQuests' has a wrong offset!");
static_assert(offsetof(FVAL_QuestProgressPersistBlock, PendingStartQuestIds) == 0x000050, "Member 'FVAL_QuestProgressPersistBlock::PendingStartQuestIds' has a wrong offset!");
static_assert(offsetof(FVAL_QuestProgressPersistBlock, InactiveQuests) == 0x000060, "Member 'FVAL_QuestProgressPersistBlock::InactiveQuests' has a wrong offset!");
static_assert(offsetof(FVAL_QuestProgressPersistBlock, QuarantinedQuests) == 0x000070, "Member 'FVAL_QuestProgressPersistBlock::QuarantinedQuests' has a wrong offset!");
static_assert(offsetof(FVAL_QuestProgressPersistBlock, DeletedQuests) == 0x000080, "Member 'FVAL_QuestProgressPersistBlock::DeletedQuests' has a wrong offset!");
static_assert(offsetof(FVAL_QuestProgressPersistBlock, PendingDeleteQuestIds) == 0x000090, "Member 'FVAL_QuestProgressPersistBlock::PendingDeleteQuestIds' has a wrong offset!");

// ScriptStruct Palia.VALDATA_EmotePersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FVALDATA_EmotePersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FGuid>                          EmoteWheelAssignments;                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVALDATA_EmotePersistBlock) == 0x000008, "Wrong alignment on FVALDATA_EmotePersistBlock");
static_assert(sizeof(FVALDATA_EmotePersistBlock) == 0x000050, "Wrong size on FVALDATA_EmotePersistBlock");
static_assert(offsetof(FVALDATA_EmotePersistBlock, EmoteWheelAssignments) == 0x000040, "Member 'FVALDATA_EmotePersistBlock::EmoteWheelAssignments' has a wrong offset!");

// ScriptStruct Palia.ChallengeStatePersist
// 0x0028 (0x0028 - 0x0000)
struct FChallengeStatePersist final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 GoalsProgress;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20AD[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeStatePersist) == 0x000008, "Wrong alignment on FChallengeStatePersist");
static_assert(sizeof(FChallengeStatePersist) == 0x000028, "Wrong size on FChallengeStatePersist");
static_assert(offsetof(FChallengeStatePersist, Guid) == 0x000000, "Member 'FChallengeStatePersist::Guid' has a wrong offset!");
static_assert(offsetof(FChallengeStatePersist, GoalsProgress) == 0x000010, "Member 'FChallengeStatePersist::GoalsProgress' has a wrong offset!");
static_assert(offsetof(FChallengeStatePersist, bCompleted) == 0x000020, "Member 'FChallengeStatePersist::bCompleted' has a wrong offset!");

// ScriptStruct Palia.ChallengeProgressPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FChallengeProgressPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FChallengeStatePersist>         Entries;                                           // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         ExpirationTimestamp;                               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeProgressPersistBlock) == 0x000008, "Wrong alignment on FChallengeProgressPersistBlock");
static_assert(sizeof(FChallengeProgressPersistBlock) == 0x000058, "Wrong size on FChallengeProgressPersistBlock");
static_assert(offsetof(FChallengeProgressPersistBlock, Entries) == 0x000040, "Member 'FChallengeProgressPersistBlock::Entries' has a wrong offset!");
static_assert(offsetof(FChallengeProgressPersistBlock, ExpirationTimestamp) == 0x000050, "Member 'FChallengeProgressPersistBlock::ExpirationTimestamp' has a wrong offset!");

// ScriptStruct Palia.DialogueHistoryEntry
// 0x0010 (0x0010 - 0x0000)
struct FDialogueHistoryEntry final
{
public:
	int64                                         TimestampMs;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DialogueConfigId;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DialogueRepetitionNumber;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueHistoryEntry) == 0x000008, "Wrong alignment on FDialogueHistoryEntry");
static_assert(sizeof(FDialogueHistoryEntry) == 0x000010, "Wrong size on FDialogueHistoryEntry");
static_assert(offsetof(FDialogueHistoryEntry, TimestampMs) == 0x000000, "Member 'FDialogueHistoryEntry::TimestampMs' has a wrong offset!");
static_assert(offsetof(FDialogueHistoryEntry, DialogueConfigId) == 0x000008, "Member 'FDialogueHistoryEntry::DialogueConfigId' has a wrong offset!");
static_assert(offsetof(FDialogueHistoryEntry, DialogueRepetitionNumber) == 0x00000C, "Member 'FDialogueHistoryEntry::DialogueRepetitionNumber' has a wrong offset!");

// ScriptStruct Palia.DialogueHistoryPersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FDialogueHistoryPersistBlock : public FS6PersistBlock
{
public:
	TArray<struct FDialogueHistoryEntry>          Entries;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueHistoryPersistBlock) == 0x000008, "Wrong alignment on FDialogueHistoryPersistBlock");
static_assert(sizeof(FDialogueHistoryPersistBlock) == 0x000050, "Wrong size on FDialogueHistoryPersistBlock");
static_assert(offsetof(FDialogueHistoryPersistBlock, Entries) == 0x000040, "Member 'FDialogueHistoryPersistBlock::Entries' has a wrong offset!");

// ScriptStruct Palia.VillagerRelationship
// 0x0018 (0x0018 - 0x0000)
struct FVillagerRelationship final
{
public:
	int32                                         VillagerCoreId;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendshipValue;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RomanceValue;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERomanceState                                 RomanceState;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasMetBefore;                                      // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20AE[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HighestFriendshipLevelReached;                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighestRomanceLevelReached;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerRelationship) == 0x000004, "Wrong alignment on FVillagerRelationship");
static_assert(sizeof(FVillagerRelationship) == 0x000018, "Wrong size on FVillagerRelationship");
static_assert(offsetof(FVillagerRelationship, VillagerCoreId) == 0x000000, "Member 'FVillagerRelationship::VillagerCoreId' has a wrong offset!");
static_assert(offsetof(FVillagerRelationship, FriendshipValue) == 0x000004, "Member 'FVillagerRelationship::FriendshipValue' has a wrong offset!");
static_assert(offsetof(FVillagerRelationship, RomanceValue) == 0x000008, "Member 'FVillagerRelationship::RomanceValue' has a wrong offset!");
static_assert(offsetof(FVillagerRelationship, RomanceState) == 0x00000C, "Member 'FVillagerRelationship::RomanceState' has a wrong offset!");
static_assert(offsetof(FVillagerRelationship, HasMetBefore) == 0x00000D, "Member 'FVillagerRelationship::HasMetBefore' has a wrong offset!");
static_assert(offsetof(FVillagerRelationship, HighestFriendshipLevelReached) == 0x000010, "Member 'FVillagerRelationship::HighestFriendshipLevelReached' has a wrong offset!");
static_assert(offsetof(FVillagerRelationship, HighestRomanceLevelReached) == 0x000014, "Member 'FVillagerRelationship::HighestRomanceLevelReached' has a wrong offset!");

// ScriptStruct Palia.VillagerRelationshipsPersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FVillagerRelationshipsPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FVillagerRelationship>          Entries;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerRelationshipsPersistBlock) == 0x000008, "Wrong alignment on FVillagerRelationshipsPersistBlock");
static_assert(sizeof(FVillagerRelationshipsPersistBlock) == 0x000050, "Wrong size on FVillagerRelationshipsPersistBlock");
static_assert(offsetof(FVillagerRelationshipsPersistBlock, Entries) == 0x000040, "Member 'FVillagerRelationshipsPersistBlock::Entries' has a wrong offset!");

// ScriptStruct Palia.TagEntry
// 0x000C (0x000C - 0x0000)
struct FTagEntry final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagEntry) == 0x000004, "Wrong alignment on FTagEntry");
static_assert(sizeof(FTagEntry) == 0x00000C, "Wrong size on FTagEntry");
static_assert(offsetof(FTagEntry, Tag) == 0x000000, "Member 'FTagEntry::Tag' has a wrong offset!");
static_assert(offsetof(FTagEntry, Value) == 0x000008, "Member 'FTagEntry::Value' has a wrong offset!");

// ScriptStruct Palia.TagMapPersistBlock
// 0x0020 (0x0060 - 0x0040)
struct FTagMapPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FTagEntry>                      Entries;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTagEntry>                      CachedPlaceableEntries;                            // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagMapPersistBlock) == 0x000008, "Wrong alignment on FTagMapPersistBlock");
static_assert(sizeof(FTagMapPersistBlock) == 0x000060, "Wrong size on FTagMapPersistBlock");
static_assert(offsetof(FTagMapPersistBlock, Entries) == 0x000040, "Member 'FTagMapPersistBlock::Entries' has a wrong offset!");
static_assert(offsetof(FTagMapPersistBlock, CachedPlaceableEntries) == 0x000050, "Member 'FTagMapPersistBlock::CachedPlaceableEntries' has a wrong offset!");

// ScriptStruct Palia.VillagerMailMessage
// 0x0020 (0x0020 - 0x0000)
struct FVillagerMailMessage final
{
public:
	int32                                         PersistId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20AF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TimestampSentAt;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 RewardIndicesCollected;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerMailMessage) == 0x000008, "Wrong alignment on FVillagerMailMessage");
static_assert(sizeof(FVillagerMailMessage) == 0x000020, "Wrong size on FVillagerMailMessage");
static_assert(offsetof(FVillagerMailMessage, PersistId) == 0x000000, "Member 'FVillagerMailMessage::PersistId' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessage, TimestampSentAt) == 0x000008, "Member 'FVillagerMailMessage::TimestampSentAt' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessage, RewardIndicesCollected) == 0x000010, "Member 'FVillagerMailMessage::RewardIndicesCollected' has a wrong offset!");

// ScriptStruct Palia.VillagerMailInbox
// 0x0010 (0x0010 - 0x0000)
struct FVillagerMailInbox final
{
public:
	TArray<struct FVillagerMailMessage>           Messages;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerMailInbox) == 0x000008, "Wrong alignment on FVillagerMailInbox");
static_assert(sizeof(FVillagerMailInbox) == 0x000010, "Wrong size on FVillagerMailInbox");
static_assert(offsetof(FVillagerMailInbox, Messages) == 0x000000, "Member 'FVillagerMailInbox::Messages' has a wrong offset!");

// ScriptStruct Palia.MailInboxPersistBlock
// 0x0020 (0x0060 - 0x0040)
struct FMailInboxPersistBlock final : public FS6PersistBlock
{
public:
	struct FVillagerMailInbox                     CurrentInbox;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVillagerMailInbox                     ArchivedInbox;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMailInboxPersistBlock) == 0x000008, "Wrong alignment on FMailInboxPersistBlock");
static_assert(sizeof(FMailInboxPersistBlock) == 0x000060, "Wrong size on FMailInboxPersistBlock");
static_assert(offsetof(FMailInboxPersistBlock, CurrentInbox) == 0x000040, "Member 'FMailInboxPersistBlock::CurrentInbox' has a wrong offset!");
static_assert(offsetof(FMailInboxPersistBlock, ArchivedInbox) == 0x000050, "Member 'FMailInboxPersistBlock::ArchivedInbox' has a wrong offset!");

// ScriptStruct Palia.CraftingHistoryEntry
// 0x0008 (0x0008 - 0x0000)
struct FCraftingHistoryEntry final
{
public:
	int32                                         RecipeConfigId;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfTimesCrafted;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingHistoryEntry) == 0x000004, "Wrong alignment on FCraftingHistoryEntry");
static_assert(sizeof(FCraftingHistoryEntry) == 0x000008, "Wrong size on FCraftingHistoryEntry");
static_assert(offsetof(FCraftingHistoryEntry, RecipeConfigId) == 0x000000, "Member 'FCraftingHistoryEntry::RecipeConfigId' has a wrong offset!");
static_assert(offsetof(FCraftingHistoryEntry, NumberOfTimesCrafted) == 0x000004, "Member 'FCraftingHistoryEntry::NumberOfTimesCrafted' has a wrong offset!");

// ScriptStruct Palia.CraftingHistoryPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FCraftingHistoryPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FCraftingHistoryEntry>          RecipesCrafted;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MostRecentlyCraftedRecipeId;                       // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B0[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingHistoryPersistBlock) == 0x000008, "Wrong alignment on FCraftingHistoryPersistBlock");
static_assert(sizeof(FCraftingHistoryPersistBlock) == 0x000058, "Wrong size on FCraftingHistoryPersistBlock");
static_assert(offsetof(FCraftingHistoryPersistBlock, RecipesCrafted) == 0x000040, "Member 'FCraftingHistoryPersistBlock::RecipesCrafted' has a wrong offset!");
static_assert(offsetof(FCraftingHistoryPersistBlock, MostRecentlyCraftedRecipeId) == 0x000050, "Member 'FCraftingHistoryPersistBlock::MostRecentlyCraftedRecipeId' has a wrong offset!");

// ScriptStruct Palia.RecipeInventoryPersistBlock
// 0x0020 (0x0060 - 0x0040)
struct FRecipeInventoryPersistBlock final : public FS6PersistBlock
{
public:
	TArray<int32>                                 RecipesAvailable;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 UnusedInspirationRecipeIDs;                        // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipeInventoryPersistBlock) == 0x000008, "Wrong alignment on FRecipeInventoryPersistBlock");
static_assert(sizeof(FRecipeInventoryPersistBlock) == 0x000060, "Wrong size on FRecipeInventoryPersistBlock");
static_assert(offsetof(FRecipeInventoryPersistBlock, RecipesAvailable) == 0x000040, "Member 'FRecipeInventoryPersistBlock::RecipesAvailable' has a wrong offset!");
static_assert(offsetof(FRecipeInventoryPersistBlock, UnusedInspirationRecipeIDs) == 0x000050, "Member 'FRecipeInventoryPersistBlock::UnusedInspirationRecipeIDs' has a wrong offset!");

// ScriptStruct Palia.CharacterCustomizationPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FCharacterCustomizationPersistBlock final : public FS6PersistBlock
{
public:
	int64                                         LastCharacterRespecTime;                           // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          SavedLoadoutWheelAssignments;                      // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterCustomizationPersistBlock) == 0x000008, "Wrong alignment on FCharacterCustomizationPersistBlock");
static_assert(sizeof(FCharacterCustomizationPersistBlock) == 0x000058, "Wrong size on FCharacterCustomizationPersistBlock");
static_assert(offsetof(FCharacterCustomizationPersistBlock, LastCharacterRespecTime) == 0x000040, "Member 'FCharacterCustomizationPersistBlock::LastCharacterRespecTime' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationPersistBlock, SavedLoadoutWheelAssignments) == 0x000048, "Member 'FCharacterCustomizationPersistBlock::SavedLoadoutWheelAssignments' has a wrong offset!");

// ScriptStruct Palia.SpeakerDialogueHistoryPersistBlock
// 0x0068 (0x00A8 - 0x0040)
struct FSpeakerDialogueHistoryPersistBlock : public FS6PersistBlock
{
public:
	int32                                         SpeakerPersistId;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B1[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSlimDialogueHistoryEntry>      Entries;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, int64>                      GroupingStates;                                    // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpeakerDialogueHistoryPersistBlock) == 0x000008, "Wrong alignment on FSpeakerDialogueHistoryPersistBlock");
static_assert(sizeof(FSpeakerDialogueHistoryPersistBlock) == 0x0000A8, "Wrong size on FSpeakerDialogueHistoryPersistBlock");
static_assert(offsetof(FSpeakerDialogueHistoryPersistBlock, SpeakerPersistId) == 0x000040, "Member 'FSpeakerDialogueHistoryPersistBlock::SpeakerPersistId' has a wrong offset!");
static_assert(offsetof(FSpeakerDialogueHistoryPersistBlock, Entries) == 0x000048, "Member 'FSpeakerDialogueHistoryPersistBlock::Entries' has a wrong offset!");
static_assert(offsetof(FSpeakerDialogueHistoryPersistBlock, GroupingStates) == 0x000058, "Member 'FSpeakerDialogueHistoryPersistBlock::GroupingStates' has a wrong offset!");

// ScriptStruct Palia.VillagerGiftPreferences
// 0x0018 (0x0018 - 0x0000)
struct FVillagerGiftPreferences final
{
public:
	EVillagerGiftRewardLevel                      RewardLevel;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 KnownGiftPreferences;                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerGiftPreferences) == 0x000008, "Wrong alignment on FVillagerGiftPreferences");
static_assert(sizeof(FVillagerGiftPreferences) == 0x000018, "Wrong size on FVillagerGiftPreferences");
static_assert(offsetof(FVillagerGiftPreferences, RewardLevel) == 0x000000, "Member 'FVillagerGiftPreferences::RewardLevel' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferences, KnownGiftPreferences) == 0x000008, "Member 'FVillagerGiftPreferences::KnownGiftPreferences' has a wrong offset!");

// ScriptStruct Palia.TrackedGiftPreferences
// 0x0018 (0x0018 - 0x0000)
struct FTrackedGiftPreferences final
{
public:
	int32                                         VillagerCoreId;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVillagerGiftPreferences>       PreferencesForLevel;                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackedGiftPreferences) == 0x000008, "Wrong alignment on FTrackedGiftPreferences");
static_assert(sizeof(FTrackedGiftPreferences) == 0x000018, "Wrong size on FTrackedGiftPreferences");
static_assert(offsetof(FTrackedGiftPreferences, VillagerCoreId) == 0x000000, "Member 'FTrackedGiftPreferences::VillagerCoreId' has a wrong offset!");
static_assert(offsetof(FTrackedGiftPreferences, PreferencesForLevel) == 0x000008, "Member 'FTrackedGiftPreferences::PreferencesForLevel' has a wrong offset!");

// ScriptStruct Palia.GiftPreferencesPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FGiftPreferencesPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FTrackedGiftPreferences>        Preferences;                                       // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B4[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGiftPreferencesPersistBlock) == 0x000008, "Wrong alignment on FGiftPreferencesPersistBlock");
static_assert(sizeof(FGiftPreferencesPersistBlock) == 0x000058, "Wrong size on FGiftPreferencesPersistBlock");
static_assert(offsetof(FGiftPreferencesPersistBlock, Preferences) == 0x000040, "Member 'FGiftPreferencesPersistBlock::Preferences' has a wrong offset!");
static_assert(offsetof(FGiftPreferencesPersistBlock, Version) == 0x000050, "Member 'FGiftPreferencesPersistBlock::Version' has a wrong offset!");

// ScriptStruct Palia.GearSlotMetadata
// 0x0010 (0x0010 - 0x0000)
struct FGearSlotMetadata final
{
public:
	int32                                         SlotTypePersistId;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         UnequipExpirationTimestamp;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearSlotMetadata) == 0x000008, "Wrong alignment on FGearSlotMetadata");
static_assert(sizeof(FGearSlotMetadata) == 0x000010, "Wrong size on FGearSlotMetadata");
static_assert(offsetof(FGearSlotMetadata, SlotTypePersistId) == 0x000000, "Member 'FGearSlotMetadata::SlotTypePersistId' has a wrong offset!");
static_assert(offsetof(FGearSlotMetadata, SlotIndex) == 0x000004, "Member 'FGearSlotMetadata::SlotIndex' has a wrong offset!");
static_assert(offsetof(FGearSlotMetadata, UnequipExpirationTimestamp) == 0x000008, "Member 'FGearSlotMetadata::UnequipExpirationTimestamp' has a wrong offset!");

// ScriptStruct Palia.GearPersistBlock
// 0x0030 (0x0070 - 0x0040)
struct FGearPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FValeriaItemPersist>            Items;                                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGearSlotMetadata>              EquippedGearSlots;                                 // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGearSlotMetadata>              UnequippedGearSlots;                               // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearPersistBlock) == 0x000008, "Wrong alignment on FGearPersistBlock");
static_assert(sizeof(FGearPersistBlock) == 0x000070, "Wrong size on FGearPersistBlock");
static_assert(offsetof(FGearPersistBlock, Items) == 0x000040, "Member 'FGearPersistBlock::Items' has a wrong offset!");
static_assert(offsetof(FGearPersistBlock, EquippedGearSlots) == 0x000050, "Member 'FGearPersistBlock::EquippedGearSlots' has a wrong offset!");
static_assert(offsetof(FGearPersistBlock, UnequippedGearSlots) == 0x000060, "Member 'FGearPersistBlock::UnequippedGearSlots' has a wrong offset!");

// ScriptStruct Palia.DebugInfoPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FDebugInfoPersistBlock final : public FS6PersistBlock
{
public:
	bool                                          bCheatsEnabled;                                    // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreGiftTimeRestriction;                        // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreFriendLvlReqsForDynamicGiftPrefs;           // 0x0042(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDailyDialogueLimit;                         // 0x0043(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHiddenGearTypes;                              // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowVillagerDebugInfo;                            // 0x0045(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B5[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          GivenCheatSets;                                    // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugInfoPersistBlock) == 0x000008, "Wrong alignment on FDebugInfoPersistBlock");
static_assert(sizeof(FDebugInfoPersistBlock) == 0x000058, "Wrong size on FDebugInfoPersistBlock");
static_assert(offsetof(FDebugInfoPersistBlock, bCheatsEnabled) == 0x000040, "Member 'FDebugInfoPersistBlock::bCheatsEnabled' has a wrong offset!");
static_assert(offsetof(FDebugInfoPersistBlock, bIgnoreGiftTimeRestriction) == 0x000041, "Member 'FDebugInfoPersistBlock::bIgnoreGiftTimeRestriction' has a wrong offset!");
static_assert(offsetof(FDebugInfoPersistBlock, bIgnoreFriendLvlReqsForDynamicGiftPrefs) == 0x000042, "Member 'FDebugInfoPersistBlock::bIgnoreFriendLvlReqsForDynamicGiftPrefs' has a wrong offset!");
static_assert(offsetof(FDebugInfoPersistBlock, bIgnoreDailyDialogueLimit) == 0x000043, "Member 'FDebugInfoPersistBlock::bIgnoreDailyDialogueLimit' has a wrong offset!");
static_assert(offsetof(FDebugInfoPersistBlock, bShowHiddenGearTypes) == 0x000044, "Member 'FDebugInfoPersistBlock::bShowHiddenGearTypes' has a wrong offset!");
static_assert(offsetof(FDebugInfoPersistBlock, bShowVillagerDebugInfo) == 0x000045, "Member 'FDebugInfoPersistBlock::bShowVillagerDebugInfo' has a wrong offset!");
static_assert(offsetof(FDebugInfoPersistBlock, GivenCheatSets) == 0x000048, "Member 'FDebugInfoPersistBlock::GivenCheatSets' has a wrong offset!");

// ScriptStruct Palia.ReadBookData
// 0x0008 (0x0008 - 0x0000)
struct FReadBookData final
{
public:
	int32                                         bookConfigId;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighestPageRead;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReadBookData) == 0x000004, "Wrong alignment on FReadBookData");
static_assert(sizeof(FReadBookData) == 0x000008, "Wrong size on FReadBookData");
static_assert(offsetof(FReadBookData, bookConfigId) == 0x000000, "Member 'FReadBookData::bookConfigId' has a wrong offset!");
static_assert(offsetof(FReadBookData, HighestPageRead) == 0x000004, "Member 'FReadBookData::HighestPageRead' has a wrong offset!");

// ScriptStruct Palia.BookReadingPersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FBookReadingPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FReadBookData>                  ReadBooks;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBookReadingPersistBlock) == 0x000008, "Wrong alignment on FBookReadingPersistBlock");
static_assert(sizeof(FBookReadingPersistBlock) == 0x000050, "Wrong size on FBookReadingPersistBlock");
static_assert(offsetof(FBookReadingPersistBlock, ReadBooks) == 0x000040, "Member 'FBookReadingPersistBlock::ReadBooks' has a wrong offset!");

// ScriptStruct Palia.SavedVillagerVisit
// 0x0020 (0x0020 - 0x0000)
struct FSavedVillagerVisit final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VisitStartRequirementsCompletedTimeSeconds;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDelayedVisit;                                     // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B6[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DelayedVisitGameHours;                             // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedVillagerVisit) == 0x000004, "Wrong alignment on FSavedVillagerVisit");
static_assert(sizeof(FSavedVillagerVisit) == 0x000020, "Wrong size on FSavedVillagerVisit");
static_assert(offsetof(FSavedVillagerVisit, Guid) == 0x000000, "Member 'FSavedVillagerVisit::Guid' has a wrong offset!");
static_assert(offsetof(FSavedVillagerVisit, VisitStartRequirementsCompletedTimeSeconds) == 0x000010, "Member 'FSavedVillagerVisit::VisitStartRequirementsCompletedTimeSeconds' has a wrong offset!");
static_assert(offsetof(FSavedVillagerVisit, Priority) == 0x000014, "Member 'FSavedVillagerVisit::Priority' has a wrong offset!");
static_assert(offsetof(FSavedVillagerVisit, bDelayedVisit) == 0x000018, "Member 'FSavedVillagerVisit::bDelayedVisit' has a wrong offset!");
static_assert(offsetof(FSavedVillagerVisit, DelayedVisitGameHours) == 0x00001C, "Member 'FSavedVillagerVisit::DelayedVisitGameHours' has a wrong offset!");

// ScriptStruct Palia.SavedVillagerVisitArray
// 0x0010 (0x0010 - 0x0000)
struct FSavedVillagerVisitArray final
{
public:
	TArray<struct FSavedVillagerVisit>            Visits;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedVillagerVisitArray) == 0x000008, "Wrong alignment on FSavedVillagerVisitArray");
static_assert(sizeof(FSavedVillagerVisitArray) == 0x000010, "Wrong size on FSavedVillagerVisitArray");
static_assert(offsetof(FSavedVillagerVisitArray, Visits) == 0x000000, "Member 'FSavedVillagerVisitArray::Visits' has a wrong offset!");

// ScriptStruct Palia.VillagerVisitsPersistBlock
// 0x0070 (0x00B0 - 0x0040)
struct FVillagerVisitsPersistBlock final : public FS6PersistBlock
{
public:
	struct FSavedVillagerVisitArray               SavedHousingVillagerVisits;                        // 0x0040(0x0010)(NativeAccessSpecifierPublic)
	TMap<struct FGuid, struct FSavedVillagerVisitArray> SavedPrivateSpaceVillagerVisits;                   // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          CompletedVisits;                                   // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerVisitsPersistBlock) == 0x000008, "Wrong alignment on FVillagerVisitsPersistBlock");
static_assert(sizeof(FVillagerVisitsPersistBlock) == 0x0000B0, "Wrong size on FVillagerVisitsPersistBlock");
static_assert(offsetof(FVillagerVisitsPersistBlock, SavedHousingVillagerVisits) == 0x000040, "Member 'FVillagerVisitsPersistBlock::SavedHousingVillagerVisits' has a wrong offset!");
static_assert(offsetof(FVillagerVisitsPersistBlock, SavedPrivateSpaceVillagerVisits) == 0x000050, "Member 'FVillagerVisitsPersistBlock::SavedPrivateSpaceVillagerVisits' has a wrong offset!");
static_assert(offsetof(FVillagerVisitsPersistBlock, CompletedVisits) == 0x0000A0, "Member 'FVillagerVisitsPersistBlock::CompletedVisits' has a wrong offset!");

// ScriptStruct Palia.ProjectileFiringPersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FProjectileFiringPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FBagSlotLocation>               EquippedAmmoSlots;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileFiringPersistBlock) == 0x000008, "Wrong alignment on FProjectileFiringPersistBlock");
static_assert(sizeof(FProjectileFiringPersistBlock) == 0x000050, "Wrong size on FProjectileFiringPersistBlock");
static_assert(offsetof(FProjectileFiringPersistBlock, EquippedAmmoSlots) == 0x000040, "Member 'FProjectileFiringPersistBlock::EquippedAmmoSlots' has a wrong offset!");

// ScriptStruct Palia.FishingPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FFishingPersistBlock final : public FS6PersistBlock
{
public:
	TArray<int32>                                 CaughtFishesIds;                                   // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         EquippedBaitId;                                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B7[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishingPersistBlock) == 0x000008, "Wrong alignment on FFishingPersistBlock");
static_assert(sizeof(FFishingPersistBlock) == 0x000058, "Wrong size on FFishingPersistBlock");
static_assert(offsetof(FFishingPersistBlock, CaughtFishesIds) == 0x000040, "Member 'FFishingPersistBlock::CaughtFishesIds' has a wrong offset!");
static_assert(offsetof(FFishingPersistBlock, EquippedBaitId) == 0x000050, "Member 'FFishingPersistBlock::EquippedBaitId' has a wrong offset!");

// ScriptStruct Palia.ItemTrackingEntryPersist
// 0x0008 (0x0008 - 0x0000)
struct FItemTrackingEntryPersist final
{
public:
	int32                                         ItemPersistId;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfTimesPurchased;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemTrackingEntryPersist) == 0x000004, "Wrong alignment on FItemTrackingEntryPersist");
static_assert(sizeof(FItemTrackingEntryPersist) == 0x000008, "Wrong size on FItemTrackingEntryPersist");
static_assert(offsetof(FItemTrackingEntryPersist, ItemPersistId) == 0x000000, "Member 'FItemTrackingEntryPersist::ItemPersistId' has a wrong offset!");
static_assert(offsetof(FItemTrackingEntryPersist, NumberOfTimesPurchased) == 0x000004, "Member 'FItemTrackingEntryPersist::NumberOfTimesPurchased' has a wrong offset!");

// ScriptStruct Palia.ItemTrackingPersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FItemTrackingPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FItemTrackingEntryPersist>      Entries;                                           // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemTrackingPersistBlock) == 0x000008, "Wrong alignment on FItemTrackingPersistBlock");
static_assert(sizeof(FItemTrackingPersistBlock) == 0x000050, "Wrong size on FItemTrackingPersistBlock");
static_assert(offsetof(FItemTrackingPersistBlock, Entries) == 0x000040, "Member 'FItemTrackingPersistBlock::Entries' has a wrong offset!");

// ScriptStruct Palia.HouseInventoryItemPersist
// 0x0008 (0x0008 - 0x0000)
struct FHouseInventoryItemPersist final
{
public:
	int32                                         ItemPersistId;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHouseInventoryItemPersist) == 0x000004, "Wrong alignment on FHouseInventoryItemPersist");
static_assert(sizeof(FHouseInventoryItemPersist) == 0x000008, "Wrong size on FHouseInventoryItemPersist");
static_assert(offsetof(FHouseInventoryItemPersist, ItemPersistId) == 0x000000, "Member 'FHouseInventoryItemPersist::ItemPersistId' has a wrong offset!");
static_assert(offsetof(FHouseInventoryItemPersist, Level) == 0x000004, "Member 'FHouseInventoryItemPersist::Level' has a wrong offset!");

// ScriptStruct Palia.HouseInventoryPersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FHouseInventoryPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FHouseInventoryItemPersist>     Houses;                                            // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHouseInventoryPersistBlock) == 0x000008, "Wrong alignment on FHouseInventoryPersistBlock");
static_assert(sizeof(FHouseInventoryPersistBlock) == 0x000050, "Wrong size on FHouseInventoryPersistBlock");
static_assert(offsetof(FHouseInventoryPersistBlock, Houses) == 0x000040, "Member 'FHouseInventoryPersistBlock::Houses' has a wrong offset!");

// ScriptStruct Palia.WarpStonePersist
// 0x0020 (0x0020 - 0x0000)
struct FWarpStonePersist final
{
public:
	struct FGuid                                  WarpStoneId;                                       // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 FlowSpriteIds;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarpStonePersist) == 0x000008, "Wrong alignment on FWarpStonePersist");
static_assert(sizeof(FWarpStonePersist) == 0x000020, "Wrong size on FWarpStonePersist");
static_assert(offsetof(FWarpStonePersist, WarpStoneId) == 0x000000, "Member 'FWarpStonePersist::WarpStoneId' has a wrong offset!");
static_assert(offsetof(FWarpStonePersist, FlowSpriteIds) == 0x000010, "Member 'FWarpStonePersist::FlowSpriteIds' has a wrong offset!");

// ScriptStruct Palia.WarpStonePersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FWarpStonePersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FWarpStonePersist>              WarpStones;                                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NextUseTime;                                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B8[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWarpStonePersistBlock) == 0x000008, "Wrong alignment on FWarpStonePersistBlock");
static_assert(sizeof(FWarpStonePersistBlock) == 0x000058, "Wrong size on FWarpStonePersistBlock");
static_assert(offsetof(FWarpStonePersistBlock, WarpStones) == 0x000040, "Member 'FWarpStonePersistBlock::WarpStones' has a wrong offset!");
static_assert(offsetof(FWarpStonePersistBlock, NextUseTime) == 0x000050, "Member 'FWarpStonePersistBlock::NextUseTime' has a wrong offset!");

// ScriptStruct Palia.WorldPersistGatherableData
// 0x0010 (0x0010 - 0x0000)
struct FWorldPersistGatherableData final
{
public:
	int32                                         NumTimesGathered;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         GatheredTime;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldPersistGatherableData) == 0x000008, "Wrong alignment on FWorldPersistGatherableData");
static_assert(sizeof(FWorldPersistGatherableData) == 0x000010, "Wrong size on FWorldPersistGatherableData");
static_assert(offsetof(FWorldPersistGatherableData, NumTimesGathered) == 0x000000, "Member 'FWorldPersistGatherableData::NumTimesGathered' has a wrong offset!");
static_assert(offsetof(FWorldPersistGatherableData, GatheredTime) == 0x000008, "Member 'FWorldPersistGatherableData::GatheredTime' has a wrong offset!");

// ScriptStruct Palia.TimedLootPileData
// 0x0020 (0x0020 - 0x0000)
struct FTimedLootPileData final
{
public:
	int32                                         NumTimesGathered;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20BA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         GatheredTime;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           GatheredObjectsThisCycle;                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimedLootPileData) == 0x000008, "Wrong alignment on FTimedLootPileData");
static_assert(sizeof(FTimedLootPileData) == 0x000020, "Wrong size on FTimedLootPileData");
static_assert(offsetof(FTimedLootPileData, NumTimesGathered) == 0x000000, "Member 'FTimedLootPileData::NumTimesGathered' has a wrong offset!");
static_assert(offsetof(FTimedLootPileData, GatheredTime) == 0x000008, "Member 'FTimedLootPileData::GatheredTime' has a wrong offset!");
static_assert(offsetof(FTimedLootPileData, GatheredObjectsThisCycle) == 0x000010, "Member 'FTimedLootPileData::GatheredObjectsThisCycle' has a wrong offset!");

// ScriptStruct Palia.PlayerWorldStatePersistBlock
// 0x00A0 (0x00E0 - 0x0040)
struct FPlayerWorldStatePersistBlock final : public FS6PersistBlock
{
public:
	TMap<struct FGameplayTag, struct FWorldPersistGatherableData> WorldPersistGatherableDatas;                       // 0x0040(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FTimedLootPileData> TimedLootPileDatas;                                // 0x0090(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerWorldStatePersistBlock) == 0x000008, "Wrong alignment on FPlayerWorldStatePersistBlock");
static_assert(sizeof(FPlayerWorldStatePersistBlock) == 0x0000E0, "Wrong size on FPlayerWorldStatePersistBlock");
static_assert(offsetof(FPlayerWorldStatePersistBlock, WorldPersistGatherableDatas) == 0x000040, "Member 'FPlayerWorldStatePersistBlock::WorldPersistGatherableDatas' has a wrong offset!");
static_assert(offsetof(FPlayerWorldStatePersistBlock, TimedLootPileDatas) == 0x000090, "Member 'FPlayerWorldStatePersistBlock::TimedLootPileDatas' has a wrong offset!");

// ScriptStruct Palia.CurrencyBagPersist
// 0x0014 (0x0014 - 0x0000)
struct FCurrencyBagPersist final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PersistGuid;                                       // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyBagPersist) == 0x000004, "Wrong alignment on FCurrencyBagPersist");
static_assert(sizeof(FCurrencyBagPersist) == 0x000014, "Wrong size on FCurrencyBagPersist");
static_assert(offsetof(FCurrencyBagPersist, Amount) == 0x000000, "Member 'FCurrencyBagPersist::Amount' has a wrong offset!");
static_assert(offsetof(FCurrencyBagPersist, PersistGuid) == 0x000004, "Member 'FCurrencyBagPersist::PersistGuid' has a wrong offset!");

// ScriptStruct Palia.InventoryBagPersist
// 0x0018 (0x0018 - 0x0000)
struct FInventoryBagPersist final
{
public:
	int32                                         ItemPersistId;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20BB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FValeriaItemPersist>            Slots;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryBagPersist) == 0x000008, "Wrong alignment on FInventoryBagPersist");
static_assert(sizeof(FInventoryBagPersist) == 0x000018, "Wrong size on FInventoryBagPersist");
static_assert(offsetof(FInventoryBagPersist, ItemPersistId) == 0x000000, "Member 'FInventoryBagPersist::ItemPersistId' has a wrong offset!");
static_assert(offsetof(FInventoryBagPersist, Slots) == 0x000008, "Member 'FInventoryBagPersist::Slots' has a wrong offset!");

// ScriptStruct Palia.InventoryPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FInventoryPersistBlock : public FS6PersistBlock
{
public:
	TArray<struct FInventoryBagPersist>           Bags;                                              // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ItemsCollected;                                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20BC[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryPersistBlock) == 0x000008, "Wrong alignment on FInventoryPersistBlock");
static_assert(sizeof(FInventoryPersistBlock) == 0x000058, "Wrong size on FInventoryPersistBlock");
static_assert(offsetof(FInventoryPersistBlock, Bags) == 0x000040, "Member 'FInventoryPersistBlock::Bags' has a wrong offset!");
static_assert(offsetof(FInventoryPersistBlock, ItemsCollected) == 0x000050, "Member 'FInventoryPersistBlock::ItemsCollected' has a wrong offset!");

// ScriptStruct Palia.PlayerInventoryPersistBlock
// 0x0010 (0x0068 - 0x0058)
struct FPlayerInventoryPersistBlock final : public FInventoryPersistBlock
{
public:
	TArray<struct FCurrencyBagPersist>            Currencies;                                        // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerInventoryPersistBlock) == 0x000008, "Wrong alignment on FPlayerInventoryPersistBlock");
static_assert(sizeof(FPlayerInventoryPersistBlock) == 0x000068, "Wrong size on FPlayerInventoryPersistBlock");
static_assert(offsetof(FPlayerInventoryPersistBlock, Currencies) == 0x000058, "Member 'FPlayerInventoryPersistBlock::Currencies' has a wrong offset!");

// ScriptStruct Palia.BundleData
// 0x0020 (0x0020 - 0x0000)
struct FBundleData final
{
public:
	int32                                         BundleConfigId;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20BD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSubBundleData>                 SubBundles;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bBundleRewardsGranted;                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20BE[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBundleData) == 0x000008, "Wrong alignment on FBundleData");
static_assert(sizeof(FBundleData) == 0x000020, "Wrong size on FBundleData");
static_assert(offsetof(FBundleData, BundleConfigId) == 0x000000, "Member 'FBundleData::BundleConfigId' has a wrong offset!");
static_assert(offsetof(FBundleData, SubBundles) == 0x000008, "Member 'FBundleData::SubBundles' has a wrong offset!");
static_assert(offsetof(FBundleData, bBundleRewardsGranted) == 0x000018, "Member 'FBundleData::bBundleRewardsGranted' has a wrong offset!");

// ScriptStruct Palia.BundlePersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FBundlePersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FBundleData>                    Bundles;                                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BundlePersistVersion;                              // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20BF[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBundlePersistBlock) == 0x000008, "Wrong alignment on FBundlePersistBlock");
static_assert(sizeof(FBundlePersistBlock) == 0x000058, "Wrong size on FBundlePersistBlock");
static_assert(offsetof(FBundlePersistBlock, Bundles) == 0x000040, "Member 'FBundlePersistBlock::Bundles' has a wrong offset!");
static_assert(offsetof(FBundlePersistBlock, BundlePersistVersion) == 0x000050, "Member 'FBundlePersistBlock::BundlePersistVersion' has a wrong offset!");

// ScriptStruct Palia.ScorePersistBlock
// 0x0050 (0x0090 - 0x0040)
struct FScorePersistBlock final : public FS6PersistBlock
{
public:
	TMap<int32, int32>                            BestScores;                                        // 0x0040(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FScorePersistBlock) == 0x000008, "Wrong alignment on FScorePersistBlock");
static_assert(sizeof(FScorePersistBlock) == 0x000090, "Wrong size on FScorePersistBlock");
static_assert(offsetof(FScorePersistBlock, BestScores) == 0x000040, "Member 'FScorePersistBlock::BestScores' has a wrong offset!");

// ScriptStruct Palia.GardeningWeedingPersistBlock
// 0x0000 (0x0040 - 0x0040)
struct FGardeningWeedingPersistBlock final : public FS6PersistBlock
{
};
static_assert(alignof(FGardeningWeedingPersistBlock) == 0x000008, "Wrong alignment on FGardeningWeedingPersistBlock");
static_assert(sizeof(FGardeningWeedingPersistBlock) == 0x000040, "Wrong size on FGardeningWeedingPersistBlock");

// ScriptStruct Palia.SleepingPersistBlock
// 0x0000 (0x0040 - 0x0040)
struct FSleepingPersistBlock final : public FS6PersistBlock
{
};
static_assert(alignof(FSleepingPersistBlock) == 0x000008, "Wrong alignment on FSleepingPersistBlock");
static_assert(sizeof(FSleepingPersistBlock) == 0x000040, "Wrong size on FSleepingPersistBlock");

// ScriptStruct Palia.CharacterPersistContainer
// 0x0DE0 (0x0DF8 - 0x0018)
struct FCharacterPersistContainer final : public FS6PersistContainer
{
public:
	struct FValeriaCharacterBasePersistBlock      BaseCharacter;                                     // 0x0018(0x0160)(NativeAccessSpecifierPublic)
	struct FVitalsPersistBlock                    Vitals;                                            // 0x0178(0x0058)(NativeAccessSpecifierPublic)
	struct FVALDATA_PremiumStoreEntitlements      PremiumStoreEntitlements;                          // 0x01D0(0x0050)(NativeAccessSpecifierPublic)
	struct FVALDATA_EmotePersistBlock             EmoteWheelAssignments;                             // 0x0220(0x0050)(NativeAccessSpecifierPublic)
	struct FSkillsPersistBlock                    Skills;                                            // 0x0270(0x0058)(NativeAccessSpecifierPublic)
	struct FVAL_QuestProgressPersistBlock         Quests;                                            // 0x02C8(0x00A0)(NativeAccessSpecifierPublic)
	struct FChallengeProgressPersistBlock         ChallengeProgress;                                 // 0x0368(0x0058)(NativeAccessSpecifierPublic)
	struct FVillagerRelationshipsPersistBlock     VillagerRelationships;                             // 0x03C0(0x0050)(NativeAccessSpecifierPublic)
	struct FTagMapPersistBlock                    TagMap;                                            // 0x0410(0x0060)(NativeAccessSpecifierPublic)
	struct FMailInboxPersistBlock                 MailInbox;                                         // 0x0470(0x0060)(NativeAccessSpecifierPublic)
	struct FCraftingHistoryPersistBlock           CraftingHistory;                                   // 0x04D0(0x0058)(NativeAccessSpecifierPublic)
	struct FRecipeInventoryPersistBlock           RecipeInventory;                                   // 0x0528(0x0060)(NativeAccessSpecifierPublic)
	struct FGiftHistoryPersistBlock               GiftHistory;                                       // 0x0588(0x0050)(NativeAccessSpecifierPublic)
	struct FCharacterCustomizationPersistBlock    CharacterCustomization;                            // 0x05D8(0x0058)(NativeAccessSpecifierPublic)
	TArray<struct FSpeakerDialogueHistoryPersistBlock> CompositeDialogueHistory;                          // 0x0630(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGiftPreferencesPersistBlock           GiftPreferences;                                   // 0x0640(0x0058)(NativeAccessSpecifierPublic)
	TArray<struct FStoragePersistBlock>           Storage;                                           // 0x0698(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGearPersistBlock                      Gear;                                              // 0x06A8(0x0070)(NativeAccessSpecifierPublic)
	struct FDebugInfoPersistBlock                 DebugInfo;                                         // 0x0718(0x0058)(NativeAccessSpecifierPublic)
	struct FBookReadingPersistBlock               BookReading;                                       // 0x0770(0x0050)(NativeAccessSpecifierPublic)
	struct FBuffPersistBlock                      Buffs;                                             // 0x07C0(0x0058)(NativeAccessSpecifierPublic)
	struct FVillagerVisitsPersistBlock            VillagerVisits;                                    // 0x0818(0x00B0)(NativeAccessSpecifierPublic)
	struct FProjectileFiringPersistBlock          ProjectileFiring;                                  // 0x08C8(0x0050)(NativeAccessSpecifierPublic)
	struct FFishingPersistBlock                   Fishing;                                           // 0x0918(0x0058)(NativeAccessSpecifierPublic)
	struct FItemTrackingPersistBlock              ItemTracking;                                      // 0x0970(0x0050)(NativeAccessSpecifierPublic)
	struct FHouseInventoryPersistBlock            HouseInventory;                                    // 0x09C0(0x0050)(NativeAccessSpecifierPublic)
	struct FWarpStonePersistBlock                 WarpStone;                                         // 0x0A10(0x0058)(NativeAccessSpecifierPublic)
	struct FPlayerWorldStatePersistBlock          PlayerWorldState;                                  // 0x0A68(0x00E0)(NativeAccessSpecifierPublic)
	struct FPlayerInventoryPersistBlock           PlayerInventory;                                   // 0x0B48(0x0068)(NativeAccessSpecifierPublic)
	struct FBundlePersistBlock                    Bundles;                                           // 0x0BB0(0x0058)(NativeAccessSpecifierPublic)
	struct FVALDATA_PlayerGuildQuestPersistBlock  PlayerGuildQuests;                                 // 0x0C08(0x0050)(NativeAccessSpecifierPublic)
	struct FScorePersistBlock                     PlayerScores;                                      // 0x0C58(0x0090)(NativeAccessSpecifierPublic)
	struct FGardeningWeedingPersistBlock          DELETED_GardeningWeeding;                          // 0x0CE8(0x0040)(NativeAccessSpecifierPublic)
	struct FSleepingPersistBlock                  DELETED_SleepBlock;                                // 0x0D28(0x0040)(NativeAccessSpecifierPublic)
	struct FQuestProgressPersistBlock             DELETED_QuestProgress;                             // 0x0D68(0x0040)(NativeAccessSpecifierPublic)
	struct FDialogueHistoryPersistBlock           DELETED_DialogueHistory;                           // 0x0DA8(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterPersistContainer) == 0x000008, "Wrong alignment on FCharacterPersistContainer");
static_assert(sizeof(FCharacterPersistContainer) == 0x000DF8, "Wrong size on FCharacterPersistContainer");
static_assert(offsetof(FCharacterPersistContainer, BaseCharacter) == 0x000018, "Member 'FCharacterPersistContainer::BaseCharacter' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, Vitals) == 0x000178, "Member 'FCharacterPersistContainer::Vitals' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, PremiumStoreEntitlements) == 0x0001D0, "Member 'FCharacterPersistContainer::PremiumStoreEntitlements' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, EmoteWheelAssignments) == 0x000220, "Member 'FCharacterPersistContainer::EmoteWheelAssignments' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, Skills) == 0x000270, "Member 'FCharacterPersistContainer::Skills' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, Quests) == 0x0002C8, "Member 'FCharacterPersistContainer::Quests' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, ChallengeProgress) == 0x000368, "Member 'FCharacterPersistContainer::ChallengeProgress' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, VillagerRelationships) == 0x0003C0, "Member 'FCharacterPersistContainer::VillagerRelationships' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, TagMap) == 0x000410, "Member 'FCharacterPersistContainer::TagMap' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, MailInbox) == 0x000470, "Member 'FCharacterPersistContainer::MailInbox' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, CraftingHistory) == 0x0004D0, "Member 'FCharacterPersistContainer::CraftingHistory' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, RecipeInventory) == 0x000528, "Member 'FCharacterPersistContainer::RecipeInventory' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, GiftHistory) == 0x000588, "Member 'FCharacterPersistContainer::GiftHistory' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, CharacterCustomization) == 0x0005D8, "Member 'FCharacterPersistContainer::CharacterCustomization' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, CompositeDialogueHistory) == 0x000630, "Member 'FCharacterPersistContainer::CompositeDialogueHistory' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, GiftPreferences) == 0x000640, "Member 'FCharacterPersistContainer::GiftPreferences' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, Storage) == 0x000698, "Member 'FCharacterPersistContainer::Storage' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, Gear) == 0x0006A8, "Member 'FCharacterPersistContainer::Gear' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, DebugInfo) == 0x000718, "Member 'FCharacterPersistContainer::DebugInfo' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, BookReading) == 0x000770, "Member 'FCharacterPersistContainer::BookReading' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, Buffs) == 0x0007C0, "Member 'FCharacterPersistContainer::Buffs' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, VillagerVisits) == 0x000818, "Member 'FCharacterPersistContainer::VillagerVisits' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, ProjectileFiring) == 0x0008C8, "Member 'FCharacterPersistContainer::ProjectileFiring' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, Fishing) == 0x000918, "Member 'FCharacterPersistContainer::Fishing' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, ItemTracking) == 0x000970, "Member 'FCharacterPersistContainer::ItemTracking' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, HouseInventory) == 0x0009C0, "Member 'FCharacterPersistContainer::HouseInventory' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, WarpStone) == 0x000A10, "Member 'FCharacterPersistContainer::WarpStone' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, PlayerWorldState) == 0x000A68, "Member 'FCharacterPersistContainer::PlayerWorldState' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, PlayerInventory) == 0x000B48, "Member 'FCharacterPersistContainer::PlayerInventory' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, Bundles) == 0x000BB0, "Member 'FCharacterPersistContainer::Bundles' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, PlayerGuildQuests) == 0x000C08, "Member 'FCharacterPersistContainer::PlayerGuildQuests' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, PlayerScores) == 0x000C58, "Member 'FCharacterPersistContainer::PlayerScores' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, DELETED_GardeningWeeding) == 0x000CE8, "Member 'FCharacterPersistContainer::DELETED_GardeningWeeding' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, DELETED_SleepBlock) == 0x000D28, "Member 'FCharacterPersistContainer::DELETED_SleepBlock' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, DELETED_QuestProgress) == 0x000D68, "Member 'FCharacterPersistContainer::DELETED_QuestProgress' has a wrong offset!");
static_assert(offsetof(FCharacterPersistContainer, DELETED_DialogueHistory) == 0x000DA8, "Member 'FCharacterPersistContainer::DELETED_DialogueHistory' has a wrong offset!");

// ScriptStruct Palia.CharacterLoadingData
// 0x15B8 (0x15B8 - 0x0000)
struct FCharacterLoadingData final
{
public:
	struct FCharacterPersistContainer             CharacterContainer;                                // 0x0000(0x0DF8)(NativeAccessSpecifierPublic)
	struct FVALDTOS_MetaCharacterFormat           MetaCharacterData;                                 // 0x0DF8(0x0778)(NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          Entitlements;                                      // 0x1570(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterId;                                       // 0x1580(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  LoadoutId;                                         // 0x1590(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMetaDataLoaded;                                   // 0x15A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContainerDataLoaded;                              // 0x15A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharacterContainerDataExists;                     // 0x15A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEntitlementsDataLoaded;                           // 0x15A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPendingHouseLoad;                              // 0x15A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C0[0x3];                                     // 0x15A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HouseGuid;                                         // 0x15A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterLoadingData) == 0x000008, "Wrong alignment on FCharacterLoadingData");
static_assert(sizeof(FCharacterLoadingData) == 0x0015B8, "Wrong size on FCharacterLoadingData");
static_assert(offsetof(FCharacterLoadingData, CharacterContainer) == 0x000000, "Member 'FCharacterLoadingData::CharacterContainer' has a wrong offset!");
static_assert(offsetof(FCharacterLoadingData, MetaCharacterData) == 0x000DF8, "Member 'FCharacterLoadingData::MetaCharacterData' has a wrong offset!");
static_assert(offsetof(FCharacterLoadingData, Entitlements) == 0x001570, "Member 'FCharacterLoadingData::Entitlements' has a wrong offset!");
static_assert(offsetof(FCharacterLoadingData, CharacterId) == 0x001580, "Member 'FCharacterLoadingData::CharacterId' has a wrong offset!");
static_assert(offsetof(FCharacterLoadingData, LoadoutId) == 0x001590, "Member 'FCharacterLoadingData::LoadoutId' has a wrong offset!");
static_assert(offsetof(FCharacterLoadingData, bMetaDataLoaded) == 0x0015A0, "Member 'FCharacterLoadingData::bMetaDataLoaded' has a wrong offset!");
static_assert(offsetof(FCharacterLoadingData, bContainerDataLoaded) == 0x0015A1, "Member 'FCharacterLoadingData::bContainerDataLoaded' has a wrong offset!");
static_assert(offsetof(FCharacterLoadingData, bCharacterContainerDataExists) == 0x0015A2, "Member 'FCharacterLoadingData::bCharacterContainerDataExists' has a wrong offset!");
static_assert(offsetof(FCharacterLoadingData, bEntitlementsDataLoaded) == 0x0015A3, "Member 'FCharacterLoadingData::bEntitlementsDataLoaded' has a wrong offset!");
static_assert(offsetof(FCharacterLoadingData, bHasPendingHouseLoad) == 0x0015A4, "Member 'FCharacterLoadingData::bHasPendingHouseLoad' has a wrong offset!");
static_assert(offsetof(FCharacterLoadingData, HouseGuid) == 0x0015A8, "Member 'FCharacterLoadingData::HouseGuid' has a wrong offset!");

// ScriptStruct Palia.PlayerLoadingData
// 0x15D0 (0x15D0 - 0x0000)
struct FPlayerLoadingData final
{
public:
	bool                                          IsLoaded;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterLoadingData                  CharacterData;                                     // 0x0010(0x15B8)(NativeAccessSpecifierPublic)
	bool                                          ReadyForInitialTeleport;                           // 0x15C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C2[0x7];                                     // 0x15C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerLoadingData) == 0x000008, "Wrong alignment on FPlayerLoadingData");
static_assert(sizeof(FPlayerLoadingData) == 0x0015D0, "Wrong size on FPlayerLoadingData");
static_assert(offsetof(FPlayerLoadingData, IsLoaded) == 0x000000, "Member 'FPlayerLoadingData::IsLoaded' has a wrong offset!");
static_assert(offsetof(FPlayerLoadingData, PlayerController) == 0x000008, "Member 'FPlayerLoadingData::PlayerController' has a wrong offset!");
static_assert(offsetof(FPlayerLoadingData, CharacterData) == 0x000010, "Member 'FPlayerLoadingData::CharacterData' has a wrong offset!");
static_assert(offsetof(FPlayerLoadingData, ReadyForInitialTeleport) == 0x0015C8, "Member 'FPlayerLoadingData::ReadyForInitialTeleport' has a wrong offset!");

// ScriptStruct Palia.VAL_GameplayEventFilter
// 0x0010 (0x0010 - 0x0000)
struct FVAL_GameplayEventFilter final
{
public:
	TSubclassOf<class UVAL_GameplayEvent>         EventType;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_GameplayEvent*                     Event;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_GameplayEventFilter) == 0x000008, "Wrong alignment on FVAL_GameplayEventFilter");
static_assert(sizeof(FVAL_GameplayEventFilter) == 0x000010, "Wrong size on FVAL_GameplayEventFilter");
static_assert(offsetof(FVAL_GameplayEventFilter, EventType) == 0x000000, "Member 'FVAL_GameplayEventFilter::EventType' has a wrong offset!");
static_assert(offsetof(FVAL_GameplayEventFilter, Event) == 0x000008, "Member 'FVAL_GameplayEventFilter::Event' has a wrong offset!");

// ScriptStruct Palia.PlantData
// 0x0118 (0x0118 - 0x0000)
struct FPlantData final
{
public:
	int32                                         PlantId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DayPlanted;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRepeatHarvests;                                 // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasEverBeenWatered;                               // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighQualitySeed;                                  // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C4[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DayLastWatered;                                    // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DaysOfGrowthRecorded;                              // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C5[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OccupiedTiles;                                     // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SpeedFertilizerGrowths;                            // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityFertilizerGrowths;                          // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HarvestBoostGrowths;                               // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C6[0xA8];                                    // 0x0064(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentWater;                                      // 0x010C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C7[0x8];                                     // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlantData) == 0x000008, "Wrong alignment on FPlantData");
static_assert(sizeof(FPlantData) == 0x000118, "Wrong size on FPlantData");
static_assert(offsetof(FPlantData, PlantId) == 0x000000, "Member 'FPlantData::PlantId' has a wrong offset!");
static_assert(offsetof(FPlantData, ItemType) == 0x000008, "Member 'FPlantData::ItemType' has a wrong offset!");
static_assert(offsetof(FPlantData, DayPlanted) == 0x000030, "Member 'FPlantData::DayPlanted' has a wrong offset!");
static_assert(offsetof(FPlantData, NumRepeatHarvests) == 0x000034, "Member 'FPlantData::NumRepeatHarvests' has a wrong offset!");
static_assert(offsetof(FPlantData, bHasEverBeenWatered) == 0x000038, "Member 'FPlantData::bHasEverBeenWatered' has a wrong offset!");
static_assert(offsetof(FPlantData, bHighQualitySeed) == 0x000039, "Member 'FPlantData::bHighQualitySeed' has a wrong offset!");
static_assert(offsetof(FPlantData, DayLastWatered) == 0x00003C, "Member 'FPlantData::DayLastWatered' has a wrong offset!");
static_assert(offsetof(FPlantData, DaysOfGrowthRecorded) == 0x000040, "Member 'FPlantData::DaysOfGrowthRecorded' has a wrong offset!");
static_assert(offsetof(FPlantData, OccupiedTiles) == 0x000048, "Member 'FPlantData::OccupiedTiles' has a wrong offset!");
static_assert(offsetof(FPlantData, SpeedFertilizerGrowths) == 0x000058, "Member 'FPlantData::SpeedFertilizerGrowths' has a wrong offset!");
static_assert(offsetof(FPlantData, QualityFertilizerGrowths) == 0x00005C, "Member 'FPlantData::QualityFertilizerGrowths' has a wrong offset!");
static_assert(offsetof(FPlantData, HarvestBoostGrowths) == 0x000060, "Member 'FPlantData::HarvestBoostGrowths' has a wrong offset!");
static_assert(offsetof(FPlantData, CurrentWater) == 0x00010C, "Member 'FPlantData::CurrentWater' has a wrong offset!");

// ScriptStruct Palia.PlantSerializeItem
// 0x011C (0x0128 - 0x000C)
struct FPlantSerializeItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_20C8[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlantData                             Data;                                              // 0x0010(0x0118)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlantSerializeItem) == 0x000008, "Wrong alignment on FPlantSerializeItem");
static_assert(sizeof(FPlantSerializeItem) == 0x000128, "Wrong size on FPlantSerializeItem");
static_assert(offsetof(FPlantSerializeItem, Data) == 0x000010, "Member 'FPlantSerializeItem::Data' has a wrong offset!");

// ScriptStruct Palia.ValeriaContainerHash
// 0x0028 (0x0028 - 0x0000)
struct FValeriaContainerHash final
{
public:
	class FString                                 HashValue;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoMigrationFromPreviousHash;                     // 0x0020(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C9[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaContainerHash) == 0x000008, "Wrong alignment on FValeriaContainerHash");
static_assert(sizeof(FValeriaContainerHash) == 0x000028, "Wrong size on FValeriaContainerHash");
static_assert(offsetof(FValeriaContainerHash, HashValue) == 0x000000, "Member 'FValeriaContainerHash::HashValue' has a wrong offset!");
static_assert(offsetof(FValeriaContainerHash, Description) == 0x000010, "Member 'FValeriaContainerHash::Description' has a wrong offset!");
static_assert(offsetof(FValeriaContainerHash, AutoMigrationFromPreviousHash) == 0x000020, "Member 'FValeriaContainerHash::AutoMigrationFromPreviousHash' has a wrong offset!");

// ScriptStruct Palia.WallpaperItemPersist
// 0x0018 (0x0018 - 0x0000)
struct FWallpaperItemPersist final
{
public:
	class FString                                 WallTagName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceId;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WallpaperItemType;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWallpaperItemPersist) == 0x000008, "Wrong alignment on FWallpaperItemPersist");
static_assert(sizeof(FWallpaperItemPersist) == 0x000018, "Wrong size on FWallpaperItemPersist");
static_assert(offsetof(FWallpaperItemPersist, WallTagName) == 0x000000, "Member 'FWallpaperItemPersist::WallTagName' has a wrong offset!");
static_assert(offsetof(FWallpaperItemPersist, SurfaceId) == 0x000010, "Member 'FWallpaperItemPersist::SurfaceId' has a wrong offset!");
static_assert(offsetof(FWallpaperItemPersist, WallpaperItemType) == 0x000014, "Member 'FWallpaperItemPersist::WallpaperItemType' has a wrong offset!");

// ScriptStruct Palia.TransistionPath
// 0x0018 (0x0018 - 0x0000)
struct FTransistionPath final
{
public:
	int32                                         MinPathLength;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20CA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 NextPathOptions;                                   // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransistionPath) == 0x000008, "Wrong alignment on FTransistionPath");
static_assert(sizeof(FTransistionPath) == 0x000018, "Wrong size on FTransistionPath");
static_assert(offsetof(FTransistionPath, MinPathLength) == 0x000000, "Member 'FTransistionPath::MinPathLength' has a wrong offset!");
static_assert(offsetof(FTransistionPath, NextPathOptions) == 0x000008, "Member 'FTransistionPath::NextPathOptions' has a wrong offset!");

// ScriptStruct Palia.TimeOfDayHourMinute
// 0x0008 (0x0008 - 0x0000)
struct FTimeOfDayHourMinute final
{
public:
	int32                                         Hour;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimeOfDayHourMinute) == 0x000004, "Wrong alignment on FTimeOfDayHourMinute");
static_assert(sizeof(FTimeOfDayHourMinute) == 0x000008, "Wrong size on FTimeOfDayHourMinute");
static_assert(offsetof(FTimeOfDayHourMinute, Hour) == 0x000000, "Member 'FTimeOfDayHourMinute::Hour' has a wrong offset!");
static_assert(offsetof(FTimeOfDayHourMinute, Minute) == 0x000004, "Member 'FTimeOfDayHourMinute::Minute' has a wrong offset!");

// ScriptStruct Palia.TimeOfDayFilter
// 0x0018 (0x0018 - 0x0000)
struct FTimeOfDayFilter final
{
public:
	int32                                         Periods;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimeOfDayHourMinute                   MinTime;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimeOfDayHourMinute                   MaxTime;                                           // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowEditMaxTime;                                 // 0x0014(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20CB[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeOfDayFilter) == 0x000004, "Wrong alignment on FTimeOfDayFilter");
static_assert(sizeof(FTimeOfDayFilter) == 0x000018, "Wrong size on FTimeOfDayFilter");
static_assert(offsetof(FTimeOfDayFilter, Periods) == 0x000000, "Member 'FTimeOfDayFilter::Periods' has a wrong offset!");
static_assert(offsetof(FTimeOfDayFilter, MinTime) == 0x000004, "Member 'FTimeOfDayFilter::MinTime' has a wrong offset!");
static_assert(offsetof(FTimeOfDayFilter, MaxTime) == 0x00000C, "Member 'FTimeOfDayFilter::MaxTime' has a wrong offset!");
static_assert(offsetof(FTimeOfDayFilter, bAllowEditMaxTime) == 0x000014, "Member 'FTimeOfDayFilter::bAllowEditMaxTime' has a wrong offset!");

// ScriptStruct Palia.VillagerRelationshipFilter
// 0x0008 (0x0008 - 0x0000)
struct FVillagerRelationshipFilter final
{
public:
	float                                         MinLevel;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLevel;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerRelationshipFilter) == 0x000004, "Wrong alignment on FVillagerRelationshipFilter");
static_assert(sizeof(FVillagerRelationshipFilter) == 0x000008, "Wrong size on FVillagerRelationshipFilter");
static_assert(offsetof(FVillagerRelationshipFilter, MinLevel) == 0x000000, "Member 'FVillagerRelationshipFilter::MinLevel' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipFilter, MaxLevel) == 0x000004, "Member 'FVillagerRelationshipFilter::MaxLevel' has a wrong offset!");

// ScriptStruct Palia.SpecificVillagerRelationshipFilter
// 0x0018 (0x0018 - 0x0000)
struct FSpecificVillagerRelationshipFilter final
{
public:
	struct FDataTableRowHandle                    Villager;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVillagerRelationshipFilter            Filter;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecificVillagerRelationshipFilter) == 0x000008, "Wrong alignment on FSpecificVillagerRelationshipFilter");
static_assert(sizeof(FSpecificVillagerRelationshipFilter) == 0x000018, "Wrong size on FSpecificVillagerRelationshipFilter");
static_assert(offsetof(FSpecificVillagerRelationshipFilter, Villager) == 0x000000, "Member 'FSpecificVillagerRelationshipFilter::Villager' has a wrong offset!");
static_assert(offsetof(FSpecificVillagerRelationshipFilter, Filter) == 0x000010, "Member 'FSpecificVillagerRelationshipFilter::Filter' has a wrong offset!");

// ScriptStruct Palia.QuestActivityPrereq
// 0x000C (0x000C - 0x0000)
struct FQuestActivityPrereq final
{
public:
	int32                                         QuestConfigId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVillagerQuestStatus                          Status;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20CC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Step;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestActivityPrereq) == 0x000004, "Wrong alignment on FQuestActivityPrereq");
static_assert(sizeof(FQuestActivityPrereq) == 0x00000C, "Wrong size on FQuestActivityPrereq");
static_assert(offsetof(FQuestActivityPrereq, QuestConfigId) == 0x000000, "Member 'FQuestActivityPrereq::QuestConfigId' has a wrong offset!");
static_assert(offsetof(FQuestActivityPrereq, Status) == 0x000004, "Member 'FQuestActivityPrereq::Status' has a wrong offset!");
static_assert(offsetof(FQuestActivityPrereq, Step) == 0x000008, "Member 'FQuestActivityPrereq::Step' has a wrong offset!");

// ScriptStruct Palia.VillagerQuestItemReqSubConfig
// 0x0010 (0x0010 - 0x0000)
struct FVillagerQuestItemReqSubConfig final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           RequiredItemType;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountRequired;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StarQualityRequired;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerQuestItemReqSubConfig) == 0x000008, "Wrong alignment on FVillagerQuestItemReqSubConfig");
static_assert(sizeof(FVillagerQuestItemReqSubConfig) == 0x000010, "Wrong size on FVillagerQuestItemReqSubConfig");
static_assert(offsetof(FVillagerQuestItemReqSubConfig, RequiredItemType) == 0x000000, "Member 'FVillagerQuestItemReqSubConfig::RequiredItemType' has a wrong offset!");
static_assert(offsetof(FVillagerQuestItemReqSubConfig, AmountRequired) == 0x000008, "Member 'FVillagerQuestItemReqSubConfig::AmountRequired' has a wrong offset!");
static_assert(offsetof(FVillagerQuestItemReqSubConfig, StarQualityRequired) == 0x00000C, "Member 'FVillagerQuestItemReqSubConfig::StarQualityRequired' has a wrong offset!");

// ScriptStruct Palia.VillagerVitalReqSubConfig
// 0x0008 (0x0008 - 0x0000)
struct FVillagerVitalReqSubConfig final
{
public:
	EVitalType                                    VitalType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20CD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumAmount;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerVitalReqSubConfig) == 0x000004, "Wrong alignment on FVillagerVitalReqSubConfig");
static_assert(sizeof(FVillagerVitalReqSubConfig) == 0x000008, "Wrong size on FVillagerVitalReqSubConfig");
static_assert(offsetof(FVillagerVitalReqSubConfig, VitalType) == 0x000000, "Member 'FVillagerVitalReqSubConfig::VitalType' has a wrong offset!");
static_assert(offsetof(FVillagerVitalReqSubConfig, MinimumAmount) == 0x000004, "Member 'FVillagerVitalReqSubConfig::MinimumAmount' has a wrong offset!");

// ScriptStruct Palia.LootRequirements
// 0x00D8 (0x00D8 - 0x0000)
struct FLootRequirements final
{
public:
	struct FTimeOfDayFilter                       TimeOfDay;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSpecificVillagerRelationshipFilter> FriendshipRequirements;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSpecificVillagerRelationshipFilter> RomanceRequirements;                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagFilter>           PlayerTagRequirements;                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuestActivityPrereq>           QuestPrereqs;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVillagerQuestItemReqSubConfig> RequiredItems;                                     // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVillagerVitalReqSubConfig             VitalRequirement;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         RequiredAccomplishments;                           // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            RequiredRecipes;                                   // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  WeatherGameStates;                                 // 0x0090(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_ContentBatchAsset>  ContentBatch;                                      // 0x00B0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootRequirements) == 0x000008, "Wrong alignment on FLootRequirements");
static_assert(sizeof(FLootRequirements) == 0x0000D8, "Wrong size on FLootRequirements");
static_assert(offsetof(FLootRequirements, TimeOfDay) == 0x000000, "Member 'FLootRequirements::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FLootRequirements, FriendshipRequirements) == 0x000018, "Member 'FLootRequirements::FriendshipRequirements' has a wrong offset!");
static_assert(offsetof(FLootRequirements, RomanceRequirements) == 0x000028, "Member 'FLootRequirements::RomanceRequirements' has a wrong offset!");
static_assert(offsetof(FLootRequirements, PlayerTagRequirements) == 0x000038, "Member 'FLootRequirements::PlayerTagRequirements' has a wrong offset!");
static_assert(offsetof(FLootRequirements, QuestPrereqs) == 0x000048, "Member 'FLootRequirements::QuestPrereqs' has a wrong offset!");
static_assert(offsetof(FLootRequirements, RequiredItems) == 0x000058, "Member 'FLootRequirements::RequiredItems' has a wrong offset!");
static_assert(offsetof(FLootRequirements, VitalRequirement) == 0x000068, "Member 'FLootRequirements::VitalRequirement' has a wrong offset!");
static_assert(offsetof(FLootRequirements, RequiredAccomplishments) == 0x000070, "Member 'FLootRequirements::RequiredAccomplishments' has a wrong offset!");
static_assert(offsetof(FLootRequirements, RequiredRecipes) == 0x000080, "Member 'FLootRequirements::RequiredRecipes' has a wrong offset!");
static_assert(offsetof(FLootRequirements, WeatherGameStates) == 0x000090, "Member 'FLootRequirements::WeatherGameStates' has a wrong offset!");
static_assert(offsetof(FLootRequirements, ContentBatch) == 0x0000B0, "Member 'FLootRequirements::ContentBatch' has a wrong offset!");

// ScriptStruct Palia.LootConfig
// 0x0110 (0x0110 - 0x0000)
struct FLootConfig final
{
public:
	int32                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20CE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLootRequirements                      Requirements;                                      // 0x0008(0x00D8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    RecipeConfig;                                      // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UCurrencyConfig*                        CurrencyConfig;                                    // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyAmount;                                    // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20CF[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLootConfig) == 0x000008, "Wrong alignment on FLootConfig");
static_assert(sizeof(FLootConfig) == 0x000110, "Wrong size on FLootConfig");
static_assert(offsetof(FLootConfig, Weight) == 0x000000, "Member 'FLootConfig::Weight' has a wrong offset!");
static_assert(offsetof(FLootConfig, Requirements) == 0x000008, "Member 'FLootConfig::Requirements' has a wrong offset!");
static_assert(offsetof(FLootConfig, ItemType) == 0x0000E0, "Member 'FLootConfig::ItemType' has a wrong offset!");
static_assert(offsetof(FLootConfig, ItemAmount) == 0x0000E8, "Member 'FLootConfig::ItemAmount' has a wrong offset!");
static_assert(offsetof(FLootConfig, QualityStars) == 0x0000EC, "Member 'FLootConfig::QualityStars' has a wrong offset!");
static_assert(offsetof(FLootConfig, RecipeConfig) == 0x0000F0, "Member 'FLootConfig::RecipeConfig' has a wrong offset!");
static_assert(offsetof(FLootConfig, CurrencyConfig) == 0x000100, "Member 'FLootConfig::CurrencyConfig' has a wrong offset!");
static_assert(offsetof(FLootConfig, CurrencyAmount) == 0x000108, "Member 'FLootConfig::CurrencyAmount' has a wrong offset!");

// ScriptStruct Palia.AnimNode_AimOffsetLookAt_Standalone
// 0x0160 (0x01F0 - 0x0090)
struct alignas(0x10) FAnimNode_AimOffsetLookAt_Standalone final : public FAnimNode_BlendSpacePlayer_Standalone
{
public:
	uint8                                         Pad_20D0[0xC0];                                    // 0x0090(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              BasePose;                                          // 0x0150(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceSocketName;                                  // 0x0164(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PivotSocketName;                                   // 0x016C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D1[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtLocation;                                    // 0x0178(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketAxis;                                        // 0x0190(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D2[0x44];                                    // 0x01AC(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AimOffsetLookAt_Standalone) == 0x000010, "Wrong alignment on FAnimNode_AimOffsetLookAt_Standalone");
static_assert(sizeof(FAnimNode_AimOffsetLookAt_Standalone) == 0x0001F0, "Wrong size on FAnimNode_AimOffsetLookAt_Standalone");
static_assert(offsetof(FAnimNode_AimOffsetLookAt_Standalone, BasePose) == 0x000150, "Member 'FAnimNode_AimOffsetLookAt_Standalone::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt_Standalone, LODThreshold) == 0x000160, "Member 'FAnimNode_AimOffsetLookAt_Standalone::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt_Standalone, SourceSocketName) == 0x000164, "Member 'FAnimNode_AimOffsetLookAt_Standalone::SourceSocketName' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt_Standalone, PivotSocketName) == 0x00016C, "Member 'FAnimNode_AimOffsetLookAt_Standalone::PivotSocketName' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt_Standalone, LookAtLocation) == 0x000178, "Member 'FAnimNode_AimOffsetLookAt_Standalone::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt_Standalone, SocketAxis) == 0x000190, "Member 'FAnimNode_AimOffsetLookAt_Standalone::SocketAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt_Standalone, Alpha) == 0x0001A8, "Member 'FAnimNode_AimOffsetLookAt_Standalone::Alpha' has a wrong offset!");

// ScriptStruct Palia.ItemSellValueConfig
// 0x00A0 (0x00A8 - 0x0008)
struct FItemSellValueConfig final : public FTableRowBase
{
public:
	EVitalType                                    SellRewardType;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D3[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> SellRewardItemType;                                // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SellRewardAmount;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SellForValueOfInputs;                              // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D4[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SellInputValueMultiplier;                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    CostType;                                          // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D5[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CostAmount;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuyCurrency;                                       // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyCurrencyAmount;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> BuyItemType;                                       // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyItemAmount;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyQuantity;                                       // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModificationCostType                         ModifyCostType;                                    // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    ModifyCostVitalType;                               // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D6[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurrencyConfig*                        ModifyCostCurrency;                                // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           ModifyCostItemType;                                // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifyCostAmount;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D7[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSellValueConfig) == 0x000008, "Wrong alignment on FItemSellValueConfig");
static_assert(sizeof(FItemSellValueConfig) == 0x0000A8, "Wrong size on FItemSellValueConfig");
static_assert(offsetof(FItemSellValueConfig, SellRewardType) == 0x000008, "Member 'FItemSellValueConfig::SellRewardType' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, SellRewardItemType) == 0x000010, "Member 'FItemSellValueConfig::SellRewardItemType' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, SellRewardAmount) == 0x000038, "Member 'FItemSellValueConfig::SellRewardAmount' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, SellForValueOfInputs) == 0x00003C, "Member 'FItemSellValueConfig::SellForValueOfInputs' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, SellInputValueMultiplier) == 0x000040, "Member 'FItemSellValueConfig::SellInputValueMultiplier' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, CostType) == 0x000044, "Member 'FItemSellValueConfig::CostType' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, CostAmount) == 0x000048, "Member 'FItemSellValueConfig::CostAmount' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, BuyCurrency) == 0x00004C, "Member 'FItemSellValueConfig::BuyCurrency' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, BuyCurrencyAmount) == 0x000054, "Member 'FItemSellValueConfig::BuyCurrencyAmount' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, BuyItemType) == 0x000058, "Member 'FItemSellValueConfig::BuyItemType' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, BuyItemAmount) == 0x000080, "Member 'FItemSellValueConfig::BuyItemAmount' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, BuyQuantity) == 0x000084, "Member 'FItemSellValueConfig::BuyQuantity' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, ModifyCostType) == 0x000088, "Member 'FItemSellValueConfig::ModifyCostType' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, ModifyCostVitalType) == 0x000089, "Member 'FItemSellValueConfig::ModifyCostVitalType' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, ModifyCostCurrency) == 0x000090, "Member 'FItemSellValueConfig::ModifyCostCurrency' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, ModifyCostItemType) == 0x000098, "Member 'FItemSellValueConfig::ModifyCostItemType' has a wrong offset!");
static_assert(offsetof(FItemSellValueConfig, ModifyCostAmount) == 0x0000A0, "Member 'FItemSellValueConfig::ModifyCostAmount' has a wrong offset!");

// ScriptStruct Palia.VillagerActionInfo
// 0x0070 (0x0070 - 0x0000)
struct FVillagerActionInfo final
{
public:
	class FText                                   UiText;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              AnimationMappingConfigDataTable;                   // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationMappingConfigRowName;                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ActionIcon;                                        // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerActionInfo) == 0x000008, "Wrong alignment on FVillagerActionInfo");
static_assert(sizeof(FVillagerActionInfo) == 0x000070, "Wrong size on FVillagerActionInfo");
static_assert(offsetof(FVillagerActionInfo, UiText) == 0x000000, "Member 'FVillagerActionInfo::UiText' has a wrong offset!");
static_assert(offsetof(FVillagerActionInfo, AnimationMappingConfigDataTable) == 0x000018, "Member 'FVillagerActionInfo::AnimationMappingConfigDataTable' has a wrong offset!");
static_assert(offsetof(FVillagerActionInfo, AnimationMappingConfigRowName) == 0x000040, "Member 'FVillagerActionInfo::AnimationMappingConfigRowName' has a wrong offset!");
static_assert(offsetof(FVillagerActionInfo, ActionIcon) == 0x000048, "Member 'FVillagerActionInfo::ActionIcon' has a wrong offset!");

// ScriptStruct Palia.VillagerSpawnParams
// 0x0028 (0x0028 - 0x0000)
struct FVillagerSpawnParams final
{
public:
	class FName                                   SpawnPointName;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagWriteback>        TagWritebacks;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MinimumWalkInDistance;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVillagerCostumeDataAsset*              VillagerCostumeOverride;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerSpawnParams) == 0x000008, "Wrong alignment on FVillagerSpawnParams");
static_assert(sizeof(FVillagerSpawnParams) == 0x000028, "Wrong size on FVillagerSpawnParams");
static_assert(offsetof(FVillagerSpawnParams, SpawnPointName) == 0x000000, "Member 'FVillagerSpawnParams::SpawnPointName' has a wrong offset!");
static_assert(offsetof(FVillagerSpawnParams, TagWritebacks) == 0x000008, "Member 'FVillagerSpawnParams::TagWritebacks' has a wrong offset!");
static_assert(offsetof(FVillagerSpawnParams, MinimumWalkInDistance) == 0x000018, "Member 'FVillagerSpawnParams::MinimumWalkInDistance' has a wrong offset!");
static_assert(offsetof(FVillagerSpawnParams, VillagerCostumeOverride) == 0x000020, "Member 'FVillagerSpawnParams::VillagerCostumeOverride' has a wrong offset!");

// ScriptStruct Palia.VillagerScheduleActivity
// 0x0160 (0x0160 - 0x0000)
struct FVillagerScheduleActivity final
{
public:
	class FName                                   ActivityLookupName;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVillagerScheduleActivityType                 ActivityType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideTrackingDuringActivity;                       // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D9[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeOfDayFilter                       TimeOfDayRange;                                    // 0x000C(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DA[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AValeriaTargetPoint>     TargetPointActivity;                               // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AValeriaTargetPoint>     TargetPointPreNavTeleport;                         // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AValeriaTargetPoint>     TargetPointNavigation;                             // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideBehaviorTree;                             // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DB[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTree*                          OverriddenBehaviorTree;                            // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVillagerActionInfo                    ActionInfo;                                        // 0x00B0(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UPrivateSpaceConfig*                    PrivateSpaceConfig;                                // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVillagerSpawnParams                   PrivateSpaceVillagerSpawnParams;                   // 0x0128(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    VillagerToFollow;                                  // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerScheduleActivity) == 0x000008, "Wrong alignment on FVillagerScheduleActivity");
static_assert(sizeof(FVillagerScheduleActivity) == 0x000160, "Wrong size on FVillagerScheduleActivity");
static_assert(offsetof(FVillagerScheduleActivity, ActivityLookupName) == 0x000000, "Member 'FVillagerScheduleActivity::ActivityLookupName' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, ActivityType) == 0x000008, "Member 'FVillagerScheduleActivity::ActivityType' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, bHideTrackingDuringActivity) == 0x000009, "Member 'FVillagerScheduleActivity::bHideTrackingDuringActivity' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, TimeOfDayRange) == 0x00000C, "Member 'FVillagerScheduleActivity::TimeOfDayRange' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, TargetPointActivity) == 0x000028, "Member 'FVillagerScheduleActivity::TargetPointActivity' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, TargetPointPreNavTeleport) == 0x000050, "Member 'FVillagerScheduleActivity::TargetPointPreNavTeleport' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, TargetPointNavigation) == 0x000078, "Member 'FVillagerScheduleActivity::TargetPointNavigation' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, bOverrideBehaviorTree) == 0x0000A0, "Member 'FVillagerScheduleActivity::bOverrideBehaviorTree' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, OverriddenBehaviorTree) == 0x0000A8, "Member 'FVillagerScheduleActivity::OverriddenBehaviorTree' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, ActionInfo) == 0x0000B0, "Member 'FVillagerScheduleActivity::ActionInfo' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, PrivateSpaceConfig) == 0x000120, "Member 'FVillagerScheduleActivity::PrivateSpaceConfig' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, PrivateSpaceVillagerSpawnParams) == 0x000128, "Member 'FVillagerScheduleActivity::PrivateSpaceVillagerSpawnParams' has a wrong offset!");
static_assert(offsetof(FVillagerScheduleActivity, VillagerToFollow) == 0x000150, "Member 'FVillagerScheduleActivity::VillagerToFollow' has a wrong offset!");

// ScriptStruct Palia.Int64Split
// 0x0008 (0x0008 - 0x0000)
struct FInt64Split final
{
public:
	int32                                         First;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Second;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInt64Split) == 0x000004, "Wrong alignment on FInt64Split");
static_assert(sizeof(FInt64Split) == 0x000008, "Wrong size on FInt64Split");
static_assert(offsetof(FInt64Split, First) == 0x000000, "Member 'FInt64Split::First' has a wrong offset!");
static_assert(offsetof(FInt64Split, Second) == 0x000004, "Member 'FInt64Split::Second' has a wrong offset!");

// ScriptStruct Palia.VillagerActiveActivity
// 0x0168 (0x0168 - 0x0000)
struct FVillagerActiveActivity final
{
public:
	struct FVillagerScheduleActivity              ScheduleActivity;                                  // 0x0000(0x0160)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FInt64Split                            StartedAt;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerActiveActivity) == 0x000008, "Wrong alignment on FVillagerActiveActivity");
static_assert(sizeof(FVillagerActiveActivity) == 0x000168, "Wrong size on FVillagerActiveActivity");
static_assert(offsetof(FVillagerActiveActivity, ScheduleActivity) == 0x000000, "Member 'FVillagerActiveActivity::ScheduleActivity' has a wrong offset!");
static_assert(offsetof(FVillagerActiveActivity, StartedAt) == 0x000160, "Member 'FVillagerActiveActivity::StartedAt' has a wrong offset!");

// ScriptStruct Palia.ItemTrackingConfig
// 0x0001 (0x0001 - 0x0000)
struct FItemTrackingConfig final
{
public:
	bool                                          bTotalPurchases;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemTrackingConfig) == 0x000001, "Wrong alignment on FItemTrackingConfig");
static_assert(sizeof(FItemTrackingConfig) == 0x000001, "Wrong size on FItemTrackingConfig");
static_assert(offsetof(FItemTrackingConfig, bTotalPurchases) == 0x000000, "Member 'FItemTrackingConfig::bTotalPurchases' has a wrong offset!");

// ScriptStruct Palia.FishCaughtResult
// 0x0010 (0x0010 - 0x0000)
struct FFishCaughtResult final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           FishType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FishQuality;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 FishCategory;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasPerfectCatch;                                  // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasFirstTimeCatch;                                // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DC[0x1];                                     // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishCaughtResult) == 0x000008, "Wrong alignment on FFishCaughtResult");
static_assert(sizeof(FFishCaughtResult) == 0x000010, "Wrong size on FFishCaughtResult");
static_assert(offsetof(FFishCaughtResult, FishType) == 0x000000, "Member 'FFishCaughtResult::FishType' has a wrong offset!");
static_assert(offsetof(FFishCaughtResult, FishQuality) == 0x000008, "Member 'FFishCaughtResult::FishQuality' has a wrong offset!");
static_assert(offsetof(FFishCaughtResult, FishCategory) == 0x00000C, "Member 'FFishCaughtResult::FishCategory' has a wrong offset!");
static_assert(offsetof(FFishCaughtResult, bWasPerfectCatch) == 0x00000D, "Member 'FFishCaughtResult::bWasPerfectCatch' has a wrong offset!");
static_assert(offsetof(FFishCaughtResult, bWasFirstTimeCatch) == 0x00000E, "Member 'FFishCaughtResult::bWasFirstTimeCatch' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildQuestGoalDef
// 0x0030 (0x0030 - 0x0000)
struct FVAL_PlayerGuildQuestGoalDef final
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> RequiredItemType;                                  // 0x0000(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountRequired;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DD[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_PlayerGuildQuestGoalDef) == 0x000008, "Wrong alignment on FVAL_PlayerGuildQuestGoalDef");
static_assert(sizeof(FVAL_PlayerGuildQuestGoalDef) == 0x000030, "Wrong size on FVAL_PlayerGuildQuestGoalDef");
static_assert(offsetof(FVAL_PlayerGuildQuestGoalDef, RequiredItemType) == 0x000000, "Member 'FVAL_PlayerGuildQuestGoalDef::RequiredItemType' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestGoalDef, AmountRequired) == 0x000028, "Member 'FVAL_PlayerGuildQuestGoalDef::AmountRequired' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildQuestReward
// 0x0004 (0x0004 - 0x0000)
struct FVAL_PlayerGuildQuestReward final
{
public:
	int32                                         PlayerGuildExperience;                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildQuestReward) == 0x000004, "Wrong alignment on FVAL_PlayerGuildQuestReward");
static_assert(sizeof(FVAL_PlayerGuildQuestReward) == 0x000004, "Wrong size on FVAL_PlayerGuildQuestReward");
static_assert(offsetof(FVAL_PlayerGuildQuestReward, PlayerGuildExperience) == 0x000000, "Member 'FVAL_PlayerGuildQuestReward::PlayerGuildExperience' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildQuestStepDef
// 0x0018 (0x0018 - 0x0000)
struct FVAL_PlayerGuildQuestStepDef final
{
public:
	TArray<struct FVAL_PlayerGuildQuestGoalDef>   GoalDefs;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FVAL_PlayerGuildQuestReward            Reward;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DE[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_PlayerGuildQuestStepDef) == 0x000008, "Wrong alignment on FVAL_PlayerGuildQuestStepDef");
static_assert(sizeof(FVAL_PlayerGuildQuestStepDef) == 0x000018, "Wrong size on FVAL_PlayerGuildQuestStepDef");
static_assert(offsetof(FVAL_PlayerGuildQuestStepDef, GoalDefs) == 0x000000, "Member 'FVAL_PlayerGuildQuestStepDef::GoalDefs' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestStepDef, Reward) == 0x000010, "Member 'FVAL_PlayerGuildQuestStepDef::Reward' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildQuestDef
// 0x0058 (0x0058 - 0x0000)
struct FVAL_PlayerGuildQuestDef final
{
public:
	class FString                                 TitleNamespace;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleKey;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DescriptionNamespace;                              // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DescriptionKey;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_PlayerGuildQuestSize                     QuestSize;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_PlayerGuildQuestRarity                   Rarity;                                            // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20DF[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVAL_PlayerGuildQuestStepDef>   StepDefs;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildQuestDef) == 0x000008, "Wrong alignment on FVAL_PlayerGuildQuestDef");
static_assert(sizeof(FVAL_PlayerGuildQuestDef) == 0x000058, "Wrong size on FVAL_PlayerGuildQuestDef");
static_assert(offsetof(FVAL_PlayerGuildQuestDef, TitleNamespace) == 0x000000, "Member 'FVAL_PlayerGuildQuestDef::TitleNamespace' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestDef, TitleKey) == 0x000010, "Member 'FVAL_PlayerGuildQuestDef::TitleKey' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestDef, DescriptionNamespace) == 0x000020, "Member 'FVAL_PlayerGuildQuestDef::DescriptionNamespace' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestDef, DescriptionKey) == 0x000030, "Member 'FVAL_PlayerGuildQuestDef::DescriptionKey' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestDef, QuestSize) == 0x000040, "Member 'FVAL_PlayerGuildQuestDef::QuestSize' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestDef, Rarity) == 0x000041, "Member 'FVAL_PlayerGuildQuestDef::Rarity' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestDef, StepDefs) == 0x000048, "Member 'FVAL_PlayerGuildQuestDef::StepDefs' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildQuestGoal
// 0x0038 (0x0038 - 0x0000)
struct FVAL_PlayerGuildQuestGoal final
{
public:
	struct FVAL_PlayerGuildQuestGoalDef           Def;                                               // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	int32                                         CurrentAmount;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E0[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_PlayerGuildQuestGoal) == 0x000008, "Wrong alignment on FVAL_PlayerGuildQuestGoal");
static_assert(sizeof(FVAL_PlayerGuildQuestGoal) == 0x000038, "Wrong size on FVAL_PlayerGuildQuestGoal");
static_assert(offsetof(FVAL_PlayerGuildQuestGoal, Def) == 0x000000, "Member 'FVAL_PlayerGuildQuestGoal::Def' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestGoal, CurrentAmount) == 0x000030, "Member 'FVAL_PlayerGuildQuestGoal::CurrentAmount' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildQuestStep
// 0x0028 (0x0028 - 0x0000)
struct FVAL_PlayerGuildQuestStep final
{
public:
	struct FVAL_PlayerGuildQuestStepDef           StepDef;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVAL_PlayerGuildQuestGoal>      Goals;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildQuestStep) == 0x000008, "Wrong alignment on FVAL_PlayerGuildQuestStep");
static_assert(sizeof(FVAL_PlayerGuildQuestStep) == 0x000028, "Wrong size on FVAL_PlayerGuildQuestStep");
static_assert(offsetof(FVAL_PlayerGuildQuestStep, StepDef) == 0x000000, "Member 'FVAL_PlayerGuildQuestStep::StepDef' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestStep, Goals) == 0x000018, "Member 'FVAL_PlayerGuildQuestStep::Goals' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildQuest
// 0x0088 (0x0088 - 0x0000)
struct FVAL_PlayerGuildQuest final
{
public:
	struct FVAL_PlayerGuildQuestDef               QuestDef;                                          // 0x0000(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	int32                                         CurrentStepIndex;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E1[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVAL_PlayerGuildQuestStep>      Steps;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FGuid                                  QuestInstanceId;                                   // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DateTimeCreated;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildQuest) == 0x000008, "Wrong alignment on FVAL_PlayerGuildQuest");
static_assert(sizeof(FVAL_PlayerGuildQuest) == 0x000088, "Wrong size on FVAL_PlayerGuildQuest");
static_assert(offsetof(FVAL_PlayerGuildQuest, QuestDef) == 0x000000, "Member 'FVAL_PlayerGuildQuest::QuestDef' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuest, CurrentStepIndex) == 0x000058, "Member 'FVAL_PlayerGuildQuest::CurrentStepIndex' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuest, Steps) == 0x000060, "Member 'FVAL_PlayerGuildQuest::Steps' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuest, QuestInstanceId) == 0x000070, "Member 'FVAL_PlayerGuildQuest::QuestInstanceId' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuest, DateTimeCreated) == 0x000080, "Member 'FVAL_PlayerGuildQuest::DateTimeCreated' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildQuestCollection
// 0x0040 (0x0040 - 0x0000)
struct FVAL_PlayerGuildQuestCollection final
{
public:
	TArray<struct FVAL_PlayerGuildQuest>          SmallQuests;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVAL_PlayerGuildQuest>          MediumQuests;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVAL_PlayerGuildQuest>          LargeQuests;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	int32                                         MaxSmallQuests;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMediumQuests;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLargeQuests;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E2[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_PlayerGuildQuestCollection) == 0x000008, "Wrong alignment on FVAL_PlayerGuildQuestCollection");
static_assert(sizeof(FVAL_PlayerGuildQuestCollection) == 0x000040, "Wrong size on FVAL_PlayerGuildQuestCollection");
static_assert(offsetof(FVAL_PlayerGuildQuestCollection, SmallQuests) == 0x000000, "Member 'FVAL_PlayerGuildQuestCollection::SmallQuests' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestCollection, MediumQuests) == 0x000010, "Member 'FVAL_PlayerGuildQuestCollection::MediumQuests' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestCollection, LargeQuests) == 0x000020, "Member 'FVAL_PlayerGuildQuestCollection::LargeQuests' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestCollection, MaxSmallQuests) == 0x000030, "Member 'FVAL_PlayerGuildQuestCollection::MaxSmallQuests' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestCollection, MaxMediumQuests) == 0x000034, "Member 'FVAL_PlayerGuildQuestCollection::MaxMediumQuests' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestCollection, MaxLargeQuests) == 0x000038, "Member 'FVAL_PlayerGuildQuestCollection::MaxLargeQuests' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildQuestGeneratedInfo
// 0x0048 (0x0048 - 0x0000)
struct FVAL_PlayerGuildQuestGeneratedInfo final
{
public:
	struct FVAL_PlayerGuildQuestCollection        QuestCollection;                                   // 0x0000(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NativeAccessSpecifierPublic)
	struct FDateTime                              SeedExpirationTime;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildQuestGeneratedInfo) == 0x000008, "Wrong alignment on FVAL_PlayerGuildQuestGeneratedInfo");
static_assert(sizeof(FVAL_PlayerGuildQuestGeneratedInfo) == 0x000048, "Wrong size on FVAL_PlayerGuildQuestGeneratedInfo");
static_assert(offsetof(FVAL_PlayerGuildQuestGeneratedInfo, QuestCollection) == 0x000000, "Member 'FVAL_PlayerGuildQuestGeneratedInfo::QuestCollection' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestGeneratedInfo, SeedExpirationTime) == 0x000040, "Member 'FVAL_PlayerGuildQuestGeneratedInfo::SeedExpirationTime' has a wrong offset!");

// ScriptStruct Palia.FishCaughtAnalyticsAttribute
// 0x0018 (0x0018 - 0x0000)
struct FFishCaughtAnalyticsAttribute final
{
public:
	class FString                                 Item;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stars;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishCaughtAnalyticsAttribute) == 0x000008, "Wrong alignment on FFishCaughtAnalyticsAttribute");
static_assert(sizeof(FFishCaughtAnalyticsAttribute) == 0x000018, "Wrong size on FFishCaughtAnalyticsAttribute");
static_assert(offsetof(FFishCaughtAnalyticsAttribute, Item) == 0x000000, "Member 'FFishCaughtAnalyticsAttribute::Item' has a wrong offset!");
static_assert(offsetof(FFishCaughtAnalyticsAttribute, Stars) == 0x000010, "Member 'FFishCaughtAnalyticsAttribute::Stars' has a wrong offset!");
static_assert(offsetof(FFishCaughtAnalyticsAttribute, Quantity) == 0x000014, "Member 'FFishCaughtAnalyticsAttribute::Quantity' has a wrong offset!");

// ScriptStruct Palia.AnimNode_PlayBlendSpaceByMapping
// 0x0028 (0x00B8 - 0x0090)
struct FAnimNode_PlayBlendSpaceByMapping final : public FAnimNode_BlendSpacePlayer_Standalone
{
public:
	class FName                                   MappingName;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimMappingCachePolicy                       NameCachePolicy;                                   // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E3[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaMoveablePawn*                   CachedPawn;                                        // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreviousMappingName;                               // 0x00A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MappingQualifier;                                  // 0x00B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_PlayBlendSpaceByMapping) == 0x000008, "Wrong alignment on FAnimNode_PlayBlendSpaceByMapping");
static_assert(sizeof(FAnimNode_PlayBlendSpaceByMapping) == 0x0000B8, "Wrong size on FAnimNode_PlayBlendSpaceByMapping");
static_assert(offsetof(FAnimNode_PlayBlendSpaceByMapping, MappingName) == 0x000090, "Member 'FAnimNode_PlayBlendSpaceByMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBlendSpaceByMapping, NameCachePolicy) == 0x000098, "Member 'FAnimNode_PlayBlendSpaceByMapping::NameCachePolicy' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBlendSpaceByMapping, CachedPawn) == 0x0000A0, "Member 'FAnimNode_PlayBlendSpaceByMapping::CachedPawn' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBlendSpaceByMapping, PreviousMappingName) == 0x0000A8, "Member 'FAnimNode_PlayBlendSpaceByMapping::PreviousMappingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlayBlendSpaceByMapping, MappingQualifier) == 0x0000B0, "Member 'FAnimNode_PlayBlendSpaceByMapping::MappingQualifier' has a wrong offset!");

// ScriptStruct Palia.ValeriaItem
// 0x0060 (0x0060 - 0x0000)
struct FValeriaItem final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemMetaData                          MetaData;                                          // 0x0030(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FItemMetaData_UseLimit                 MetaDataUse;                                       // 0x0058(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E5[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaItem) == 0x000008, "Wrong alignment on FValeriaItem");
static_assert(sizeof(FValeriaItem) == 0x000060, "Wrong size on FValeriaItem");
static_assert(offsetof(FValeriaItem, Amount) == 0x000000, "Member 'FValeriaItem::Amount' has a wrong offset!");
static_assert(offsetof(FValeriaItem, ItemType) == 0x000008, "Member 'FValeriaItem::ItemType' has a wrong offset!");
static_assert(offsetof(FValeriaItem, MetaData) == 0x000030, "Member 'FValeriaItem::MetaData' has a wrong offset!");
static_assert(offsetof(FValeriaItem, MetaDataUse) == 0x000058, "Member 'FValeriaItem::MetaDataUse' has a wrong offset!");

// ScriptStruct Palia.DebugCheatPlaceItems
// 0x0080 (0x0080 - 0x0000)
struct FDebugCheatPlaceItems final
{
public:
	struct FValeriaItem                           ItemToPlace;                                       // 0x0000(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UPlacementRegionComponent*              Region;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocationInRegion;                             // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugCheatPlaceItems) == 0x000008, "Wrong alignment on FDebugCheatPlaceItems");
static_assert(sizeof(FDebugCheatPlaceItems) == 0x000080, "Wrong size on FDebugCheatPlaceItems");
static_assert(offsetof(FDebugCheatPlaceItems, ItemToPlace) == 0x000000, "Member 'FDebugCheatPlaceItems::ItemToPlace' has a wrong offset!");
static_assert(offsetof(FDebugCheatPlaceItems, Region) == 0x000060, "Member 'FDebugCheatPlaceItems::Region' has a wrong offset!");
static_assert(offsetof(FDebugCheatPlaceItems, SpawnLocationInRegion) == 0x000068, "Member 'FDebugCheatPlaceItems::SpawnLocationInRegion' has a wrong offset!");

// ScriptStruct Palia.ItemGlobalConfig
// 0x0110 (0x0110 - 0x0000)
struct FItemGlobalConfig final
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> RepairKitItem;                                     // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepairPointsPerKit;                                // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E6[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EItemQuality, float>                     RepairGoldCosts;                                   // 0x0030(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNotification                          NotificationItemUsedUp;                            // 0x0080(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNotification                          NotificationItemCantBeUsed;                        // 0x00B0(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNotification                          NotificationItemDowngraded;                        // 0x00E0(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemGlobalConfig) == 0x000008, "Wrong alignment on FItemGlobalConfig");
static_assert(sizeof(FItemGlobalConfig) == 0x000110, "Wrong size on FItemGlobalConfig");
static_assert(offsetof(FItemGlobalConfig, RepairKitItem) == 0x000000, "Member 'FItemGlobalConfig::RepairKitItem' has a wrong offset!");
static_assert(offsetof(FItemGlobalConfig, RepairPointsPerKit) == 0x000028, "Member 'FItemGlobalConfig::RepairPointsPerKit' has a wrong offset!");
static_assert(offsetof(FItemGlobalConfig, RepairGoldCosts) == 0x000030, "Member 'FItemGlobalConfig::RepairGoldCosts' has a wrong offset!");
static_assert(offsetof(FItemGlobalConfig, NotificationItemUsedUp) == 0x000080, "Member 'FItemGlobalConfig::NotificationItemUsedUp' has a wrong offset!");
static_assert(offsetof(FItemGlobalConfig, NotificationItemCantBeUsed) == 0x0000B0, "Member 'FItemGlobalConfig::NotificationItemCantBeUsed' has a wrong offset!");
static_assert(offsetof(FItemGlobalConfig, NotificationItemDowngraded) == 0x0000E0, "Member 'FItemGlobalConfig::NotificationItemDowngraded' has a wrong offset!");

// ScriptStruct Palia.LarvaPersistData
// 0x0008 (0x0008 - 0x0000)
struct FLarvaPersistData final
{
public:
	double                                        FoodUnitsConsumed;                                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLarvaPersistData) == 0x000008, "Wrong alignment on FLarvaPersistData");
static_assert(sizeof(FLarvaPersistData) == 0x000008, "Wrong size on FLarvaPersistData");
static_assert(offsetof(FLarvaPersistData, FoodUnitsConsumed) == 0x000000, "Member 'FLarvaPersistData::FoodUnitsConsumed' has a wrong offset!");

// ScriptStruct Palia.ItemRowAmount
// 0x0040 (0x0040 - 0x0000)
struct FItemRowAmount final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurrencyConfig*                        CurrencyConfig;                                    // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyAmount;                                    // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E7[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    RecipeConfig;                                      // 0x0020(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    InspirationLoot;                                   // 0x0030(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemRowAmount) == 0x000008, "Wrong alignment on FItemRowAmount");
static_assert(sizeof(FItemRowAmount) == 0x000040, "Wrong size on FItemRowAmount");
static_assert(offsetof(FItemRowAmount, ItemType) == 0x000000, "Member 'FItemRowAmount::ItemType' has a wrong offset!");
static_assert(offsetof(FItemRowAmount, ItemAmount) == 0x000008, "Member 'FItemRowAmount::ItemAmount' has a wrong offset!");
static_assert(offsetof(FItemRowAmount, QualityStars) == 0x00000C, "Member 'FItemRowAmount::QualityStars' has a wrong offset!");
static_assert(offsetof(FItemRowAmount, CurrencyConfig) == 0x000010, "Member 'FItemRowAmount::CurrencyConfig' has a wrong offset!");
static_assert(offsetof(FItemRowAmount, CurrencyAmount) == 0x000018, "Member 'FItemRowAmount::CurrencyAmount' has a wrong offset!");
static_assert(offsetof(FItemRowAmount, RecipeConfig) == 0x000020, "Member 'FItemRowAmount::RecipeConfig' has a wrong offset!");
static_assert(offsetof(FItemRowAmount, InspirationLoot) == 0x000030, "Member 'FItemRowAmount::InspirationLoot' has a wrong offset!");

// ScriptStruct Palia.PersistGuid
// 0x0000 (0x0010 - 0x0010)
struct FPersistGuid final : public FGuid
{
};
static_assert(alignof(FPersistGuid) == 0x000004, "Wrong alignment on FPersistGuid");
static_assert(sizeof(FPersistGuid) == 0x000010, "Wrong size on FPersistGuid");

// ScriptStruct Palia.CrafterSlot
// 0x0078 (0x0078 - 0x0000)
struct FCrafterSlot final
{
public:
	struct FValeriaItem                           Item;                                              // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FPersistGuid                           OwnerPlayerId;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecipeSlotIndex;                                   // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E8[0x4];                                     // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrafterSlot) == 0x000008, "Wrong alignment on FCrafterSlot");
static_assert(sizeof(FCrafterSlot) == 0x000078, "Wrong size on FCrafterSlot");
static_assert(offsetof(FCrafterSlot, Item) == 0x000000, "Member 'FCrafterSlot::Item' has a wrong offset!");
static_assert(offsetof(FCrafterSlot, OwnerPlayerId) == 0x000060, "Member 'FCrafterSlot::OwnerPlayerId' has a wrong offset!");
static_assert(offsetof(FCrafterSlot, RecipeSlotIndex) == 0x000070, "Member 'FCrafterSlot::RecipeSlotIndex' has a wrong offset!");

// ScriptStruct Palia.FishingInputControllerSettings
// 0x0038 (0x0038 - 0x0000)
struct FFishingInputControllerSettings final
{
public:
	TSoftObjectPtr<class UCurveFloat>             RodMove_BaseSpeedCurve;                            // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RodMove_Speed;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RodMove_BoostAccumlator_StickExtentValue;          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RodMove_BoostAccumulator_RateToMaxSpeed;           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RodMove_BrakeSpeed;                                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingInputControllerSettings) == 0x000008, "Wrong alignment on FFishingInputControllerSettings");
static_assert(sizeof(FFishingInputControllerSettings) == 0x000038, "Wrong size on FFishingInputControllerSettings");
static_assert(offsetof(FFishingInputControllerSettings, RodMove_BaseSpeedCurve) == 0x000000, "Member 'FFishingInputControllerSettings::RodMove_BaseSpeedCurve' has a wrong offset!");
static_assert(offsetof(FFishingInputControllerSettings, RodMove_Speed) == 0x000028, "Member 'FFishingInputControllerSettings::RodMove_Speed' has a wrong offset!");
static_assert(offsetof(FFishingInputControllerSettings, RodMove_BoostAccumlator_StickExtentValue) == 0x00002C, "Member 'FFishingInputControllerSettings::RodMove_BoostAccumlator_StickExtentValue' has a wrong offset!");
static_assert(offsetof(FFishingInputControllerSettings, RodMove_BoostAccumulator_RateToMaxSpeed) == 0x000030, "Member 'FFishingInputControllerSettings::RodMove_BoostAccumulator_RateToMaxSpeed' has a wrong offset!");
static_assert(offsetof(FFishingInputControllerSettings, RodMove_BrakeSpeed) == 0x000034, "Member 'FFishingInputControllerSettings::RodMove_BrakeSpeed' has a wrong offset!");

// ScriptStruct Palia.CurrencyRewardPersist
// 0x0014 (0x0014 - 0x0000)
struct FCurrencyRewardPersist final
{
public:
	struct FGuid                                  Config;                                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyRewardPersist) == 0x000004, "Wrong alignment on FCurrencyRewardPersist");
static_assert(sizeof(FCurrencyRewardPersist) == 0x000014, "Wrong size on FCurrencyRewardPersist");
static_assert(offsetof(FCurrencyRewardPersist, Config) == 0x000000, "Member 'FCurrencyRewardPersist::Config' has a wrong offset!");
static_assert(offsetof(FCurrencyRewardPersist, Amount) == 0x000010, "Member 'FCurrencyRewardPersist::Amount' has a wrong offset!");

// ScriptStruct Palia.FishingCameraSettings
// 0x0038 (0x0038 - 0x0000)
struct FFishingCameraSettings final
{
public:
	struct FDataTableRowHandle                    AimReleaseCameraSetting;                           // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    WaitingCameraSetting;                              // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BlendTimeToPlaying;                                // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeDoneCancel;                               // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeDoneEmptyHanded;                          // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeDoneFailure;                              // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeDoneSuccess;                              // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTimeDoneSuccessCelebrate;                     // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingCameraSettings) == 0x000008, "Wrong alignment on FFishingCameraSettings");
static_assert(sizeof(FFishingCameraSettings) == 0x000038, "Wrong size on FFishingCameraSettings");
static_assert(offsetof(FFishingCameraSettings, AimReleaseCameraSetting) == 0x000000, "Member 'FFishingCameraSettings::AimReleaseCameraSetting' has a wrong offset!");
static_assert(offsetof(FFishingCameraSettings, WaitingCameraSetting) == 0x000010, "Member 'FFishingCameraSettings::WaitingCameraSetting' has a wrong offset!");
static_assert(offsetof(FFishingCameraSettings, BlendTimeToPlaying) == 0x000020, "Member 'FFishingCameraSettings::BlendTimeToPlaying' has a wrong offset!");
static_assert(offsetof(FFishingCameraSettings, BlendTimeDoneCancel) == 0x000024, "Member 'FFishingCameraSettings::BlendTimeDoneCancel' has a wrong offset!");
static_assert(offsetof(FFishingCameraSettings, BlendTimeDoneEmptyHanded) == 0x000028, "Member 'FFishingCameraSettings::BlendTimeDoneEmptyHanded' has a wrong offset!");
static_assert(offsetof(FFishingCameraSettings, BlendTimeDoneFailure) == 0x00002C, "Member 'FFishingCameraSettings::BlendTimeDoneFailure' has a wrong offset!");
static_assert(offsetof(FFishingCameraSettings, BlendTimeDoneSuccess) == 0x000030, "Member 'FFishingCameraSettings::BlendTimeDoneSuccess' has a wrong offset!");
static_assert(offsetof(FFishingCameraSettings, BlendTimeDoneSuccessCelebrate) == 0x000034, "Member 'FFishingCameraSettings::BlendTimeDoneSuccessCelebrate' has a wrong offset!");

// ScriptStruct Palia.PlacementPlugConnectorConfig
// 0x0028 (0x0028 - 0x0000)
struct FPlacementPlugConnectorConfig final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E9[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PlugTag;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlacementPlugConnectorConfig) == 0x000008, "Wrong alignment on FPlacementPlugConnectorConfig");
static_assert(sizeof(FPlacementPlugConnectorConfig) == 0x000028, "Wrong size on FPlacementPlugConnectorConfig");
static_assert(offsetof(FPlacementPlugConnectorConfig, bIsEnabled) == 0x000000, "Member 'FPlacementPlugConnectorConfig::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FPlacementPlugConnectorConfig, PlugTag) == 0x000004, "Member 'FPlacementPlugConnectorConfig::PlugTag' has a wrong offset!");
static_assert(offsetof(FPlacementPlugConnectorConfig, Offset) == 0x000010, "Member 'FPlacementPlugConnectorConfig::Offset' has a wrong offset!");

// ScriptStruct Palia.RecipeNeedsIngredient
// 0x0020 (0x0020 - 0x0000)
struct FRecipeNeedsIngredient final
{
public:
	struct FRecipe_RequireItem                    RequiredItem;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AmountAvailable;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EB[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipeNeedsIngredient) == 0x000008, "Wrong alignment on FRecipeNeedsIngredient");
static_assert(sizeof(FRecipeNeedsIngredient) == 0x000020, "Wrong size on FRecipeNeedsIngredient");
static_assert(offsetof(FRecipeNeedsIngredient, RequiredItem) == 0x000000, "Member 'FRecipeNeedsIngredient::RequiredItem' has a wrong offset!");
static_assert(offsetof(FRecipeNeedsIngredient, AmountAvailable) == 0x000018, "Member 'FRecipeNeedsIngredient::AmountAvailable' has a wrong offset!");

// ScriptStruct Palia.RecipeNeedsCrafter
// 0x0058 (0x0058 - 0x0000)
struct FRecipeNeedsCrafter final
{
public:
	class FText                                   CrafterName;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CrafterIcon;                                       // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRecipe_RequireItem>            ProducedItems;                                     // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCrafterIsMissing;                                 // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EC[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CrafterPersistId;                                  // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipeNeedsCrafter) == 0x000008, "Wrong alignment on FRecipeNeedsCrafter");
static_assert(sizeof(FRecipeNeedsCrafter) == 0x000058, "Wrong size on FRecipeNeedsCrafter");
static_assert(offsetof(FRecipeNeedsCrafter, CrafterName) == 0x000000, "Member 'FRecipeNeedsCrafter::CrafterName' has a wrong offset!");
static_assert(offsetof(FRecipeNeedsCrafter, CrafterIcon) == 0x000018, "Member 'FRecipeNeedsCrafter::CrafterIcon' has a wrong offset!");
static_assert(offsetof(FRecipeNeedsCrafter, ProducedItems) == 0x000040, "Member 'FRecipeNeedsCrafter::ProducedItems' has a wrong offset!");
static_assert(offsetof(FRecipeNeedsCrafter, bCrafterIsMissing) == 0x000050, "Member 'FRecipeNeedsCrafter::bCrafterIsMissing' has a wrong offset!");
static_assert(offsetof(FRecipeNeedsCrafter, CrafterPersistId) == 0x000054, "Member 'FRecipeNeedsCrafter::CrafterPersistId' has a wrong offset!");

// ScriptStruct Palia.RecipeNeeds
// 0x02B0 (0x02B0 - 0x0000)
struct FRecipeNeeds final
{
public:
	struct FRecipeConfig                          RecipeConfig;                                      // 0x0000(0x0240)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MainCrafterName;                                   // 0x0240(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MainCrafterIcon;                                   // 0x0258(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRecipeNeedsIngredient>         StartIngredients;                                  // 0x0280(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecipeNeedsIngredient>         OtherRootIngredients;                              // 0x0290(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecipeNeedsCrafter>            Crafters;                                          // 0x02A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipeNeeds) == 0x000008, "Wrong alignment on FRecipeNeeds");
static_assert(sizeof(FRecipeNeeds) == 0x0002B0, "Wrong size on FRecipeNeeds");
static_assert(offsetof(FRecipeNeeds, RecipeConfig) == 0x000000, "Member 'FRecipeNeeds::RecipeConfig' has a wrong offset!");
static_assert(offsetof(FRecipeNeeds, MainCrafterName) == 0x000240, "Member 'FRecipeNeeds::MainCrafterName' has a wrong offset!");
static_assert(offsetof(FRecipeNeeds, MainCrafterIcon) == 0x000258, "Member 'FRecipeNeeds::MainCrafterIcon' has a wrong offset!");
static_assert(offsetof(FRecipeNeeds, StartIngredients) == 0x000280, "Member 'FRecipeNeeds::StartIngredients' has a wrong offset!");
static_assert(offsetof(FRecipeNeeds, OtherRootIngredients) == 0x000290, "Member 'FRecipeNeeds::OtherRootIngredients' has a wrong offset!");
static_assert(offsetof(FRecipeNeeds, Crafters) == 0x0002A0, "Member 'FRecipeNeeds::Crafters' has a wrong offset!");

// ScriptStruct Palia.HoeQualityGlobalConfig
// 0x000C (0x000C - 0x0000)
struct FHoeQualityGlobalConfig final
{
public:
	EItemQuality                                  Quality;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20ED[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WidthModifier;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightModifier;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHoeQualityGlobalConfig) == 0x000004, "Wrong alignment on FHoeQualityGlobalConfig");
static_assert(sizeof(FHoeQualityGlobalConfig) == 0x00000C, "Wrong size on FHoeQualityGlobalConfig");
static_assert(offsetof(FHoeQualityGlobalConfig, Quality) == 0x000000, "Member 'FHoeQualityGlobalConfig::Quality' has a wrong offset!");
static_assert(offsetof(FHoeQualityGlobalConfig, WidthModifier) == 0x000004, "Member 'FHoeQualityGlobalConfig::WidthModifier' has a wrong offset!");
static_assert(offsetof(FHoeQualityGlobalConfig, HeightModifier) == 0x000008, "Member 'FHoeQualityGlobalConfig::HeightModifier' has a wrong offset!");

// ScriptStruct Palia.VillagerQuestItemRequirement
// 0x0018 (0x0018 - 0x0000)
struct FVillagerQuestItemRequirement final
{
public:
	int32                                         AmountRequired;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVAL_ItemTypeDefinitionAsset*           RequiredItemType;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumQualityStars;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   MinimumRarity;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FindInStorage;                                     // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EF[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVillagerQuestItemRequirement) == 0x000008, "Wrong alignment on FVillagerQuestItemRequirement");
static_assert(sizeof(FVillagerQuestItemRequirement) == 0x000018, "Wrong size on FVillagerQuestItemRequirement");
static_assert(offsetof(FVillagerQuestItemRequirement, AmountRequired) == 0x000000, "Member 'FVillagerQuestItemRequirement::AmountRequired' has a wrong offset!");
static_assert(offsetof(FVillagerQuestItemRequirement, RequiredItemType) == 0x000008, "Member 'FVillagerQuestItemRequirement::RequiredItemType' has a wrong offset!");
static_assert(offsetof(FVillagerQuestItemRequirement, MinimumQualityStars) == 0x000010, "Member 'FVillagerQuestItemRequirement::MinimumQualityStars' has a wrong offset!");
static_assert(offsetof(FVillagerQuestItemRequirement, MinimumRarity) == 0x000014, "Member 'FVillagerQuestItemRequirement::MinimumRarity' has a wrong offset!");
static_assert(offsetof(FVillagerQuestItemRequirement, FindInStorage) == 0x000015, "Member 'FVillagerQuestItemRequirement::FindInStorage' has a wrong offset!");

// ScriptStruct Palia.VillagerQuestRequirement
// 0x0288 (0x0288 - 0x0000)
struct FVillagerQuestRequirement final
{
public:
	EVillagerQuestRequirementType                 Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVillagerQuestItemRequirement          Item;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RequiredTag;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireMultiplayer;                               // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F1[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    VillagerToMeet;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    VillagerCoreToMeet;                                // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> FishToCatch;                                       // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    FishToCatch_Deprecated;                            // 0x0078(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    QuestSelectorToComplete;                           // 0x0088(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_DialogueAsset>      DialogueAsset;                                     // 0x0098(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CustomDescription;                                 // 0x00C0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ShouldHideGoal;                                    // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    VitalType;                                         // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F2[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VitalAmount;                                       // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurrencyConfig*                        CurrencyConfig;                                    // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyAmount;                                    // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F3[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    RecipeToLearn;                                     // 0x00F0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    VillagerToGiveGiftTo;                              // 0x0100(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    VillagerCoreToGiveGiftTo;                          // 0x0110(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           ItemTypeToGift;                                    // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVillagerGiftRewardLevel                      GenericItemToGiftRequirement;                      // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F4[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVAL_ItemTypeDefinitionAsset*           HouseItemTypeToAcquire;                            // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    MailToView;                                        // 0x0138(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HouseRequiredLevel;                                // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlotValueRequired;                                 // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillType                                    SkillType;                                         // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F5[0x3];                                     // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillLevelRequired;                                // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatName;                                          // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   StatFriendlyRequirementDescription;                // 0x0168(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         StatAmountRequired;                                // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggersPartialRewards;                           // 0x0184(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeductOnComplete;                                 // 0x0185(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireUnique;                                    // 0x0186(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F6[0x1];                                     // 0x0187(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPersistentTagWriteback>        PlayerTagWriteback;                                // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPersistentTagFilter                   PlayerTagRequirement;                              // 0x0198(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ActionCountRequired;                               // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVillagerQuestBranchingCategory               BranchingCategory;                                 // 0x01BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F7[0x3];                                     // 0x01BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FinishVillagerForBranch;                           // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_DialogueAsset>      DialogueAssetForBranch;                            // 0x01C8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             RewardsForBranch;                                  // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    CreatureToKill;                                    // 0x0200(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    VillagerToDiscoverPreferenceFor;                   // 0x0210(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EVillagerGiftRewardLevel                      PreferenceLevelToDiscover;                         // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValeriaGameAction                            GameAction;                                        // 0x0221(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F8[0x2];                                     // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LocationActorName;                                 // 0x0224(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F9[0x4];                                     // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   LocationActorType;                                 // 0x0230(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  LocationLevel;                                     // 0x0258(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocationActorIsArea;                               // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FA[0x7];                                     // 0x0281(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVillagerQuestRequirement) == 0x000008, "Wrong alignment on FVillagerQuestRequirement");
static_assert(sizeof(FVillagerQuestRequirement) == 0x000288, "Wrong size on FVillagerQuestRequirement");
static_assert(offsetof(FVillagerQuestRequirement, Type) == 0x000000, "Member 'FVillagerQuestRequirement::Type' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, Item) == 0x000008, "Member 'FVillagerQuestRequirement::Item' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, RequiredTag) == 0x000020, "Member 'FVillagerQuestRequirement::RequiredTag' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, bRequireMultiplayer) == 0x000028, "Member 'FVillagerQuestRequirement::bRequireMultiplayer' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, VillagerToMeet) == 0x000030, "Member 'FVillagerQuestRequirement::VillagerToMeet' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, VillagerCoreToMeet) == 0x000040, "Member 'FVillagerQuestRequirement::VillagerCoreToMeet' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, FishToCatch) == 0x000050, "Member 'FVillagerQuestRequirement::FishToCatch' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, FishToCatch_Deprecated) == 0x000078, "Member 'FVillagerQuestRequirement::FishToCatch_Deprecated' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, QuestSelectorToComplete) == 0x000088, "Member 'FVillagerQuestRequirement::QuestSelectorToComplete' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, DialogueAsset) == 0x000098, "Member 'FVillagerQuestRequirement::DialogueAsset' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, CustomDescription) == 0x0000C0, "Member 'FVillagerQuestRequirement::CustomDescription' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, ShouldHideGoal) == 0x0000D8, "Member 'FVillagerQuestRequirement::ShouldHideGoal' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, VitalType) == 0x0000D9, "Member 'FVillagerQuestRequirement::VitalType' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, VitalAmount) == 0x0000DC, "Member 'FVillagerQuestRequirement::VitalAmount' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, CurrencyConfig) == 0x0000E0, "Member 'FVillagerQuestRequirement::CurrencyConfig' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, CurrencyAmount) == 0x0000E8, "Member 'FVillagerQuestRequirement::CurrencyAmount' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, RecipeToLearn) == 0x0000F0, "Member 'FVillagerQuestRequirement::RecipeToLearn' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, VillagerToGiveGiftTo) == 0x000100, "Member 'FVillagerQuestRequirement::VillagerToGiveGiftTo' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, VillagerCoreToGiveGiftTo) == 0x000110, "Member 'FVillagerQuestRequirement::VillagerCoreToGiveGiftTo' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, ItemTypeToGift) == 0x000120, "Member 'FVillagerQuestRequirement::ItemTypeToGift' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, GenericItemToGiftRequirement) == 0x000128, "Member 'FVillagerQuestRequirement::GenericItemToGiftRequirement' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, HouseItemTypeToAcquire) == 0x000130, "Member 'FVillagerQuestRequirement::HouseItemTypeToAcquire' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, MailToView) == 0x000138, "Member 'FVillagerQuestRequirement::MailToView' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, HouseRequiredLevel) == 0x000148, "Member 'FVillagerQuestRequirement::HouseRequiredLevel' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, PlotValueRequired) == 0x00014C, "Member 'FVillagerQuestRequirement::PlotValueRequired' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, SkillType) == 0x000150, "Member 'FVillagerQuestRequirement::SkillType' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, SkillLevelRequired) == 0x000154, "Member 'FVillagerQuestRequirement::SkillLevelRequired' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, StatName) == 0x000158, "Member 'FVillagerQuestRequirement::StatName' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, StatFriendlyRequirementDescription) == 0x000168, "Member 'FVillagerQuestRequirement::StatFriendlyRequirementDescription' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, StatAmountRequired) == 0x000180, "Member 'FVillagerQuestRequirement::StatAmountRequired' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, bTriggersPartialRewards) == 0x000184, "Member 'FVillagerQuestRequirement::bTriggersPartialRewards' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, bDeductOnComplete) == 0x000185, "Member 'FVillagerQuestRequirement::bDeductOnComplete' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, bRequireUnique) == 0x000186, "Member 'FVillagerQuestRequirement::bRequireUnique' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, PlayerTagWriteback) == 0x000188, "Member 'FVillagerQuestRequirement::PlayerTagWriteback' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, PlayerTagRequirement) == 0x000198, "Member 'FVillagerQuestRequirement::PlayerTagRequirement' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, ActionCountRequired) == 0x0001B8, "Member 'FVillagerQuestRequirement::ActionCountRequired' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, BranchingCategory) == 0x0001BC, "Member 'FVillagerQuestRequirement::BranchingCategory' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, FinishVillagerForBranch) == 0x0001C0, "Member 'FVillagerQuestRequirement::FinishVillagerForBranch' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, DialogueAssetForBranch) == 0x0001C8, "Member 'FVillagerQuestRequirement::DialogueAssetForBranch' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, RewardsForBranch) == 0x0001F0, "Member 'FVillagerQuestRequirement::RewardsForBranch' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, CreatureToKill) == 0x000200, "Member 'FVillagerQuestRequirement::CreatureToKill' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, VillagerToDiscoverPreferenceFor) == 0x000210, "Member 'FVillagerQuestRequirement::VillagerToDiscoverPreferenceFor' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, PreferenceLevelToDiscover) == 0x000220, "Member 'FVillagerQuestRequirement::PreferenceLevelToDiscover' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, GameAction) == 0x000221, "Member 'FVillagerQuestRequirement::GameAction' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, LocationActorName) == 0x000224, "Member 'FVillagerQuestRequirement::LocationActorName' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, LocationActorType) == 0x000230, "Member 'FVillagerQuestRequirement::LocationActorType' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, LocationLevel) == 0x000258, "Member 'FVillagerQuestRequirement::LocationLevel' has a wrong offset!");
static_assert(offsetof(FVillagerQuestRequirement, LocationActorIsArea) == 0x000280, "Member 'FVillagerQuestRequirement::LocationActorIsArea' has a wrong offset!");

// ScriptStruct Palia.VillagerQuestStep
// 0x00C8 (0x00C8 - 0x0000)
struct FVillagerQuestStep final
{
public:
	TArray<struct FVillagerQuestRequirement>      Goals;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_DialogueAsset>      DialogueAssetOnComplete;                           // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             Rewards;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   OverrideQuestTitle;                                // 0x0048(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   OverrideQuestDescription;                          // 0x0060(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   OverrideQuestCategory;                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OverrideQuestReturnText;                           // 0x0080(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             RewardsForPartialComplete;                         // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagWriteback>        PlayerTagWriteback;                                // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   FinishVillagerForStep;                             // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAutoCompleteStep;                           // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FB[0x7];                                     // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVillagerQuestStep) == 0x000008, "Wrong alignment on FVillagerQuestStep");
static_assert(sizeof(FVillagerQuestStep) == 0x0000C8, "Wrong size on FVillagerQuestStep");
static_assert(offsetof(FVillagerQuestStep, Goals) == 0x000000, "Member 'FVillagerQuestStep::Goals' has a wrong offset!");
static_assert(offsetof(FVillagerQuestStep, DialogueAssetOnComplete) == 0x000010, "Member 'FVillagerQuestStep::DialogueAssetOnComplete' has a wrong offset!");
static_assert(offsetof(FVillagerQuestStep, Rewards) == 0x000038, "Member 'FVillagerQuestStep::Rewards' has a wrong offset!");
static_assert(offsetof(FVillagerQuestStep, OverrideQuestTitle) == 0x000048, "Member 'FVillagerQuestStep::OverrideQuestTitle' has a wrong offset!");
static_assert(offsetof(FVillagerQuestStep, OverrideQuestDescription) == 0x000060, "Member 'FVillagerQuestStep::OverrideQuestDescription' has a wrong offset!");
static_assert(offsetof(FVillagerQuestStep, OverrideQuestCategory) == 0x000078, "Member 'FVillagerQuestStep::OverrideQuestCategory' has a wrong offset!");
static_assert(offsetof(FVillagerQuestStep, OverrideQuestReturnText) == 0x000080, "Member 'FVillagerQuestStep::OverrideQuestReturnText' has a wrong offset!");
static_assert(offsetof(FVillagerQuestStep, RewardsForPartialComplete) == 0x000098, "Member 'FVillagerQuestStep::RewardsForPartialComplete' has a wrong offset!");
static_assert(offsetof(FVillagerQuestStep, PlayerTagWriteback) == 0x0000A8, "Member 'FVillagerQuestStep::PlayerTagWriteback' has a wrong offset!");
static_assert(offsetof(FVillagerQuestStep, FinishVillagerForStep) == 0x0000B8, "Member 'FVillagerQuestStep::FinishVillagerForStep' has a wrong offset!");
static_assert(offsetof(FVillagerQuestStep, bShouldAutoCompleteStep) == 0x0000C0, "Member 'FVillagerQuestStep::bShouldAutoCompleteStep' has a wrong offset!");

// ScriptStruct Palia.SubgameInputInfo
// 0x0018 (0x0018 - 0x0000)
struct FSubgameInputInfo final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FunctionName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETriggerEvent                                 TriggerEventType;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FC[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubgameInputInfo) == 0x000008, "Wrong alignment on FSubgameInputInfo");
static_assert(sizeof(FSubgameInputInfo) == 0x000018, "Wrong size on FSubgameInputInfo");
static_assert(offsetof(FSubgameInputInfo, InputAction) == 0x000000, "Member 'FSubgameInputInfo::InputAction' has a wrong offset!");
static_assert(offsetof(FSubgameInputInfo, FunctionName) == 0x000008, "Member 'FSubgameInputInfo::FunctionName' has a wrong offset!");
static_assert(offsetof(FSubgameInputInfo, TriggerEventType) == 0x000010, "Member 'FSubgameInputInfo::TriggerEventType' has a wrong offset!");

// ScriptStruct Palia.CrafterPlayerActionPersist
// 0x0020 (0x0020 - 0x0000)
struct FCrafterPlayerActionPersist final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InteractionStart;                                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionCompletion;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FD[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrafterPlayerActionPersist) == 0x000008, "Wrong alignment on FCrafterPlayerActionPersist");
static_assert(sizeof(FCrafterPlayerActionPersist) == 0x000020, "Wrong size on FCrafterPlayerActionPersist");
static_assert(offsetof(FCrafterPlayerActionPersist, PlayerId) == 0x000000, "Member 'FCrafterPlayerActionPersist::PlayerId' has a wrong offset!");
static_assert(offsetof(FCrafterPlayerActionPersist, InteractionStart) == 0x000010, "Member 'FCrafterPlayerActionPersist::InteractionStart' has a wrong offset!");
static_assert(offsetof(FCrafterPlayerActionPersist, InteractionCompletion) == 0x000018, "Member 'FCrafterPlayerActionPersist::InteractionCompletion' has a wrong offset!");

// ScriptStruct Palia.DebugServerActorMapping
// 0x0030 (0x0030 - 0x0000)
struct FDebugServerActorMapping final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Class;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugServerActorMapping) == 0x000008, "Wrong alignment on FDebugServerActorMapping");
static_assert(sizeof(FDebugServerActorMapping) == 0x000030, "Wrong size on FDebugServerActorMapping");
static_assert(offsetof(FDebugServerActorMapping, Actor) == 0x000000, "Member 'FDebugServerActorMapping::Actor' has a wrong offset!");
static_assert(offsetof(FDebugServerActorMapping, Class) == 0x000008, "Member 'FDebugServerActorMapping::Class' has a wrong offset!");
static_assert(offsetof(FDebugServerActorMapping, Name) == 0x000010, "Member 'FDebugServerActorMapping::Name' has a wrong offset!");
static_assert(offsetof(FDebugServerActorMapping, Position) == 0x000018, "Member 'FDebugServerActorMapping::Position' has a wrong offset!");

// ScriptStruct Palia.DebugServerActorListToTrackItem
// 0x0034 (0x0040 - 0x000C)
struct FDebugServerActorListToTrackItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_20FE[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDebugServerActorMapping               TargetContext;                                     // 0x0010(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugServerActorListToTrackItem) == 0x000008, "Wrong alignment on FDebugServerActorListToTrackItem");
static_assert(sizeof(FDebugServerActorListToTrackItem) == 0x000040, "Wrong size on FDebugServerActorListToTrackItem");
static_assert(offsetof(FDebugServerActorListToTrackItem, TargetContext) == 0x000010, "Member 'FDebugServerActorListToTrackItem::TargetContext' has a wrong offset!");

// ScriptStruct Palia.DebugServerActorListToTrack
// 0x0010 (0x0118 - 0x0108)
struct FDebugServerActorListToTrack final : public FFastArraySerializer
{
public:
	TArray<struct FDebugServerActorListToTrackItem> Targets;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugServerActorListToTrack) == 0x000008, "Wrong alignment on FDebugServerActorListToTrack");
static_assert(sizeof(FDebugServerActorListToTrack) == 0x000118, "Wrong size on FDebugServerActorListToTrack");
static_assert(offsetof(FDebugServerActorListToTrack, Targets) == 0x000108, "Member 'FDebugServerActorListToTrack::Targets' has a wrong offset!");

// ScriptStruct Palia.ShopCostScalingInfo
// 0x0018 (0x0018 - 0x0000)
struct FShopCostScalingInfo final
{
public:
	EShopCostScalingType                          Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMultiplier;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20FF[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   Curve;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShopCostScalingInfo) == 0x000008, "Wrong alignment on FShopCostScalingInfo");
static_assert(sizeof(FShopCostScalingInfo) == 0x000018, "Wrong size on FShopCostScalingInfo");
static_assert(offsetof(FShopCostScalingInfo, Type) == 0x000000, "Member 'FShopCostScalingInfo::Type' has a wrong offset!");
static_assert(offsetof(FShopCostScalingInfo, bIsMultiplier) == 0x000001, "Member 'FShopCostScalingInfo::bIsMultiplier' has a wrong offset!");
static_assert(offsetof(FShopCostScalingInfo, Curve) == 0x000008, "Member 'FShopCostScalingInfo::Curve' has a wrong offset!");

// ScriptStruct Palia.ShopItemAdditionalCost
// 0x0010 (0x0010 - 0x0000)
struct FShopItemAdditionalCost final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           RequiredItemType;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2100[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShopItemAdditionalCost) == 0x000008, "Wrong alignment on FShopItemAdditionalCost");
static_assert(sizeof(FShopItemAdditionalCost) == 0x000010, "Wrong size on FShopItemAdditionalCost");
static_assert(offsetof(FShopItemAdditionalCost, RequiredItemType) == 0x000000, "Member 'FShopItemAdditionalCost::RequiredItemType' has a wrong offset!");
static_assert(offsetof(FShopItemAdditionalCost, ItemAmount) == 0x000008, "Member 'FShopItemAdditionalCost::ItemAmount' has a wrong offset!");

// ScriptStruct Palia.ShopItem
// 0x0060 (0x0060 - 0x0000)
struct FShopItem final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2101[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FShopCostScalingInfo                   CostAmountScaling;                                 // 0x0010(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EVitalType                                    Cost2Type;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2102[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost2Amount;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShopCostScalingInfo                   Cost2AmountScaling;                                // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FShopItemAdditionalCost>        AdditionalCost;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitedStock;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShopItem) == 0x000008, "Wrong alignment on FShopItem");
static_assert(sizeof(FShopItem) == 0x000060, "Wrong size on FShopItem");
static_assert(offsetof(FShopItem, ItemType) == 0x000000, "Member 'FShopItem::ItemType' has a wrong offset!");
static_assert(offsetof(FShopItem, Amount) == 0x000008, "Member 'FShopItem::Amount' has a wrong offset!");
static_assert(offsetof(FShopItem, CostAmountScaling) == 0x000010, "Member 'FShopItem::CostAmountScaling' has a wrong offset!");
static_assert(offsetof(FShopItem, Cost2Type) == 0x000028, "Member 'FShopItem::Cost2Type' has a wrong offset!");
static_assert(offsetof(FShopItem, Cost2Amount) == 0x00002C, "Member 'FShopItem::Cost2Amount' has a wrong offset!");
static_assert(offsetof(FShopItem, Cost2AmountScaling) == 0x000030, "Member 'FShopItem::Cost2AmountScaling' has a wrong offset!");
static_assert(offsetof(FShopItem, AdditionalCost) == 0x000048, "Member 'FShopItem::AdditionalCost' has a wrong offset!");
static_assert(offsetof(FShopItem, Weight) == 0x000058, "Member 'FShopItem::Weight' has a wrong offset!");
static_assert(offsetof(FShopItem, LimitedStock) == 0x00005C, "Member 'FShopItem::LimitedStock' has a wrong offset!");

// ScriptStruct Palia.ShopSelector
// 0x0010 (0x0010 - 0x0000)
struct FShopSelector final
{
public:
	TArray<struct FShopItem>                      Items;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShopSelector) == 0x000008, "Wrong alignment on FShopSelector");
static_assert(sizeof(FShopSelector) == 0x000010, "Wrong size on FShopSelector");
static_assert(offsetof(FShopSelector, Items) == 0x000000, "Member 'FShopSelector::Items' has a wrong offset!");

// ScriptStruct Palia.LightingGroupSettings
// 0x001C (0x001C - 0x0000)
struct FLightingGroupSettings final
{
public:
	bool                                          bCanCastShadows;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2103[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisableShadowsSize;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectTranslucentLighting;                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2104[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DisableTranslucentLightingSize;                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDrawDistanceSize;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDrawDistanceMultiplier;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFadeRangeMultiplier;                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLightingGroupSettings) == 0x000004, "Wrong alignment on FLightingGroupSettings");
static_assert(sizeof(FLightingGroupSettings) == 0x00001C, "Wrong size on FLightingGroupSettings");
static_assert(offsetof(FLightingGroupSettings, bCanCastShadows) == 0x000000, "Member 'FLightingGroupSettings::bCanCastShadows' has a wrong offset!");
static_assert(offsetof(FLightingGroupSettings, DisableShadowsSize) == 0x000004, "Member 'FLightingGroupSettings::DisableShadowsSize' has a wrong offset!");
static_assert(offsetof(FLightingGroupSettings, bAffectTranslucentLighting) == 0x000008, "Member 'FLightingGroupSettings::bAffectTranslucentLighting' has a wrong offset!");
static_assert(offsetof(FLightingGroupSettings, DisableTranslucentLightingSize) == 0x00000C, "Member 'FLightingGroupSettings::DisableTranslucentLightingSize' has a wrong offset!");
static_assert(offsetof(FLightingGroupSettings, MaxDrawDistanceSize) == 0x000010, "Member 'FLightingGroupSettings::MaxDrawDistanceSize' has a wrong offset!");
static_assert(offsetof(FLightingGroupSettings, MaxDrawDistanceMultiplier) == 0x000014, "Member 'FLightingGroupSettings::MaxDrawDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(FLightingGroupSettings, MaxDistanceFadeRangeMultiplier) == 0x000018, "Member 'FLightingGroupSettings::MaxDistanceFadeRangeMultiplier' has a wrong offset!");

// ScriptStruct Palia.MessageTarget
// 0x0028 (0x0028 - 0x0000)
struct FMessageTarget final
{
public:
	EMessageTargetType                            Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2105[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RecipientId;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecipientCharacterName;                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessageTarget) == 0x000008, "Wrong alignment on FMessageTarget");
static_assert(sizeof(FMessageTarget) == 0x000028, "Wrong size on FMessageTarget");
static_assert(offsetof(FMessageTarget, Type) == 0x000000, "Member 'FMessageTarget::Type' has a wrong offset!");
static_assert(offsetof(FMessageTarget, RecipientId) == 0x000008, "Member 'FMessageTarget::RecipientId' has a wrong offset!");
static_assert(offsetof(FMessageTarget, RecipientCharacterName) == 0x000018, "Member 'FMessageTarget::RecipientCharacterName' has a wrong offset!");

// ScriptStruct Palia.Message
// 0x0048 (0x0048 - 0x0000)
struct FMessage
{
public:
	struct FMessageTarget                         Target;                                            // 0x0000(0x0028)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FromID;                                            // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FromCharacterName;                                 // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessage) == 0x000008, "Wrong alignment on FMessage");
static_assert(sizeof(FMessage) == 0x000048, "Wrong size on FMessage");
static_assert(offsetof(FMessage, Target) == 0x000000, "Member 'FMessage::Target' has a wrong offset!");
static_assert(offsetof(FMessage, FromID) == 0x000028, "Member 'FMessage::FromID' has a wrong offset!");
static_assert(offsetof(FMessage, FromCharacterName) == 0x000038, "Member 'FMessage::FromCharacterName' has a wrong offset!");

// ScriptStruct Palia.ValeriaChatMessage
// 0x0020 (0x0068 - 0x0048)
struct FValeriaChatMessage final : public FMessage
{
public:
	EChatMessageType                              ChatMessageType;                                   // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2106[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Content;                                           // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaChatMessage) == 0x000008, "Wrong alignment on FValeriaChatMessage");
static_assert(sizeof(FValeriaChatMessage) == 0x000068, "Wrong size on FValeriaChatMessage");
static_assert(offsetof(FValeriaChatMessage, ChatMessageType) == 0x000048, "Member 'FValeriaChatMessage::ChatMessageType' has a wrong offset!");
static_assert(offsetof(FValeriaChatMessage, Content) == 0x000050, "Member 'FValeriaChatMessage::Content' has a wrong offset!");
static_assert(offsetof(FValeriaChatMessage, Timestamp) == 0x000060, "Member 'FValeriaChatMessage::Timestamp' has a wrong offset!");

// ScriptStruct Palia.LevelerRequirement
// 0x0020 (0x0020 - 0x0000)
struct FLevelerRequirement final
{
public:
	EVitalType                                    VitalType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2107[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VitalAmount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillType                                    SkillType;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2108[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillLevel;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2109[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelerRequirement) == 0x000008, "Wrong alignment on FLevelerRequirement");
static_assert(sizeof(FLevelerRequirement) == 0x000020, "Wrong size on FLevelerRequirement");
static_assert(offsetof(FLevelerRequirement, VitalType) == 0x000000, "Member 'FLevelerRequirement::VitalType' has a wrong offset!");
static_assert(offsetof(FLevelerRequirement, VitalAmount) == 0x000004, "Member 'FLevelerRequirement::VitalAmount' has a wrong offset!");
static_assert(offsetof(FLevelerRequirement, ItemType) == 0x000008, "Member 'FLevelerRequirement::ItemType' has a wrong offset!");
static_assert(offsetof(FLevelerRequirement, ItemAmount) == 0x000010, "Member 'FLevelerRequirement::ItemAmount' has a wrong offset!");
static_assert(offsetof(FLevelerRequirement, SkillType) == 0x000014, "Member 'FLevelerRequirement::SkillType' has a wrong offset!");
static_assert(offsetof(FLevelerRequirement, SkillLevel) == 0x000018, "Member 'FLevelerRequirement::SkillLevel' has a wrong offset!");

// ScriptStruct Palia.FishingSoundSettings
// 0x0008 (0x0008 - 0x0000)
struct FFishingSoundSettings final
{
public:
	class UAkAudioEvent*                          OnBiteSound;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingSoundSettings) == 0x000008, "Wrong alignment on FFishingSoundSettings");
static_assert(sizeof(FFishingSoundSettings) == 0x000008, "Wrong size on FFishingSoundSettings");
static_assert(offsetof(FFishingSoundSettings, OnBiteSound) == 0x000000, "Member 'FFishingSoundSettings::OnBiteSound' has a wrong offset!");

// ScriptStruct Palia.ActorSpawnConditions
// 0x0040 (0x0040 - 0x0000)
struct FActorSpawnConditions final
{
public:
	struct FTimeOfDayFilter                       ValidTimeOfDay;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ValidWeather;                                      // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         RandomChance;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210A[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FActorSpawnConditions) == 0x000008, "Wrong alignment on FActorSpawnConditions");
static_assert(sizeof(FActorSpawnConditions) == 0x000040, "Wrong size on FActorSpawnConditions");
static_assert(offsetof(FActorSpawnConditions, ValidTimeOfDay) == 0x000000, "Member 'FActorSpawnConditions::ValidTimeOfDay' has a wrong offset!");
static_assert(offsetof(FActorSpawnConditions, ValidWeather) == 0x000018, "Member 'FActorSpawnConditions::ValidWeather' has a wrong offset!");
static_assert(offsetof(FActorSpawnConditions, RandomChance) == 0x000038, "Member 'FActorSpawnConditions::RandomChance' has a wrong offset!");

// ScriptStruct Palia.VAL_PrizeWheelSlotDef
// 0x0028 (0x0028 - 0x0000)
struct FVAL_PrizeWheelSlotDef final
{
public:
	int32                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestRewardConfig>             Rewards;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         PrizeFX;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteDataAsset*                        ReactionEmote;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PrizeWheelSlotDef) == 0x000008, "Wrong alignment on FVAL_PrizeWheelSlotDef");
static_assert(sizeof(FVAL_PrizeWheelSlotDef) == 0x000028, "Wrong size on FVAL_PrizeWheelSlotDef");
static_assert(offsetof(FVAL_PrizeWheelSlotDef, Weight) == 0x000000, "Member 'FVAL_PrizeWheelSlotDef::Weight' has a wrong offset!");
static_assert(offsetof(FVAL_PrizeWheelSlotDef, Rewards) == 0x000008, "Member 'FVAL_PrizeWheelSlotDef::Rewards' has a wrong offset!");
static_assert(offsetof(FVAL_PrizeWheelSlotDef, PrizeFX) == 0x000018, "Member 'FVAL_PrizeWheelSlotDef::PrizeFX' has a wrong offset!");
static_assert(offsetof(FVAL_PrizeWheelSlotDef, ReactionEmote) == 0x000020, "Member 'FVAL_PrizeWheelSlotDef::ReactionEmote' has a wrong offset!");

// ScriptStruct Palia.VAL_ValidateLoadoutError_ErrorItems
// 0x0050 (0x0050 - 0x0000)
struct FVAL_ValidateLoadoutError_ErrorItems final
{
public:
	TSet<class UVAL_CharacterCustomizationItemBase*> ErroredItems;                                      // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_ValidateLoadoutError_ErrorItems) == 0x000008, "Wrong alignment on FVAL_ValidateLoadoutError_ErrorItems");
static_assert(sizeof(FVAL_ValidateLoadoutError_ErrorItems) == 0x000050, "Wrong size on FVAL_ValidateLoadoutError_ErrorItems");
static_assert(offsetof(FVAL_ValidateLoadoutError_ErrorItems, ErroredItems) == 0x000000, "Member 'FVAL_ValidateLoadoutError_ErrorItems::ErroredItems' has a wrong offset!");

// ScriptStruct Palia.VAL_ValidateLoadoutErrorPayload
// 0x0050 (0x0050 - 0x0000)
struct FVAL_ValidateLoadoutErrorPayload final
{
public:
	TMap<EVAL_LoadoutErrorType, struct FVAL_ValidateLoadoutError_ErrorItems> ErrorToItemMap;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_ValidateLoadoutErrorPayload) == 0x000008, "Wrong alignment on FVAL_ValidateLoadoutErrorPayload");
static_assert(sizeof(FVAL_ValidateLoadoutErrorPayload) == 0x000050, "Wrong size on FVAL_ValidateLoadoutErrorPayload");
static_assert(offsetof(FVAL_ValidateLoadoutErrorPayload, ErrorToItemMap) == 0x000000, "Member 'FVAL_ValidateLoadoutErrorPayload::ErrorToItemMap' has a wrong offset!");

// ScriptStruct Palia.PopupPageInfo
// 0x0058 (0x0058 - 0x0000)
struct FPopupPageInfo final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   BodyText;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DisplayImage;                                      // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPopupPageInfo) == 0x000008, "Wrong alignment on FPopupPageInfo");
static_assert(sizeof(FPopupPageInfo) == 0x000058, "Wrong size on FPopupPageInfo");
static_assert(offsetof(FPopupPageInfo, Title) == 0x000000, "Member 'FPopupPageInfo::Title' has a wrong offset!");
static_assert(offsetof(FPopupPageInfo, BodyText) == 0x000018, "Member 'FPopupPageInfo::BodyText' has a wrong offset!");
static_assert(offsetof(FPopupPageInfo, DisplayImage) == 0x000030, "Member 'FPopupPageInfo::DisplayImage' has a wrong offset!");

// ScriptStruct Palia.AnimState
// 0x0018 (0x0018 - 0x0000)
struct FAnimState final
{
public:
	struct FGameplayTag                           State;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SubState;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Transition;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimState) == 0x000004, "Wrong alignment on FAnimState");
static_assert(sizeof(FAnimState) == 0x000018, "Wrong size on FAnimState");
static_assert(offsetof(FAnimState, State) == 0x000000, "Member 'FAnimState::State' has a wrong offset!");
static_assert(offsetof(FAnimState, SubState) == 0x000008, "Member 'FAnimState::SubState' has a wrong offset!");
static_assert(offsetof(FAnimState, Transition) == 0x000010, "Member 'FAnimState::Transition' has a wrong offset!");

// ScriptStruct Palia.VAL_OnContributeBingoItemsDelegates
// 0x0020 (0x0020 - 0x0000)
struct FVAL_OnContributeBingoItemsDelegates final
{
public:
	TDelegate<void(class UVAL_BingoBoardgamePlayerComponent* BingoBoardgamePlayerComponent, int32 BingoCellIndex, int32 QuantityContributed)> OnSuccess;                                         // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UVAL_BingoBoardgamePlayerComponent* BingoBoardgamePlayerComponent, class FText& ErrorMessage)> OnFailure;                                         // 0x0010(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_OnContributeBingoItemsDelegates) == 0x000004, "Wrong alignment on FVAL_OnContributeBingoItemsDelegates");
static_assert(sizeof(FVAL_OnContributeBingoItemsDelegates) == 0x000020, "Wrong size on FVAL_OnContributeBingoItemsDelegates");
static_assert(offsetof(FVAL_OnContributeBingoItemsDelegates, OnSuccess) == 0x000000, "Member 'FVAL_OnContributeBingoItemsDelegates::OnSuccess' has a wrong offset!");
static_assert(offsetof(FVAL_OnContributeBingoItemsDelegates, OnFailure) == 0x000010, "Member 'FVAL_OnContributeBingoItemsDelegates::OnFailure' has a wrong offset!");

// ScriptStruct Palia.AbilitiesActivationConfig
// 0x00D8 (0x00E0 - 0x0008)
struct FAbilitiesActivationConfig final : public FTableRowBase
{
public:
	struct FGameplayTag                           LocomotionTag;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LocomotionTagItemInUse;                            // 0x0010(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AltLocomotionTagItemInUse;                         // 0x0018(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IdleAnimTag;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityLevel;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210C[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   LMBAbility;                                        // 0x0030(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   RMBAbility;                                        // 0x0058(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SpacebarAbility;                                   // 0x0080(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoActivateLMBAbility;                            // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210D[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           AdditionalGrantedAbilities;                        // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          CancelOnSprint;                                    // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QueueSprintToggleDuringAbility;                    // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210E[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UValeriaGASGameplayAbility>> AbilityList;                                       // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         CatchValueForInsectCatching;                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalCatchValueIfAlreadyHit;                  // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilitiesActivationConfig) == 0x000008, "Wrong alignment on FAbilitiesActivationConfig");
static_assert(sizeof(FAbilitiesActivationConfig) == 0x0000E0, "Wrong size on FAbilitiesActivationConfig");
static_assert(offsetof(FAbilitiesActivationConfig, LocomotionTag) == 0x000008, "Member 'FAbilitiesActivationConfig::LocomotionTag' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, LocomotionTagItemInUse) == 0x000010, "Member 'FAbilitiesActivationConfig::LocomotionTagItemInUse' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, AltLocomotionTagItemInUse) == 0x000018, "Member 'FAbilitiesActivationConfig::AltLocomotionTagItemInUse' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, IdleAnimTag) == 0x000020, "Member 'FAbilitiesActivationConfig::IdleAnimTag' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, AbilityLevel) == 0x000028, "Member 'FAbilitiesActivationConfig::AbilityLevel' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, LMBAbility) == 0x000030, "Member 'FAbilitiesActivationConfig::LMBAbility' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, RMBAbility) == 0x000058, "Member 'FAbilitiesActivationConfig::RMBAbility' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, SpacebarAbility) == 0x000080, "Member 'FAbilitiesActivationConfig::SpacebarAbility' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, AutoActivateLMBAbility) == 0x0000A8, "Member 'FAbilitiesActivationConfig::AutoActivateLMBAbility' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, AdditionalGrantedAbilities) == 0x0000B0, "Member 'FAbilitiesActivationConfig::AdditionalGrantedAbilities' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, CancelOnSprint) == 0x0000C0, "Member 'FAbilitiesActivationConfig::CancelOnSprint' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, QueueSprintToggleDuringAbility) == 0x0000C1, "Member 'FAbilitiesActivationConfig::QueueSprintToggleDuringAbility' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, AbilityList) == 0x0000C8, "Member 'FAbilitiesActivationConfig::AbilityList' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, CatchValueForInsectCatching) == 0x0000D8, "Member 'FAbilitiesActivationConfig::CatchValueForInsectCatching' has a wrong offset!");
static_assert(offsetof(FAbilitiesActivationConfig, AdditionalCatchValueIfAlreadyHit) == 0x0000DC, "Member 'FAbilitiesActivationConfig::AdditionalCatchValueIfAlreadyHit' has a wrong offset!");

// ScriptStruct Palia.RandomSequenceMappingEntry
// 0x0058 (0x0058 - 0x0000)
struct FRandomSequenceMappingEntry final
{
public:
	class FName                                   MappingName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRandomPlayerSequenceEntry             SequenceEntry;                                     // 0x0008(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomSequenceMappingEntry) == 0x000008, "Wrong alignment on FRandomSequenceMappingEntry");
static_assert(sizeof(FRandomSequenceMappingEntry) == 0x000058, "Wrong size on FRandomSequenceMappingEntry");
static_assert(offsetof(FRandomSequenceMappingEntry, MappingName) == 0x000000, "Member 'FRandomSequenceMappingEntry::MappingName' has a wrong offset!");
static_assert(offsetof(FRandomSequenceMappingEntry, SequenceEntry) == 0x000008, "Member 'FRandomSequenceMappingEntry::SequenceEntry' has a wrong offset!");

// ScriptStruct Palia.AnimNode_RandomSequenceByMapping
// 0x0018 (0x0090 - 0x0078)
struct FAnimNode_RandomSequenceByMapping final : public FAnimNode_RandomPlayer
{
public:
	TArray<struct FRandomSequenceMappingEntry>    MappingEntries;                                    // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class AValeriaMoveablePawn*                   CachedPawn;                                        // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_RandomSequenceByMapping) == 0x000008, "Wrong alignment on FAnimNode_RandomSequenceByMapping");
static_assert(sizeof(FAnimNode_RandomSequenceByMapping) == 0x000090, "Wrong size on FAnimNode_RandomSequenceByMapping");
static_assert(offsetof(FAnimNode_RandomSequenceByMapping, MappingEntries) == 0x000078, "Member 'FAnimNode_RandomSequenceByMapping::MappingEntries' has a wrong offset!");
static_assert(offsetof(FAnimNode_RandomSequenceByMapping, CachedPawn) == 0x000088, "Member 'FAnimNode_RandomSequenceByMapping::CachedPawn' has a wrong offset!");

// ScriptStruct Palia.MasterLevelReward
// 0x0180 (0x0180 - 0x0000)
struct FMasterLevelReward final
{
public:
	int32                                         GrantAtLevel;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_210F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuestRewardConfig                     Reward;                                            // 0x0008(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMasterLevelReward) == 0x000008, "Wrong alignment on FMasterLevelReward");
static_assert(sizeof(FMasterLevelReward) == 0x000180, "Wrong size on FMasterLevelReward");
static_assert(offsetof(FMasterLevelReward, GrantAtLevel) == 0x000000, "Member 'FMasterLevelReward::GrantAtLevel' has a wrong offset!");
static_assert(offsetof(FMasterLevelReward, Reward) == 0x000008, "Member 'FMasterLevelReward::Reward' has a wrong offset!");

// ScriptStruct Palia.GardenConfigPlotSize
// 0x0028 (0x0028 - 0x0000)
struct FGardenConfigPlotSize final
{
public:
	int32                                         MaxRows;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCols;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlotVisualDistance;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2110[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlotVisualOffset;                                  // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardenConfigPlotSize) == 0x000008, "Wrong alignment on FGardenConfigPlotSize");
static_assert(sizeof(FGardenConfigPlotSize) == 0x000028, "Wrong size on FGardenConfigPlotSize");
static_assert(offsetof(FGardenConfigPlotSize, MaxRows) == 0x000000, "Member 'FGardenConfigPlotSize::MaxRows' has a wrong offset!");
static_assert(offsetof(FGardenConfigPlotSize, MaxCols) == 0x000004, "Member 'FGardenConfigPlotSize::MaxCols' has a wrong offset!");
static_assert(offsetof(FGardenConfigPlotSize, PlotVisualDistance) == 0x000008, "Member 'FGardenConfigPlotSize::PlotVisualDistance' has a wrong offset!");
static_assert(offsetof(FGardenConfigPlotSize, PlotVisualOffset) == 0x000010, "Member 'FGardenConfigPlotSize::PlotVisualOffset' has a wrong offset!");

// ScriptStruct Palia.HousingSlot
// 0x0020 (0x0020 - 0x0000)
struct FHousingSlot final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2111[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHousingSlotType                              Type;                                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHousingVisitationState                       VisitationState;                                   // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2112[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHousingSlot) == 0x000008, "Wrong alignment on FHousingSlot");
static_assert(sizeof(FHousingSlot) == 0x000020, "Wrong size on FHousingSlot");
static_assert(offsetof(FHousingSlot, ID) == 0x000000, "Member 'FHousingSlot::ID' has a wrong offset!");
static_assert(offsetof(FHousingSlot, Name) == 0x000008, "Member 'FHousingSlot::Name' has a wrong offset!");
static_assert(offsetof(FHousingSlot, Type) == 0x000018, "Member 'FHousingSlot::Type' has a wrong offset!");
static_assert(offsetof(FHousingSlot, VisitationState) == 0x000019, "Member 'FHousingSlot::VisitationState' has a wrong offset!");

// ScriptStruct Palia.HousingSlotData
// 0x0018 (0x0018 - 0x0000)
struct FHousingSlotData final
{
public:
	TArray<struct FHousingSlot>                   Slots;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NextSlotId;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2113[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHousingSlotData) == 0x000008, "Wrong alignment on FHousingSlotData");
static_assert(sizeof(FHousingSlotData) == 0x000018, "Wrong size on FHousingSlotData");
static_assert(offsetof(FHousingSlotData, Slots) == 0x000000, "Member 'FHousingSlotData::Slots' has a wrong offset!");
static_assert(offsetof(FHousingSlotData, NextSlotId) == 0x000010, "Member 'FHousingSlotData::NextSlotId' has a wrong offset!");

// ScriptStruct Palia.BingoBoardGridCellTemplate
// 0x0040 (0x0040 - 0x0000)
struct FBingoBoardGridCellTemplate final
{
public:
	struct FDataTableRowHandle                    ItemReference;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemTypeReference;                                 // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemGoalAmount;                                    // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBingoBoardGridCellTemplate) == 0x000008, "Wrong alignment on FBingoBoardGridCellTemplate");
static_assert(sizeof(FBingoBoardGridCellTemplate) == 0x000040, "Wrong size on FBingoBoardGridCellTemplate");
static_assert(offsetof(FBingoBoardGridCellTemplate, ItemReference) == 0x000000, "Member 'FBingoBoardGridCellTemplate::ItemReference' has a wrong offset!");
static_assert(offsetof(FBingoBoardGridCellTemplate, ItemTypeReference) == 0x000010, "Member 'FBingoBoardGridCellTemplate::ItemTypeReference' has a wrong offset!");
static_assert(offsetof(FBingoBoardGridCellTemplate, QualityStars) == 0x000038, "Member 'FBingoBoardGridCellTemplate::QualityStars' has a wrong offset!");
static_assert(offsetof(FBingoBoardGridCellTemplate, ItemGoalAmount) == 0x00003C, "Member 'FBingoBoardGridCellTemplate::ItemGoalAmount' has a wrong offset!");

// ScriptStruct Palia.BingoBoardTemplateData
// 0x0660 (0x0660 - 0x0000)
struct FBingoBoardTemplateData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2114[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBingoBoardGridCellTemplate            Grid[0x19];                                        // 0x0008(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         CellCompletionReward_CommunityPoints;              // 0x0648(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellCompletionReward_NeighborhoodPoints;           // 0x064C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineCompletionReward_CommunityPoints;              // 0x0650(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineCompletionReward_NeighborhoodPoints;           // 0x0654(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoardCompletionReward_CommunityPoints;             // 0x0658(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoardCompletionReward_NeighborhoodPoints;          // 0x065C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBingoBoardTemplateData) == 0x000008, "Wrong alignment on FBingoBoardTemplateData");
static_assert(sizeof(FBingoBoardTemplateData) == 0x000660, "Wrong size on FBingoBoardTemplateData");
static_assert(offsetof(FBingoBoardTemplateData, ID) == 0x000000, "Member 'FBingoBoardTemplateData::ID' has a wrong offset!");
static_assert(offsetof(FBingoBoardTemplateData, Grid) == 0x000008, "Member 'FBingoBoardTemplateData::Grid' has a wrong offset!");
static_assert(offsetof(FBingoBoardTemplateData, CellCompletionReward_CommunityPoints) == 0x000648, "Member 'FBingoBoardTemplateData::CellCompletionReward_CommunityPoints' has a wrong offset!");
static_assert(offsetof(FBingoBoardTemplateData, CellCompletionReward_NeighborhoodPoints) == 0x00064C, "Member 'FBingoBoardTemplateData::CellCompletionReward_NeighborhoodPoints' has a wrong offset!");
static_assert(offsetof(FBingoBoardTemplateData, LineCompletionReward_CommunityPoints) == 0x000650, "Member 'FBingoBoardTemplateData::LineCompletionReward_CommunityPoints' has a wrong offset!");
static_assert(offsetof(FBingoBoardTemplateData, LineCompletionReward_NeighborhoodPoints) == 0x000654, "Member 'FBingoBoardTemplateData::LineCompletionReward_NeighborhoodPoints' has a wrong offset!");
static_assert(offsetof(FBingoBoardTemplateData, BoardCompletionReward_CommunityPoints) == 0x000658, "Member 'FBingoBoardTemplateData::BoardCompletionReward_CommunityPoints' has a wrong offset!");
static_assert(offsetof(FBingoBoardTemplateData, BoardCompletionReward_NeighborhoodPoints) == 0x00065C, "Member 'FBingoBoardTemplateData::BoardCompletionReward_NeighborhoodPoints' has a wrong offset!");

// ScriptStruct Palia.VillagerGiftPreferenceConfig
// 0x0108 (0x0110 - 0x0008)
struct FVillagerGiftPreferenceConfig final : public FTableRowBase
{
public:
	class FName                                   Villager;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTagList                               Tags;                                              // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          IsDefault;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVillagerGiftRewardLevel                      RewardLevel;                                       // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2115[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_DialogueAsset>      DialogueAssetOnReward;                             // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UVAL_DialogueAsset>> DialogueAssetsOnReward;                            // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          IsRomantic;                                        // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVillagerGiftRewardLevel                      RewardLevelIfInappropriate;                        // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2116[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_DialogueAsset>      DialogueAssetIfInappropriate;                      // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_DialogueAsset>      DialogueAssetOnFirstAcceptance;                    // 0x00A8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_DialogueAsset>      DialogueAssetIfAlreadyReceivedThisWeek;            // 0x00D0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreferenceWeight;                                  // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersistId;                                         // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAlwaysOn;                                        // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVillagerGiftDifficultyGrouping               DifficultyGrouping;                                // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2117[0x2];                                     // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GoldValueMinimum;                                  // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoldValueMaximum;                                  // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x010C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2118[0x3];                                     // 0x010D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVillagerGiftPreferenceConfig) == 0x000008, "Wrong alignment on FVillagerGiftPreferenceConfig");
static_assert(sizeof(FVillagerGiftPreferenceConfig) == 0x000110, "Wrong size on FVillagerGiftPreferenceConfig");
static_assert(offsetof(FVillagerGiftPreferenceConfig, Villager) == 0x000008, "Member 'FVillagerGiftPreferenceConfig::Villager' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, ItemType) == 0x000010, "Member 'FVillagerGiftPreferenceConfig::ItemType' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, Tags) == 0x000018, "Member 'FVillagerGiftPreferenceConfig::Tags' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, IsDefault) == 0x000038, "Member 'FVillagerGiftPreferenceConfig::IsDefault' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, RewardLevel) == 0x000039, "Member 'FVillagerGiftPreferenceConfig::RewardLevel' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, DialogueAssetOnReward) == 0x000040, "Member 'FVillagerGiftPreferenceConfig::DialogueAssetOnReward' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, DialogueAssetsOnReward) == 0x000068, "Member 'FVillagerGiftPreferenceConfig::DialogueAssetsOnReward' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, IsRomantic) == 0x000078, "Member 'FVillagerGiftPreferenceConfig::IsRomantic' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, RewardLevelIfInappropriate) == 0x000079, "Member 'FVillagerGiftPreferenceConfig::RewardLevelIfInappropriate' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, DialogueAssetIfInappropriate) == 0x000080, "Member 'FVillagerGiftPreferenceConfig::DialogueAssetIfInappropriate' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, DialogueAssetOnFirstAcceptance) == 0x0000A8, "Member 'FVillagerGiftPreferenceConfig::DialogueAssetOnFirstAcceptance' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, DialogueAssetIfAlreadyReceivedThisWeek) == 0x0000D0, "Member 'FVillagerGiftPreferenceConfig::DialogueAssetIfAlreadyReceivedThisWeek' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, PreferenceWeight) == 0x0000F8, "Member 'FVillagerGiftPreferenceConfig::PreferenceWeight' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, PersistId) == 0x0000FC, "Member 'FVillagerGiftPreferenceConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, IsAlwaysOn) == 0x000100, "Member 'FVillagerGiftPreferenceConfig::IsAlwaysOn' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, DifficultyGrouping) == 0x000101, "Member 'FVillagerGiftPreferenceConfig::DifficultyGrouping' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, GoldValueMinimum) == 0x000104, "Member 'FVillagerGiftPreferenceConfig::GoldValueMinimum' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, GoldValueMaximum) == 0x000108, "Member 'FVillagerGiftPreferenceConfig::GoldValueMaximum' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceConfig, bIsEnabled) == 0x00010C, "Member 'FVillagerGiftPreferenceConfig::bIsEnabled' has a wrong offset!");

// ScriptStruct Palia.Participant
// 0x0028 (0x0028 - 0x0000)
struct FParticipant final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ParticipationTypes;                                // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParticipant) == 0x000008, "Wrong alignment on FParticipant");
static_assert(sizeof(FParticipant) == 0x000028, "Wrong size on FParticipant");
static_assert(offsetof(FParticipant, Actor) == 0x000000, "Member 'FParticipant::Actor' has a wrong offset!");
static_assert(offsetof(FParticipant, ParticipationTypes) == 0x000008, "Member 'FParticipant::ParticipationTypes' has a wrong offset!");

// ScriptStruct Palia.LevelerPersistBlock
// 0x0030 (0x0070 - 0x0040)
struct FLevelerPersistBlock final : public FS6PersistBlock
{
public:
	int32                                         CurrentLevel;                                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2119[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FValeriaItemPersist>            ItemsGiven;                                        // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         ProgressStartTime;                                 // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLevelerRewardsGranted>         RewardsGranted;                                    // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelerPersistBlock) == 0x000008, "Wrong alignment on FLevelerPersistBlock");
static_assert(sizeof(FLevelerPersistBlock) == 0x000070, "Wrong size on FLevelerPersistBlock");
static_assert(offsetof(FLevelerPersistBlock, CurrentLevel) == 0x000040, "Member 'FLevelerPersistBlock::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FLevelerPersistBlock, ItemsGiven) == 0x000048, "Member 'FLevelerPersistBlock::ItemsGiven' has a wrong offset!");
static_assert(offsetof(FLevelerPersistBlock, ProgressStartTime) == 0x000058, "Member 'FLevelerPersistBlock::ProgressStartTime' has a wrong offset!");
static_assert(offsetof(FLevelerPersistBlock, RewardsGranted) == 0x000060, "Member 'FLevelerPersistBlock::RewardsGranted' has a wrong offset!");

// ScriptStruct Palia.LevelerLevelConfig
// 0x0028 (0x0028 - 0x0000)
struct FLevelerLevelConfig final
{
public:
	TArray<struct FLevelerRequirement>            Requirements;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseTimeToCompleteAsRequirement;                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211A[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeToComplete;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             Rewards;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelerLevelConfig) == 0x000008, "Wrong alignment on FLevelerLevelConfig");
static_assert(sizeof(FLevelerLevelConfig) == 0x000028, "Wrong size on FLevelerLevelConfig");
static_assert(offsetof(FLevelerLevelConfig, Requirements) == 0x000000, "Member 'FLevelerLevelConfig::Requirements' has a wrong offset!");
static_assert(offsetof(FLevelerLevelConfig, UseTimeToCompleteAsRequirement) == 0x000010, "Member 'FLevelerLevelConfig::UseTimeToCompleteAsRequirement' has a wrong offset!");
static_assert(offsetof(FLevelerLevelConfig, TimeToComplete) == 0x000014, "Member 'FLevelerLevelConfig::TimeToComplete' has a wrong offset!");
static_assert(offsetof(FLevelerLevelConfig, Rewards) == 0x000018, "Member 'FLevelerLevelConfig::Rewards' has a wrong offset!");

// ScriptStruct Palia.LevelerConfig
// 0x0030 (0x0038 - 0x0008)
struct FLevelerConfig final : public FTableRowBase
{
public:
	class FText                                   LevelerName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FLevelerLevelConfig>            Levels;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211B[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelerConfig) == 0x000008, "Wrong alignment on FLevelerConfig");
static_assert(sizeof(FLevelerConfig) == 0x000038, "Wrong size on FLevelerConfig");
static_assert(offsetof(FLevelerConfig, LevelerName) == 0x000008, "Member 'FLevelerConfig::LevelerName' has a wrong offset!");
static_assert(offsetof(FLevelerConfig, Levels) == 0x000020, "Member 'FLevelerConfig::Levels' has a wrong offset!");
static_assert(offsetof(FLevelerConfig, MaxLevel) == 0x000030, "Member 'FLevelerConfig::MaxLevel' has a wrong offset!");

// ScriptStruct Palia.VAL_InteractorLockParams
// 0x0028 (0x0028 - 0x0000)
struct FVAL_InteractorLockParams final
{
public:
	class UInteractableComponent*                 Interactable;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       InteractableLocation;                              // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 SourceContext;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 TargetEngaged;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterState                               CharacterState;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceFacing;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforcePosition;                                  // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211C[0x5];                                     // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_InteractorLockParams) == 0x000008, "Wrong alignment on FVAL_InteractorLockParams");
static_assert(sizeof(FVAL_InteractorLockParams) == 0x000028, "Wrong size on FVAL_InteractorLockParams");
static_assert(offsetof(FVAL_InteractorLockParams, Interactable) == 0x000000, "Member 'FVAL_InteractorLockParams::Interactable' has a wrong offset!");
static_assert(offsetof(FVAL_InteractorLockParams, InteractableLocation) == 0x000008, "Member 'FVAL_InteractorLockParams::InteractableLocation' has a wrong offset!");
static_assert(offsetof(FVAL_InteractorLockParams, SourceContext) == 0x000010, "Member 'FVAL_InteractorLockParams::SourceContext' has a wrong offset!");
static_assert(offsetof(FVAL_InteractorLockParams, TargetEngaged) == 0x000018, "Member 'FVAL_InteractorLockParams::TargetEngaged' has a wrong offset!");
static_assert(offsetof(FVAL_InteractorLockParams, CharacterState) == 0x000020, "Member 'FVAL_InteractorLockParams::CharacterState' has a wrong offset!");
static_assert(offsetof(FVAL_InteractorLockParams, bEnforceFacing) == 0x000021, "Member 'FVAL_InteractorLockParams::bEnforceFacing' has a wrong offset!");
static_assert(offsetof(FVAL_InteractorLockParams, bEnforcePosition) == 0x000022, "Member 'FVAL_InteractorLockParams::bEnforcePosition' has a wrong offset!");

// ScriptStruct Palia.JiraReporter
// 0x0010 (0x0010 - 0x0000)
struct FJiraReporter final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJiraReporter) == 0x000008, "Wrong alignment on FJiraReporter");
static_assert(sizeof(FJiraReporter) == 0x000010, "Wrong size on FJiraReporter");
static_assert(offsetof(FJiraReporter, ID) == 0x000000, "Member 'FJiraReporter::ID' has a wrong offset!");

// ScriptStruct Palia.StarQualityConstraint
// 0x0008 (0x0008 - 0x0000)
struct FStarQualityConstraint final
{
public:
	int32                                         MinQualityStars;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxQualityStars;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStarQualityConstraint) == 0x000004, "Wrong alignment on FStarQualityConstraint");
static_assert(sizeof(FStarQualityConstraint) == 0x000008, "Wrong size on FStarQualityConstraint");
static_assert(offsetof(FStarQualityConstraint, MinQualityStars) == 0x000000, "Member 'FStarQualityConstraint::MinQualityStars' has a wrong offset!");
static_assert(offsetof(FStarQualityConstraint, MaxQualityStars) == 0x000004, "Member 'FStarQualityConstraint::MaxQualityStars' has a wrong offset!");

// ScriptStruct Palia.ItemTrackingEntry
// 0x0030 (0x0030 - 0x0000)
struct FItemTrackingEntry final
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0000(0x0028)(RepSkip, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersistId;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfTimesPurchased;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemTrackingEntry) == 0x000008, "Wrong alignment on FItemTrackingEntry");
static_assert(sizeof(FItemTrackingEntry) == 0x000030, "Wrong size on FItemTrackingEntry");
static_assert(offsetof(FItemTrackingEntry, ItemType) == 0x000000, "Member 'FItemTrackingEntry::ItemType' has a wrong offset!");
static_assert(offsetof(FItemTrackingEntry, PersistId) == 0x000028, "Member 'FItemTrackingEntry::PersistId' has a wrong offset!");
static_assert(offsetof(FItemTrackingEntry, NumberOfTimesPurchased) == 0x00002C, "Member 'FItemTrackingEntry::NumberOfTimesPurchased' has a wrong offset!");

// ScriptStruct Palia.ItemTrackingHistory
// 0x0010 (0x0010 - 0x0000)
struct FItemTrackingHistory final
{
public:
	TArray<struct FItemTrackingEntry>             Entries;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemTrackingHistory) == 0x000008, "Wrong alignment on FItemTrackingHistory");
static_assert(sizeof(FItemTrackingHistory) == 0x000010, "Wrong size on FItemTrackingHistory");
static_assert(offsetof(FItemTrackingHistory, Entries) == 0x000000, "Member 'FItemTrackingHistory::Entries' has a wrong offset!");

// ScriptStruct Palia.ErrorMessageConfig
// 0x0028 (0x0030 - 0x0008)
struct FErrorMessageConfig final : public FTableRowBase
{
public:
	class FText                                   Message;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EErrorMessageType                             MessageType;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211D[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          MessageSound;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FErrorMessageConfig) == 0x000008, "Wrong alignment on FErrorMessageConfig");
static_assert(sizeof(FErrorMessageConfig) == 0x000030, "Wrong size on FErrorMessageConfig");
static_assert(offsetof(FErrorMessageConfig, Message) == 0x000008, "Member 'FErrorMessageConfig::Message' has a wrong offset!");
static_assert(offsetof(FErrorMessageConfig, MessageType) == 0x000020, "Member 'FErrorMessageConfig::MessageType' has a wrong offset!");
static_assert(offsetof(FErrorMessageConfig, MessageSound) == 0x000028, "Member 'FErrorMessageConfig::MessageSound' has a wrong offset!");

// ScriptStruct Palia.HousingSlotPersist
// 0x0020 (0x0020 - 0x0000)
struct FHousingSlotPersist final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Type;                                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHousingVisitationState                       Visit;                                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211F[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHousingSlotPersist) == 0x000008, "Wrong alignment on FHousingSlotPersist");
static_assert(sizeof(FHousingSlotPersist) == 0x000020, "Wrong size on FHousingSlotPersist");
static_assert(offsetof(FHousingSlotPersist, ID) == 0x000000, "Member 'FHousingSlotPersist::ID' has a wrong offset!");
static_assert(offsetof(FHousingSlotPersist, Name) == 0x000008, "Member 'FHousingSlotPersist::Name' has a wrong offset!");
static_assert(offsetof(FHousingSlotPersist, Type) == 0x000018, "Member 'FHousingSlotPersist::Type' has a wrong offset!");
static_assert(offsetof(FHousingSlotPersist, Visit) == 0x000019, "Member 'FHousingSlotPersist::Visit' has a wrong offset!");

// ScriptStruct Palia.PaliaLoadingScreenSettings
// 0x0060 (0x0060 - 0x0000)
struct FPaliaLoadingScreenSettings final
{
public:
	TArray<struct FSoftObjectPath>                DefaultImages;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSoftObjectPath>   MapOverrides;                                      // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaliaLoadingScreenSettings) == 0x000008, "Wrong alignment on FPaliaLoadingScreenSettings");
static_assert(sizeof(FPaliaLoadingScreenSettings) == 0x000060, "Wrong size on FPaliaLoadingScreenSettings");
static_assert(offsetof(FPaliaLoadingScreenSettings, DefaultImages) == 0x000000, "Member 'FPaliaLoadingScreenSettings::DefaultImages' has a wrong offset!");
static_assert(offsetof(FPaliaLoadingScreenSettings, MapOverrides) == 0x000010, "Member 'FPaliaLoadingScreenSettings::MapOverrides' has a wrong offset!");

// ScriptStruct Palia.ShippingBinPersistBlock
// 0x0008 (0x0060 - 0x0058)
struct FShippingBinPersistBlock final : public FInventoryPersistBlock
{
public:
	int64                                         LastTimeCheckToSell;                               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShippingBinPersistBlock) == 0x000008, "Wrong alignment on FShippingBinPersistBlock");
static_assert(sizeof(FShippingBinPersistBlock) == 0x000060, "Wrong size on FShippingBinPersistBlock");
static_assert(offsetof(FShippingBinPersistBlock, LastTimeCheckToSell) == 0x000058, "Member 'FShippingBinPersistBlock::LastTimeCheckToSell' has a wrong offset!");

// ScriptStruct Palia.FishingSubclasses
// 0x0048 (0x0048 - 0x0000)
struct FFishingSubclasses final
{
public:
	TSubclassOf<class AActor>                     BobbleBlueprint;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     FishingCameraBlueprint;                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   NibbleGenericFishBlueprint;                        // 0x0010(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     RodBlueprint;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFishingCastIndicatorActor> CastIndicatorBlueprint;                            // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingSubclasses) == 0x000008, "Wrong alignment on FFishingSubclasses");
static_assert(sizeof(FFishingSubclasses) == 0x000048, "Wrong size on FFishingSubclasses");
static_assert(offsetof(FFishingSubclasses, BobbleBlueprint) == 0x000000, "Member 'FFishingSubclasses::BobbleBlueprint' has a wrong offset!");
static_assert(offsetof(FFishingSubclasses, FishingCameraBlueprint) == 0x000008, "Member 'FFishingSubclasses::FishingCameraBlueprint' has a wrong offset!");
static_assert(offsetof(FFishingSubclasses, NibbleGenericFishBlueprint) == 0x000010, "Member 'FFishingSubclasses::NibbleGenericFishBlueprint' has a wrong offset!");
static_assert(offsetof(FFishingSubclasses, RodBlueprint) == 0x000038, "Member 'FFishingSubclasses::RodBlueprint' has a wrong offset!");
static_assert(offsetof(FFishingSubclasses, CastIndicatorBlueprint) == 0x000040, "Member 'FFishingSubclasses::CastIndicatorBlueprint' has a wrong offset!");

// ScriptStruct Palia.JiraDescriptionContentContent
// 0x0020 (0x0020 - 0x0000)
struct FJiraDescriptionContentContent final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJiraDescriptionContentContent) == 0x000008, "Wrong alignment on FJiraDescriptionContentContent");
static_assert(sizeof(FJiraDescriptionContentContent) == 0x000020, "Wrong size on FJiraDescriptionContentContent");
static_assert(offsetof(FJiraDescriptionContentContent, Type) == 0x000000, "Member 'FJiraDescriptionContentContent::Type' has a wrong offset!");
static_assert(offsetof(FJiraDescriptionContentContent, Text) == 0x000010, "Member 'FJiraDescriptionContentContent::Text' has a wrong offset!");

// ScriptStruct Palia.JiraDescriptionContent
// 0x0020 (0x0020 - 0x0000)
struct FJiraDescriptionContent final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FJiraDescriptionContentContent> Content;                                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJiraDescriptionContent) == 0x000008, "Wrong alignment on FJiraDescriptionContent");
static_assert(sizeof(FJiraDescriptionContent) == 0x000020, "Wrong size on FJiraDescriptionContent");
static_assert(offsetof(FJiraDescriptionContent, Type) == 0x000000, "Member 'FJiraDescriptionContent::Type' has a wrong offset!");
static_assert(offsetof(FJiraDescriptionContent, Content) == 0x000010, "Member 'FJiraDescriptionContent::Content' has a wrong offset!");

// ScriptStruct Palia.InventoryBagConfig
// 0x0028 (0x0030 - 0x0008)
struct FInventoryBagConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSlots;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RequiredTag;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BagType;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCoreInventoryBag;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2120[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAllowed;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AllowedBagGroups;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BagPriority;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryBagConfig) == 0x000008, "Wrong alignment on FInventoryBagConfig");
static_assert(sizeof(FInventoryBagConfig) == 0x000030, "Wrong size on FInventoryBagConfig");
static_assert(offsetof(FInventoryBagConfig, PersistId) == 0x000008, "Member 'FInventoryBagConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FInventoryBagConfig, MaxSlots) == 0x00000C, "Member 'FInventoryBagConfig::MaxSlots' has a wrong offset!");
static_assert(offsetof(FInventoryBagConfig, RequiredTag) == 0x000010, "Member 'FInventoryBagConfig::RequiredTag' has a wrong offset!");
static_assert(offsetof(FInventoryBagConfig, BagType) == 0x000018, "Member 'FInventoryBagConfig::BagType' has a wrong offset!");
static_assert(offsetof(FInventoryBagConfig, bCoreInventoryBag) == 0x000020, "Member 'FInventoryBagConfig::bCoreInventoryBag' has a wrong offset!");
static_assert(offsetof(FInventoryBagConfig, MaxAllowed) == 0x000024, "Member 'FInventoryBagConfig::MaxAllowed' has a wrong offset!");
static_assert(offsetof(FInventoryBagConfig, AllowedBagGroups) == 0x000028, "Member 'FInventoryBagConfig::AllowedBagGroups' has a wrong offset!");
static_assert(offsetof(FInventoryBagConfig, BagPriority) == 0x00002C, "Member 'FInventoryBagConfig::BagPriority' has a wrong offset!");

// ScriptStruct Palia.ServerUseEventResult
// 0x0002 (0x0002 - 0x0000)
struct FServerUseEventResult final
{
public:
	bool                                          bHandled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumed;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUseEventResult) == 0x000001, "Wrong alignment on FServerUseEventResult");
static_assert(sizeof(FServerUseEventResult) == 0x000002, "Wrong size on FServerUseEventResult");
static_assert(offsetof(FServerUseEventResult, bHandled) == 0x000000, "Member 'FServerUseEventResult::bHandled' has a wrong offset!");
static_assert(offsetof(FServerUseEventResult, bConsumed) == 0x000001, "Member 'FServerUseEventResult::bConsumed' has a wrong offset!");

// ScriptStruct Palia.SingleQuestReward
// 0x0058 (0x0058 - 0x0000)
struct FSingleQuestReward final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2121[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    VitalType;                                         // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVitalChangeMax;                                   // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2122[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurrencyConfig*                        Currency;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationshipVillagerId;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RelationshipVillagerCoreId;                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendshipChange;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RomanceChange;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERomanceStateChange                           RomanceStateChange;                                // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2123[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecipeConfigId;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSingleQuestReward) == 0x000008, "Wrong alignment on FSingleQuestReward");
static_assert(sizeof(FSingleQuestReward) == 0x000058, "Wrong size on FSingleQuestReward");
static_assert(offsetof(FSingleQuestReward, Amount) == 0x000000, "Member 'FSingleQuestReward::Amount' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, ItemType) == 0x000008, "Member 'FSingleQuestReward::ItemType' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, QualityStars) == 0x000030, "Member 'FSingleQuestReward::QualityStars' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, VitalType) == 0x000034, "Member 'FSingleQuestReward::VitalType' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, bVitalChangeMax) == 0x000035, "Member 'FSingleQuestReward::bVitalChangeMax' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, Currency) == 0x000038, "Member 'FSingleQuestReward::Currency' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, RelationshipVillagerId) == 0x000040, "Member 'FSingleQuestReward::RelationshipVillagerId' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, RelationshipVillagerCoreId) == 0x000044, "Member 'FSingleQuestReward::RelationshipVillagerCoreId' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, FriendshipChange) == 0x000048, "Member 'FSingleQuestReward::FriendshipChange' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, RomanceChange) == 0x00004C, "Member 'FSingleQuestReward::RomanceChange' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, RomanceStateChange) == 0x000050, "Member 'FSingleQuestReward::RomanceStateChange' has a wrong offset!");
static_assert(offsetof(FSingleQuestReward, RecipeConfigId) == 0x000054, "Member 'FSingleQuestReward::RecipeConfigId' has a wrong offset!");

// ScriptStruct Palia.ChallengeClientInfo
// 0x0138 (0x0138 - 0x0000)
struct FChallengeClientInfo final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLootRequirements                      Requirements;                                      // 0x0030(0x00D8)(NativeAccessSpecifierPublic)
	TArray<int32>                                 GoalAmounts;                                       // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSingleQuestReward>             Rewards;                                           // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeClientInfo) == 0x000008, "Wrong alignment on FChallengeClientInfo");
static_assert(sizeof(FChallengeClientInfo) == 0x000138, "Wrong size on FChallengeClientInfo");
static_assert(offsetof(FChallengeClientInfo, DisplayName) == 0x000000, "Member 'FChallengeClientInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FChallengeClientInfo, DisplayText) == 0x000018, "Member 'FChallengeClientInfo::DisplayText' has a wrong offset!");
static_assert(offsetof(FChallengeClientInfo, Requirements) == 0x000030, "Member 'FChallengeClientInfo::Requirements' has a wrong offset!");
static_assert(offsetof(FChallengeClientInfo, GoalAmounts) == 0x000108, "Member 'FChallengeClientInfo::GoalAmounts' has a wrong offset!");
static_assert(offsetof(FChallengeClientInfo, Rewards) == 0x000118, "Member 'FChallengeClientInfo::Rewards' has a wrong offset!");
static_assert(offsetof(FChallengeClientInfo, Guid) == 0x000128, "Member 'FChallengeClientInfo::Guid' has a wrong offset!");

// ScriptStruct Palia.AnimNode_LookAtBlendSpaceByMapping
// 0x0028 (0x0140 - 0x0118)
struct FAnimNode_LookAtBlendSpaceByMapping final : public FAnimNode_RotationOffsetBlendSpace
{
public:
	class FName                                   MappingName;                                       // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimMappingCachePolicy                       NameCachePolicy;                                   // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2124[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaMoveablePawn*                   CachedPawn;                                        // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreviousMappingName;                               // 0x0130(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MappingQualifier;                                  // 0x0138(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_LookAtBlendSpaceByMapping) == 0x000008, "Wrong alignment on FAnimNode_LookAtBlendSpaceByMapping");
static_assert(sizeof(FAnimNode_LookAtBlendSpaceByMapping) == 0x000140, "Wrong size on FAnimNode_LookAtBlendSpaceByMapping");
static_assert(offsetof(FAnimNode_LookAtBlendSpaceByMapping, MappingName) == 0x000118, "Member 'FAnimNode_LookAtBlendSpaceByMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAtBlendSpaceByMapping, NameCachePolicy) == 0x000120, "Member 'FAnimNode_LookAtBlendSpaceByMapping::NameCachePolicy' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAtBlendSpaceByMapping, CachedPawn) == 0x000128, "Member 'FAnimNode_LookAtBlendSpaceByMapping::CachedPawn' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAtBlendSpaceByMapping, PreviousMappingName) == 0x000130, "Member 'FAnimNode_LookAtBlendSpaceByMapping::PreviousMappingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAtBlendSpaceByMapping, MappingQualifier) == 0x000138, "Member 'FAnimNode_LookAtBlendSpaceByMapping::MappingQualifier' has a wrong offset!");

// ScriptStruct Palia.AdditionalEnsureWidgetsOptions
// 0x0028 (0x0028 - 0x0000)
struct FAdditionalEnsureWidgetsOptions final
{
public:
	bool                                          bAutoSetupSlots;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2125[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxRows;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCols;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlign;                                   // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlign;                                     // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2126[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateChildSize                        Size;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdditionalEnsureWidgetsOptions) == 0x000004, "Wrong alignment on FAdditionalEnsureWidgetsOptions");
static_assert(sizeof(FAdditionalEnsureWidgetsOptions) == 0x000028, "Wrong size on FAdditionalEnsureWidgetsOptions");
static_assert(offsetof(FAdditionalEnsureWidgetsOptions, bAutoSetupSlots) == 0x000000, "Member 'FAdditionalEnsureWidgetsOptions::bAutoSetupSlots' has a wrong offset!");
static_assert(offsetof(FAdditionalEnsureWidgetsOptions, MaxRows) == 0x000004, "Member 'FAdditionalEnsureWidgetsOptions::MaxRows' has a wrong offset!");
static_assert(offsetof(FAdditionalEnsureWidgetsOptions, MaxCols) == 0x000008, "Member 'FAdditionalEnsureWidgetsOptions::MaxCols' has a wrong offset!");
static_assert(offsetof(FAdditionalEnsureWidgetsOptions, HorizontalAlign) == 0x00000C, "Member 'FAdditionalEnsureWidgetsOptions::HorizontalAlign' has a wrong offset!");
static_assert(offsetof(FAdditionalEnsureWidgetsOptions, VerticalAlign) == 0x00000D, "Member 'FAdditionalEnsureWidgetsOptions::VerticalAlign' has a wrong offset!");
static_assert(offsetof(FAdditionalEnsureWidgetsOptions, Padding) == 0x000010, "Member 'FAdditionalEnsureWidgetsOptions::Padding' has a wrong offset!");
static_assert(offsetof(FAdditionalEnsureWidgetsOptions, Size) == 0x000020, "Member 'FAdditionalEnsureWidgetsOptions::Size' has a wrong offset!");

// ScriptStruct Palia.JiraProject
// 0x0010 (0x0010 - 0x0000)
struct FJiraProject final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJiraProject) == 0x000008, "Wrong alignment on FJiraProject");
static_assert(sizeof(FJiraProject) == 0x000010, "Wrong size on FJiraProject");
static_assert(offsetof(FJiraProject, ID) == 0x000000, "Member 'FJiraProject::ID' has a wrong offset!");

// ScriptStruct Palia.CrafterPlayerAction
// 0x0020 (0x0020 - 0x0000)
struct FCrafterPlayerAction final
{
public:
	struct FPersistGuid                           PlayerId;                                          // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InteractionStart;                                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionCompletion;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2127[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrafterPlayerAction) == 0x000008, "Wrong alignment on FCrafterPlayerAction");
static_assert(sizeof(FCrafterPlayerAction) == 0x000020, "Wrong size on FCrafterPlayerAction");
static_assert(offsetof(FCrafterPlayerAction, PlayerId) == 0x000000, "Member 'FCrafterPlayerAction::PlayerId' has a wrong offset!");
static_assert(offsetof(FCrafterPlayerAction, InteractionStart) == 0x000010, "Member 'FCrafterPlayerAction::InteractionStart' has a wrong offset!");
static_assert(offsetof(FCrafterPlayerAction, InteractionCompletion) == 0x000018, "Member 'FCrafterPlayerAction::InteractionCompletion' has a wrong offset!");

// ScriptStruct Palia.CrafterStep
// 0x0038 (0x0038 - 0x0000)
struct FCrafterStep final
{
public:
	TArray<struct FCrafterPlayerAction>           PlayerActions;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RecipeStepIndex;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrafterStepState                             State;                                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2128[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuccessPercent;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2129[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         StartedTime;                                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         FinishTime;                                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PausedTimeRemaining;                               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrafterStep) == 0x000008, "Wrong alignment on FCrafterStep");
static_assert(sizeof(FCrafterStep) == 0x000038, "Wrong size on FCrafterStep");
static_assert(offsetof(FCrafterStep, PlayerActions) == 0x000000, "Member 'FCrafterStep::PlayerActions' has a wrong offset!");
static_assert(offsetof(FCrafterStep, RecipeStepIndex) == 0x000010, "Member 'FCrafterStep::RecipeStepIndex' has a wrong offset!");
static_assert(offsetof(FCrafterStep, State) == 0x000014, "Member 'FCrafterStep::State' has a wrong offset!");
static_assert(offsetof(FCrafterStep, SuccessPercent) == 0x000018, "Member 'FCrafterStep::SuccessPercent' has a wrong offset!");
static_assert(offsetof(FCrafterStep, StartedTime) == 0x000020, "Member 'FCrafterStep::StartedTime' has a wrong offset!");
static_assert(offsetof(FCrafterStep, FinishTime) == 0x000028, "Member 'FCrafterStep::FinishTime' has a wrong offset!");
static_assert(offsetof(FCrafterStep, PausedTimeRemaining) == 0x000030, "Member 'FCrafterStep::PausedTimeRemaining' has a wrong offset!");

// ScriptStruct Palia.HotPotGameTile
// 0x0002 (0x0002 - 0x0000)
struct FHotPotGameTile final
{
public:
	EHotPotTileColor                              TileColor;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHotPotTileFood                               TileFood;                                          // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHotPotGameTile) == 0x000001, "Wrong alignment on FHotPotGameTile");
static_assert(sizeof(FHotPotGameTile) == 0x000002, "Wrong size on FHotPotGameTile");
static_assert(offsetof(FHotPotGameTile, TileColor) == 0x000000, "Member 'FHotPotGameTile::TileColor' has a wrong offset!");
static_assert(offsetof(FHotPotGameTile, TileFood) == 0x000001, "Member 'FHotPotGameTile::TileFood' has a wrong offset!");

// ScriptStruct Palia.HotPotPlayerState
// 0x0070 (0x0070 - 0x0000)
struct FHotPotPlayerState final
{
public:
	struct FGuid                                  AccountId;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterId;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsParticipating;                                  // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212A[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHotPotGameTile>                Hand;                                              // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHotPotGameTile                        PendingTile;                                       // 0x0038(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_212B[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHotPotGameTile>                Discard;                                           // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EHotPotTurnState                              TurnState;                                         // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212C[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnStartTimeStamp;                                // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnDuration;                                      // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasWinningHand;                                   // 0x005C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212D[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FoodGroupCount;                                    // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColorGroupCount;                                   // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandScore;                                         // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyRewarded;                                  // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHotPotPlayerState) == 0x000008, "Wrong alignment on FHotPotPlayerState");
static_assert(sizeof(FHotPotPlayerState) == 0x000070, "Wrong size on FHotPotPlayerState");
static_assert(offsetof(FHotPotPlayerState, AccountId) == 0x000000, "Member 'FHotPotPlayerState::AccountId' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, CharacterId) == 0x000010, "Member 'FHotPotPlayerState::CharacterId' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, bIsParticipating) == 0x000020, "Member 'FHotPotPlayerState::bIsParticipating' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, Hand) == 0x000028, "Member 'FHotPotPlayerState::Hand' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, PendingTile) == 0x000038, "Member 'FHotPotPlayerState::PendingTile' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, Discard) == 0x000040, "Member 'FHotPotPlayerState::Discard' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, TurnState) == 0x000050, "Member 'FHotPotPlayerState::TurnState' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, TurnStartTimeStamp) == 0x000054, "Member 'FHotPotPlayerState::TurnStartTimeStamp' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, TurnDuration) == 0x000058, "Member 'FHotPotPlayerState::TurnDuration' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, bHasWinningHand) == 0x00005C, "Member 'FHotPotPlayerState::bHasWinningHand' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, FoodGroupCount) == 0x000060, "Member 'FHotPotPlayerState::FoodGroupCount' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, ColorGroupCount) == 0x000064, "Member 'FHotPotPlayerState::ColorGroupCount' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, HandScore) == 0x000068, "Member 'FHotPotPlayerState::HandScore' has a wrong offset!");
static_assert(offsetof(FHotPotPlayerState, CurrencyRewarded) == 0x00006C, "Member 'FHotPotPlayerState::CurrencyRewarded' has a wrong offset!");

// ScriptStruct Palia.HotPotGameEndState
// 0x0020 (0x0020 - 0x0000)
struct FHotPotGameEndState final
{
public:
	TArray<struct FHotPotPlayerState>             PlayerStates;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         WinningPlayerIdx;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameDuration;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundCount;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212E[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHotPotGameEndState) == 0x000008, "Wrong alignment on FHotPotGameEndState");
static_assert(sizeof(FHotPotGameEndState) == 0x000020, "Wrong size on FHotPotGameEndState");
static_assert(offsetof(FHotPotGameEndState, PlayerStates) == 0x000000, "Member 'FHotPotGameEndState::PlayerStates' has a wrong offset!");
static_assert(offsetof(FHotPotGameEndState, WinningPlayerIdx) == 0x000010, "Member 'FHotPotGameEndState::WinningPlayerIdx' has a wrong offset!");
static_assert(offsetof(FHotPotGameEndState, GameDuration) == 0x000014, "Member 'FHotPotGameEndState::GameDuration' has a wrong offset!");
static_assert(offsetof(FHotPotGameEndState, RoundCount) == 0x000018, "Member 'FHotPotGameEndState::RoundCount' has a wrong offset!");

// ScriptStruct Palia.JiraIssueCreatedResponse
// 0x0030 (0x0030 - 0x0000)
struct FJiraIssueCreatedResponse final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Self;                                              // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJiraIssueCreatedResponse) == 0x000008, "Wrong alignment on FJiraIssueCreatedResponse");
static_assert(sizeof(FJiraIssueCreatedResponse) == 0x000030, "Wrong size on FJiraIssueCreatedResponse");
static_assert(offsetof(FJiraIssueCreatedResponse, ID) == 0x000000, "Member 'FJiraIssueCreatedResponse::ID' has a wrong offset!");
static_assert(offsetof(FJiraIssueCreatedResponse, Key) == 0x000010, "Member 'FJiraIssueCreatedResponse::Key' has a wrong offset!");
static_assert(offsetof(FJiraIssueCreatedResponse, Self) == 0x000020, "Member 'FJiraIssueCreatedResponse::Self' has a wrong offset!");

// ScriptStruct Palia.VAL_ServerSpace
// 0x0014 (0x0014 - 0x0000)
struct FVAL_ServerSpace final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_ServerSpaceType                          Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212F[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_ServerSpace) == 0x000004, "Wrong alignment on FVAL_ServerSpace");
static_assert(sizeof(FVAL_ServerSpace) == 0x000014, "Wrong size on FVAL_ServerSpace");
static_assert(offsetof(FVAL_ServerSpace, ID) == 0x000000, "Member 'FVAL_ServerSpace::ID' has a wrong offset!");
static_assert(offsetof(FVAL_ServerSpace, Type) == 0x000010, "Member 'FVAL_ServerSpace::Type' has a wrong offset!");

// ScriptStruct Palia.DialogueRoomParameters
// 0x0030 (0x0030 - 0x0000)
struct FDialogueRoomParameters final
{
public:
	bool                                          bOverrideBackgroundWallMaterial;                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2130[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      BackgroundWallMaterial;                            // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueRoomParameters) == 0x000008, "Wrong alignment on FDialogueRoomParameters");
static_assert(sizeof(FDialogueRoomParameters) == 0x000030, "Wrong size on FDialogueRoomParameters");
static_assert(offsetof(FDialogueRoomParameters, bOverrideBackgroundWallMaterial) == 0x000000, "Member 'FDialogueRoomParameters::bOverrideBackgroundWallMaterial' has a wrong offset!");
static_assert(offsetof(FDialogueRoomParameters, BackgroundWallMaterial) == 0x000008, "Member 'FDialogueRoomParameters::BackgroundWallMaterial' has a wrong offset!");

// ScriptStruct Palia.GardenPlotPersist
// 0x0040 (0x0040 - 0x0000)
struct FGardenPlotPersist final
{
public:
	int32                                         TileId;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlantInstanceId;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TilledTimestampMs;                                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHiddenLoot;                                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlantOwner;                                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2131[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TilledEndTimestampMs;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeedType;                                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2132[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AppliedFertilizerItemTypes;                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsFullyTilled;                                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2133[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGardenPlotPersist) == 0x000008, "Wrong alignment on FGardenPlotPersist");
static_assert(sizeof(FGardenPlotPersist) == 0x000040, "Wrong size on FGardenPlotPersist");
static_assert(offsetof(FGardenPlotPersist, TileId) == 0x000000, "Member 'FGardenPlotPersist::TileId' has a wrong offset!");
static_assert(offsetof(FGardenPlotPersist, PlantInstanceId) == 0x000004, "Member 'FGardenPlotPersist::PlantInstanceId' has a wrong offset!");
static_assert(offsetof(FGardenPlotPersist, TilledTimestampMs) == 0x000008, "Member 'FGardenPlotPersist::TilledTimestampMs' has a wrong offset!");
static_assert(offsetof(FGardenPlotPersist, bHasHiddenLoot) == 0x000010, "Member 'FGardenPlotPersist::bHasHiddenLoot' has a wrong offset!");
static_assert(offsetof(FGardenPlotPersist, bIsPlantOwner) == 0x000011, "Member 'FGardenPlotPersist::bIsPlantOwner' has a wrong offset!");
static_assert(offsetof(FGardenPlotPersist, TilledEndTimestampMs) == 0x000018, "Member 'FGardenPlotPersist::TilledEndTimestampMs' has a wrong offset!");
static_assert(offsetof(FGardenPlotPersist, WeedType) == 0x000020, "Member 'FGardenPlotPersist::WeedType' has a wrong offset!");
static_assert(offsetof(FGardenPlotPersist, AppliedFertilizerItemTypes) == 0x000028, "Member 'FGardenPlotPersist::AppliedFertilizerItemTypes' has a wrong offset!");
static_assert(offsetof(FGardenPlotPersist, IsFullyTilled) == 0x000038, "Member 'FGardenPlotPersist::IsFullyTilled' has a wrong offset!");

// ScriptStruct Palia.GardenPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FGardenPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FGardenPlotPersist>             Plots;                                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RowSize;                                           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColSize;                                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardenPersistBlock) == 0x000008, "Wrong alignment on FGardenPersistBlock");
static_assert(sizeof(FGardenPersistBlock) == 0x000058, "Wrong size on FGardenPersistBlock");
static_assert(offsetof(FGardenPersistBlock, Plots) == 0x000040, "Member 'FGardenPersistBlock::Plots' has a wrong offset!");
static_assert(offsetof(FGardenPersistBlock, RowSize) == 0x000050, "Member 'FGardenPersistBlock::RowSize' has a wrong offset!");
static_assert(offsetof(FGardenPersistBlock, ColSize) == 0x000054, "Member 'FGardenPersistBlock::ColSize' has a wrong offset!");

// ScriptStruct Palia.FishingSelectLootParams
// 0x0010 (0x0010 - 0x0000)
struct FFishingSelectLootParams final
{
public:
	class UFishMinigameWaterBodyConfig*           WaterBodyConfig;                                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           BaitItemType;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingSelectLootParams) == 0x000008, "Wrong alignment on FFishingSelectLootParams");
static_assert(sizeof(FFishingSelectLootParams) == 0x000010, "Wrong size on FFishingSelectLootParams");
static_assert(offsetof(FFishingSelectLootParams, WaterBodyConfig) == 0x000000, "Member 'FFishingSelectLootParams::WaterBodyConfig' has a wrong offset!");
static_assert(offsetof(FFishingSelectLootParams, BaitItemType) == 0x000008, "Member 'FFishingSelectLootParams::BaitItemType' has a wrong offset!");

// ScriptStruct Palia.VillagerGiftHistory
// 0x0014 (0x0014 - 0x0000)
struct FVillagerGiftHistory final
{
public:
	int32                                         VillagerCoreId;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemPersistId;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt64Split                            LastGiftedMs;                                      // 0x0008(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AssociatedPreferenceVersion;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerGiftHistory) == 0x000004, "Wrong alignment on FVillagerGiftHistory");
static_assert(sizeof(FVillagerGiftHistory) == 0x000014, "Wrong size on FVillagerGiftHistory");
static_assert(offsetof(FVillagerGiftHistory, VillagerCoreId) == 0x000000, "Member 'FVillagerGiftHistory::VillagerCoreId' has a wrong offset!");
static_assert(offsetof(FVillagerGiftHistory, ItemPersistId) == 0x000004, "Member 'FVillagerGiftHistory::ItemPersistId' has a wrong offset!");
static_assert(offsetof(FVillagerGiftHistory, LastGiftedMs) == 0x000008, "Member 'FVillagerGiftHistory::LastGiftedMs' has a wrong offset!");
static_assert(offsetof(FVillagerGiftHistory, AssociatedPreferenceVersion) == 0x000010, "Member 'FVillagerGiftHistory::AssociatedPreferenceVersion' has a wrong offset!");

// ScriptStruct Palia.StartingItemConfig
// 0x0001 (0x0001 - 0x0000)
struct FStartingItemConfig final
{
public:
	bool                                          bPlayerStartsWithItem;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartingItemConfig) == 0x000001, "Wrong alignment on FStartingItemConfig");
static_assert(sizeof(FStartingItemConfig) == 0x000001, "Wrong size on FStartingItemConfig");
static_assert(offsetof(FStartingItemConfig, bPlayerStartsWithItem) == 0x000000, "Member 'FStartingItemConfig::bPlayerStartsWithItem' has a wrong offset!");

// ScriptStruct Palia.GearTransientDataEntry
// 0x0088 (0x0088 - 0x0000)
struct FGearTransientDataEntry final
{
public:
	struct FValeriaItem                           Item;                                              // 0x0000(0x0060)(NativeAccessSpecifierPublic)
	struct FGearSlotMetadata                      GearSlot;                                          // 0x0060(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            GameplayEffectHandle;                              // 0x0070(0x0008)(RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2134[0x10];                                    // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGearTransientDataEntry) == 0x000008, "Wrong alignment on FGearTransientDataEntry");
static_assert(sizeof(FGearTransientDataEntry) == 0x000088, "Wrong size on FGearTransientDataEntry");
static_assert(offsetof(FGearTransientDataEntry, Item) == 0x000000, "Member 'FGearTransientDataEntry::Item' has a wrong offset!");
static_assert(offsetof(FGearTransientDataEntry, GearSlot) == 0x000060, "Member 'FGearTransientDataEntry::GearSlot' has a wrong offset!");
static_assert(offsetof(FGearTransientDataEntry, GameplayEffectHandle) == 0x000070, "Member 'FGearTransientDataEntry::GameplayEffectHandle' has a wrong offset!");

// ScriptStruct Palia.VAL_OperationalData
// 0x0018 (0x0018 - 0x0000)
struct FVAL_OperationalData final
{
public:
	bool                                          bDaylightProfile;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2135[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProfileIndex;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProfileStartPercentage;                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProfileEndPercentage;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInThreshold;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutThreshold;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_OperationalData) == 0x000004, "Wrong alignment on FVAL_OperationalData");
static_assert(sizeof(FVAL_OperationalData) == 0x000018, "Wrong size on FVAL_OperationalData");
static_assert(offsetof(FVAL_OperationalData, bDaylightProfile) == 0x000000, "Member 'FVAL_OperationalData::bDaylightProfile' has a wrong offset!");
static_assert(offsetof(FVAL_OperationalData, ProfileIndex) == 0x000004, "Member 'FVAL_OperationalData::ProfileIndex' has a wrong offset!");
static_assert(offsetof(FVAL_OperationalData, ProfileStartPercentage) == 0x000008, "Member 'FVAL_OperationalData::ProfileStartPercentage' has a wrong offset!");
static_assert(offsetof(FVAL_OperationalData, ProfileEndPercentage) == 0x00000C, "Member 'FVAL_OperationalData::ProfileEndPercentage' has a wrong offset!");
static_assert(offsetof(FVAL_OperationalData, BlendInThreshold) == 0x000010, "Member 'FVAL_OperationalData::BlendInThreshold' has a wrong offset!");
static_assert(offsetof(FVAL_OperationalData, BlendOutThreshold) == 0x000014, "Member 'FVAL_OperationalData::BlendOutThreshold' has a wrong offset!");

// ScriptStruct Palia.VAL_ProfKey
// 0x0048 (0x0048 - 0x0000)
struct FVAL_ProfKey final
{
public:
	struct FVAL_OperationalData                   OperationalData;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EVAL_EnvProfileTime                           TimeOfDay;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2136[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_EnvironmentProfile> EnvironmentProfile;                                // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_ProfKey) == 0x000008, "Wrong alignment on FVAL_ProfKey");
static_assert(sizeof(FVAL_ProfKey) == 0x000048, "Wrong size on FVAL_ProfKey");
static_assert(offsetof(FVAL_ProfKey, OperationalData) == 0x000000, "Member 'FVAL_ProfKey::OperationalData' has a wrong offset!");
static_assert(offsetof(FVAL_ProfKey, TimeOfDay) == 0x000018, "Member 'FVAL_ProfKey::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FVAL_ProfKey, EnvironmentProfile) == 0x000020, "Member 'FVAL_ProfKey::EnvironmentProfile' has a wrong offset!");

// ScriptStruct Palia.GardenTileBuffLine
// 0x0020 (0x0020 - 0x0000)
struct FGardenTileBuffLine final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardenTileBuffLine) == 0x000008, "Wrong alignment on FGardenTileBuffLine");
static_assert(sizeof(FGardenTileBuffLine) == 0x000020, "Wrong size on FGardenTileBuffLine");
static_assert(offsetof(FGardenTileBuffLine, DisplayName) == 0x000000, "Member 'FGardenTileBuffLine::DisplayName' has a wrong offset!");
static_assert(offsetof(FGardenTileBuffLine, Icon) == 0x000018, "Member 'FGardenTileBuffLine::Icon' has a wrong offset!");

// ScriptStruct Palia.FishingNibbleConfig
// 0x0014 (0x0014 - 0x0000)
struct FFishingNibbleConfig final
{
public:
	struct FFloatRange                            WaitTimePostBite;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BiteChance;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingNibbleConfig) == 0x000004, "Wrong alignment on FFishingNibbleConfig");
static_assert(sizeof(FFishingNibbleConfig) == 0x000014, "Wrong size on FFishingNibbleConfig");
static_assert(offsetof(FFishingNibbleConfig, WaitTimePostBite) == 0x000000, "Member 'FFishingNibbleConfig::WaitTimePostBite' has a wrong offset!");
static_assert(offsetof(FFishingNibbleConfig, BiteChance) == 0x000010, "Member 'FFishingNibbleConfig::BiteChance' has a wrong offset!");

// ScriptStruct Palia.FishingNibbleSettings
// 0x0010 (0x0010 - 0x0000)
struct FFishingNibbleSettings final
{
public:
	TArray<struct FFishingNibbleConfig>           NibblePool;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingNibbleSettings) == 0x000008, "Wrong alignment on FFishingNibbleSettings");
static_assert(sizeof(FFishingNibbleSettings) == 0x000010, "Wrong size on FFishingNibbleSettings");
static_assert(offsetof(FFishingNibbleSettings, NibblePool) == 0x000000, "Member 'FFishingNibbleSettings::NibblePool' has a wrong offset!");

// ScriptStruct Palia.FishingXpSettings
// 0x000C (0x000C - 0x0000)
struct FFishingXpSettings final
{
public:
	float                                         PerfectCatchModifier;                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstTimeCatchPercentBonus;                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFishingLevelForXpBoost;                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingXpSettings) == 0x000004, "Wrong alignment on FFishingXpSettings");
static_assert(sizeof(FFishingXpSettings) == 0x00000C, "Wrong size on FFishingXpSettings");
static_assert(offsetof(FFishingXpSettings, PerfectCatchModifier) == 0x000000, "Member 'FFishingXpSettings::PerfectCatchModifier' has a wrong offset!");
static_assert(offsetof(FFishingXpSettings, FirstTimeCatchPercentBonus) == 0x000004, "Member 'FFishingXpSettings::FirstTimeCatchPercentBonus' has a wrong offset!");
static_assert(offsetof(FFishingXpSettings, MaxFishingLevelForXpBoost) == 0x000008, "Member 'FFishingXpSettings::MaxFishingLevelForXpBoost' has a wrong offset!");

// ScriptStruct Palia.FollowCameraSettings
// 0x00A8 (0x00B0 - 0x0008)
struct FFollowCameraSettings final : public FTableRowBase
{
public:
	float                                         BoomTargetArmLength;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpSpeed;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldOfViewPercent;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2137[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoomSocketOffset;                                  // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoomTargetOffset;                                  // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ViewAnglesMin;                                     // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ViewAnglesMax;                                     // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          UsePawnControlRotation;                            // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2138[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoomPosition;                                      // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BoomRotation;                                      // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFollowCameraSettings) == 0x000008, "Wrong alignment on FFollowCameraSettings");
static_assert(sizeof(FFollowCameraSettings) == 0x0000B0, "Wrong size on FFollowCameraSettings");
static_assert(offsetof(FFollowCameraSettings, BoomTargetArmLength) == 0x000008, "Member 'FFollowCameraSettings::BoomTargetArmLength' has a wrong offset!");
static_assert(offsetof(FFollowCameraSettings, LerpSpeed) == 0x00000C, "Member 'FFollowCameraSettings::LerpSpeed' has a wrong offset!");
static_assert(offsetof(FFollowCameraSettings, FieldOfViewPercent) == 0x000010, "Member 'FFollowCameraSettings::FieldOfViewPercent' has a wrong offset!");
static_assert(offsetof(FFollowCameraSettings, BoomSocketOffset) == 0x000018, "Member 'FFollowCameraSettings::BoomSocketOffset' has a wrong offset!");
static_assert(offsetof(FFollowCameraSettings, BoomTargetOffset) == 0x000030, "Member 'FFollowCameraSettings::BoomTargetOffset' has a wrong offset!");
static_assert(offsetof(FFollowCameraSettings, ViewAnglesMin) == 0x000048, "Member 'FFollowCameraSettings::ViewAnglesMin' has a wrong offset!");
static_assert(offsetof(FFollowCameraSettings, ViewAnglesMax) == 0x000060, "Member 'FFollowCameraSettings::ViewAnglesMax' has a wrong offset!");
static_assert(offsetof(FFollowCameraSettings, UsePawnControlRotation) == 0x000078, "Member 'FFollowCameraSettings::UsePawnControlRotation' has a wrong offset!");
static_assert(offsetof(FFollowCameraSettings, BoomPosition) == 0x000080, "Member 'FFollowCameraSettings::BoomPosition' has a wrong offset!");
static_assert(offsetof(FFollowCameraSettings, BoomRotation) == 0x000098, "Member 'FFollowCameraSettings::BoomRotation' has a wrong offset!");

// ScriptStruct Palia.ItemUseConfig
// 0x0018 (0x0018 - 0x0000)
struct FItemUseConfig final
{
public:
	int32                                         AmountStart;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountMax;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountReducedPerUse;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DestroyWhenUsedUp;                                 // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2139[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UVAL_ItemTypeDefinitionAsset*           ReplaceWithItemTypeWhenUsedUp;                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemUseConfig) == 0x000008, "Wrong alignment on FItemUseConfig");
static_assert(sizeof(FItemUseConfig) == 0x000018, "Wrong size on FItemUseConfig");
static_assert(offsetof(FItemUseConfig, AmountStart) == 0x000000, "Member 'FItemUseConfig::AmountStart' has a wrong offset!");
static_assert(offsetof(FItemUseConfig, AmountMax) == 0x000004, "Member 'FItemUseConfig::AmountMax' has a wrong offset!");
static_assert(offsetof(FItemUseConfig, AmountReducedPerUse) == 0x000008, "Member 'FItemUseConfig::AmountReducedPerUse' has a wrong offset!");
static_assert(offsetof(FItemUseConfig, DestroyWhenUsedUp) == 0x00000C, "Member 'FItemUseConfig::DestroyWhenUsedUp' has a wrong offset!");
static_assert(offsetof(FItemUseConfig, ReplaceWithItemTypeWhenUsedUp) == 0x000010, "Member 'FItemUseConfig::ReplaceWithItemTypeWhenUsedUp' has a wrong offset!");

// ScriptStruct Palia.GearAssetToLoad
// 0x0030 (0x0030 - 0x0000)
struct FGearAssetToLoad final
{
public:
	class FName                                   GearAssetTag;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 AssetToLoadOnEquip;                                // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAssetToLoad) == 0x000008, "Wrong alignment on FGearAssetToLoad");
static_assert(sizeof(FGearAssetToLoad) == 0x000030, "Wrong size on FGearAssetToLoad");
static_assert(offsetof(FGearAssetToLoad, GearAssetTag) == 0x000000, "Member 'FGearAssetToLoad::GearAssetTag' has a wrong offset!");
static_assert(offsetof(FGearAssetToLoad, AssetToLoadOnEquip) == 0x000008, "Member 'FGearAssetToLoad::AssetToLoadOnEquip' has a wrong offset!");

// ScriptStruct Palia.CharacterCustomizationLegsConfig
// 0x0028 (0x0030 - 0x0008)
struct FCharacterCustomizationLegsConfig final : public FTableRowBase
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBasicItem;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213A[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Zone0Weight;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone1Weight;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone2Weight;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone3Weight;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone4Weight;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterCustomizationLegsConfig) == 0x000008, "Wrong alignment on FCharacterCustomizationLegsConfig");
static_assert(sizeof(FCharacterCustomizationLegsConfig) == 0x000030, "Wrong size on FCharacterCustomizationLegsConfig");
static_assert(offsetof(FCharacterCustomizationLegsConfig, Mesh) == 0x000008, "Member 'FCharacterCustomizationLegsConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationLegsConfig, Material) == 0x000010, "Member 'FCharacterCustomizationLegsConfig::Material' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationLegsConfig, IsBasicItem) == 0x000018, "Member 'FCharacterCustomizationLegsConfig::IsBasicItem' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationLegsConfig, Zone0Weight) == 0x00001C, "Member 'FCharacterCustomizationLegsConfig::Zone0Weight' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationLegsConfig, Zone1Weight) == 0x000020, "Member 'FCharacterCustomizationLegsConfig::Zone1Weight' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationLegsConfig, Zone2Weight) == 0x000024, "Member 'FCharacterCustomizationLegsConfig::Zone2Weight' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationLegsConfig, Zone3Weight) == 0x000028, "Member 'FCharacterCustomizationLegsConfig::Zone3Weight' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationLegsConfig, Zone4Weight) == 0x00002C, "Member 'FCharacterCustomizationLegsConfig::Zone4Weight' has a wrong offset!");

// ScriptStruct Palia.PlotPresence
// 0x0010 (0x0010 - 0x0000)
struct FPlotPresence final
{
public:
	bool                                          bAtHome;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnPlot;                                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213B[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHousingPlotActor*                      CurrentHousingPlot;                                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlotPresence) == 0x000008, "Wrong alignment on FPlotPresence");
static_assert(sizeof(FPlotPresence) == 0x000010, "Wrong size on FPlotPresence");
static_assert(offsetof(FPlotPresence, bAtHome) == 0x000000, "Member 'FPlotPresence::bAtHome' has a wrong offset!");
static_assert(offsetof(FPlotPresence, bOnPlot) == 0x000001, "Member 'FPlotPresence::bOnPlot' has a wrong offset!");
static_assert(offsetof(FPlotPresence, CurrentHousingPlot) == 0x000008, "Member 'FPlotPresence::CurrentHousingPlot' has a wrong offset!");

// ScriptStruct Palia.SessionActorId
// 0x0004 (0x0004 - 0x0000)
struct FSessionActorId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionActorId) == 0x000004, "Wrong alignment on FSessionActorId");
static_assert(sizeof(FSessionActorId) == 0x000004, "Wrong size on FSessionActorId");
static_assert(offsetof(FSessionActorId, ID) == 0x000000, "Member 'FSessionActorId::ID' has a wrong offset!");

// ScriptStruct Palia.SessionActorIdSerializeItem
// 0x0004 (0x0010 - 0x000C)
struct FSessionActorIdSerializeItem final : public FFastArraySerializerItem
{
public:
	struct FSessionActorId                        ID;                                                // 0x000C(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionActorIdSerializeItem) == 0x000004, "Wrong alignment on FSessionActorIdSerializeItem");
static_assert(sizeof(FSessionActorIdSerializeItem) == 0x000010, "Wrong size on FSessionActorIdSerializeItem");
static_assert(offsetof(FSessionActorIdSerializeItem, ID) == 0x00000C, "Member 'FSessionActorIdSerializeItem::ID' has a wrong offset!");

// ScriptStruct Palia.ClientDialogueDisplayInfo
// 0x0048 (0x0048 - 0x0000)
struct FClientDialogueDisplayInfo final
{
public:
	class FText                                   RawText;                                           // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	int32                                         LastDisplayedCharRawIndex;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentVisibleStringLength;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePerGrapheme;                                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastProgressTime;                                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTempCloseTag;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213C[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientDialogueDisplayInfo) == 0x000008, "Wrong alignment on FClientDialogueDisplayInfo");
static_assert(sizeof(FClientDialogueDisplayInfo) == 0x000048, "Wrong size on FClientDialogueDisplayInfo");
static_assert(offsetof(FClientDialogueDisplayInfo, RawText) == 0x000000, "Member 'FClientDialogueDisplayInfo::RawText' has a wrong offset!");
static_assert(offsetof(FClientDialogueDisplayInfo, DisplayText) == 0x000018, "Member 'FClientDialogueDisplayInfo::DisplayText' has a wrong offset!");
static_assert(offsetof(FClientDialogueDisplayInfo, LastDisplayedCharRawIndex) == 0x000030, "Member 'FClientDialogueDisplayInfo::LastDisplayedCharRawIndex' has a wrong offset!");
static_assert(offsetof(FClientDialogueDisplayInfo, CurrentVisibleStringLength) == 0x000034, "Member 'FClientDialogueDisplayInfo::CurrentVisibleStringLength' has a wrong offset!");
static_assert(offsetof(FClientDialogueDisplayInfo, TimePerGrapheme) == 0x000038, "Member 'FClientDialogueDisplayInfo::TimePerGrapheme' has a wrong offset!");
static_assert(offsetof(FClientDialogueDisplayInfo, LastProgressTime) == 0x00003C, "Member 'FClientDialogueDisplayInfo::LastProgressTime' has a wrong offset!");
static_assert(offsetof(FClientDialogueDisplayInfo, bHasTempCloseTag) == 0x000040, "Member 'FClientDialogueDisplayInfo::bHasTempCloseTag' has a wrong offset!");

// ScriptStruct Palia.PersistBlobId
// 0x0014 (0x0014 - 0x0000)
struct FPersistBlobId final
{
public:
	struct FGuid                                  BlobGuid;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BlobType;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213D[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersistBlobId) == 0x000004, "Wrong alignment on FPersistBlobId");
static_assert(sizeof(FPersistBlobId) == 0x000014, "Wrong size on FPersistBlobId");
static_assert(offsetof(FPersistBlobId, BlobGuid) == 0x000000, "Member 'FPersistBlobId::BlobGuid' has a wrong offset!");
static_assert(offsetof(FPersistBlobId, BlobType) == 0x000010, "Member 'FPersistBlobId::BlobType' has a wrong offset!");

// ScriptStruct Palia.PersistActorId
// 0x0024 (0x0024 - 0x0000)
struct FPersistActorId final
{
public:
	struct FGuid                                  HashId;                                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPersistBlobId                         BlobId;                                            // 0x0010(0x0014)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPersistActorId) == 0x000004, "Wrong alignment on FPersistActorId");
static_assert(sizeof(FPersistActorId) == 0x000024, "Wrong size on FPersistActorId");
static_assert(offsetof(FPersistActorId, HashId) == 0x000000, "Member 'FPersistActorId::HashId' has a wrong offset!");
static_assert(offsetof(FPersistActorId, BlobId) == 0x000010, "Member 'FPersistActorId::BlobId' has a wrong offset!");

// ScriptStruct Palia.LauncherConfig
// 0x0050 (0x0058 - 0x0008)
struct FLauncherConfig final : public FTableRowBase
{
public:
	struct FGameplayTagContainer                  AmmoTagsAllowed;                                   // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EAmmoType                                     AmmoType;                                          // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_213E[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeBeforeGravityKicksIn;                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReticleIcon;                                       // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLauncherConfig) == 0x000008, "Wrong alignment on FLauncherConfig");
static_assert(sizeof(FLauncherConfig) == 0x000058, "Wrong size on FLauncherConfig");
static_assert(offsetof(FLauncherConfig, AmmoTagsAllowed) == 0x000008, "Member 'FLauncherConfig::AmmoTagsAllowed' has a wrong offset!");
static_assert(offsetof(FLauncherConfig, AmmoType) == 0x000028, "Member 'FLauncherConfig::AmmoType' has a wrong offset!");
static_assert(offsetof(FLauncherConfig, TimeBeforeGravityKicksIn) == 0x00002C, "Member 'FLauncherConfig::TimeBeforeGravityKicksIn' has a wrong offset!");
static_assert(offsetof(FLauncherConfig, ReticleIcon) == 0x000030, "Member 'FLauncherConfig::ReticleIcon' has a wrong offset!");

// ScriptStruct Palia.OneTimeItemConfig
// 0x0038 (0x0040 - 0x0008)
struct FOneTimeItemConfig final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConnectedAccomplishmentId;                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOneTimeItemConfig) == 0x000008, "Wrong alignment on FOneTimeItemConfig");
static_assert(sizeof(FOneTimeItemConfig) == 0x000040, "Wrong size on FOneTimeItemConfig");
static_assert(offsetof(FOneTimeItemConfig, ItemType) == 0x000008, "Member 'FOneTimeItemConfig::ItemType' has a wrong offset!");
static_assert(offsetof(FOneTimeItemConfig, ConnectedAccomplishmentId) == 0x000030, "Member 'FOneTimeItemConfig::ConnectedAccomplishmentId' has a wrong offset!");

// ScriptStruct Palia.LimitedEventMetadata
// 0x0010 (0x0010 - 0x0000)
struct FLimitedEventMetadata final
{
public:
	class ULimitedEventDataAsset*                 DataAsset;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALimitedEventManagerBase*               EventManager;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLimitedEventMetadata) == 0x000008, "Wrong alignment on FLimitedEventMetadata");
static_assert(sizeof(FLimitedEventMetadata) == 0x000010, "Wrong size on FLimitedEventMetadata");
static_assert(offsetof(FLimitedEventMetadata, DataAsset) == 0x000000, "Member 'FLimitedEventMetadata::DataAsset' has a wrong offset!");
static_assert(offsetof(FLimitedEventMetadata, EventManager) == 0x000008, "Member 'FLimitedEventMetadata::EventManager' has a wrong offset!");

// ScriptStruct Palia.SpeakerDialogueHistory
// 0x0008 (0x00B0 - 0x00A8)
struct FSpeakerDialogueHistory final : public FSpeakerDialogueHistoryPersistBlock
{
public:
	uint8                                         Pad_213F[0x4];                                     // 0x00A8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDirty;                                          // 0x00AC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2140[0x3];                                     // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpeakerDialogueHistory) == 0x000008, "Wrong alignment on FSpeakerDialogueHistory");
static_assert(sizeof(FSpeakerDialogueHistory) == 0x0000B0, "Wrong size on FSpeakerDialogueHistory");
static_assert(offsetof(FSpeakerDialogueHistory, bIsDirty) == 0x0000AC, "Member 'FSpeakerDialogueHistory::bIsDirty' has a wrong offset!");

// ScriptStruct Palia.PendingHousingPersistActorsQueue
// 0x0030 (0x0030 - 0x0000)
struct FPendingHousingPersistActorsQueue final
{
public:
	class AHousingOwnershipActor*                 House;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPersistActorId>                LoadQueue;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2141[0x10];                                    // 0x0018(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaCharacter*                      LoadInstigator;                                    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingHousingPersistActorsQueue) == 0x000008, "Wrong alignment on FPendingHousingPersistActorsQueue");
static_assert(sizeof(FPendingHousingPersistActorsQueue) == 0x000030, "Wrong size on FPendingHousingPersistActorsQueue");
static_assert(offsetof(FPendingHousingPersistActorsQueue, House) == 0x000000, "Member 'FPendingHousingPersistActorsQueue::House' has a wrong offset!");
static_assert(offsetof(FPendingHousingPersistActorsQueue, LoadQueue) == 0x000008, "Member 'FPendingHousingPersistActorsQueue::LoadQueue' has a wrong offset!");
static_assert(offsetof(FPendingHousingPersistActorsQueue, LoadInstigator) == 0x000028, "Member 'FPendingHousingPersistActorsQueue::LoadInstigator' has a wrong offset!");

// ScriptStruct Palia.MontageAsyncLoadInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FMontageAsyncLoadInfo final
{
public:
	uint8                                         Pad_2142[0x30];                                    // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMontageAsyncLoadInfo) == 0x000008, "Wrong alignment on FMontageAsyncLoadInfo");
static_assert(sizeof(FMontageAsyncLoadInfo) == 0x000030, "Wrong size on FMontageAsyncLoadInfo");

// ScriptStruct Palia.VAL_EffectActorSpawnParameters
// 0x00C0 (0x00C0 - 0x0000)
struct FVAL_EffectActorSpawnParameters final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2143[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0010(0x0060)(BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            CollisionMethod;                                   // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2144[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SoundFX;                                           // 0x00A0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedColor;                                     // 0x00A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2145[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Instigator;                                        // 0x00B0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2146[0x8];                                     // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_EffectActorSpawnParameters) == 0x000010, "Wrong alignment on FVAL_EffectActorSpawnParameters");
static_assert(sizeof(FVAL_EffectActorSpawnParameters) == 0x0000C0, "Wrong size on FVAL_EffectActorSpawnParameters");
static_assert(offsetof(FVAL_EffectActorSpawnParameters, ActorClass) == 0x000000, "Member 'FVAL_EffectActorSpawnParameters::ActorClass' has a wrong offset!");
static_assert(offsetof(FVAL_EffectActorSpawnParameters, ActorTransform) == 0x000010, "Member 'FVAL_EffectActorSpawnParameters::ActorTransform' has a wrong offset!");
static_assert(offsetof(FVAL_EffectActorSpawnParameters, CollisionMethod) == 0x000070, "Member 'FVAL_EffectActorSpawnParameters::CollisionMethod' has a wrong offset!");
static_assert(offsetof(FVAL_EffectActorSpawnParameters, Owner) == 0x000078, "Member 'FVAL_EffectActorSpawnParameters::Owner' has a wrong offset!");
static_assert(offsetof(FVAL_EffectActorSpawnParameters, PrimaryColor) == 0x000080, "Member 'FVAL_EffectActorSpawnParameters::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FVAL_EffectActorSpawnParameters, SecondaryColor) == 0x000090, "Member 'FVAL_EffectActorSpawnParameters::SecondaryColor' has a wrong offset!");
static_assert(offsetof(FVAL_EffectActorSpawnParameters, SoundFX) == 0x0000A0, "Member 'FVAL_EffectActorSpawnParameters::SoundFX' has a wrong offset!");
static_assert(offsetof(FVAL_EffectActorSpawnParameters, SelectedColor) == 0x0000A8, "Member 'FVAL_EffectActorSpawnParameters::SelectedColor' has a wrong offset!");
static_assert(offsetof(FVAL_EffectActorSpawnParameters, Instigator) == 0x0000B0, "Member 'FVAL_EffectActorSpawnParameters::Instigator' has a wrong offset!");

// ScriptStruct Palia.QuestRewardSource
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FQuestRewardSource final
{
public:
	EQuestRewardSourceType                        SourceType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2147[0x27];                                    // 0x0001(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestRewardSource) == 0x000008, "Wrong alignment on FQuestRewardSource");
static_assert(sizeof(FQuestRewardSource) == 0x000028, "Wrong size on FQuestRewardSource");
static_assert(offsetof(FQuestRewardSource, SourceType) == 0x000000, "Member 'FQuestRewardSource::SourceType' has a wrong offset!");

// ScriptStruct Palia.ThresholdToSpeedParams
// 0x0008 (0x0008 - 0x0000)
struct FThresholdToSpeedParams final
{
public:
	float                                         Threshold;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThresholdToSpeedParams) == 0x000004, "Wrong alignment on FThresholdToSpeedParams");
static_assert(sizeof(FThresholdToSpeedParams) == 0x000008, "Wrong size on FThresholdToSpeedParams");
static_assert(offsetof(FThresholdToSpeedParams, Threshold) == 0x000000, "Member 'FThresholdToSpeedParams::Threshold' has a wrong offset!");
static_assert(offsetof(FThresholdToSpeedParams, Speed) == 0x000004, "Member 'FThresholdToSpeedParams::Speed' has a wrong offset!");

// ScriptStruct Palia.ValeriaCineCamLookatParams
// 0x00A8 (0x00A8 - 0x0000)
struct FValeriaCineCamLookatParams final
{
public:
	uint8                                         bEnableLookAtTracking : 1;                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDrawDebugLookAtTrackingPosition : 1;              // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2148[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FThresholdToSpeedParams>        LookAtTrackingInterpSpeed;                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2149[0x18];                                    // 0x0018(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMeshComponent>  SkelToTrack;                                       // 0x0030(0x0028)(Edit, BlueprintVisible, ExportObject, InstancedReference, Interp, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkelBoneToTrack;                                   // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  ActorToTrack;                                      // 0x0060(0x0028)(Edit, BlueprintVisible, Interp, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeOffset;                                    // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowRoll : 1;                                    // 0x00A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_214A[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaCineCamLookatParams) == 0x000008, "Wrong alignment on FValeriaCineCamLookatParams");
static_assert(sizeof(FValeriaCineCamLookatParams) == 0x0000A8, "Wrong size on FValeriaCineCamLookatParams");
static_assert(offsetof(FValeriaCineCamLookatParams, LookAtTrackingInterpSpeed) == 0x000008, "Member 'FValeriaCineCamLookatParams::LookAtTrackingInterpSpeed' has a wrong offset!");
static_assert(offsetof(FValeriaCineCamLookatParams, SkelToTrack) == 0x000030, "Member 'FValeriaCineCamLookatParams::SkelToTrack' has a wrong offset!");
static_assert(offsetof(FValeriaCineCamLookatParams, SkelBoneToTrack) == 0x000058, "Member 'FValeriaCineCamLookatParams::SkelBoneToTrack' has a wrong offset!");
static_assert(offsetof(FValeriaCineCamLookatParams, ActorToTrack) == 0x000060, "Member 'FValeriaCineCamLookatParams::ActorToTrack' has a wrong offset!");
static_assert(offsetof(FValeriaCineCamLookatParams, RelativeOffset) == 0x000088, "Member 'FValeriaCineCamLookatParams::RelativeOffset' has a wrong offset!");

// ScriptStruct Palia.CraftingGlobalConfig_CoopSettings
// 0x0004 (0x0004 - 0x0000)
struct FCraftingGlobalConfig_CoopSettings final
{
public:
	float                                         XpMultiplier;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingGlobalConfig_CoopSettings) == 0x000004, "Wrong alignment on FCraftingGlobalConfig_CoopSettings");
static_assert(sizeof(FCraftingGlobalConfig_CoopSettings) == 0x000004, "Wrong size on FCraftingGlobalConfig_CoopSettings");
static_assert(offsetof(FCraftingGlobalConfig_CoopSettings, XpMultiplier) == 0x000000, "Member 'FCraftingGlobalConfig_CoopSettings::XpMultiplier' has a wrong offset!");

// ScriptStruct Palia.DebugCheatActorSpawn
// 0x0070 (0x0070 - 0x0000)
struct FDebugCheatActorSpawn final
{
public:
	TSubclassOf<class AActor>                     SpawnActorClass;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214B[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnActorTransform;                               // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugCheatActorSpawn) == 0x000010, "Wrong alignment on FDebugCheatActorSpawn");
static_assert(sizeof(FDebugCheatActorSpawn) == 0x000070, "Wrong size on FDebugCheatActorSpawn");
static_assert(offsetof(FDebugCheatActorSpawn, SpawnActorClass) == 0x000000, "Member 'FDebugCheatActorSpawn::SpawnActorClass' has a wrong offset!");
static_assert(offsetof(FDebugCheatActorSpawn, SpawnActorTransform) == 0x000010, "Member 'FDebugCheatActorSpawn::SpawnActorTransform' has a wrong offset!");

// ScriptStruct Palia.DebugCheat
// 0x0990 (0x0990 - 0x0000)
struct Palia::FDebugCheat final
{
public:
	int32                                         TimeWarpMinutes;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TimeWarpToDayZero;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimeWarpToSpecificTimeOfDay;                      // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214C[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeOfDayHourMinute                   SpecificTimeOfDay;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bModifyVillagerSpeedScalar;                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VillagerSpeedScalarModifier;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurrencyConfig*                        CurrencyToAdd;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyAmountToAdd;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    VitalTypeToAdd;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214E[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VitalAmountToAdd;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214F[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FValeriaItem                           ItemToAdd;                                         // 0x0030(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOverflowToStorage;                                // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveItemToAddInstead;                           // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryToUpdateRelevantStats;                         // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPickupRewards;                               // 0x0093(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillType                                    SkillTypeToAdd;                                    // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2150[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillAmountToAdd;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VillagerId;                                        // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VillagerCoreId;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FriendshipAmount;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RomanceAmount;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERomanceStateChange                           RomanceStateChange;                                // 0x00AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2151[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecipeId;                                          // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeleportCharacter;                                 // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2152[0x3];                                     // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TeleportCharacterTo;                               // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeleportVisitPlot;                                 // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2153[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TeleportCharacterToPlotId;                         // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffId;                                            // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpdateMetaData;                                    // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2154[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVALDTOS_MetaCharacterFormat           MetaData;                                          // 0x00F0(0x0778)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         VillagerQuestConfigIdToComplete;                   // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuestConfigIdToForceComplete;                      // 0x086C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VillagerQuestConfigIdToGrant;                      // 0x0870(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VillagerMailMessageConfigId;                       // 0x0874(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VillagerQuestConfigIdToFulfill;                    // 0x0878(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VillagerQuestRequirementIndexToFulfill;            // 0x087C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToUpgrade;                                    // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConsoleCommand;                                    // 0x0888(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetAllSeenDialogue;                              // 0x0898(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2155[0x3];                                     // 0x0899(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TagToSet;                                          // 0x089C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TagValueToSet;                                     // 0x08A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RandomizeGiftPreferences;                          // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2156[0x3];                                     // 0x08A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnableExplicitGiftPreference;                      // 0x08AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevealGiftPreferences;                             // 0x08B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForgetGiftPreferences;                             // 0x08B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearAllGiftPreferences;                           // 0x08B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearAllGiftHistory;                               // 0x08B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcquireStorageBag;                                 // 0x08B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2157[0x3];                                     // 0x08B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDebugCheatPlaceItems                  PlaceItems;                                        // 0x08B8(0x0080)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bMaxOutPlayer;                                     // 0x0938(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickMeOff;                                        // 0x0939(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2158[0x6];                                     // 0x093A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDebugCheatActorSpawn>          ActorsToSpawn;                                     // 0x0940(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bResetChallengeProgress;                           // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChallengeWeeklyReset;                             // 0x0951(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2159[0x6];                                     // 0x0952(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatToSetName;                                     // 0x0958(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDebugCheatStatType                           StatToSetType;                                     // 0x0968(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215A[0x7];                                     // 0x0969(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StatToSetValue;                                    // 0x0970(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnlockAllGearTypes;                               // 0x0980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDowngradeItem;                                    // 0x0981(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215B[0x6];                                     // 0x0982(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCheatSetConfig*                        CheatSetConfig;                                    // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Palia::FDebugCheat) == 0x000008, "Wrong alignment on Palia::FDebugCheat");
static_assert(sizeof(Palia::FDebugCheat) == 0x000990, "Wrong size on Palia::FDebugCheat");
static_assert(offsetof(Palia::FDebugCheat, TimeWarpMinutes) == 0x000000, "Member 'Palia::FDebugCheat::TimeWarpMinutes' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, TimeWarpToDayZero) == 0x000004, "Member 'Palia::FDebugCheat::TimeWarpToDayZero' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bTimeWarpToSpecificTimeOfDay) == 0x000005, "Member 'Palia::FDebugCheat::bTimeWarpToSpecificTimeOfDay' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, SpecificTimeOfDay) == 0x000008, "Member 'Palia::FDebugCheat::SpecificTimeOfDay' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bModifyVillagerSpeedScalar) == 0x000010, "Member 'Palia::FDebugCheat::bModifyVillagerSpeedScalar' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, VillagerSpeedScalarModifier) == 0x000014, "Member 'Palia::FDebugCheat::VillagerSpeedScalarModifier' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, CurrencyToAdd) == 0x000018, "Member 'Palia::FDebugCheat::CurrencyToAdd' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, CurrencyAmountToAdd) == 0x000020, "Member 'Palia::FDebugCheat::CurrencyAmountToAdd' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, VitalTypeToAdd) == 0x000024, "Member 'Palia::FDebugCheat::VitalTypeToAdd' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, VitalAmountToAdd) == 0x000028, "Member 'Palia::FDebugCheat::VitalAmountToAdd' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, ItemToAdd) == 0x000030, "Member 'Palia::FDebugCheat::ItemToAdd' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bOverflowToStorage) == 0x000090, "Member 'Palia::FDebugCheat::bOverflowToStorage' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bRemoveItemToAddInstead) == 0x000091, "Member 'Palia::FDebugCheat::bRemoveItemToAddInstead' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bTryToUpdateRelevantStats) == 0x000092, "Member 'Palia::FDebugCheat::bTryToUpdateRelevantStats' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bAllowPickupRewards) == 0x000093, "Member 'Palia::FDebugCheat::bAllowPickupRewards' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, SkillTypeToAdd) == 0x000094, "Member 'Palia::FDebugCheat::SkillTypeToAdd' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, SkillAmountToAdd) == 0x000098, "Member 'Palia::FDebugCheat::SkillAmountToAdd' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, VillagerId) == 0x00009C, "Member 'Palia::FDebugCheat::VillagerId' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, VillagerCoreId) == 0x0000A0, "Member 'Palia::FDebugCheat::VillagerCoreId' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, FriendshipAmount) == 0x0000A4, "Member 'Palia::FDebugCheat::FriendshipAmount' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, RomanceAmount) == 0x0000A8, "Member 'Palia::FDebugCheat::RomanceAmount' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, RomanceStateChange) == 0x0000AC, "Member 'Palia::FDebugCheat::RomanceStateChange' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, RecipeId) == 0x0000B0, "Member 'Palia::FDebugCheat::RecipeId' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, TeleportCharacter) == 0x0000B4, "Member 'Palia::FDebugCheat::TeleportCharacter' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, TeleportCharacterTo) == 0x0000B8, "Member 'Palia::FDebugCheat::TeleportCharacterTo' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, TeleportVisitPlot) == 0x0000D0, "Member 'Palia::FDebugCheat::TeleportVisitPlot' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, TeleportCharacterToPlotId) == 0x0000D8, "Member 'Palia::FDebugCheat::TeleportCharacterToPlotId' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, BuffId) == 0x0000E8, "Member 'Palia::FDebugCheat::BuffId' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, UpdateMetaData) == 0x0000EC, "Member 'Palia::FDebugCheat::UpdateMetaData' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, MetaData) == 0x0000F0, "Member 'Palia::FDebugCheat::MetaData' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, VillagerQuestConfigIdToComplete) == 0x000868, "Member 'Palia::FDebugCheat::VillagerQuestConfigIdToComplete' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, QuestConfigIdToForceComplete) == 0x00086C, "Member 'Palia::FDebugCheat::QuestConfigIdToForceComplete' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, VillagerQuestConfigIdToGrant) == 0x000870, "Member 'Palia::FDebugCheat::VillagerQuestConfigIdToGrant' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, VillagerMailMessageConfigId) == 0x000874, "Member 'Palia::FDebugCheat::VillagerMailMessageConfigId' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, VillagerQuestConfigIdToFulfill) == 0x000878, "Member 'Palia::FDebugCheat::VillagerQuestConfigIdToFulfill' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, VillagerQuestRequirementIndexToFulfill) == 0x00087C, "Member 'Palia::FDebugCheat::VillagerQuestRequirementIndexToFulfill' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, ActorToUpgrade) == 0x000880, "Member 'Palia::FDebugCheat::ActorToUpgrade' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, ConsoleCommand) == 0x000888, "Member 'Palia::FDebugCheat::ConsoleCommand' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, ResetAllSeenDialogue) == 0x000898, "Member 'Palia::FDebugCheat::ResetAllSeenDialogue' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, TagToSet) == 0x00089C, "Member 'Palia::FDebugCheat::TagToSet' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, TagValueToSet) == 0x0008A4, "Member 'Palia::FDebugCheat::TagValueToSet' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, RandomizeGiftPreferences) == 0x0008A8, "Member 'Palia::FDebugCheat::RandomizeGiftPreferences' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, EnableExplicitGiftPreference) == 0x0008AC, "Member 'Palia::FDebugCheat::EnableExplicitGiftPreference' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, RevealGiftPreferences) == 0x0008B0, "Member 'Palia::FDebugCheat::RevealGiftPreferences' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, ForgetGiftPreferences) == 0x0008B1, "Member 'Palia::FDebugCheat::ForgetGiftPreferences' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, ClearAllGiftPreferences) == 0x0008B2, "Member 'Palia::FDebugCheat::ClearAllGiftPreferences' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, ClearAllGiftHistory) == 0x0008B3, "Member 'Palia::FDebugCheat::ClearAllGiftHistory' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, AcquireStorageBag) == 0x0008B4, "Member 'Palia::FDebugCheat::AcquireStorageBag' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, PlaceItems) == 0x0008B8, "Member 'Palia::FDebugCheat::PlaceItems' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bMaxOutPlayer) == 0x000938, "Member 'Palia::FDebugCheat::bMaxOutPlayer' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bKickMeOff) == 0x000939, "Member 'Palia::FDebugCheat::bKickMeOff' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, ActorsToSpawn) == 0x000940, "Member 'Palia::FDebugCheat::ActorsToSpawn' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bResetChallengeProgress) == 0x000950, "Member 'Palia::FDebugCheat::bResetChallengeProgress' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bChallengeWeeklyReset) == 0x000951, "Member 'Palia::FDebugCheat::bChallengeWeeklyReset' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, StatToSetName) == 0x000958, "Member 'Palia::FDebugCheat::StatToSetName' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, StatToSetType) == 0x000968, "Member 'Palia::FDebugCheat::StatToSetType' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, StatToSetValue) == 0x000970, "Member 'Palia::FDebugCheat::StatToSetValue' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bUnlockAllGearTypes) == 0x000980, "Member 'Palia::FDebugCheat::bUnlockAllGearTypes' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, bDowngradeItem) == 0x000981, "Member 'Palia::FDebugCheat::bDowngradeItem' has a wrong offset!");
static_assert(offsetof(Palia::FDebugCheat, CheatSetConfig) == 0x000988, "Member 'Palia::FDebugCheat::CheatSetConfig' has a wrong offset!");

// ScriptStruct Palia.CompleRecipeCrafterProductState
// 0x0010 (0x0010 - 0x0000)
struct FCompleRecipeCrafterProductState final
{
public:
	class UCrafterComponent*                      CrafterComponent;                                  // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComplexRecipeCrafterCurrentProductState      OneProductState;                                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCompleRecipeCrafterProductState) == 0x000008, "Wrong alignment on FCompleRecipeCrafterProductState");
static_assert(sizeof(FCompleRecipeCrafterProductState) == 0x000010, "Wrong size on FCompleRecipeCrafterProductState");
static_assert(offsetof(FCompleRecipeCrafterProductState, CrafterComponent) == 0x000000, "Member 'FCompleRecipeCrafterProductState::CrafterComponent' has a wrong offset!");
static_assert(offsetof(FCompleRecipeCrafterProductState, OneProductState) == 0x000008, "Member 'FCompleRecipeCrafterProductState::OneProductState' has a wrong offset!");

// ScriptStruct Palia.ComplexRecipeProduct
// 0x0038 (0x0038 - 0x0000)
struct FComplexRecipeProduct final
{
public:
	TArray<struct FCompleRecipeCrafterProductState> CrafterProductStates;                              // 0x0000(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRecipe_RequireItem                    Item;                                              // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EComplexRecipeCrafterCurrentProductState      ConsolidatedOneProductState;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComplexRecipeProducerAllProductState         AllProductState;                                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215D[0x2];                                     // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemainingToMake;                                   // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RemainingToUse;                                    // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_215E[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComplexRecipeProduct) == 0x000008, "Wrong alignment on FComplexRecipeProduct");
static_assert(sizeof(FComplexRecipeProduct) == 0x000038, "Wrong size on FComplexRecipeProduct");
static_assert(offsetof(FComplexRecipeProduct, CrafterProductStates) == 0x000000, "Member 'FComplexRecipeProduct::CrafterProductStates' has a wrong offset!");
static_assert(offsetof(FComplexRecipeProduct, Item) == 0x000010, "Member 'FComplexRecipeProduct::Item' has a wrong offset!");
static_assert(offsetof(FComplexRecipeProduct, ConsolidatedOneProductState) == 0x000028, "Member 'FComplexRecipeProduct::ConsolidatedOneProductState' has a wrong offset!");
static_assert(offsetof(FComplexRecipeProduct, AllProductState) == 0x000029, "Member 'FComplexRecipeProduct::AllProductState' has a wrong offset!");
static_assert(offsetof(FComplexRecipeProduct, RemainingToMake) == 0x00002C, "Member 'FComplexRecipeProduct::RemainingToMake' has a wrong offset!");
static_assert(offsetof(FComplexRecipeProduct, RemainingToUse) == 0x000030, "Member 'FComplexRecipeProduct::RemainingToUse' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationModeConfig
// 0x0010 (0x0010 - 0x0000)
struct FVAL_CharacterCustomizationModeConfig final
{
public:
	EVAL_CharacterCustomizationMode               Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingGender;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingHair;                                 // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingFace;                                 // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingClothing;                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingHats;                                 // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingMasks;                                // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingFacialHair;                           // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingSkin;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingGlider;                               // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingVoice;                                // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowedFiltering;                                 // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowShopButton;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEditingBody;                                 // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSavedLoadouts;                               // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncEntitlementsOnStart;                          // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationModeConfig) == 0x000001, "Wrong alignment on FVAL_CharacterCustomizationModeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationModeConfig) == 0x000010, "Wrong size on FVAL_CharacterCustomizationModeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, Mode) == 0x000000, "Member 'FVAL_CharacterCustomizationModeConfig::Mode' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingGender) == 0x000001, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingGender' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingHair) == 0x000002, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingHair' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingFace) == 0x000003, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingFace' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingClothing) == 0x000004, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingClothing' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingHats) == 0x000005, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingHats' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingMasks) == 0x000006, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingMasks' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingFacialHair) == 0x000007, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingFacialHair' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingSkin) == 0x000008, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingSkin' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingGlider) == 0x000009, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingGlider' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingVoice) == 0x00000A, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingVoice' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowedFiltering) == 0x00000B, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowedFiltering' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowShopButton) == 0x00000C, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowShopButton' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowEditingBody) == 0x00000D, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowEditingBody' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bAllowSavedLoadouts) == 0x00000E, "Member 'FVAL_CharacterCustomizationModeConfig::bAllowSavedLoadouts' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationModeConfig, bSyncEntitlementsOnStart) == 0x00000F, "Member 'FVAL_CharacterCustomizationModeConfig::bSyncEntitlementsOnStart' has a wrong offset!");

// ScriptStruct Palia.InstrumentNotes
// 0x0058 (0x0058 - 0x0000)
struct FInstrumentNotes final
{
public:
	TMap<int32, class UAkAudioEvent*>             SoundsToPlay;                                      // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          SuccessFlourish;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstrumentNotes) == 0x000008, "Wrong alignment on FInstrumentNotes");
static_assert(sizeof(FInstrumentNotes) == 0x000058, "Wrong size on FInstrumentNotes");
static_assert(offsetof(FInstrumentNotes, SoundsToPlay) == 0x000000, "Member 'FInstrumentNotes::SoundsToPlay' has a wrong offset!");
static_assert(offsetof(FInstrumentNotes, SuccessFlourish) == 0x000050, "Member 'FInstrumentNotes::SuccessFlourish' has a wrong offset!");

// ScriptStruct Palia.CurrencyReward
// 0x0010 (0x0010 - 0x0000)
struct FCurrencyReward final
{
public:
	class UCurrencyConfig*                        Config;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215F[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrencyReward) == 0x000008, "Wrong alignment on FCurrencyReward");
static_assert(sizeof(FCurrencyReward) == 0x000010, "Wrong size on FCurrencyReward");
static_assert(offsetof(FCurrencyReward, Config) == 0x000000, "Member 'FCurrencyReward::Config' has a wrong offset!");
static_assert(offsetof(FCurrencyReward, Amount) == 0x000008, "Member 'FCurrencyReward::Amount' has a wrong offset!");

// ScriptStruct Palia.ErrorMessage
// 0x0040 (0x0040 - 0x0000)
struct FErrorMessage final
{
public:
	class FName                                   ErrorId;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VillagerQuestConfigId;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2160[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaCharacter*                      Character;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FErrorMessage) == 0x000008, "Wrong alignment on FErrorMessage");
static_assert(sizeof(FErrorMessage) == 0x000040, "Wrong size on FErrorMessage");
static_assert(offsetof(FErrorMessage, ErrorId) == 0x000000, "Member 'FErrorMessage::ErrorId' has a wrong offset!");
static_assert(offsetof(FErrorMessage, VillagerQuestConfigId) == 0x000008, "Member 'FErrorMessage::VillagerQuestConfigId' has a wrong offset!");
static_assert(offsetof(FErrorMessage, Character) == 0x000010, "Member 'FErrorMessage::Character' has a wrong offset!");
static_assert(offsetof(FErrorMessage, ItemType) == 0x000018, "Member 'FErrorMessage::ItemType' has a wrong offset!");

// ScriptStruct Palia.SubgameInputHandlerInitializationParams
// 0x0008 (0x0008 - 0x0000)
struct FSubgameInputHandlerInitializationParams final
{
public:
	class UAkRtpc*                                SubgameMixRtpc;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubgameInputHandlerInitializationParams) == 0x000008, "Wrong alignment on FSubgameInputHandlerInitializationParams");
static_assert(sizeof(FSubgameInputHandlerInitializationParams) == 0x000008, "Wrong size on FSubgameInputHandlerInitializationParams");
static_assert(offsetof(FSubgameInputHandlerInitializationParams, SubgameMixRtpc) == 0x000000, "Member 'FSubgameInputHandlerInitializationParams::SubgameMixRtpc' has a wrong offset!");

// ScriptStruct Palia.ValeriaInputSettings
// 0x0038 (0x0038 - 0x0000)
struct FValeriaInputSettings final
{
public:
	bool                                          bInvertThumbstick;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertMouseXAxis;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertMouseYAxis;                                 // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2161[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseSensitivity;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseAimSensitivityMultiplier;                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertControllerXAxis;                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertControllerYAxis;                            // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2162[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControllerXAxisSensitivity;                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerYAxisSensitivity;                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerAimSensitivityMultiplier;                // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControllerForceFeedback;                    // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2163[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControllerForceFeedbackScale;                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2164[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKeyRebind_CustomKeyMappings>   KeyMappings;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaInputSettings) == 0x000008, "Wrong alignment on FValeriaInputSettings");
static_assert(sizeof(FValeriaInputSettings) == 0x000038, "Wrong size on FValeriaInputSettings");
static_assert(offsetof(FValeriaInputSettings, bInvertThumbstick) == 0x000000, "Member 'FValeriaInputSettings::bInvertThumbstick' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, bInvertMouseXAxis) == 0x000001, "Member 'FValeriaInputSettings::bInvertMouseXAxis' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, bInvertMouseYAxis) == 0x000002, "Member 'FValeriaInputSettings::bInvertMouseYAxis' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, MouseSensitivity) == 0x000004, "Member 'FValeriaInputSettings::MouseSensitivity' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, MouseAimSensitivityMultiplier) == 0x000008, "Member 'FValeriaInputSettings::MouseAimSensitivityMultiplier' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, bInvertControllerXAxis) == 0x00000C, "Member 'FValeriaInputSettings::bInvertControllerXAxis' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, bInvertControllerYAxis) == 0x00000D, "Member 'FValeriaInputSettings::bInvertControllerYAxis' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, ControllerXAxisSensitivity) == 0x000010, "Member 'FValeriaInputSettings::ControllerXAxisSensitivity' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, ControllerYAxisSensitivity) == 0x000014, "Member 'FValeriaInputSettings::ControllerYAxisSensitivity' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, ControllerAimSensitivityMultiplier) == 0x000018, "Member 'FValeriaInputSettings::ControllerAimSensitivityMultiplier' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, bEnableControllerForceFeedback) == 0x00001C, "Member 'FValeriaInputSettings::bEnableControllerForceFeedback' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, ControllerForceFeedbackScale) == 0x000020, "Member 'FValeriaInputSettings::ControllerForceFeedbackScale' has a wrong offset!");
static_assert(offsetof(FValeriaInputSettings, KeyMappings) == 0x000028, "Member 'FValeriaInputSettings::KeyMappings' has a wrong offset!");

// ScriptStruct Palia.FishingRodConfig
// 0x0030 (0x0038 - 0x0008)
struct FFishingRodConfig final : public FTableRowBase
{
public:
	float                                         SafeZoneMaxSpeed;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeZoneAccel;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeZoneDeccel;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeZoneReactivityPercent;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeZoneHalfWidth;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HpPerSecond;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinigameHealth;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageLostPerSecondInSafeZone;                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSafeWhileFishJumping;                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2165[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     CastBobbleProjectileToSpawn;                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingRodConfig) == 0x000008, "Wrong alignment on FFishingRodConfig");
static_assert(sizeof(FFishingRodConfig) == 0x000038, "Wrong size on FFishingRodConfig");
static_assert(offsetof(FFishingRodConfig, SafeZoneMaxSpeed) == 0x000008, "Member 'FFishingRodConfig::SafeZoneMaxSpeed' has a wrong offset!");
static_assert(offsetof(FFishingRodConfig, SafeZoneAccel) == 0x00000C, "Member 'FFishingRodConfig::SafeZoneAccel' has a wrong offset!");
static_assert(offsetof(FFishingRodConfig, SafeZoneDeccel) == 0x000010, "Member 'FFishingRodConfig::SafeZoneDeccel' has a wrong offset!");
static_assert(offsetof(FFishingRodConfig, SafeZoneReactivityPercent) == 0x000014, "Member 'FFishingRodConfig::SafeZoneReactivityPercent' has a wrong offset!");
static_assert(offsetof(FFishingRodConfig, SafeZoneHalfWidth) == 0x000018, "Member 'FFishingRodConfig::SafeZoneHalfWidth' has a wrong offset!");
static_assert(offsetof(FFishingRodConfig, HpPerSecond) == 0x00001C, "Member 'FFishingRodConfig::HpPerSecond' has a wrong offset!");
static_assert(offsetof(FFishingRodConfig, MinigameHealth) == 0x000020, "Member 'FFishingRodConfig::MinigameHealth' has a wrong offset!");
static_assert(offsetof(FFishingRodConfig, DamageLostPerSecondInSafeZone) == 0x000024, "Member 'FFishingRodConfig::DamageLostPerSecondInSafeZone' has a wrong offset!");
static_assert(offsetof(FFishingRodConfig, TimeSafeWhileFishJumping) == 0x000028, "Member 'FFishingRodConfig::TimeSafeWhileFishJumping' has a wrong offset!");
static_assert(offsetof(FFishingRodConfig, CastBobbleProjectileToSpawn) == 0x000030, "Member 'FFishingRodConfig::CastBobbleProjectileToSpawn' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOptionsArray
// 0x0020 (0x0020 - 0x0000)
struct FVAL_CharacterCustomizationVariantOptionsArray final
{
public:
	uint8                                         Pad_2166[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UScriptStruct*                          OptionStruct;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2167[0x10];                                    // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOptionsArray) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOptionsArray");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOptionsArray) == 0x000020, "Wrong size on FVAL_CharacterCustomizationVariantOptionsArray");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOptionsArray, OptionStruct) == 0x000008, "Member 'FVAL_CharacterCustomizationVariantOptionsArray::OptionStruct' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantChannel
// 0x0028 (0x0028 - 0x0000)
struct FVAL_CharacterCustomizationVariantChannel final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVAL_CharacterCustomizationVariantOptionsArray VariantOptions;                                    // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationVariantChannel) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantChannel");
static_assert(sizeof(FVAL_CharacterCustomizationVariantChannel) == 0x000028, "Wrong size on FVAL_CharacterCustomizationVariantChannel");
static_assert(offsetof(FVAL_CharacterCustomizationVariantChannel, Name) == 0x000000, "Member 'FVAL_CharacterCustomizationVariantChannel::Name' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationVariantChannel, VariantOptions) == 0x000008, "Member 'FVAL_CharacterCustomizationVariantChannel::VariantOptions' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_PerBodyTypeConfig_Base
// 0x0068 (0x0068 - 0x0000)
struct FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	uint8                                         Pad_2168[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ScriptObjectClass;                                 // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HideSlotFlagsBitmask;                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2169[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVAL_CharacterCustomizationVariantChannel> VariantChannels;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_PerBodyTypeConfig_Base) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_PerBodyTypeConfig_Base");
static_assert(sizeof(FVAL_CharacterCustomization_PerBodyTypeConfig_Base) == 0x000068, "Wrong size on FVAL_CharacterCustomization_PerBodyTypeConfig_Base");
static_assert(offsetof(FVAL_CharacterCustomization_PerBodyTypeConfig_Base, ScriptObjectClass) == 0x000008, "Member 'FVAL_CharacterCustomization_PerBodyTypeConfig_Base::ScriptObjectClass' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_PerBodyTypeConfig_Base, HideSlotFlagsBitmask) == 0x000030, "Member 'FVAL_CharacterCustomization_PerBodyTypeConfig_Base::HideSlotFlagsBitmask' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_PerBodyTypeConfig_Base, VariantChannels) == 0x000038, "Member 'FVAL_CharacterCustomization_PerBodyTypeConfig_Base::VariantChannels' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_PerBodyTypeConfig_Base, Tags) == 0x000048, "Member 'FVAL_CharacterCustomization_PerBodyTypeConfig_Base::Tags' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_Pet_PerBodyTypeConfig
// 0x0050 (0x00B8 - 0x0068)
struct FVAL_CharacterCustomizationItem_Pet_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	TSoftClassPtr<class UClass>                   PetPawnClass;                                      // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              UIDisplayIcon;                                     // 0x0090(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_Pet_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_Pet_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_Pet_PerBodyTypeConfig) == 0x0000B8, "Wrong size on FVAL_CharacterCustomizationItem_Pet_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Pet_PerBodyTypeConfig, PetPawnClass) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_Pet_PerBodyTypeConfig::PetPawnClass' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Pet_PerBodyTypeConfig, UIDisplayIcon) == 0x000090, "Member 'FVAL_CharacterCustomizationItem_Pet_PerBodyTypeConfig::UIDisplayIcon' has a wrong offset!");

// ScriptStruct Palia.GardenActionParams
// 0x0010 (0x0010 - 0x0000)
struct FGardenActionParams final
{
public:
	EGardenActionType                             ActionType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBagSlotLocation                       ItemLocation;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         PlotIndex;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardenActionParams) == 0x000004, "Wrong alignment on FGardenActionParams");
static_assert(sizeof(FGardenActionParams) == 0x000010, "Wrong size on FGardenActionParams");
static_assert(offsetof(FGardenActionParams, ActionType) == 0x000000, "Member 'FGardenActionParams::ActionType' has a wrong offset!");
static_assert(offsetof(FGardenActionParams, ItemLocation) == 0x000004, "Member 'FGardenActionParams::ItemLocation' has a wrong offset!");
static_assert(offsetof(FGardenActionParams, PlotIndex) == 0x00000C, "Member 'FGardenActionParams::PlotIndex' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_BodyComplexion_PerBodyTypeConfig
// 0x0000 (0x0068 - 0x0068)
struct FVAL_CharacterCustomizationItem_BodyComplexion_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
};
static_assert(alignof(FVAL_CharacterCustomizationItem_BodyComplexion_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_BodyComplexion_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_BodyComplexion_PerBodyTypeConfig) == 0x000068, "Wrong size on FVAL_CharacterCustomizationItem_BodyComplexion_PerBodyTypeConfig");

// ScriptStruct Palia.HousingSlotActionParams
// 0x0020 (0x0020 - 0x0000)
struct FHousingSlotActionParams final
{
public:
	EHousingSlotAction                            Action;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHousingSlotType                              SlotType;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216B[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotId;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostChoice;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHousingVisitationState                       Visitation;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216C[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHousingSlotActionParams) == 0x000008, "Wrong alignment on FHousingSlotActionParams");
static_assert(sizeof(FHousingSlotActionParams) == 0x000020, "Wrong size on FHousingSlotActionParams");
static_assert(offsetof(FHousingSlotActionParams, Action) == 0x000000, "Member 'FHousingSlotActionParams::Action' has a wrong offset!");
static_assert(offsetof(FHousingSlotActionParams, SlotType) == 0x000001, "Member 'FHousingSlotActionParams::SlotType' has a wrong offset!");
static_assert(offsetof(FHousingSlotActionParams, SlotId) == 0x000004, "Member 'FHousingSlotActionParams::SlotId' has a wrong offset!");
static_assert(offsetof(FHousingSlotActionParams, Name) == 0x000008, "Member 'FHousingSlotActionParams::Name' has a wrong offset!");
static_assert(offsetof(FHousingSlotActionParams, CostChoice) == 0x000018, "Member 'FHousingSlotActionParams::CostChoice' has a wrong offset!");
static_assert(offsetof(FHousingSlotActionParams, Visitation) == 0x00001C, "Member 'FHousingSlotActionParams::Visitation' has a wrong offset!");

// ScriptStruct Palia.StartingPlayerInfo
// 0x0020 (0x0020 - 0x0000)
struct FStartingPlayerInfo final
{
public:
	struct FPersistGuid                           AccountId;                                         // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPersistGuid                           CharacterId;                                       // 0x0010(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStartingPlayerInfo) == 0x000004, "Wrong alignment on FStartingPlayerInfo");
static_assert(sizeof(FStartingPlayerInfo) == 0x000020, "Wrong size on FStartingPlayerInfo");
static_assert(offsetof(FStartingPlayerInfo, AccountId) == 0x000000, "Member 'FStartingPlayerInfo::AccountId' has a wrong offset!");
static_assert(offsetof(FStartingPlayerInfo, CharacterId) == 0x000010, "Member 'FStartingPlayerInfo::CharacterId' has a wrong offset!");

// ScriptStruct Palia.ArcadeButtonState
// 0x000C (0x000C - 0x0000)
struct FArcadeButtonState final
{
public:
	bool                                          IsDown;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfPressesSinceLastTick;                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfReleasesSinceLastTick;                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArcadeButtonState) == 0x000004, "Wrong alignment on FArcadeButtonState");
static_assert(sizeof(FArcadeButtonState) == 0x00000C, "Wrong size on FArcadeButtonState");
static_assert(offsetof(FArcadeButtonState, IsDown) == 0x000000, "Member 'FArcadeButtonState::IsDown' has a wrong offset!");
static_assert(offsetof(FArcadeButtonState, NumberOfPressesSinceLastTick) == 0x000004, "Member 'FArcadeButtonState::NumberOfPressesSinceLastTick' has a wrong offset!");
static_assert(offsetof(FArcadeButtonState, NumberOfReleasesSinceLastTick) == 0x000008, "Member 'FArcadeButtonState::NumberOfReleasesSinceLastTick' has a wrong offset!");

// ScriptStruct Palia.ArcadeInputState
// 0x0030 (0x0030 - 0x0000)
struct FArcadeInputState final
{
public:
	struct FArcadeButtonState                     UpButton;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FArcadeButtonState                     DownButton;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FArcadeButtonState                     ActionButton;                                      // 0x0018(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FArcadeButtonState                     QuitButton;                                        // 0x0024(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArcadeInputState) == 0x000004, "Wrong alignment on FArcadeInputState");
static_assert(sizeof(FArcadeInputState) == 0x000030, "Wrong size on FArcadeInputState");
static_assert(offsetof(FArcadeInputState, UpButton) == 0x000000, "Member 'FArcadeInputState::UpButton' has a wrong offset!");
static_assert(offsetof(FArcadeInputState, DownButton) == 0x00000C, "Member 'FArcadeInputState::DownButton' has a wrong offset!");
static_assert(offsetof(FArcadeInputState, ActionButton) == 0x000018, "Member 'FArcadeInputState::ActionButton' has a wrong offset!");
static_assert(offsetof(FArcadeInputState, QuitButton) == 0x000024, "Member 'FArcadeInputState::QuitButton' has a wrong offset!");

// ScriptStruct Palia.VAL_CachedEffectActor
// 0x00D0 (0x00D0 - 0x0000)
struct FVAL_CachedEffectActor final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  EffectActor;                                       // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVAL_EffectActorSpawnParameters        SpawnParameters;                                   // 0x0010(0x00C0)(Transient, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CachedEffectActor) == 0x000010, "Wrong alignment on FVAL_CachedEffectActor");
static_assert(sizeof(FVAL_CachedEffectActor) == 0x0000D0, "Wrong size on FVAL_CachedEffectActor");
static_assert(offsetof(FVAL_CachedEffectActor, ID) == 0x000000, "Member 'FVAL_CachedEffectActor::ID' has a wrong offset!");
static_assert(offsetof(FVAL_CachedEffectActor, EffectActor) == 0x000004, "Member 'FVAL_CachedEffectActor::EffectActor' has a wrong offset!");
static_assert(offsetof(FVAL_CachedEffectActor, SpawnParameters) == 0x000010, "Member 'FVAL_CachedEffectActor::SpawnParameters' has a wrong offset!");

// ScriptStruct Palia.CraftingGlobalConfig_ItemUseSettings
// 0x0038 (0x0038 - 0x0000)
struct FCraftingGlobalConfig_ItemUseSettings final
{
public:
	int32                                         ItemUseOnCollect;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemUseOnStepProgress;                             // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNotification                          NotificationRemoveBrokenTool;                      // 0x0008(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingGlobalConfig_ItemUseSettings) == 0x000008, "Wrong alignment on FCraftingGlobalConfig_ItemUseSettings");
static_assert(sizeof(FCraftingGlobalConfig_ItemUseSettings) == 0x000038, "Wrong size on FCraftingGlobalConfig_ItemUseSettings");
static_assert(offsetof(FCraftingGlobalConfig_ItemUseSettings, ItemUseOnCollect) == 0x000000, "Member 'FCraftingGlobalConfig_ItemUseSettings::ItemUseOnCollect' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_ItemUseSettings, ItemUseOnStepProgress) == 0x000004, "Member 'FCraftingGlobalConfig_ItemUseSettings::ItemUseOnStepProgress' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_ItemUseSettings, NotificationRemoveBrokenTool) == 0x000008, "Member 'FCraftingGlobalConfig_ItemUseSettings::NotificationRemoveBrokenTool' has a wrong offset!");

// ScriptStruct Palia.VAL_StatKVPair
// 0x0018 (0x0018 - 0x0000)
struct FVAL_StatKVPair final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216F[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_StatKVPair) == 0x000008, "Wrong alignment on FVAL_StatKVPair");
static_assert(sizeof(FVAL_StatKVPair) == 0x000018, "Wrong size on FVAL_StatKVPair");
static_assert(offsetof(FVAL_StatKVPair, Name) == 0x000000, "Member 'FVAL_StatKVPair::Name' has a wrong offset!");
static_assert(offsetof(FVAL_StatKVPair, Value) == 0x000010, "Member 'FVAL_StatKVPair::Value' has a wrong offset!");

// ScriptStruct Palia.VillagerRelationshipPrereq
// 0x0018 (0x0018 - 0x0000)
struct FVillagerRelationshipPrereq final
{
public:
	int32                                         VillagerCoreConfigId;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VillagerConfigId;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVillagerRelationshipFilter            Friendship;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVillagerRelationshipFilter            Romance;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerRelationshipPrereq) == 0x000004, "Wrong alignment on FVillagerRelationshipPrereq");
static_assert(sizeof(FVillagerRelationshipPrereq) == 0x000018, "Wrong size on FVillagerRelationshipPrereq");
static_assert(offsetof(FVillagerRelationshipPrereq, VillagerCoreConfigId) == 0x000000, "Member 'FVillagerRelationshipPrereq::VillagerCoreConfigId' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipPrereq, VillagerConfigId) == 0x000004, "Member 'FVillagerRelationshipPrereq::VillagerConfigId' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipPrereq, Friendship) == 0x000008, "Member 'FVillagerRelationshipPrereq::Friendship' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipPrereq, Romance) == 0x000010, "Member 'FVillagerRelationshipPrereq::Romance' has a wrong offset!");

// ScriptStruct Palia.SkillPrereq
// 0x0008 (0x0008 - 0x0000)
struct FSkillPrereq final
{
public:
	ESkillType                                    SkillType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2170[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumAmount;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillPrereq) == 0x000004, "Wrong alignment on FSkillPrereq");
static_assert(sizeof(FSkillPrereq) == 0x000008, "Wrong size on FSkillPrereq");
static_assert(offsetof(FSkillPrereq, SkillType) == 0x000000, "Member 'FSkillPrereq::SkillType' has a wrong offset!");
static_assert(offsetof(FSkillPrereq, MinimumAmount) == 0x000004, "Member 'FSkillPrereq::MinimumAmount' has a wrong offset!");

// ScriptStruct Palia.ItemPrereq
// 0x0010 (0x0010 - 0x0000)
struct FItemPrereq final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           RequiredItemType;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountRequired;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInventoryOnly;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2171[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemPrereq) == 0x000008, "Wrong alignment on FItemPrereq");
static_assert(sizeof(FItemPrereq) == 0x000010, "Wrong size on FItemPrereq");
static_assert(offsetof(FItemPrereq, RequiredItemType) == 0x000000, "Member 'FItemPrereq::RequiredItemType' has a wrong offset!");
static_assert(offsetof(FItemPrereq, AmountRequired) == 0x000008, "Member 'FItemPrereq::AmountRequired' has a wrong offset!");
static_assert(offsetof(FItemPrereq, bInventoryOnly) == 0x00000C, "Member 'FItemPrereq::bInventoryOnly' has a wrong offset!");

// ScriptStruct Palia.VillagerActionPrereq
// 0x0078 (0x0078 - 0x0000)
struct FVillagerActionPrereq final
{
public:
	TArray<struct FVillagerRelationshipPrereq>    VillagerRelationshipReqs;                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagFilter>           PlayerTagReqs;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuestActivityPrereq>           QuestActivityReqs;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSkillPrereq>                   SkillReqs;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVitalPrereq>                   VitalReqs;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FItemPrereq>                    ItemReqs;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PlotValueReq;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2172[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULimitedEventDataAsset*>         ActiveEventFilter;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerActionPrereq) == 0x000008, "Wrong alignment on FVillagerActionPrereq");
static_assert(sizeof(FVillagerActionPrereq) == 0x000078, "Wrong size on FVillagerActionPrereq");
static_assert(offsetof(FVillagerActionPrereq, VillagerRelationshipReqs) == 0x000000, "Member 'FVillagerActionPrereq::VillagerRelationshipReqs' has a wrong offset!");
static_assert(offsetof(FVillagerActionPrereq, PlayerTagReqs) == 0x000010, "Member 'FVillagerActionPrereq::PlayerTagReqs' has a wrong offset!");
static_assert(offsetof(FVillagerActionPrereq, QuestActivityReqs) == 0x000020, "Member 'FVillagerActionPrereq::QuestActivityReqs' has a wrong offset!");
static_assert(offsetof(FVillagerActionPrereq, SkillReqs) == 0x000030, "Member 'FVillagerActionPrereq::SkillReqs' has a wrong offset!");
static_assert(offsetof(FVillagerActionPrereq, VitalReqs) == 0x000040, "Member 'FVillagerActionPrereq::VitalReqs' has a wrong offset!");
static_assert(offsetof(FVillagerActionPrereq, ItemReqs) == 0x000050, "Member 'FVillagerActionPrereq::ItemReqs' has a wrong offset!");
static_assert(offsetof(FVillagerActionPrereq, PlotValueReq) == 0x000060, "Member 'FVillagerActionPrereq::PlotValueReq' has a wrong offset!");
static_assert(offsetof(FVillagerActionPrereq, ActiveEventFilter) == 0x000068, "Member 'FVillagerActionPrereq::ActiveEventFilter' has a wrong offset!");

// ScriptStruct Palia.VillagerMailMessageConfig
// 0x0110 (0x0118 - 0x0008)
struct FVillagerMailMessageConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisabledForSend;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2173[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ContentBatchAsset>  ContentBatch;                                      // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    Villager;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseCustomHeader;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2174[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CustomHeader;                                      // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0068(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ArrivesImmediately;                                // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanReceiveMultiples;                               // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2175[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredRealDaysSinceLastSent;                     // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAllowed;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoSend;                                          // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2176[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVillagerActionPrereq                  AutoSendRequirements;                              // 0x0090(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             RewardConfigs;                                     // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerMailMessageConfig) == 0x000008, "Wrong alignment on FVillagerMailMessageConfig");
static_assert(sizeof(FVillagerMailMessageConfig) == 0x000118, "Wrong size on FVillagerMailMessageConfig");
static_assert(offsetof(FVillagerMailMessageConfig, PersistId) == 0x000008, "Member 'FVillagerMailMessageConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, bDisabledForSend) == 0x00000C, "Member 'FVillagerMailMessageConfig::bDisabledForSend' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, ContentBatch) == 0x000010, "Member 'FVillagerMailMessageConfig::ContentBatch' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, Villager) == 0x000038, "Member 'FVillagerMailMessageConfig::Villager' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, bUseCustomHeader) == 0x000048, "Member 'FVillagerMailMessageConfig::bUseCustomHeader' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, CustomHeader) == 0x000050, "Member 'FVillagerMailMessageConfig::CustomHeader' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, Message) == 0x000068, "Member 'FVillagerMailMessageConfig::Message' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, ArrivesImmediately) == 0x000080, "Member 'FVillagerMailMessageConfig::ArrivesImmediately' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, CanReceiveMultiples) == 0x000081, "Member 'FVillagerMailMessageConfig::CanReceiveMultiples' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, RequiredRealDaysSinceLastSent) == 0x000084, "Member 'FVillagerMailMessageConfig::RequiredRealDaysSinceLastSent' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, MaxAllowed) == 0x000088, "Member 'FVillagerMailMessageConfig::MaxAllowed' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, AutoSend) == 0x00008C, "Member 'FVillagerMailMessageConfig::AutoSend' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, AutoSendRequirements) == 0x000090, "Member 'FVillagerMailMessageConfig::AutoSendRequirements' has a wrong offset!");
static_assert(offsetof(FVillagerMailMessageConfig, RewardConfigs) == 0x000108, "Member 'FVillagerMailMessageConfig::RewardConfigs' has a wrong offset!");

// ScriptStruct Palia.FishingCastingSettings
// 0x0050 (0x0050 - 0x0000)
struct FFishingCastingSettings final
{
public:
	struct FGameplayTag                           CastBegin;                                         // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CastEnd;                                           // 0x0008(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LaunchOffset;                                      // 0x0010(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPlayerDistanceFromShore;                        // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPlayerHeightFromWater;                          // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindupSpeed;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceToCast;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceToCast;                                 // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CastHorizontalSpeed;                               // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CastDelay;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCastHeightAbovePlayer;                          // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCastHeightBelowPlayer;                          // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2177[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishingCastingSettings) == 0x000008, "Wrong alignment on FFishingCastingSettings");
static_assert(sizeof(FFishingCastingSettings) == 0x000050, "Wrong size on FFishingCastingSettings");
static_assert(offsetof(FFishingCastingSettings, CastBegin) == 0x000000, "Member 'FFishingCastingSettings::CastBegin' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, CastEnd) == 0x000008, "Member 'FFishingCastingSettings::CastEnd' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, LaunchOffset) == 0x000010, "Member 'FFishingCastingSettings::LaunchOffset' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, MaxPlayerDistanceFromShore) == 0x000028, "Member 'FFishingCastingSettings::MaxPlayerDistanceFromShore' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, MaxPlayerHeightFromWater) == 0x00002C, "Member 'FFishingCastingSettings::MaxPlayerHeightFromWater' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, WindupSpeed) == 0x000030, "Member 'FFishingCastingSettings::WindupSpeed' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, MinDistanceToCast) == 0x000034, "Member 'FFishingCastingSettings::MinDistanceToCast' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, MaxDistanceToCast) == 0x000038, "Member 'FFishingCastingSettings::MaxDistanceToCast' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, CastHorizontalSpeed) == 0x00003C, "Member 'FFishingCastingSettings::CastHorizontalSpeed' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, CastDelay) == 0x000040, "Member 'FFishingCastingSettings::CastDelay' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, MaxCastHeightAbovePlayer) == 0x000044, "Member 'FFishingCastingSettings::MaxCastHeightAbovePlayer' has a wrong offset!");
static_assert(offsetof(FFishingCastingSettings, MaxCastHeightBelowPlayer) == 0x000048, "Member 'FFishingCastingSettings::MaxCastHeightBelowPlayer' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_AdditionalAnimationsConfig
// 0x0080 (0x0080 - 0x0000)
struct FVAL_CharacterCustomization_AdditionalAnimationsConfig final
{
public:
	TSoftObjectPtr<class UDataTable>              CompleteAnimationMappings;                         // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              PartialAnimationMappings;                          // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   GliderPropOverride;                                // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GliderAttachPointName;                             // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_AdditionalAnimationsConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_AdditionalAnimationsConfig");
static_assert(sizeof(FVAL_CharacterCustomization_AdditionalAnimationsConfig) == 0x000080, "Wrong size on FVAL_CharacterCustomization_AdditionalAnimationsConfig");
static_assert(offsetof(FVAL_CharacterCustomization_AdditionalAnimationsConfig, CompleteAnimationMappings) == 0x000000, "Member 'FVAL_CharacterCustomization_AdditionalAnimationsConfig::CompleteAnimationMappings' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_AdditionalAnimationsConfig, PartialAnimationMappings) == 0x000028, "Member 'FVAL_CharacterCustomization_AdditionalAnimationsConfig::PartialAnimationMappings' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_AdditionalAnimationsConfig, GliderPropOverride) == 0x000050, "Member 'FVAL_CharacterCustomization_AdditionalAnimationsConfig::GliderPropOverride' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_AdditionalAnimationsConfig, GliderAttachPointName) == 0x000078, "Member 'FVAL_CharacterCustomization_AdditionalAnimationsConfig::GliderAttachPointName' has a wrong offset!");

// ScriptStruct Palia.TelemetryClientDataForMapTravelLoadTime
// 0x0038 (0x0038 - 0x0000)
struct FTelemetryClientDataForMapTravelLoadTime final
{
public:
	int64                                         StartTime;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EndTime;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartMap;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndMap;                                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapTravelReason;                                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2178[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTelemetryClientDataForMapTravelLoadTime) == 0x000008, "Wrong alignment on FTelemetryClientDataForMapTravelLoadTime");
static_assert(sizeof(FTelemetryClientDataForMapTravelLoadTime) == 0x000038, "Wrong size on FTelemetryClientDataForMapTravelLoadTime");
static_assert(offsetof(FTelemetryClientDataForMapTravelLoadTime, StartTime) == 0x000000, "Member 'FTelemetryClientDataForMapTravelLoadTime::StartTime' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForMapTravelLoadTime, EndTime) == 0x000008, "Member 'FTelemetryClientDataForMapTravelLoadTime::EndTime' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForMapTravelLoadTime, StartMap) == 0x000010, "Member 'FTelemetryClientDataForMapTravelLoadTime::StartMap' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForMapTravelLoadTime, EndMap) == 0x000020, "Member 'FTelemetryClientDataForMapTravelLoadTime::EndMap' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForMapTravelLoadTime, MapTravelReason) == 0x000030, "Member 'FTelemetryClientDataForMapTravelLoadTime::MapTravelReason' has a wrong offset!");

// ScriptStruct Palia.WallpaperItem
// 0x0038 (0x0038 - 0x0000)
struct FWallpaperItem final
{
public:
	class FName                                   WallTagName;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2179[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> WallpaperItemType;                                 // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWallpaperItem) == 0x000008, "Wrong alignment on FWallpaperItem");
static_assert(sizeof(FWallpaperItem) == 0x000038, "Wrong size on FWallpaperItem");
static_assert(offsetof(FWallpaperItem, WallTagName) == 0x000000, "Member 'FWallpaperItem::WallTagName' has a wrong offset!");
static_assert(offsetof(FWallpaperItem, SurfaceId) == 0x000008, "Member 'FWallpaperItem::SurfaceId' has a wrong offset!");
static_assert(offsetof(FWallpaperItem, WallpaperItemType) == 0x000010, "Member 'FWallpaperItem::WallpaperItemType' has a wrong offset!");

// ScriptStruct Palia.ItemVariantVisualConfigReplacement
// 0x0018 (0x0018 - 0x0000)
struct FItemVariantVisualConfigReplacement final
{
public:
	class FName                                   ComponentName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemVariantVisualConfigReplacement) == 0x000008, "Wrong alignment on FItemVariantVisualConfigReplacement");
static_assert(sizeof(FItemVariantVisualConfigReplacement) == 0x000018, "Wrong size on FItemVariantVisualConfigReplacement");
static_assert(offsetof(FItemVariantVisualConfigReplacement, ComponentName) == 0x000000, "Member 'FItemVariantVisualConfigReplacement::ComponentName' has a wrong offset!");
static_assert(offsetof(FItemVariantVisualConfigReplacement, MaterialIndex) == 0x000008, "Member 'FItemVariantVisualConfigReplacement::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FItemVariantVisualConfigReplacement, Material) == 0x000010, "Member 'FItemVariantVisualConfigReplacement::Material' has a wrong offset!");

// ScriptStruct Palia.FishingEncouragementSettings
// 0x0020 (0x0020 - 0x0000)
struct FFishingEncouragementSettings final
{
public:
	float                                         HealthRefillTime;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvulnerabilityTime;                               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalTimeIfAlreadyEncouraged;                 // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredHealthPercent;                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEmoteDataAsset*                        EncouragementEmote;                                // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownSecs;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishingEncouragementSettings) == 0x000008, "Wrong alignment on FFishingEncouragementSettings");
static_assert(sizeof(FFishingEncouragementSettings) == 0x000020, "Wrong size on FFishingEncouragementSettings");
static_assert(offsetof(FFishingEncouragementSettings, HealthRefillTime) == 0x000000, "Member 'FFishingEncouragementSettings::HealthRefillTime' has a wrong offset!");
static_assert(offsetof(FFishingEncouragementSettings, InvulnerabilityTime) == 0x000004, "Member 'FFishingEncouragementSettings::InvulnerabilityTime' has a wrong offset!");
static_assert(offsetof(FFishingEncouragementSettings, AdditionalTimeIfAlreadyEncouraged) == 0x000008, "Member 'FFishingEncouragementSettings::AdditionalTimeIfAlreadyEncouraged' has a wrong offset!");
static_assert(offsetof(FFishingEncouragementSettings, RequiredHealthPercent) == 0x00000C, "Member 'FFishingEncouragementSettings::RequiredHealthPercent' has a wrong offset!");
static_assert(offsetof(FFishingEncouragementSettings, EncouragementEmote) == 0x000010, "Member 'FFishingEncouragementSettings::EncouragementEmote' has a wrong offset!");
static_assert(offsetof(FFishingEncouragementSettings, CooldownSecs) == 0x000018, "Member 'FFishingEncouragementSettings::CooldownSecs' has a wrong offset!");

// ScriptStruct Palia.WeightedActorToSpawn
// 0x0100 (0x0100 - 0x0000)
struct FWeightedActorToSpawn final
{
public:
	TSoftClassPtr<class UClass>                   ActorToSpawn;                                      // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           ItemTypeToSpawn;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightMultiplier;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToSpawn;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagToAddAtSpawn;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimeOfDayFilter                       TimeOfDay;                                         // 0x0040(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredWeatherGameStates;                         // 0x0058(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         AdditionalDistanceOffsetOfTerrain;                 // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217C[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SecondaryActorToSpawn;                             // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryActorOffset;                              // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217D[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActorSpawnConditions                  SecondaryActorSpawnConditions;                     // 0x00B0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESecondaryActorToSpawnMethod                  SecondaryMethod;                                   // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217E[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondaryActorMinSpawnDistance;                    // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryActorMaxSpawnDistance;                    // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217F[0x4];                                     // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeightedActorToSpawn) == 0x000008, "Wrong alignment on FWeightedActorToSpawn");
static_assert(sizeof(FWeightedActorToSpawn) == 0x000100, "Wrong size on FWeightedActorToSpawn");
static_assert(offsetof(FWeightedActorToSpawn, ActorToSpawn) == 0x000000, "Member 'FWeightedActorToSpawn::ActorToSpawn' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, ItemTypeToSpawn) == 0x000028, "Member 'FWeightedActorToSpawn::ItemTypeToSpawn' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, WeightMultiplier) == 0x000030, "Member 'FWeightedActorToSpawn::WeightMultiplier' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, NumberToSpawn) == 0x000034, "Member 'FWeightedActorToSpawn::NumberToSpawn' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, TagToAddAtSpawn) == 0x000038, "Member 'FWeightedActorToSpawn::TagToAddAtSpawn' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, TimeOfDay) == 0x000040, "Member 'FWeightedActorToSpawn::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, RequiredWeatherGameStates) == 0x000058, "Member 'FWeightedActorToSpawn::RequiredWeatherGameStates' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, AdditionalDistanceOffsetOfTerrain) == 0x000078, "Member 'FWeightedActorToSpawn::AdditionalDistanceOffsetOfTerrain' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, SecondaryActorToSpawn) == 0x000080, "Member 'FWeightedActorToSpawn::SecondaryActorToSpawn' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, SecondaryActorOffset) == 0x0000A8, "Member 'FWeightedActorToSpawn::SecondaryActorOffset' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, SecondaryActorSpawnConditions) == 0x0000B0, "Member 'FWeightedActorToSpawn::SecondaryActorSpawnConditions' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, SecondaryMethod) == 0x0000F0, "Member 'FWeightedActorToSpawn::SecondaryMethod' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, SecondaryActorMinSpawnDistance) == 0x0000F4, "Member 'FWeightedActorToSpawn::SecondaryActorMinSpawnDistance' has a wrong offset!");
static_assert(offsetof(FWeightedActorToSpawn, SecondaryActorMaxSpawnDistance) == 0x0000F8, "Member 'FWeightedActorToSpawn::SecondaryActorMaxSpawnDistance' has a wrong offset!");

// ScriptStruct Palia.HouseOwnershipTitle
// 0x0028 (0x0028 - 0x0000)
struct FHouseOwnershipTitle final
{
public:
	struct FGuid                                  UserGuid;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  HousingGuid;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHousingPermissionLevel                       PermissionLevel;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2180[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HousingSlot;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHouseOwnershipTitle) == 0x000004, "Wrong alignment on FHouseOwnershipTitle");
static_assert(sizeof(FHouseOwnershipTitle) == 0x000028, "Wrong size on FHouseOwnershipTitle");
static_assert(offsetof(FHouseOwnershipTitle, UserGuid) == 0x000000, "Member 'FHouseOwnershipTitle::UserGuid' has a wrong offset!");
static_assert(offsetof(FHouseOwnershipTitle, HousingGuid) == 0x000010, "Member 'FHouseOwnershipTitle::HousingGuid' has a wrong offset!");
static_assert(offsetof(FHouseOwnershipTitle, PermissionLevel) == 0x000020, "Member 'FHouseOwnershipTitle::PermissionLevel' has a wrong offset!");
static_assert(offsetof(FHouseOwnershipTitle, HousingSlot) == 0x000024, "Member 'FHouseOwnershipTitle::HousingSlot' has a wrong offset!");

// ScriptStruct Palia.LightingStatePostProcess
// 0x0340 (0x0340 - 0x0000)
struct FLightingStatePostProcess final
{
public:
	uint8                                         bOverride_BloomIntensity : 1;                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomThreshold : 1;                      // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_BloomSizeScale : 1;                      // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom1Tint : 1;                          // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom2Tint : 1;                          // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom3Tint : 1;                          // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom4Tint : 1;                          // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom5Tint : 1;                          // 0x0000(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Bloom6Tint : 1;                          // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureLowPercent : 1;              // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureHighPercent : 1;             // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureMinBrightness : 1;           // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureMaxBrightness : 1;           // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureSpeedUp : 1;                 // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureSpeedDown : 1;               // 0x0001(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AutoExposureBias : 1;                    // 0x0001(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HistogramLogMin : 1;                     // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_HistogramLogMax : 1;                     // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WhiteTemp : 1;                           // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_WhiteTint : 1;                           // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorSaturation : 1;                     // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorContrast : 1;                       // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGamma : 1;                          // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGain : 1;                           // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorOffset : 1;                         // 0x0003(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorSaturationShadows : 1;              // 0x0003(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorContrastShadows : 1;                // 0x0003(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGammaShadows : 1;                   // 0x0003(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGainShadows : 1;                    // 0x0003(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorOffsetShadows : 1;                  // 0x0003(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorSaturationMidtones : 1;             // 0x0003(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorContrastMidtones : 1;               // 0x0003(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGammaMidtones : 1;                  // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGainMidtones : 1;                   // 0x0004(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorOffsetMidtones : 1;                 // 0x0004(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorSaturationHighlights : 1;           // 0x0004(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorContrastHighlights : 1;             // 0x0004(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGammaHighlights : 1;                // 0x0004(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorGainHighlights : 1;                 // 0x0004(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorOffsetHighlights : 1;               // 0x0004(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorCorrectionShadowsMax : 1;           // 0x0005(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ColorCorrectionHighlightsMin : 1;        // 0x0005(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionIntensity : 1;           // 0x0005(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_AmbientOcclusionRadius : 1;              // 0x0005(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2181[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomIntensity;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomSizeScale;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom1Tint;                                        // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom2Tint;                                        // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom3Tint;                                        // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom4Tint;                                        // 0x0044(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom5Tint;                                        // 0x0054(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom6Tint;                                        // 0x0064(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureLowPercent;                            // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureHighPercent;                           // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureMinBrightness;                         // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureMaxBrightness;                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureSpeedUp;                               // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureSpeedDown;                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistogramLogMin;                                   // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistogramLogMax;                                   // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionIntensity;                         // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionRadius;                            // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WhiteTemp;                                         // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WhiteTint;                                         // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2182[0xC];                                     // 0x00A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ColorSaturation;                                   // 0x00B0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrast;                                     // 0x00D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGamma;                                        // 0x00F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGain;                                         // 0x0110(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffset;                                       // 0x0130(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationShadows;                            // 0x0150(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastShadows;                              // 0x0170(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaShadows;                                 // 0x0190(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainShadows;                                  // 0x01B0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetShadows;                                // 0x01D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationMidtones;                           // 0x01F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastMidtones;                             // 0x0210(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaMidtones;                                // 0x0230(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainMidtones;                                 // 0x0250(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetMidtones;                               // 0x0270(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationHighlights;                         // 0x0290(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastHighlights;                           // 0x02B0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaHighlights;                              // 0x02D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainHighlights;                               // 0x02F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetHighlights;                             // 0x0310(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionHighlightsMin;                      // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionShadowsMax;                         // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2183[0x8];                                     // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLightingStatePostProcess) == 0x000010, "Wrong alignment on FLightingStatePostProcess");
static_assert(sizeof(FLightingStatePostProcess) == 0x000340, "Wrong size on FLightingStatePostProcess");
static_assert(offsetof(FLightingStatePostProcess, BloomIntensity) == 0x000008, "Member 'FLightingStatePostProcess::BloomIntensity' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, BloomThreshold) == 0x00000C, "Member 'FLightingStatePostProcess::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, BloomSizeScale) == 0x000010, "Member 'FLightingStatePostProcess::BloomSizeScale' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, Bloom1Tint) == 0x000014, "Member 'FLightingStatePostProcess::Bloom1Tint' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, Bloom2Tint) == 0x000024, "Member 'FLightingStatePostProcess::Bloom2Tint' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, Bloom3Tint) == 0x000034, "Member 'FLightingStatePostProcess::Bloom3Tint' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, Bloom4Tint) == 0x000044, "Member 'FLightingStatePostProcess::Bloom4Tint' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, Bloom5Tint) == 0x000054, "Member 'FLightingStatePostProcess::Bloom5Tint' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, Bloom6Tint) == 0x000064, "Member 'FLightingStatePostProcess::Bloom6Tint' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, AutoExposureLowPercent) == 0x000074, "Member 'FLightingStatePostProcess::AutoExposureLowPercent' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, AutoExposureHighPercent) == 0x000078, "Member 'FLightingStatePostProcess::AutoExposureHighPercent' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, AutoExposureMinBrightness) == 0x00007C, "Member 'FLightingStatePostProcess::AutoExposureMinBrightness' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, AutoExposureMaxBrightness) == 0x000080, "Member 'FLightingStatePostProcess::AutoExposureMaxBrightness' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, AutoExposureSpeedUp) == 0x000084, "Member 'FLightingStatePostProcess::AutoExposureSpeedUp' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, AutoExposureSpeedDown) == 0x000088, "Member 'FLightingStatePostProcess::AutoExposureSpeedDown' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, HistogramLogMin) == 0x00008C, "Member 'FLightingStatePostProcess::HistogramLogMin' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, HistogramLogMax) == 0x000090, "Member 'FLightingStatePostProcess::HistogramLogMax' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, AmbientOcclusionIntensity) == 0x000094, "Member 'FLightingStatePostProcess::AmbientOcclusionIntensity' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, AmbientOcclusionRadius) == 0x000098, "Member 'FLightingStatePostProcess::AmbientOcclusionRadius' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, WhiteTemp) == 0x00009C, "Member 'FLightingStatePostProcess::WhiteTemp' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, WhiteTint) == 0x0000A0, "Member 'FLightingStatePostProcess::WhiteTint' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorSaturation) == 0x0000B0, "Member 'FLightingStatePostProcess::ColorSaturation' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorContrast) == 0x0000D0, "Member 'FLightingStatePostProcess::ColorContrast' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorGamma) == 0x0000F0, "Member 'FLightingStatePostProcess::ColorGamma' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorGain) == 0x000110, "Member 'FLightingStatePostProcess::ColorGain' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorOffset) == 0x000130, "Member 'FLightingStatePostProcess::ColorOffset' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorSaturationShadows) == 0x000150, "Member 'FLightingStatePostProcess::ColorSaturationShadows' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorContrastShadows) == 0x000170, "Member 'FLightingStatePostProcess::ColorContrastShadows' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorGammaShadows) == 0x000190, "Member 'FLightingStatePostProcess::ColorGammaShadows' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorGainShadows) == 0x0001B0, "Member 'FLightingStatePostProcess::ColorGainShadows' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorOffsetShadows) == 0x0001D0, "Member 'FLightingStatePostProcess::ColorOffsetShadows' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorSaturationMidtones) == 0x0001F0, "Member 'FLightingStatePostProcess::ColorSaturationMidtones' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorContrastMidtones) == 0x000210, "Member 'FLightingStatePostProcess::ColorContrastMidtones' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorGammaMidtones) == 0x000230, "Member 'FLightingStatePostProcess::ColorGammaMidtones' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorGainMidtones) == 0x000250, "Member 'FLightingStatePostProcess::ColorGainMidtones' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorOffsetMidtones) == 0x000270, "Member 'FLightingStatePostProcess::ColorOffsetMidtones' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorSaturationHighlights) == 0x000290, "Member 'FLightingStatePostProcess::ColorSaturationHighlights' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorContrastHighlights) == 0x0002B0, "Member 'FLightingStatePostProcess::ColorContrastHighlights' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorGammaHighlights) == 0x0002D0, "Member 'FLightingStatePostProcess::ColorGammaHighlights' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorGainHighlights) == 0x0002F0, "Member 'FLightingStatePostProcess::ColorGainHighlights' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorOffsetHighlights) == 0x000310, "Member 'FLightingStatePostProcess::ColorOffsetHighlights' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorCorrectionHighlightsMin) == 0x000330, "Member 'FLightingStatePostProcess::ColorCorrectionHighlightsMin' has a wrong offset!");
static_assert(offsetof(FLightingStatePostProcess, ColorCorrectionShadowsMax) == 0x000334, "Member 'FLightingStatePostProcess::ColorCorrectionShadowsMax' has a wrong offset!");

// ScriptStruct Palia.RecipePlayerOptionMapping
// 0x0030 (0x0030 - 0x0000)
struct FRecipePlayerOptionMapping final
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimpleIngredientIndex;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2184[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipePlayerOptionMapping) == 0x000008, "Wrong alignment on FRecipePlayerOptionMapping");
static_assert(sizeof(FRecipePlayerOptionMapping) == 0x000030, "Wrong size on FRecipePlayerOptionMapping");
static_assert(offsetof(FRecipePlayerOptionMapping, ItemType) == 0x000000, "Member 'FRecipePlayerOptionMapping::ItemType' has a wrong offset!");
static_assert(offsetof(FRecipePlayerOptionMapping, SimpleIngredientIndex) == 0x000028, "Member 'FRecipePlayerOptionMapping::SimpleIngredientIndex' has a wrong offset!");

// ScriptStruct Palia.RecipePlayerOptions
// 0x0018 (0x0018 - 0x0000)
struct FRecipePlayerOptions final
{
public:
	TArray<struct FRecipePlayerOptionMapping>     IngredientsToUse;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseStarQualityItems;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2185[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftMultiplier;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipePlayerOptions) == 0x000008, "Wrong alignment on FRecipePlayerOptions");
static_assert(sizeof(FRecipePlayerOptions) == 0x000018, "Wrong size on FRecipePlayerOptions");
static_assert(offsetof(FRecipePlayerOptions, IngredientsToUse) == 0x000000, "Member 'FRecipePlayerOptions::IngredientsToUse' has a wrong offset!");
static_assert(offsetof(FRecipePlayerOptions, UseStarQualityItems) == 0x000010, "Member 'FRecipePlayerOptions::UseStarQualityItems' has a wrong offset!");
static_assert(offsetof(FRecipePlayerOptions, CraftMultiplier) == 0x000014, "Member 'FRecipePlayerOptions::CraftMultiplier' has a wrong offset!");

// ScriptStruct Palia.ImpactConfig
// 0x0014 (0x0014 - 0x0000)
struct FImpactConfig final
{
public:
	int32                                         ImpactRequired;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StunDuration;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackForceAmount;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KnockbackUpAngle;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvulnerableDuration;                              // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImpactConfig) == 0x000004, "Wrong alignment on FImpactConfig");
static_assert(sizeof(FImpactConfig) == 0x000014, "Wrong size on FImpactConfig");
static_assert(offsetof(FImpactConfig, ImpactRequired) == 0x000000, "Member 'FImpactConfig::ImpactRequired' has a wrong offset!");
static_assert(offsetof(FImpactConfig, StunDuration) == 0x000004, "Member 'FImpactConfig::StunDuration' has a wrong offset!");
static_assert(offsetof(FImpactConfig, KnockbackForceAmount) == 0x000008, "Member 'FImpactConfig::KnockbackForceAmount' has a wrong offset!");
static_assert(offsetof(FImpactConfig, KnockbackUpAngle) == 0x00000C, "Member 'FImpactConfig::KnockbackUpAngle' has a wrong offset!");
static_assert(offsetof(FImpactConfig, InvulnerableDuration) == 0x000010, "Member 'FImpactConfig::InvulnerableDuration' has a wrong offset!");

// ScriptStruct Palia.MusicState
// 0x0018 (0x0018 - 0x0000)
struct FMusicState final
{
public:
	TArray<int32>                                 PlayedNotes;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UInstrumentSongConfig*                  MatchedSong;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMusicState) == 0x000008, "Wrong alignment on FMusicState");
static_assert(sizeof(FMusicState) == 0x000018, "Wrong size on FMusicState");
static_assert(offsetof(FMusicState, PlayedNotes) == 0x000000, "Member 'FMusicState::PlayedNotes' has a wrong offset!");
static_assert(offsetof(FMusicState, MatchedSong) == 0x000010, "Member 'FMusicState::MatchedSong' has a wrong offset!");

// ScriptStruct Palia.WishTreeEntry
// 0x0088 (0x0088 - 0x0000)
struct FWishTreeEntry final
{
public:
	struct FGuid                                  AccountId;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterId;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FValeriaItem                           WishItem;                                          // 0x0020(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FBagSlotLocation                       ItemLocation;                                      // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWishTreeEntry) == 0x000008, "Wrong alignment on FWishTreeEntry");
static_assert(sizeof(FWishTreeEntry) == 0x000088, "Wrong size on FWishTreeEntry");
static_assert(offsetof(FWishTreeEntry, AccountId) == 0x000000, "Member 'FWishTreeEntry::AccountId' has a wrong offset!");
static_assert(offsetof(FWishTreeEntry, CharacterId) == 0x000010, "Member 'FWishTreeEntry::CharacterId' has a wrong offset!");
static_assert(offsetof(FWishTreeEntry, WishItem) == 0x000020, "Member 'FWishTreeEntry::WishItem' has a wrong offset!");
static_assert(offsetof(FWishTreeEntry, ItemLocation) == 0x000080, "Member 'FWishTreeEntry::ItemLocation' has a wrong offset!");

// ScriptStruct Palia.SpeakerGroupingUpdate
// 0x0010 (0x0010 - 0x0000)
struct FSpeakerGroupingUpdate final
{
public:
	class FName                                   GroupingName;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Timestamp;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpeakerGroupingUpdate) == 0x000008, "Wrong alignment on FSpeakerGroupingUpdate");
static_assert(sizeof(FSpeakerGroupingUpdate) == 0x000010, "Wrong size on FSpeakerGroupingUpdate");
static_assert(offsetof(FSpeakerGroupingUpdate, GroupingName) == 0x000000, "Member 'FSpeakerGroupingUpdate::GroupingName' has a wrong offset!");
static_assert(offsetof(FSpeakerGroupingUpdate, Timestamp) == 0x000008, "Member 'FSpeakerGroupingUpdate::Timestamp' has a wrong offset!");

// ScriptStruct Palia.ArcadeLeaderboardEntry
// 0x0018 (0x0018 - 0x0000)
struct FArcadeLeaderboardEntry final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2186[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArcadeLeaderboardEntry) == 0x000008, "Wrong alignment on FArcadeLeaderboardEntry");
static_assert(sizeof(FArcadeLeaderboardEntry) == 0x000018, "Wrong size on FArcadeLeaderboardEntry");
static_assert(offsetof(FArcadeLeaderboardEntry, Score) == 0x000000, "Member 'FArcadeLeaderboardEntry::Score' has a wrong offset!");
static_assert(offsetof(FArcadeLeaderboardEntry, Name) == 0x000008, "Member 'FArcadeLeaderboardEntry::Name' has a wrong offset!");

// ScriptStruct Palia.PlacementRegionSnapPointInfo
// 0x0028 (0x0028 - 0x0000)
struct FPlacementRegionSnapPointInfo final
{
public:
	struct FGameplayTag                           SnapType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SnapPointRelLoc;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnapCollisionRadius;                               // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2187[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlacementRegionSnapPointInfo) == 0x000008, "Wrong alignment on FPlacementRegionSnapPointInfo");
static_assert(sizeof(FPlacementRegionSnapPointInfo) == 0x000028, "Wrong size on FPlacementRegionSnapPointInfo");
static_assert(offsetof(FPlacementRegionSnapPointInfo, SnapType) == 0x000000, "Member 'FPlacementRegionSnapPointInfo::SnapType' has a wrong offset!");
static_assert(offsetof(FPlacementRegionSnapPointInfo, SnapPointRelLoc) == 0x000008, "Member 'FPlacementRegionSnapPointInfo::SnapPointRelLoc' has a wrong offset!");
static_assert(offsetof(FPlacementRegionSnapPointInfo, SnapCollisionRadius) == 0x000020, "Member 'FPlacementRegionSnapPointInfo::SnapCollisionRadius' has a wrong offset!");

// ScriptStruct Palia.ValeriaAccessibilitySettings
// 0x0003 (0x0003 - 0x0000)
struct FValeriaAccessibilitySettings final
{
public:
	bool                                          bCameraAssistForPC;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraAssist;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_HUDOpacity                               HUDOpacity;                                        // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaAccessibilitySettings) == 0x000001, "Wrong alignment on FValeriaAccessibilitySettings");
static_assert(sizeof(FValeriaAccessibilitySettings) == 0x000003, "Wrong size on FValeriaAccessibilitySettings");
static_assert(offsetof(FValeriaAccessibilitySettings, bCameraAssistForPC) == 0x000000, "Member 'FValeriaAccessibilitySettings::bCameraAssistForPC' has a wrong offset!");
static_assert(offsetof(FValeriaAccessibilitySettings, bCameraAssist) == 0x000001, "Member 'FValeriaAccessibilitySettings::bCameraAssist' has a wrong offset!");
static_assert(offsetof(FValeriaAccessibilitySettings, HUDOpacity) == 0x000002, "Member 'FValeriaAccessibilitySettings::HUDOpacity' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildRosterEntry
// 0x0040 (0x0040 - 0x0000)
struct FVAL_PlayerGuildRosterEntry final
{
public:
	struct FUniqueNetIdRepl                       ID;                                                // 0x0000(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_PlayerGuildMemberRole                    Role;                                              // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2188[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              JoinedAt;                                          // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildRosterEntry) == 0x000008, "Wrong alignment on FVAL_PlayerGuildRosterEntry");
static_assert(sizeof(FVAL_PlayerGuildRosterEntry) == 0x000040, "Wrong size on FVAL_PlayerGuildRosterEntry");
static_assert(offsetof(FVAL_PlayerGuildRosterEntry, ID) == 0x000000, "Member 'FVAL_PlayerGuildRosterEntry::ID' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildRosterEntry, Role) == 0x000030, "Member 'FVAL_PlayerGuildRosterEntry::Role' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildRosterEntry, JoinedAt) == 0x000038, "Member 'FVAL_PlayerGuildRosterEntry::JoinedAt' has a wrong offset!");

// ScriptStruct Palia.InterestedUserGroupFilter
// 0x0004 (0x0004 - 0x0000)
struct FInterestedUserGroupFilter final
{
public:
	bool                                          bPartyUsers;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendUsers;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuildUsers;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServerUsers;                                      // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterestedUserGroupFilter) == 0x000001, "Wrong alignment on FInterestedUserGroupFilter");
static_assert(sizeof(FInterestedUserGroupFilter) == 0x000004, "Wrong size on FInterestedUserGroupFilter");
static_assert(offsetof(FInterestedUserGroupFilter, bPartyUsers) == 0x000000, "Member 'FInterestedUserGroupFilter::bPartyUsers' has a wrong offset!");
static_assert(offsetof(FInterestedUserGroupFilter, bFriendUsers) == 0x000001, "Member 'FInterestedUserGroupFilter::bFriendUsers' has a wrong offset!");
static_assert(offsetof(FInterestedUserGroupFilter, bGuildUsers) == 0x000002, "Member 'FInterestedUserGroupFilter::bGuildUsers' has a wrong offset!");
static_assert(offsetof(FInterestedUserGroupFilter, bServerUsers) == 0x000003, "Member 'FInterestedUserGroupFilter::bServerUsers' has a wrong offset!");

// ScriptStruct Palia.EquipItemConfig
// 0x0008 (0x0008 - 0x0000)
struct FEquipItemConfig final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquipItemConfig) == 0x000008, "Wrong alignment on FEquipItemConfig");
static_assert(sizeof(FEquipItemConfig) == 0x000008, "Wrong size on FEquipItemConfig");
static_assert(offsetof(FEquipItemConfig, ItemType) == 0x000000, "Member 'FEquipItemConfig::ItemType' has a wrong offset!");

// ScriptStruct Palia.AbilityToolConfig
// 0x0010 (0x0010 - 0x0000)
struct FAbilityToolConfig final
{
public:
	struct FEquipItemConfig                       ToolEquippedConfig;                                // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UValeriaGASGameplayAbility> PlayerAbility;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityToolConfig) == 0x000008, "Wrong alignment on FAbilityToolConfig");
static_assert(sizeof(FAbilityToolConfig) == 0x000010, "Wrong size on FAbilityToolConfig");
static_assert(offsetof(FAbilityToolConfig, ToolEquippedConfig) == 0x000000, "Member 'FAbilityToolConfig::ToolEquippedConfig' has a wrong offset!");
static_assert(offsetof(FAbilityToolConfig, PlayerAbility) == 0x000008, "Member 'FAbilityToolConfig::PlayerAbility' has a wrong offset!");

// ScriptStruct Palia.CraftingGlobalConfig_CookingSettings
// 0x0058 (0x0058 - 0x0000)
struct FCraftingGlobalConfig_CookingSettings final
{
public:
	struct FAbilityToolConfig                     AbilityAddIngredient;                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAbilityToolConfig                     AbilityCollect;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAbilityToolConfig                     AbilityRecipeHugeSuccess;                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAbilityToolConfig                     AbilityRecipeSuccess;                              // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAbilityToolConfig                     AbilityRecipeFailure;                              // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DistanceToPlayRecipeAnimation;                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OvercookBurnTime;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingGlobalConfig_CookingSettings) == 0x000008, "Wrong alignment on FCraftingGlobalConfig_CookingSettings");
static_assert(sizeof(FCraftingGlobalConfig_CookingSettings) == 0x000058, "Wrong size on FCraftingGlobalConfig_CookingSettings");
static_assert(offsetof(FCraftingGlobalConfig_CookingSettings, AbilityAddIngredient) == 0x000000, "Member 'FCraftingGlobalConfig_CookingSettings::AbilityAddIngredient' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_CookingSettings, AbilityCollect) == 0x000010, "Member 'FCraftingGlobalConfig_CookingSettings::AbilityCollect' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_CookingSettings, AbilityRecipeHugeSuccess) == 0x000020, "Member 'FCraftingGlobalConfig_CookingSettings::AbilityRecipeHugeSuccess' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_CookingSettings, AbilityRecipeSuccess) == 0x000030, "Member 'FCraftingGlobalConfig_CookingSettings::AbilityRecipeSuccess' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_CookingSettings, AbilityRecipeFailure) == 0x000040, "Member 'FCraftingGlobalConfig_CookingSettings::AbilityRecipeFailure' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_CookingSettings, DistanceToPlayRecipeAnimation) == 0x000050, "Member 'FCraftingGlobalConfig_CookingSettings::DistanceToPlayRecipeAnimation' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_CookingSettings, OvercookBurnTime) == 0x000054, "Member 'FCraftingGlobalConfig_CookingSettings::OvercookBurnTime' has a wrong offset!");

// ScriptStruct Palia.AddedIngredientPersist
// 0x0050 (0x0050 - 0x0000)
struct FAddedIngredientPersist final
{
public:
	struct FValeriaItemPersist                    Item;                                              // 0x0000(0x0038)(NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerId;                                          // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntermediate;                                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2189[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAddedIngredientPersist) == 0x000008, "Wrong alignment on FAddedIngredientPersist");
static_assert(sizeof(FAddedIngredientPersist) == 0x000050, "Wrong size on FAddedIngredientPersist");
static_assert(offsetof(FAddedIngredientPersist, Item) == 0x000000, "Member 'FAddedIngredientPersist::Item' has a wrong offset!");
static_assert(offsetof(FAddedIngredientPersist, PlayerId) == 0x000038, "Member 'FAddedIngredientPersist::PlayerId' has a wrong offset!");
static_assert(offsetof(FAddedIngredientPersist, bIntermediate) == 0x000048, "Member 'FAddedIngredientPersist::bIntermediate' has a wrong offset!");

// ScriptStruct Palia.CrafterIngredientPersist
// 0x0018 (0x0018 - 0x0000)
struct FCrafterIngredientPersist final
{
public:
	int32                                         StepIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStarter;                                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAsRequest;                                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218A[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAddedIngredientPersist>        Added;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrafterIngredientPersist) == 0x000008, "Wrong alignment on FCrafterIngredientPersist");
static_assert(sizeof(FCrafterIngredientPersist) == 0x000018, "Wrong size on FCrafterIngredientPersist");
static_assert(offsetof(FCrafterIngredientPersist, StepIndex) == 0x000000, "Member 'FCrafterIngredientPersist::StepIndex' has a wrong offset!");
static_assert(offsetof(FCrafterIngredientPersist, bStarter) == 0x000004, "Member 'FCrafterIngredientPersist::bStarter' has a wrong offset!");
static_assert(offsetof(FCrafterIngredientPersist, bShowAsRequest) == 0x000005, "Member 'FCrafterIngredientPersist::bShowAsRequest' has a wrong offset!");
static_assert(offsetof(FCrafterIngredientPersist, Added) == 0x000008, "Member 'FCrafterIngredientPersist::Added' has a wrong offset!");

// ScriptStruct Palia.FishingLevelSegmentChoice
// 0x0018 (0x0018 - 0x0000)
struct FFishingLevelSegmentChoice final
{
public:
	struct FDataTableRowHandle                    SegmentConfig;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishingLevelSegmentChoice) == 0x000008, "Wrong alignment on FFishingLevelSegmentChoice");
static_assert(sizeof(FFishingLevelSegmentChoice) == 0x000018, "Wrong size on FFishingLevelSegmentChoice");
static_assert(offsetof(FFishingLevelSegmentChoice, SegmentConfig) == 0x000000, "Member 'FFishingLevelSegmentChoice::SegmentConfig' has a wrong offset!");
static_assert(offsetof(FFishingLevelSegmentChoice, Weight) == 0x000010, "Member 'FFishingLevelSegmentChoice::Weight' has a wrong offset!");

// ScriptStruct Palia.TagScoreRubric
// 0x0020 (0x0020 - 0x0000)
struct FTagScoreRubric final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   ScoreCurve;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreScalar;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218C[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTagScoreRubric) == 0x000008, "Wrong alignment on FTagScoreRubric");
static_assert(sizeof(FTagScoreRubric) == 0x000020, "Wrong size on FTagScoreRubric");
static_assert(offsetof(FTagScoreRubric, Tag) == 0x000000, "Member 'FTagScoreRubric::Tag' has a wrong offset!");
static_assert(offsetof(FTagScoreRubric, ScoreCurve) == 0x000008, "Member 'FTagScoreRubric::ScoreCurve' has a wrong offset!");
static_assert(offsetof(FTagScoreRubric, ScoreScalar) == 0x000018, "Member 'FTagScoreRubric::ScoreScalar' has a wrong offset!");

// ScriptStruct Palia.VitalConfig
// 0x0080 (0x0088 - 0x0008)
struct FVitalConfig final : public FTableRowBase
{
public:
	EVitalType                                    VitalType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartAmount;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinAmount;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAmount;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   VitalName;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTagScoreRubric                        AdditionalMaxVitalByTag;                           // 0x0038(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsNotifiedOnChange;                                // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSendAnalyticsEvents;                              // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218E[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnalyticsEventName;                                // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ToolTipText;                                       // 0x0070(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVitalConfig) == 0x000008, "Wrong alignment on FVitalConfig");
static_assert(sizeof(FVitalConfig) == 0x000088, "Wrong size on FVitalConfig");
static_assert(offsetof(FVitalConfig, VitalType) == 0x000008, "Member 'FVitalConfig::VitalType' has a wrong offset!");
static_assert(offsetof(FVitalConfig, StartAmount) == 0x00000C, "Member 'FVitalConfig::StartAmount' has a wrong offset!");
static_assert(offsetof(FVitalConfig, MinAmount) == 0x000010, "Member 'FVitalConfig::MinAmount' has a wrong offset!");
static_assert(offsetof(FVitalConfig, MaxAmount) == 0x000014, "Member 'FVitalConfig::MaxAmount' has a wrong offset!");
static_assert(offsetof(FVitalConfig, Icon) == 0x000018, "Member 'FVitalConfig::Icon' has a wrong offset!");
static_assert(offsetof(FVitalConfig, VitalName) == 0x000020, "Member 'FVitalConfig::VitalName' has a wrong offset!");
static_assert(offsetof(FVitalConfig, AdditionalMaxVitalByTag) == 0x000038, "Member 'FVitalConfig::AdditionalMaxVitalByTag' has a wrong offset!");
static_assert(offsetof(FVitalConfig, IsNotifiedOnChange) == 0x000058, "Member 'FVitalConfig::IsNotifiedOnChange' has a wrong offset!");
static_assert(offsetof(FVitalConfig, bSendAnalyticsEvents) == 0x000059, "Member 'FVitalConfig::bSendAnalyticsEvents' has a wrong offset!");
static_assert(offsetof(FVitalConfig, AnalyticsEventName) == 0x000060, "Member 'FVitalConfig::AnalyticsEventName' has a wrong offset!");
static_assert(offsetof(FVitalConfig, ToolTipText) == 0x000070, "Member 'FVitalConfig::ToolTipText' has a wrong offset!");

// ScriptStruct Palia.CrafterStepPersist
// 0x0038 (0x0038 - 0x0000)
struct FCrafterStepPersist final
{
public:
	TArray<struct FCrafterPlayerActionPersist>    PlayerActions;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RecipeStepIndex;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         State;                                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218F[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuccessPercent;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2190[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         StartedTime;                                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         FinishTime;                                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PausedTimeRemaining;                               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrafterStepPersist) == 0x000008, "Wrong alignment on FCrafterStepPersist");
static_assert(sizeof(FCrafterStepPersist) == 0x000038, "Wrong size on FCrafterStepPersist");
static_assert(offsetof(FCrafterStepPersist, PlayerActions) == 0x000000, "Member 'FCrafterStepPersist::PlayerActions' has a wrong offset!");
static_assert(offsetof(FCrafterStepPersist, RecipeStepIndex) == 0x000010, "Member 'FCrafterStepPersist::RecipeStepIndex' has a wrong offset!");
static_assert(offsetof(FCrafterStepPersist, State) == 0x000014, "Member 'FCrafterStepPersist::State' has a wrong offset!");
static_assert(offsetof(FCrafterStepPersist, SuccessPercent) == 0x000018, "Member 'FCrafterStepPersist::SuccessPercent' has a wrong offset!");
static_assert(offsetof(FCrafterStepPersist, StartedTime) == 0x000020, "Member 'FCrafterStepPersist::StartedTime' has a wrong offset!");
static_assert(offsetof(FCrafterStepPersist, FinishTime) == 0x000028, "Member 'FCrafterStepPersist::FinishTime' has a wrong offset!");
static_assert(offsetof(FCrafterStepPersist, PausedTimeRemaining) == 0x000030, "Member 'FCrafterStepPersist::PausedTimeRemaining' has a wrong offset!");

// ScriptStruct Palia.CraftingPlayerRewardEntryPersist
// 0x0030 (0x0030 - 0x0000)
struct FCraftingPlayerRewardEntryPersist final
{
public:
	int32                                         RecipeConfigId;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInspireNewRecipe;                                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SkillType;                                         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2191[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillAmount;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2192[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCurrencyRewardPersist>         Currencies;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FValeriaItemPersist>            AdditionalItems;                                   // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingPlayerRewardEntryPersist) == 0x000008, "Wrong alignment on FCraftingPlayerRewardEntryPersist");
static_assert(sizeof(FCraftingPlayerRewardEntryPersist) == 0x000030, "Wrong size on FCraftingPlayerRewardEntryPersist");
static_assert(offsetof(FCraftingPlayerRewardEntryPersist, RecipeConfigId) == 0x000000, "Member 'FCraftingPlayerRewardEntryPersist::RecipeConfigId' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntryPersist, bInspireNewRecipe) == 0x000004, "Member 'FCraftingPlayerRewardEntryPersist::bInspireNewRecipe' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntryPersist, SkillType) == 0x000005, "Member 'FCraftingPlayerRewardEntryPersist::SkillType' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntryPersist, SkillAmount) == 0x000008, "Member 'FCraftingPlayerRewardEntryPersist::SkillAmount' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntryPersist, Currencies) == 0x000010, "Member 'FCraftingPlayerRewardEntryPersist::Currencies' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntryPersist, AdditionalItems) == 0x000020, "Member 'FCraftingPlayerRewardEntryPersist::AdditionalItems' has a wrong offset!");

// ScriptStruct Palia.CraftingPlayerRewardPersist
// 0x0048 (0x0048 - 0x0000)
struct FCraftingPlayerRewardPersist final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCraftingPlayerRewardEntryPersist      Reward;                                            // 0x0010(0x0030)(NativeAccessSpecifierPublic)
	bool                                          bFirstTimeRecipe;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2193[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingPlayerRewardPersist) == 0x000008, "Wrong alignment on FCraftingPlayerRewardPersist");
static_assert(sizeof(FCraftingPlayerRewardPersist) == 0x000048, "Wrong size on FCraftingPlayerRewardPersist");
static_assert(offsetof(FCraftingPlayerRewardPersist, PlayerId) == 0x000000, "Member 'FCraftingPlayerRewardPersist::PlayerId' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardPersist, Reward) == 0x000010, "Member 'FCraftingPlayerRewardPersist::Reward' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardPersist, bFirstTimeRecipe) == 0x000040, "Member 'FCraftingPlayerRewardPersist::bFirstTimeRecipe' has a wrong offset!");

// ScriptStruct Palia.CrafterPersistBlock
// 0x00D0 (0x0110 - 0x0040)
struct FCrafterPersistBlock : public FS6PersistBlock
{
public:
	TArray<struct FCrafterStepPersist>            Steps;                                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCrafterIngredientPersist>      Ingredients;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCraftingPlayerRewardPersist>   PlayerRewards;                                     // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAddedIngredientPersist>        UsedItems;                                         // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         RecipeCrafterState;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2194[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  StartingPlayerAccountId;                           // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  StartingPlayerCharacterId;                         // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecipeIdCrafting;                                  // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         StartedCraftingAtMs;                               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CurrentStateStartTimeMs;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecipeHasFailed;                                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumeStarQualityIngredients;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2195[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FValeriaItemPersist                    ItemCrafting;                                      // 0x00C0(0x0038)(NativeAccessSpecifierPublic)
	TArray<struct FPersistGuid>                   PlayerIdsToReward;                                 // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         CurrentPropPhase;                                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2196[0x7];                                     // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrafterPersistBlock) == 0x000008, "Wrong alignment on FCrafterPersistBlock");
static_assert(sizeof(FCrafterPersistBlock) == 0x000110, "Wrong size on FCrafterPersistBlock");
static_assert(offsetof(FCrafterPersistBlock, Steps) == 0x000040, "Member 'FCrafterPersistBlock::Steps' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, Ingredients) == 0x000050, "Member 'FCrafterPersistBlock::Ingredients' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, PlayerRewards) == 0x000060, "Member 'FCrafterPersistBlock::PlayerRewards' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, UsedItems) == 0x000070, "Member 'FCrafterPersistBlock::UsedItems' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, RecipeCrafterState) == 0x000080, "Member 'FCrafterPersistBlock::RecipeCrafterState' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, StartingPlayerAccountId) == 0x000084, "Member 'FCrafterPersistBlock::StartingPlayerAccountId' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, StartingPlayerCharacterId) == 0x000094, "Member 'FCrafterPersistBlock::StartingPlayerCharacterId' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, RecipeIdCrafting) == 0x0000A4, "Member 'FCrafterPersistBlock::RecipeIdCrafting' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, StartedCraftingAtMs) == 0x0000A8, "Member 'FCrafterPersistBlock::StartedCraftingAtMs' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, CurrentStateStartTimeMs) == 0x0000B0, "Member 'FCrafterPersistBlock::CurrentStateStartTimeMs' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, bRecipeHasFailed) == 0x0000B8, "Member 'FCrafterPersistBlock::bRecipeHasFailed' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, bConsumeStarQualityIngredients) == 0x0000B9, "Member 'FCrafterPersistBlock::bConsumeStarQualityIngredients' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, ItemCrafting) == 0x0000C0, "Member 'FCrafterPersistBlock::ItemCrafting' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, PlayerIdsToReward) == 0x0000F8, "Member 'FCrafterPersistBlock::PlayerIdsToReward' has a wrong offset!");
static_assert(offsetof(FCrafterPersistBlock, CurrentPropPhase) == 0x000108, "Member 'FCrafterPersistBlock::CurrentPropPhase' has a wrong offset!");

// ScriptStruct Palia.PlaceableSocketStatus
// 0x0058 (0x0058 - 0x0000)
struct FPlaceableSocketStatus final
{
public:
	int32                                         SocketPersistId;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2197[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> PlugItemType;                                      // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevelOfSocketed;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPersistActorId                        PlugActorId;                                       // 0x0034(0x0024)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableSocketStatus) == 0x000008, "Wrong alignment on FPlaceableSocketStatus");
static_assert(sizeof(FPlaceableSocketStatus) == 0x000058, "Wrong size on FPlaceableSocketStatus");
static_assert(offsetof(FPlaceableSocketStatus, SocketPersistId) == 0x000000, "Member 'FPlaceableSocketStatus::SocketPersistId' has a wrong offset!");
static_assert(offsetof(FPlaceableSocketStatus, PlugItemType) == 0x000008, "Member 'FPlaceableSocketStatus::PlugItemType' has a wrong offset!");
static_assert(offsetof(FPlaceableSocketStatus, CurrentLevelOfSocketed) == 0x000030, "Member 'FPlaceableSocketStatus::CurrentLevelOfSocketed' has a wrong offset!");
static_assert(offsetof(FPlaceableSocketStatus, PlugActorId) == 0x000034, "Member 'FPlaceableSocketStatus::PlugActorId' has a wrong offset!");

// ScriptStruct Palia.ValeriaGameplaySettings
// 0x0018 (0x0018 - 0x0000)
struct FValeriaGameplaySettings final
{
public:
	bool                                          bAllowCameraShake;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableReticle;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWorldMapGrid;                               // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChatTimestamp;                                // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumStorageBagsInActionBar;                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESprintType                                   SprintType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowEatingWhenFull;                              // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCookingCameraDesktop;                         // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCookingCameraConsole;                         // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowServerPing;                                   // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableActionBarWrapping;                          // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2198[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FishingCastSpeed;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaxGoldRepairSlider;                              // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaxToolkitRepairSlider;                           // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepairAll;                                        // 0x0016(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2199[0x1];                                     // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaGameplaySettings) == 0x000004, "Wrong alignment on FValeriaGameplaySettings");
static_assert(sizeof(FValeriaGameplaySettings) == 0x000018, "Wrong size on FValeriaGameplaySettings");
static_assert(offsetof(FValeriaGameplaySettings, bAllowCameraShake) == 0x000000, "Member 'FValeriaGameplaySettings::bAllowCameraShake' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bEnableReticle) == 0x000001, "Member 'FValeriaGameplaySettings::bEnableReticle' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bEnableWorldMapGrid) == 0x000002, "Member 'FValeriaGameplaySettings::bEnableWorldMapGrid' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bHideChatTimestamp) == 0x000003, "Member 'FValeriaGameplaySettings::bHideChatTimestamp' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, NumStorageBagsInActionBar) == 0x000004, "Member 'FValeriaGameplaySettings::NumStorageBagsInActionBar' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, SprintType) == 0x000008, "Member 'FValeriaGameplaySettings::SprintType' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bAllowEatingWhenFull) == 0x000009, "Member 'FValeriaGameplaySettings::bAllowEatingWhenFull' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bShowCookingCameraDesktop) == 0x00000A, "Member 'FValeriaGameplaySettings::bShowCookingCameraDesktop' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bShowCookingCameraConsole) == 0x00000B, "Member 'FValeriaGameplaySettings::bShowCookingCameraConsole' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bShowServerPing) == 0x00000C, "Member 'FValeriaGameplaySettings::bShowServerPing' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bEnableActionBarWrapping) == 0x00000D, "Member 'FValeriaGameplaySettings::bEnableActionBarWrapping' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, FishingCastSpeed) == 0x000010, "Member 'FValeriaGameplaySettings::FishingCastSpeed' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bMaxGoldRepairSlider) == 0x000014, "Member 'FValeriaGameplaySettings::bMaxGoldRepairSlider' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bMaxToolkitRepairSlider) == 0x000015, "Member 'FValeriaGameplaySettings::bMaxToolkitRepairSlider' has a wrong offset!");
static_assert(offsetof(FValeriaGameplaySettings, bRepairAll) == 0x000016, "Member 'FValeriaGameplaySettings::bRepairAll' has a wrong offset!");

// ScriptStruct Palia.FishingLevelConfig
// 0x0050 (0x0058 - 0x0008)
struct FFishingLevelConfig final : public FTableRowBase
{
public:
	TArray<struct FDataTableRowHandle>            RandomNibbleLevel;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFloatRange                            BiteWaitTime;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            BiteReelReactionTime;                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayArea;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamagePerSecond;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamagePerSecondOnHold;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219A[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFishingLevelSegmentChoice>     Segments;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingLevelConfig) == 0x000008, "Wrong alignment on FFishingLevelConfig");
static_assert(sizeof(FFishingLevelConfig) == 0x000058, "Wrong size on FFishingLevelConfig");
static_assert(offsetof(FFishingLevelConfig, RandomNibbleLevel) == 0x000008, "Member 'FFishingLevelConfig::RandomNibbleLevel' has a wrong offset!");
static_assert(offsetof(FFishingLevelConfig, BiteWaitTime) == 0x000018, "Member 'FFishingLevelConfig::BiteWaitTime' has a wrong offset!");
static_assert(offsetof(FFishingLevelConfig, BiteReelReactionTime) == 0x000028, "Member 'FFishingLevelConfig::BiteReelReactionTime' has a wrong offset!");
static_assert(offsetof(FFishingLevelConfig, PlayArea) == 0x000038, "Member 'FFishingLevelConfig::PlayArea' has a wrong offset!");
static_assert(offsetof(FFishingLevelConfig, DamagePerSecond) == 0x00003C, "Member 'FFishingLevelConfig::DamagePerSecond' has a wrong offset!");
static_assert(offsetof(FFishingLevelConfig, DamagePerSecondOnHold) == 0x000040, "Member 'FFishingLevelConfig::DamagePerSecondOnHold' has a wrong offset!");
static_assert(offsetof(FFishingLevelConfig, Segments) == 0x000048, "Member 'FFishingLevelConfig::Segments' has a wrong offset!");

// ScriptStruct Palia.PlacementRegionId
// 0x0038 (0x0038 - 0x0000)
struct FPlacementRegionId final
{
public:
	class FString                                 AnchorId;                                          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSessionActorId                        ParentSessionId;                                   // 0x0010(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPersistActorId                        ParentPersistId;                                   // 0x0014(0x0024)(RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPlacementRegionId) == 0x000008, "Wrong alignment on FPlacementRegionId");
static_assert(sizeof(FPlacementRegionId) == 0x000038, "Wrong size on FPlacementRegionId");
static_assert(offsetof(FPlacementRegionId, AnchorId) == 0x000000, "Member 'FPlacementRegionId::AnchorId' has a wrong offset!");
static_assert(offsetof(FPlacementRegionId, ParentSessionId) == 0x000010, "Member 'FPlacementRegionId::ParentSessionId' has a wrong offset!");
static_assert(offsetof(FPlacementRegionId, ParentPersistId) == 0x000014, "Member 'FPlacementRegionId::ParentPersistId' has a wrong offset!");

// ScriptStruct Palia.DialogueToShow
// 0x0060 (0x0060 - 0x0000)
struct FDialogueToShow final
{
public:
	int32                                         ConfigId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlternativeScriptId;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_QuestDef>           QuestDef;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsQuestPinned;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219B[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_DialogueAsset>      DialogueAssetPtr;                                  // 0x0038(0x0028)(BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueToShow) == 0x000008, "Wrong alignment on FDialogueToShow");
static_assert(sizeof(FDialogueToShow) == 0x000060, "Wrong size on FDialogueToShow");
static_assert(offsetof(FDialogueToShow, ConfigId) == 0x000000, "Member 'FDialogueToShow::ConfigId' has a wrong offset!");
static_assert(offsetof(FDialogueToShow, AlternativeScriptId) == 0x000004, "Member 'FDialogueToShow::AlternativeScriptId' has a wrong offset!");
static_assert(offsetof(FDialogueToShow, QuestDef) == 0x000008, "Member 'FDialogueToShow::QuestDef' has a wrong offset!");
static_assert(offsetof(FDialogueToShow, bIsQuestPinned) == 0x000030, "Member 'FDialogueToShow::bIsQuestPinned' has a wrong offset!");
static_assert(offsetof(FDialogueToShow, DialogueAssetPtr) == 0x000038, "Member 'FDialogueToShow::DialogueAssetPtr' has a wrong offset!");

// ScriptStruct Palia.DialogueListToShow
// 0x0138 (0x0138 - 0x0000)
struct FDialogueListToShow final
{
public:
	TArray<struct FDialogueToShow>                Dialogues;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDialogueToShow                        StartupDialogue;                                   // 0x0010(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDialogueToShow                        GreetingDialogue;                                  // 0x0070(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDialogueToShow                        GiftHintDialogue;                                  // 0x00D0(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsBranchingDialogueChoice;                         // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDialogueRefresh;                                 // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219C[0x6];                                     // 0x0132(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueListToShow) == 0x000008, "Wrong alignment on FDialogueListToShow");
static_assert(sizeof(FDialogueListToShow) == 0x000138, "Wrong size on FDialogueListToShow");
static_assert(offsetof(FDialogueListToShow, Dialogues) == 0x000000, "Member 'FDialogueListToShow::Dialogues' has a wrong offset!");
static_assert(offsetof(FDialogueListToShow, StartupDialogue) == 0x000010, "Member 'FDialogueListToShow::StartupDialogue' has a wrong offset!");
static_assert(offsetof(FDialogueListToShow, GreetingDialogue) == 0x000070, "Member 'FDialogueListToShow::GreetingDialogue' has a wrong offset!");
static_assert(offsetof(FDialogueListToShow, GiftHintDialogue) == 0x0000D0, "Member 'FDialogueListToShow::GiftHintDialogue' has a wrong offset!");
static_assert(offsetof(FDialogueListToShow, IsBranchingDialogueChoice) == 0x000130, "Member 'FDialogueListToShow::IsBranchingDialogueChoice' has a wrong offset!");
static_assert(offsetof(FDialogueListToShow, IsDialogueRefresh) == 0x000131, "Member 'FDialogueListToShow::IsDialogueRefresh' has a wrong offset!");

// ScriptStruct Palia.CharacterStateChangeParams
// 0x0178 (0x0178 - 0x0000)
struct FCharacterStateChangeParams final
{
public:
	struct FAnimState                             AnimState;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDialogueListToShow                    DialoguesToShow;                                   // 0x0018(0x0138)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UDialogueComponent*                     Dialogue;                                          // 0x0150(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerInfoState                              PlayerInfoState;                                   // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219D[0x3];                                     // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGardenActionParams                    GardenParams;                                      // 0x015C(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BookToReadId;                                      // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeaveDialogueUnchanged;                            // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219E[0x7];                                     // 0x0171(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterStateChangeParams) == 0x000008, "Wrong alignment on FCharacterStateChangeParams");
static_assert(sizeof(FCharacterStateChangeParams) == 0x000178, "Wrong size on FCharacterStateChangeParams");
static_assert(offsetof(FCharacterStateChangeParams, AnimState) == 0x000000, "Member 'FCharacterStateChangeParams::AnimState' has a wrong offset!");
static_assert(offsetof(FCharacterStateChangeParams, DialoguesToShow) == 0x000018, "Member 'FCharacterStateChangeParams::DialoguesToShow' has a wrong offset!");
static_assert(offsetof(FCharacterStateChangeParams, Dialogue) == 0x000150, "Member 'FCharacterStateChangeParams::Dialogue' has a wrong offset!");
static_assert(offsetof(FCharacterStateChangeParams, PlayerInfoState) == 0x000158, "Member 'FCharacterStateChangeParams::PlayerInfoState' has a wrong offset!");
static_assert(offsetof(FCharacterStateChangeParams, GardenParams) == 0x00015C, "Member 'FCharacterStateChangeParams::GardenParams' has a wrong offset!");
static_assert(offsetof(FCharacterStateChangeParams, BookToReadId) == 0x00016C, "Member 'FCharacterStateChangeParams::BookToReadId' has a wrong offset!");
static_assert(offsetof(FCharacterStateChangeParams, LeaveDialogueUnchanged) == 0x000170, "Member 'FCharacterStateChangeParams::LeaveDialogueUnchanged' has a wrong offset!");

// ScriptStruct Palia.StorageGlobalConfig
// 0x0068 (0x0068 - 0x0000)
struct FStorageGlobalConfig final
{
public:
	int32                                         MaxCapacityOverride;                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNotification                          StorageFullNotification;                           // 0x0008(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNotification                          QuestItemInLockboxNotification;                    // 0x0038(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStorageGlobalConfig) == 0x000008, "Wrong alignment on FStorageGlobalConfig");
static_assert(sizeof(FStorageGlobalConfig) == 0x000068, "Wrong size on FStorageGlobalConfig");
static_assert(offsetof(FStorageGlobalConfig, MaxCapacityOverride) == 0x000000, "Member 'FStorageGlobalConfig::MaxCapacityOverride' has a wrong offset!");
static_assert(offsetof(FStorageGlobalConfig, StorageFullNotification) == 0x000008, "Member 'FStorageGlobalConfig::StorageFullNotification' has a wrong offset!");
static_assert(offsetof(FStorageGlobalConfig, QuestItemInLockboxNotification) == 0x000038, "Member 'FStorageGlobalConfig::QuestItemInLockboxNotification' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildApplication
// 0x0040 (0x0040 - 0x0000)
struct FVAL_PlayerGuildApplication final
{
public:
	struct FGuid                                  PlayerGuildId;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       SenderUserId;                                      // 0x0010(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildApplication) == 0x000008, "Wrong alignment on FVAL_PlayerGuildApplication");
static_assert(sizeof(FVAL_PlayerGuildApplication) == 0x000040, "Wrong size on FVAL_PlayerGuildApplication");
static_assert(offsetof(FVAL_PlayerGuildApplication, PlayerGuildId) == 0x000000, "Member 'FVAL_PlayerGuildApplication::PlayerGuildId' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildApplication, SenderUserId) == 0x000010, "Member 'FVAL_PlayerGuildApplication::SenderUserId' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildApplicationList
// 0x0010 (0x0010 - 0x0000)
struct FVAL_PlayerGuildApplicationList final
{
public:
	TArray<struct FVAL_PlayerGuildApplication>    List;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildApplicationList) == 0x000008, "Wrong alignment on FVAL_PlayerGuildApplicationList");
static_assert(sizeof(FVAL_PlayerGuildApplicationList) == 0x000010, "Wrong size on FVAL_PlayerGuildApplicationList");
static_assert(offsetof(FVAL_PlayerGuildApplicationList, List) == 0x000000, "Member 'FVAL_PlayerGuildApplicationList::List' has a wrong offset!");

// ScriptStruct Palia.MapAreaTransformation_ConvertedActor
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FMapAreaTransformation_ConvertedActor final
{
public:
	uint8                                         Pad_21A0[0x48];                                    // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapAreaTransformation_ConvertedActor) == 0x000008, "Wrong alignment on FMapAreaTransformation_ConvertedActor");
static_assert(sizeof(FMapAreaTransformation_ConvertedActor) == 0x000048, "Wrong size on FMapAreaTransformation_ConvertedActor");

// ScriptStruct Palia.FishingLevelSegmentAction
// 0x0010 (0x0010 - 0x0000)
struct FFishingLevelSegmentAction final
{
public:
	EFFishingLevelSegmentActionType               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Location;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationIfSpeedZero;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingLevelSegmentAction) == 0x000004, "Wrong alignment on FFishingLevelSegmentAction");
static_assert(sizeof(FFishingLevelSegmentAction) == 0x000010, "Wrong size on FFishingLevelSegmentAction");
static_assert(offsetof(FFishingLevelSegmentAction, Type) == 0x000000, "Member 'FFishingLevelSegmentAction::Type' has a wrong offset!");
static_assert(offsetof(FFishingLevelSegmentAction, Location) == 0x000004, "Member 'FFishingLevelSegmentAction::Location' has a wrong offset!");
static_assert(offsetof(FFishingLevelSegmentAction, Speed) == 0x000008, "Member 'FFishingLevelSegmentAction::Speed' has a wrong offset!");
static_assert(offsetof(FFishingLevelSegmentAction, DurationIfSpeedZero) == 0x00000C, "Member 'FFishingLevelSegmentAction::DurationIfSpeedZero' has a wrong offset!");

// ScriptStruct Palia.FishingLevelSegmentConfig
// 0x0010 (0x0018 - 0x0008)
struct FFishingLevelSegmentConfig final : public FTableRowBase
{
public:
	TArray<struct FFishingLevelSegmentAction>     Actions;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingLevelSegmentConfig) == 0x000008, "Wrong alignment on FFishingLevelSegmentConfig");
static_assert(sizeof(FFishingLevelSegmentConfig) == 0x000018, "Wrong size on FFishingLevelSegmentConfig");
static_assert(offsetof(FFishingLevelSegmentConfig, Actions) == 0x000008, "Member 'FFishingLevelSegmentConfig::Actions' has a wrong offset!");

// ScriptStruct Palia.WeightedSpawnEntry
// 0x0030 (0x0030 - 0x0000)
struct FWeightedSpawnEntry final
{
public:
	TSoftClassPtr<class UClass>                   SpawnedActorClass;                                 // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A2[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeightedSpawnEntry) == 0x000008, "Wrong alignment on FWeightedSpawnEntry");
static_assert(sizeof(FWeightedSpawnEntry) == 0x000030, "Wrong size on FWeightedSpawnEntry");
static_assert(offsetof(FWeightedSpawnEntry, SpawnedActorClass) == 0x000000, "Member 'FWeightedSpawnEntry::SpawnedActorClass' has a wrong offset!");
static_assert(offsetof(FWeightedSpawnEntry, Weight) == 0x000028, "Member 'FWeightedSpawnEntry::Weight' has a wrong offset!");

// ScriptStruct Palia.SpawnEntryMapValue
// 0x0010 (0x0010 - 0x0000)
struct FSpawnEntryMapValue final
{
public:
	TArray<struct FWeightedSpawnEntry>            WeightedSpawnEntries;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnEntryMapValue) == 0x000008, "Wrong alignment on FSpawnEntryMapValue");
static_assert(sizeof(FSpawnEntryMapValue) == 0x000010, "Wrong size on FSpawnEntryMapValue");
static_assert(offsetof(FSpawnEntryMapValue, WeightedSpawnEntries) == 0x000000, "Member 'FSpawnEntryMapValue::WeightedSpawnEntries' has a wrong offset!");

// ScriptStruct Palia.SpawnOnFoliageSetup
// 0x00A0 (0x00A0 - 0x0000)
struct FSpawnOnFoliageSetup final
{
public:
	TSoftObjectPtr<class UFoliageType>            FoliageType;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FoliageSpawnTag;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSpawnEntryMapValue> SpawnEntryMap;                                     // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CooldownSecs;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValidPercentAboveGround;                        // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldUseLocalCoordinateSpace;                     // 0x0088(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldValidateGround;                              // 0x0089(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A3[0x2];                                     // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAcceptableGroundDistance;                       // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldValidateGroundAsClimbable;                   // 0x0090(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldValidateCeiling;                             // 0x0091(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A4[0x2];                                     // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinAcceptableCeilingDistance;                      // 0x0094(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldValidateFoliageOverlaps;                     // 0x0098(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldValidateLandscapeAsCeiling;                  // 0x0099(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A5[0x2];                                     // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinAcceptableLandscapeCeilingDistance;             // 0x009C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnOnFoliageSetup) == 0x000008, "Wrong alignment on FSpawnOnFoliageSetup");
static_assert(sizeof(FSpawnOnFoliageSetup) == 0x0000A0, "Wrong size on FSpawnOnFoliageSetup");
static_assert(offsetof(FSpawnOnFoliageSetup, FoliageType) == 0x000000, "Member 'FSpawnOnFoliageSetup::FoliageType' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, FoliageSpawnTag) == 0x000028, "Member 'FSpawnOnFoliageSetup::FoliageSpawnTag' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, SpawnEntryMap) == 0x000030, "Member 'FSpawnOnFoliageSetup::SpawnEntryMap' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, CooldownSecs) == 0x000080, "Member 'FSpawnOnFoliageSetup::CooldownSecs' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, MinValidPercentAboveGround) == 0x000084, "Member 'FSpawnOnFoliageSetup::MinValidPercentAboveGround' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, ShouldUseLocalCoordinateSpace) == 0x000088, "Member 'FSpawnOnFoliageSetup::ShouldUseLocalCoordinateSpace' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, ShouldValidateGround) == 0x000089, "Member 'FSpawnOnFoliageSetup::ShouldValidateGround' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, MaxAcceptableGroundDistance) == 0x00008C, "Member 'FSpawnOnFoliageSetup::MaxAcceptableGroundDistance' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, ShouldValidateGroundAsClimbable) == 0x000090, "Member 'FSpawnOnFoliageSetup::ShouldValidateGroundAsClimbable' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, ShouldValidateCeiling) == 0x000091, "Member 'FSpawnOnFoliageSetup::ShouldValidateCeiling' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, MinAcceptableCeilingDistance) == 0x000094, "Member 'FSpawnOnFoliageSetup::MinAcceptableCeilingDistance' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, ShouldValidateFoliageOverlaps) == 0x000098, "Member 'FSpawnOnFoliageSetup::ShouldValidateFoliageOverlaps' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, ShouldValidateLandscapeAsCeiling) == 0x000099, "Member 'FSpawnOnFoliageSetup::ShouldValidateLandscapeAsCeiling' has a wrong offset!");
static_assert(offsetof(FSpawnOnFoliageSetup, MinAcceptableLandscapeCeilingDistance) == 0x00009C, "Member 'FSpawnOnFoliageSetup::MinAcceptableLandscapeCeilingDistance' has a wrong offset!");

// ScriptStruct Palia.CrafterComponent_ChangeContext_OldValues
// 0x0001 (0x0001 - 0x0000)
struct FCrafterComponent_ChangeContext_OldValues final
{
public:
	ECrafterState                                 OldState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrafterComponent_ChangeContext_OldValues) == 0x000001, "Wrong alignment on FCrafterComponent_ChangeContext_OldValues");
static_assert(sizeof(FCrafterComponent_ChangeContext_OldValues) == 0x000001, "Wrong size on FCrafterComponent_ChangeContext_OldValues");
static_assert(offsetof(FCrafterComponent_ChangeContext_OldValues, OldState) == 0x000000, "Member 'FCrafterComponent_ChangeContext_OldValues::OldState' has a wrong offset!");

// ScriptStruct Palia.CrafterComponent_ChangeContext
// 0x0003 (0x0003 - 0x0000)
struct FCrafterComponent_ChangeContext final
{
public:
	bool                                          StateChanged;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecipeChanged;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecipeInstanceChanged;                             // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrafterComponent_ChangeContext) == 0x000001, "Wrong alignment on FCrafterComponent_ChangeContext");
static_assert(sizeof(FCrafterComponent_ChangeContext) == 0x000003, "Wrong size on FCrafterComponent_ChangeContext");
static_assert(offsetof(FCrafterComponent_ChangeContext, StateChanged) == 0x000000, "Member 'FCrafterComponent_ChangeContext::StateChanged' has a wrong offset!");
static_assert(offsetof(FCrafterComponent_ChangeContext, RecipeChanged) == 0x000001, "Member 'FCrafterComponent_ChangeContext::RecipeChanged' has a wrong offset!");
static_assert(offsetof(FCrafterComponent_ChangeContext, RecipeInstanceChanged) == 0x000002, "Member 'FCrafterComponent_ChangeContext::RecipeInstanceChanged' has a wrong offset!");

// ScriptStruct Palia.ComplexRecipeCrafter
// 0x0018 (0x0018 - 0x0000)
struct FComplexRecipeCrafter final
{
public:
	TArray<struct FComplexRecipeProduct>          Products;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         CrafterPersistId;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingRecipes;                                  // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComplexRecipeCrafter) == 0x000008, "Wrong alignment on FComplexRecipeCrafter");
static_assert(sizeof(FComplexRecipeCrafter) == 0x000018, "Wrong size on FComplexRecipeCrafter");
static_assert(offsetof(FComplexRecipeCrafter, Products) == 0x000000, "Member 'FComplexRecipeCrafter::Products' has a wrong offset!");
static_assert(offsetof(FComplexRecipeCrafter, CrafterPersistId) == 0x000010, "Member 'FComplexRecipeCrafter::CrafterPersistId' has a wrong offset!");
static_assert(offsetof(FComplexRecipeCrafter, RemainingRecipes) == 0x000014, "Member 'FComplexRecipeCrafter::RemainingRecipes' has a wrong offset!");

// ScriptStruct Palia.DialogueSpeakerOverride
// 0x0020 (0x0020 - 0x0000)
struct FDialogueSpeakerOverride final
{
public:
	class UVAL_DialogueSpeakerAsset*              OverriddenDialogueSpeaker;                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OverriddenSpeakerDisplayName;                      // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueSpeakerOverride) == 0x000008, "Wrong alignment on FDialogueSpeakerOverride");
static_assert(sizeof(FDialogueSpeakerOverride) == 0x000020, "Wrong size on FDialogueSpeakerOverride");
static_assert(offsetof(FDialogueSpeakerOverride, OverriddenDialogueSpeaker) == 0x000000, "Member 'FDialogueSpeakerOverride::OverriddenDialogueSpeaker' has a wrong offset!");
static_assert(offsetof(FDialogueSpeakerOverride, OverriddenSpeakerDisplayName) == 0x000008, "Member 'FDialogueSpeakerOverride::OverriddenSpeakerDisplayName' has a wrong offset!");

// ScriptStruct Palia.DialogueLine
// 0x0038 (0x0038 - 0x0000)
struct FDialogueLine final
{
public:
	struct FDialogueSpeakerOverride               DialogueSpeakerOverride;                           // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueLine) == 0x000008, "Wrong alignment on FDialogueLine");
static_assert(sizeof(FDialogueLine) == 0x000038, "Wrong size on FDialogueLine");
static_assert(offsetof(FDialogueLine, DialogueSpeakerOverride) == 0x000000, "Member 'FDialogueLine::DialogueSpeakerOverride' has a wrong offset!");
static_assert(offsetof(FDialogueLine, Text) == 0x000020, "Member 'FDialogueLine::Text' has a wrong offset!");

// ScriptStruct Palia.ConditionalDialogueScriptConfig
// 0x0030 (0x0030 - 0x0000)
struct FConditionalDialogueScriptConfig final
{
public:
	TArray<struct FDialogueLine>                  Scripts;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagFilter>           PlayerTagRequirements;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagFilter>           VillagerTagRequirements;                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConditionalDialogueScriptConfig) == 0x000008, "Wrong alignment on FConditionalDialogueScriptConfig");
static_assert(sizeof(FConditionalDialogueScriptConfig) == 0x000030, "Wrong size on FConditionalDialogueScriptConfig");
static_assert(offsetof(FConditionalDialogueScriptConfig, Scripts) == 0x000000, "Member 'FConditionalDialogueScriptConfig::Scripts' has a wrong offset!");
static_assert(offsetof(FConditionalDialogueScriptConfig, PlayerTagRequirements) == 0x000010, "Member 'FConditionalDialogueScriptConfig::PlayerTagRequirements' has a wrong offset!");
static_assert(offsetof(FConditionalDialogueScriptConfig, VillagerTagRequirements) == 0x000020, "Member 'FConditionalDialogueScriptConfig::VillagerTagRequirements' has a wrong offset!");

// ScriptStruct Palia.AnimNode_PlaySequenceByMapping
// 0x0028 (0x00C0 - 0x0098)
struct FAnimNode_PlaySequenceByMapping final : public FAnimNode_SequencePlayer_Standalone
{
public:
	class FName                                   MappingName;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimMappingCachePolicy                       NameCachePolicy;                                   // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A6[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaMoveablePawn*                   CachedPawn;                                        // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreviousMappingName;                               // 0x00B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MappingQualifier;                                  // 0x00B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_PlaySequenceByMapping) == 0x000008, "Wrong alignment on FAnimNode_PlaySequenceByMapping");
static_assert(sizeof(FAnimNode_PlaySequenceByMapping) == 0x0000C0, "Wrong size on FAnimNode_PlaySequenceByMapping");
static_assert(offsetof(FAnimNode_PlaySequenceByMapping, MappingName) == 0x000098, "Member 'FAnimNode_PlaySequenceByMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlaySequenceByMapping, NameCachePolicy) == 0x0000A0, "Member 'FAnimNode_PlaySequenceByMapping::NameCachePolicy' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlaySequenceByMapping, CachedPawn) == 0x0000A8, "Member 'FAnimNode_PlaySequenceByMapping::CachedPawn' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlaySequenceByMapping, PreviousMappingName) == 0x0000B0, "Member 'FAnimNode_PlaySequenceByMapping::PreviousMappingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_PlaySequenceByMapping, MappingQualifier) == 0x0000B8, "Member 'FAnimNode_PlaySequenceByMapping::MappingQualifier' has a wrong offset!");

// ScriptStruct Palia.SessionActorRecord
// 0x0038 (0x0038 - 0x0000)
struct FSessionActorRecord final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A7[0x30];                                    // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSessionActorRecord) == 0x000008, "Wrong alignment on FSessionActorRecord");
static_assert(sizeof(FSessionActorRecord) == 0x000038, "Wrong size on FSessionActorRecord");
static_assert(offsetof(FSessionActorRecord, Actor) == 0x000000, "Member 'FSessionActorRecord::Actor' has a wrong offset!");

// ScriptStruct Palia.VAL_DialogueOption
// 0x0028 (0x0028 - 0x0000)
struct FVAL_DialogueOption final
{
public:
	int32                                         DialogueAssetId;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DialogueOptionText;                                // 0x0008(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	EVillagerDialogueIcon                         DialogueOptionIcon;                                // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A9[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_DialogueOption) == 0x000008, "Wrong alignment on FVAL_DialogueOption");
static_assert(sizeof(FVAL_DialogueOption) == 0x000028, "Wrong size on FVAL_DialogueOption");
static_assert(offsetof(FVAL_DialogueOption, DialogueAssetId) == 0x000000, "Member 'FVAL_DialogueOption::DialogueAssetId' has a wrong offset!");
static_assert(offsetof(FVAL_DialogueOption, DialogueOptionText) == 0x000008, "Member 'FVAL_DialogueOption::DialogueOptionText' has a wrong offset!");
static_assert(offsetof(FVAL_DialogueOption, DialogueOptionIcon) == 0x000020, "Member 'FVAL_DialogueOption::DialogueOptionIcon' has a wrong offset!");

// ScriptStruct Palia.VAL_DialogueOptionList
// 0x0048 (0x0048 - 0x0000)
struct FVAL_DialogueOptionList final
{
public:
	TArray<struct FVAL_DialogueOption>            MainDialogueOptions;                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVAL_DialogueOption                    GiftHintDialogueOption;                            // 0x0010(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FVAL_DialogueOption>            MiscellaneousDialogueOptions;                      // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_DialogueOptionList) == 0x000008, "Wrong alignment on FVAL_DialogueOptionList");
static_assert(sizeof(FVAL_DialogueOptionList) == 0x000048, "Wrong size on FVAL_DialogueOptionList");
static_assert(offsetof(FVAL_DialogueOptionList, MainDialogueOptions) == 0x000000, "Member 'FVAL_DialogueOptionList::MainDialogueOptions' has a wrong offset!");
static_assert(offsetof(FVAL_DialogueOptionList, GiftHintDialogueOption) == 0x000010, "Member 'FVAL_DialogueOptionList::GiftHintDialogueOption' has a wrong offset!");
static_assert(offsetof(FVAL_DialogueOptionList, MiscellaneousDialogueOptions) == 0x000038, "Member 'FVAL_DialogueOptionList::MiscellaneousDialogueOptions' has a wrong offset!");

// ScriptStruct Palia.GrowthPhase
// 0x0030 (0x0030 - 0x0000)
struct FGrowthPhase final
{
public:
	TSoftObjectPtr<class UStaticMesh>             MeshToDisplay;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDaysOfGrowth;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AA[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGrowthPhase) == 0x000008, "Wrong alignment on FGrowthPhase");
static_assert(sizeof(FGrowthPhase) == 0x000030, "Wrong size on FGrowthPhase");
static_assert(offsetof(FGrowthPhase, MeshToDisplay) == 0x000000, "Member 'FGrowthPhase::MeshToDisplay' has a wrong offset!");
static_assert(offsetof(FGrowthPhase, MinDaysOfGrowth) == 0x000028, "Member 'FGrowthPhase::MinDaysOfGrowth' has a wrong offset!");

// ScriptStruct Palia.VAL_RewardItem
// 0x0020 (0x0020 - 0x0000)
struct FVAL_RewardItem final
{
public:
	EVALItemType                                  ItemType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AB[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ItemId;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemQuantity;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AC[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_RewardItem) == 0x000008, "Wrong alignment on FVAL_RewardItem");
static_assert(sizeof(FVAL_RewardItem) == 0x000020, "Wrong size on FVAL_RewardItem");
static_assert(offsetof(FVAL_RewardItem, ItemType) == 0x000000, "Member 'FVAL_RewardItem::ItemType' has a wrong offset!");
static_assert(offsetof(FVAL_RewardItem, ItemId) == 0x000008, "Member 'FVAL_RewardItem::ItemId' has a wrong offset!");
static_assert(offsetof(FVAL_RewardItem, ItemQuantity) == 0x000018, "Member 'FVAL_RewardItem::ItemQuantity' has a wrong offset!");

// ScriptStruct Palia.EquipmentMetaData
// 0x0014 (0x0014 - 0x0000)
struct FEquipmentMetaData final
{
public:
	struct FBagSlotLocation                       InventoryLocation;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EEquipmentType                                EquipmentType;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AD[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaterAmount;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AE[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEquipmentMetaData) == 0x000004, "Wrong alignment on FEquipmentMetaData");
static_assert(sizeof(FEquipmentMetaData) == 0x000014, "Wrong size on FEquipmentMetaData");
static_assert(offsetof(FEquipmentMetaData, InventoryLocation) == 0x000000, "Member 'FEquipmentMetaData::InventoryLocation' has a wrong offset!");
static_assert(offsetof(FEquipmentMetaData, EquipmentType) == 0x000008, "Member 'FEquipmentMetaData::EquipmentType' has a wrong offset!");
static_assert(offsetof(FEquipmentMetaData, WaterAmount) == 0x00000C, "Member 'FEquipmentMetaData::WaterAmount' has a wrong offset!");
static_assert(offsetof(FEquipmentMetaData, bHidden) == 0x000010, "Member 'FEquipmentMetaData::bHidden' has a wrong offset!");

// ScriptStruct Palia.EquipmentItem
// 0x0050 (0x0050 - 0x0000)
struct FEquipmentItem final
{
public:
	struct FEquipmentMetaData                     ItemMetaData;                                      // 0x0000(0x0014)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AF[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0018(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEquipViewActor*>                SpawnedActors;                                     // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquipmentItem) == 0x000008, "Wrong alignment on FEquipmentItem");
static_assert(sizeof(FEquipmentItem) == 0x000050, "Wrong size on FEquipmentItem");
static_assert(offsetof(FEquipmentItem, ItemMetaData) == 0x000000, "Member 'FEquipmentItem::ItemMetaData' has a wrong offset!");
static_assert(offsetof(FEquipmentItem, ItemType) == 0x000018, "Member 'FEquipmentItem::ItemType' has a wrong offset!");
static_assert(offsetof(FEquipmentItem, SpawnedActors) == 0x000040, "Member 'FEquipmentItem::SpawnedActors' has a wrong offset!");

// ScriptStruct Palia.CinematicManifestConfig
// 0x0008 (0x0010 - 0x0008)
struct FCinematicManifestConfig final : public FTableRowBase
{
public:
	class UCinematicSequenceConfig*               CinematicConfig;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCinematicManifestConfig) == 0x000008, "Wrong alignment on FCinematicManifestConfig");
static_assert(sizeof(FCinematicManifestConfig) == 0x000010, "Wrong size on FCinematicManifestConfig");
static_assert(offsetof(FCinematicManifestConfig, CinematicConfig) == 0x000008, "Member 'FCinematicManifestConfig::CinematicConfig' has a wrong offset!");

// ScriptStruct Palia.FishNibbleBatch
// 0x0020 (0x0020 - 0x0000)
struct FFishNibbleBatch final
{
public:
	TArray<float>                                 Nibbles;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFishingNibbleLevel>                   NibbleLevels_Deprecated;                           // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishNibbleBatch) == 0x000008, "Wrong alignment on FFishNibbleBatch");
static_assert(sizeof(FFishNibbleBatch) == 0x000020, "Wrong size on FFishNibbleBatch");
static_assert(offsetof(FFishNibbleBatch, Nibbles) == 0x000000, "Member 'FFishNibbleBatch::Nibbles' has a wrong offset!");
static_assert(offsetof(FFishNibbleBatch, NibbleLevels_Deprecated) == 0x000010, "Member 'FFishNibbleBatch::NibbleLevels_Deprecated' has a wrong offset!");

// ScriptStruct Palia.FishingMiniGameViewState
// 0x0120 (0x0120 - 0x0000)
struct FFishingMiniGameViewState final
{
public:
	EFishingMiniGameState                         State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFishingMiniGameResult                        EndState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B0[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimState                             AnimState;                                         // 0x0004(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B1[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             World;                                             // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateLerp;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeZoneOffset;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SafeZoneLength;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamage;                                         // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHp;                                             // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B2[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   FishBlueprint;                                     // 0x0098(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNibblingPhase;                                   // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B3[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NibbleTime;                                        // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFishNibbleBatch>               NibbleBatches;                                     // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsBiting;                                          // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReelButtonHeld;                                    // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B4[0x2];                                     // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BobberPosition;                                    // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RodPosition;                                       // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JumpEndTimeMs;                                     // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsJumping;                                         // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B5[0x3];                                     // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Damage;                                            // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hp;                                                // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToShore;                                   // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FishSpeed;                                         // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeMs;                                            // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CastPosition;                                      // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeEncouraged;                                  // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldStruggle;                                   // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B6[0x6];                                     // 0x011A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishingMiniGameViewState) == 0x000010, "Wrong alignment on FFishingMiniGameViewState");
static_assert(sizeof(FFishingMiniGameViewState) == 0x000120, "Wrong size on FFishingMiniGameViewState");
static_assert(offsetof(FFishingMiniGameViewState, State) == 0x000000, "Member 'FFishingMiniGameViewState::State' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, EndState) == 0x000001, "Member 'FFishingMiniGameViewState::EndState' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, AnimState) == 0x000004, "Member 'FFishingMiniGameViewState::AnimState' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, World) == 0x000020, "Member 'FFishingMiniGameViewState::World' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, StateLerp) == 0x000080, "Member 'FFishingMiniGameViewState::StateLerp' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, SafeZoneOffset) == 0x000084, "Member 'FFishingMiniGameViewState::SafeZoneOffset' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, SafeZoneLength) == 0x000088, "Member 'FFishingMiniGameViewState::SafeZoneLength' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, MaxDamage) == 0x00008C, "Member 'FFishingMiniGameViewState::MaxDamage' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, MaxHp) == 0x000090, "Member 'FFishingMiniGameViewState::MaxHp' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, FishBlueprint) == 0x000098, "Member 'FFishingMiniGameViewState::FishBlueprint' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, IsNibblingPhase) == 0x0000C0, "Member 'FFishingMiniGameViewState::IsNibblingPhase' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, NibbleTime) == 0x0000C4, "Member 'FFishingMiniGameViewState::NibbleTime' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, NibbleBatches) == 0x0000C8, "Member 'FFishingMiniGameViewState::NibbleBatches' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, IsBiting) == 0x0000D8, "Member 'FFishingMiniGameViewState::IsBiting' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, ReelButtonHeld) == 0x0000D9, "Member 'FFishingMiniGameViewState::ReelButtonHeld' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, BobberPosition) == 0x0000DC, "Member 'FFishingMiniGameViewState::BobberPosition' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, RodPosition) == 0x0000E0, "Member 'FFishingMiniGameViewState::RodPosition' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, JumpEndTimeMs) == 0x0000E4, "Member 'FFishingMiniGameViewState::JumpEndTimeMs' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, IsJumping) == 0x0000E8, "Member 'FFishingMiniGameViewState::IsJumping' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, Damage) == 0x0000EC, "Member 'FFishingMiniGameViewState::Damage' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, Hp) == 0x0000F0, "Member 'FFishingMiniGameViewState::Hp' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, DistanceToShore) == 0x0000F4, "Member 'FFishingMiniGameViewState::DistanceToShore' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, FishSpeed) == 0x0000F8, "Member 'FFishingMiniGameViewState::FishSpeed' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, TimeMs) == 0x0000FC, "Member 'FFishingMiniGameViewState::TimeMs' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, CastPosition) == 0x000100, "Member 'FFishingMiniGameViewState::CastPosition' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, bCanBeEncouraged) == 0x000118, "Member 'FFishingMiniGameViewState::bCanBeEncouraged' has a wrong offset!");
static_assert(offsetof(FFishingMiniGameViewState, bShouldStruggle) == 0x000119, "Member 'FFishingMiniGameViewState::bShouldStruggle' has a wrong offset!");

// ScriptStruct Palia.VAL_PersistDataCondition
// 0x0001 (0x0001 - 0x0000)
struct FVAL_PersistDataCondition final
{
public:
	uint8                                         Pad_21B7[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_PersistDataCondition) == 0x000001, "Wrong alignment on FVAL_PersistDataCondition");
static_assert(sizeof(FVAL_PersistDataCondition) == 0x000001, "Wrong size on FVAL_PersistDataCondition");

// ScriptStruct Palia.StoresGlobalConfig
// 0x0048 (0x0048 - 0x0000)
struct FStoresGlobalConfig final
{
public:
	struct FNotification                          RequirementsFailNotification;                      // 0x0000(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   RecipeRequirementDisplayFormat;                    // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoresGlobalConfig) == 0x000008, "Wrong alignment on FStoresGlobalConfig");
static_assert(sizeof(FStoresGlobalConfig) == 0x000048, "Wrong size on FStoresGlobalConfig");
static_assert(offsetof(FStoresGlobalConfig, RequirementsFailNotification) == 0x000000, "Member 'FStoresGlobalConfig::RequirementsFailNotification' has a wrong offset!");
static_assert(offsetof(FStoresGlobalConfig, RecipeRequirementDisplayFormat) == 0x000030, "Member 'FStoresGlobalConfig::RecipeRequirementDisplayFormat' has a wrong offset!");

// ScriptStruct Palia.VAL_ClientInteractableProp
// 0x0040 (0x0040 - 0x0000)
struct FVAL_ClientInteractableProp final
{
public:
	class AActor*                                 PropActor;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterAttachPoint                         AttachPoint;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B8[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaCharacter*                      InteractingPlayer;                                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        AttachParent;                                      // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21B9[0x20];                                    // 0x0020(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_ClientInteractableProp) == 0x000008, "Wrong alignment on FVAL_ClientInteractableProp");
static_assert(sizeof(FVAL_ClientInteractableProp) == 0x000040, "Wrong size on FVAL_ClientInteractableProp");
static_assert(offsetof(FVAL_ClientInteractableProp, PropActor) == 0x000000, "Member 'FVAL_ClientInteractableProp::PropActor' has a wrong offset!");
static_assert(offsetof(FVAL_ClientInteractableProp, AttachPoint) == 0x000008, "Member 'FVAL_ClientInteractableProp::AttachPoint' has a wrong offset!");
static_assert(offsetof(FVAL_ClientInteractableProp, InteractingPlayer) == 0x000010, "Member 'FVAL_ClientInteractableProp::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(FVAL_ClientInteractableProp, AttachParent) == 0x000018, "Member 'FVAL_ClientInteractableProp::AttachParent' has a wrong offset!");

// ScriptStruct Palia.WormFarmItemPersistData
// 0x0018 (0x0018 - 0x0000)
struct FWormFarmItemPersistData final
{
public:
	int64                                         ItemTimestamp;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormFarmItemPersistData) == 0x000008, "Wrong alignment on FWormFarmItemPersistData");
static_assert(sizeof(FWormFarmItemPersistData) == 0x000018, "Wrong size on FWormFarmItemPersistData");
static_assert(offsetof(FWormFarmItemPersistData, ItemTimestamp) == 0x000000, "Member 'FWormFarmItemPersistData::ItemTimestamp' has a wrong offset!");
static_assert(offsetof(FWormFarmItemPersistData, ItemType) == 0x000008, "Member 'FWormFarmItemPersistData::ItemType' has a wrong offset!");
static_assert(offsetof(FWormFarmItemPersistData, Slot) == 0x00000C, "Member 'FWormFarmItemPersistData::Slot' has a wrong offset!");
static_assert(offsetof(FWormFarmItemPersistData, Amount) == 0x000010, "Member 'FWormFarmItemPersistData::Amount' has a wrong offset!");
static_assert(offsetof(FWormFarmItemPersistData, QualityStars) == 0x000014, "Member 'FWormFarmItemPersistData::QualityStars' has a wrong offset!");

// ScriptStruct Palia.WormFarmPersistBlock
// 0x0068 (0x00A8 - 0x0040)
struct FWormFarmPersistBlock final : public FS6PersistBlock
{
public:
	TArray<int32>                                 FoodItemFlavorWeights;                             // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWormFarmItemPersistData>       CompostItems;                                      // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWormFarmItemPersistData>       FertilizerItems;                                   // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLarvaPersistData>              LarvaData;                                         // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	double                                        ProgressTowardsFertilizer;                         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CurrentLarvaExp;                                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentWormCount;                                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BA[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentFoodUnits;                                  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TimestampOfLastUpdate;                             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWormFarmPersistBlock) == 0x000008, "Wrong alignment on FWormFarmPersistBlock");
static_assert(sizeof(FWormFarmPersistBlock) == 0x0000A8, "Wrong size on FWormFarmPersistBlock");
static_assert(offsetof(FWormFarmPersistBlock, FoodItemFlavorWeights) == 0x000040, "Member 'FWormFarmPersistBlock::FoodItemFlavorWeights' has a wrong offset!");
static_assert(offsetof(FWormFarmPersistBlock, CompostItems) == 0x000050, "Member 'FWormFarmPersistBlock::CompostItems' has a wrong offset!");
static_assert(offsetof(FWormFarmPersistBlock, FertilizerItems) == 0x000060, "Member 'FWormFarmPersistBlock::FertilizerItems' has a wrong offset!");
static_assert(offsetof(FWormFarmPersistBlock, LarvaData) == 0x000070, "Member 'FWormFarmPersistBlock::LarvaData' has a wrong offset!");
static_assert(offsetof(FWormFarmPersistBlock, ProgressTowardsFertilizer) == 0x000080, "Member 'FWormFarmPersistBlock::ProgressTowardsFertilizer' has a wrong offset!");
static_assert(offsetof(FWormFarmPersistBlock, CurrentLarvaExp) == 0x000088, "Member 'FWormFarmPersistBlock::CurrentLarvaExp' has a wrong offset!");
static_assert(offsetof(FWormFarmPersistBlock, CurrentWormCount) == 0x000090, "Member 'FWormFarmPersistBlock::CurrentWormCount' has a wrong offset!");
static_assert(offsetof(FWormFarmPersistBlock, CurrentFoodUnits) == 0x000098, "Member 'FWormFarmPersistBlock::CurrentFoodUnits' has a wrong offset!");
static_assert(offsetof(FWormFarmPersistBlock, TimestampOfLastUpdate) == 0x0000A0, "Member 'FWormFarmPersistBlock::TimestampOfLastUpdate' has a wrong offset!");

// ScriptStruct Palia.TrackedItemInfo
// 0x013C (0x0148 - 0x000C)
struct FTrackedItemInfo final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_21BB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       OwnerNetworkId;                                    // 0x0018(0x0030)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceId;                                        // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BC[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Alignment;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MainIcon;                                          // 0x0060(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ActivityIcon;                                      // 0x0088(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              QuestIcon;                                         // 0x00B0(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseQuestIconOnCompass;                            // 0x00D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAppearAsInWorldMarker;                         // 0x00D9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnCompass;                                        // 0x00DA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSmallOnMap;                                       // 0x00DB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BD[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x00E0(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsTextOnly;                                       // 0x00F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanUserTrack;                                     // 0x00F9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowZOrder;                                        // 0x00FA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackedItemType                              Type;                                              // 0x00FB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BE[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Tooltip;                                           // 0x0100(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0118(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0130(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTrackedByResourceTrackerBuff;                   // 0x0134(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21BF[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxVisibleDistance;                                // 0x0138(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaRadius;                                        // 0x013C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldLocationContext                         WorldLocationContext;                              // 0x0140(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQuestTrackingAttached;                            // 0x0141(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasPinned;                                        // 0x0142(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C0[0x5];                                     // 0x0143(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackedItemInfo) == 0x000008, "Wrong alignment on FTrackedItemInfo");
static_assert(sizeof(FTrackedItemInfo) == 0x000148, "Wrong size on FTrackedItemInfo");
static_assert(offsetof(FTrackedItemInfo, Actor) == 0x000010, "Member 'FTrackedItemInfo::Actor' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, OwnerNetworkId) == 0x000018, "Member 'FTrackedItemInfo::OwnerNetworkId' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, InstanceId) == 0x000048, "Member 'FTrackedItemInfo::InstanceId' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, Alignment) == 0x000050, "Member 'FTrackedItemInfo::Alignment' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, MainIcon) == 0x000060, "Member 'FTrackedItemInfo::MainIcon' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, ActivityIcon) == 0x000088, "Member 'FTrackedItemInfo::ActivityIcon' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, QuestIcon) == 0x0000B0, "Member 'FTrackedItemInfo::QuestIcon' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, bUseQuestIconOnCompass) == 0x0000D8, "Member 'FTrackedItemInfo::bUseQuestIconOnCompass' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, bCanAppearAsInWorldMarker) == 0x0000D9, "Member 'FTrackedItemInfo::bCanAppearAsInWorldMarker' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, bOnCompass) == 0x0000DA, "Member 'FTrackedItemInfo::bOnCompass' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, bSmallOnMap) == 0x0000DB, "Member 'FTrackedItemInfo::bSmallOnMap' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, DisplayText) == 0x0000E0, "Member 'FTrackedItemInfo::DisplayText' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, bIsTextOnly) == 0x0000F8, "Member 'FTrackedItemInfo::bIsTextOnly' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, bCanUserTrack) == 0x0000F9, "Member 'FTrackedItemInfo::bCanUserTrack' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, bLowZOrder) == 0x0000FA, "Member 'FTrackedItemInfo::bLowZOrder' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, Type) == 0x0000FB, "Member 'FTrackedItemInfo::Type' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, Tooltip) == 0x000100, "Member 'FTrackedItemInfo::Tooltip' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, Location) == 0x000118, "Member 'FTrackedItemInfo::Location' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, Yaw) == 0x000130, "Member 'FTrackedItemInfo::Yaw' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, bIsTrackedByResourceTrackerBuff) == 0x000134, "Member 'FTrackedItemInfo::bIsTrackedByResourceTrackerBuff' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, MaxVisibleDistance) == 0x000138, "Member 'FTrackedItemInfo::MaxVisibleDistance' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, AreaRadius) == 0x00013C, "Member 'FTrackedItemInfo::AreaRadius' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, WorldLocationContext) == 0x000140, "Member 'FTrackedItemInfo::WorldLocationContext' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, bQuestTrackingAttached) == 0x000141, "Member 'FTrackedItemInfo::bQuestTrackingAttached' has a wrong offset!");
static_assert(offsetof(FTrackedItemInfo, bWasPinned) == 0x000142, "Member 'FTrackedItemInfo::bWasPinned' has a wrong offset!");

// ScriptStruct Palia.WorldTerrainPlaceables
// 0x0050 (0x0050 - 0x0000)
struct FWorldTerrainPlaceables final
{
public:
	TSet<class AActor*>                           ActorsPlaced;                                      // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldTerrainPlaceables) == 0x000008, "Wrong alignment on FWorldTerrainPlaceables");
static_assert(sizeof(FWorldTerrainPlaceables) == 0x000050, "Wrong size on FWorldTerrainPlaceables");
static_assert(offsetof(FWorldTerrainPlaceables, ActorsPlaced) == 0x000000, "Member 'FWorldTerrainPlaceables::ActorsPlaced' has a wrong offset!");

// ScriptStruct Palia.LootEvent
// 0x0028 (0x0028 - 0x0000)
struct FLootEvent final
{
public:
	TArray<struct FQuestReward>                   Rewards;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class AValeriaCharacter*                      Character;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootInstigatorName;                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootEvent) == 0x000008, "Wrong alignment on FLootEvent");
static_assert(sizeof(FLootEvent) == 0x000028, "Wrong size on FLootEvent");
static_assert(offsetof(FLootEvent, Rewards) == 0x000000, "Member 'FLootEvent::Rewards' has a wrong offset!");
static_assert(offsetof(FLootEvent, Character) == 0x000010, "Member 'FLootEvent::Character' has a wrong offset!");
static_assert(offsetof(FLootEvent, LootInstigatorName) == 0x000018, "Member 'FLootEvent::LootInstigatorName' has a wrong offset!");

// ScriptStruct Palia.LootPoolConfig
// 0x0018 (0x0020 - 0x0008)
struct FLootPoolConfig final : public FTableRowBase
{
public:
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C1[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLootConfig>                    LootPool;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootPoolConfig) == 0x000008, "Wrong alignment on FLootPoolConfig");
static_assert(sizeof(FLootPoolConfig) == 0x000020, "Wrong size on FLootPoolConfig");
static_assert(offsetof(FLootPoolConfig, bEnabled) == 0x000008, "Member 'FLootPoolConfig::bEnabled' has a wrong offset!");
static_assert(offsetof(FLootPoolConfig, LootPool) == 0x000010, "Member 'FLootPoolConfig::LootPool' has a wrong offset!");

// ScriptStruct Palia.BoundsOnGrid
// 0x0010 (0x0010 - 0x0000)
struct FBoundsOnGrid final
{
public:
	int32                                         StartRow;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCol;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRows;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCols;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoundsOnGrid) == 0x000004, "Wrong alignment on FBoundsOnGrid");
static_assert(sizeof(FBoundsOnGrid) == 0x000010, "Wrong size on FBoundsOnGrid");
static_assert(offsetof(FBoundsOnGrid, StartRow) == 0x000000, "Member 'FBoundsOnGrid::StartRow' has a wrong offset!");
static_assert(offsetof(FBoundsOnGrid, StartCol) == 0x000004, "Member 'FBoundsOnGrid::StartCol' has a wrong offset!");
static_assert(offsetof(FBoundsOnGrid, NumRows) == 0x000008, "Member 'FBoundsOnGrid::NumRows' has a wrong offset!");
static_assert(offsetof(FBoundsOnGrid, NumCols) == 0x00000C, "Member 'FBoundsOnGrid::NumCols' has a wrong offset!");

// ScriptStruct Palia.GardeningWeedingMinigameGlobalConfig
// 0x0060 (0x0060 - 0x0000)
struct FGardeningWeedingMinigameGlobalConfig final
{
public:
	EGardeningWeedingMinigameInteractStyle        InteractStyle;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReachEdgeRestartEnable;                            // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C2[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GoalSizeEasy;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoalSizeHard;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C3[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              GoalPositionRangeEasy;                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GoalPositionRangeHard;                             // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerLineSizeEasy;                                // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerLineSizeHard;                                // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerLineStartPosition;                           // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RingSpeedEasy;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RingSpeedHard;                                     // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateDurationIntroFirstSec;                        // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateDurationIntroSecEasy;                         // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateDurationIntroSecHard;                         // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateDurationFailSec;                              // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateDurationSuccessSec;                           // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RingSpeedCurve;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardeningWeedingMinigameGlobalConfig) == 0x000008, "Wrong alignment on FGardeningWeedingMinigameGlobalConfig");
static_assert(sizeof(FGardeningWeedingMinigameGlobalConfig) == 0x000060, "Wrong size on FGardeningWeedingMinigameGlobalConfig");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, InteractStyle) == 0x000000, "Member 'FGardeningWeedingMinigameGlobalConfig::InteractStyle' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, ReachEdgeRestartEnable) == 0x000001, "Member 'FGardeningWeedingMinigameGlobalConfig::ReachEdgeRestartEnable' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, GoalSizeEasy) == 0x000004, "Member 'FGardeningWeedingMinigameGlobalConfig::GoalSizeEasy' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, GoalSizeHard) == 0x000008, "Member 'FGardeningWeedingMinigameGlobalConfig::GoalSizeHard' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, GoalPositionRangeEasy) == 0x000010, "Member 'FGardeningWeedingMinigameGlobalConfig::GoalPositionRangeEasy' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, GoalPositionRangeHard) == 0x000020, "Member 'FGardeningWeedingMinigameGlobalConfig::GoalPositionRangeHard' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, PlayerLineSizeEasy) == 0x000030, "Member 'FGardeningWeedingMinigameGlobalConfig::PlayerLineSizeEasy' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, PlayerLineSizeHard) == 0x000034, "Member 'FGardeningWeedingMinigameGlobalConfig::PlayerLineSizeHard' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, PlayerLineStartPosition) == 0x000038, "Member 'FGardeningWeedingMinigameGlobalConfig::PlayerLineStartPosition' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, RingSpeedEasy) == 0x00003C, "Member 'FGardeningWeedingMinigameGlobalConfig::RingSpeedEasy' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, RingSpeedHard) == 0x000040, "Member 'FGardeningWeedingMinigameGlobalConfig::RingSpeedHard' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, StateDurationIntroFirstSec) == 0x000044, "Member 'FGardeningWeedingMinigameGlobalConfig::StateDurationIntroFirstSec' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, StateDurationIntroSecEasy) == 0x000048, "Member 'FGardeningWeedingMinigameGlobalConfig::StateDurationIntroSecEasy' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, StateDurationIntroSecHard) == 0x00004C, "Member 'FGardeningWeedingMinigameGlobalConfig::StateDurationIntroSecHard' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, StateDurationFailSec) == 0x000050, "Member 'FGardeningWeedingMinigameGlobalConfig::StateDurationFailSec' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, StateDurationSuccessSec) == 0x000054, "Member 'FGardeningWeedingMinigameGlobalConfig::StateDurationSuccessSec' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingMinigameGlobalConfig, RingSpeedCurve) == 0x000058, "Member 'FGardeningWeedingMinigameGlobalConfig::RingSpeedCurve' has a wrong offset!");

// ScriptStruct Palia.VAL_TimerGameplayEventSpecification
// 0x0008 (0x0008 - 0x0000)
struct FVAL_TimerGameplayEventSpecification final
{
public:
	ETimerEventType                               EventType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Seconds;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_TimerGameplayEventSpecification) == 0x000004, "Wrong alignment on FVAL_TimerGameplayEventSpecification");
static_assert(sizeof(FVAL_TimerGameplayEventSpecification) == 0x000008, "Wrong size on FVAL_TimerGameplayEventSpecification");
static_assert(offsetof(FVAL_TimerGameplayEventSpecification, EventType) == 0x000000, "Member 'FVAL_TimerGameplayEventSpecification::EventType' has a wrong offset!");
static_assert(offsetof(FVAL_TimerGameplayEventSpecification, Seconds) == 0x000004, "Member 'FVAL_TimerGameplayEventSpecification::Seconds' has a wrong offset!");

// ScriptStruct Palia.GardeningCompanionConfig
// 0x0050 (0x0050 - 0x0000)
struct FGardeningCompanionConfig final
{
public:
	TMap<EPlantSize, int32>                       NumNeighborsToApplyBuff;                           // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardeningCompanionConfig) == 0x000008, "Wrong alignment on FGardeningCompanionConfig");
static_assert(sizeof(FGardeningCompanionConfig) == 0x000050, "Wrong size on FGardeningCompanionConfig");
static_assert(offsetof(FGardeningCompanionConfig, NumNeighborsToApplyBuff) == 0x000000, "Member 'FGardeningCompanionConfig::NumNeighborsToApplyBuff' has a wrong offset!");

// ScriptStruct Palia.BuffGameplayEffectToApplyOnHit
// 0x0030 (0x0030 - 0x0000)
struct FBuffGameplayEffectToApplyOnHit final
{
public:
	struct FGameplayTagContainer                  TagsRequired;                                      // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectToApply;                             // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameplayEffectLevel;                               // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C5[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffGameplayEffectToApplyOnHit) == 0x000008, "Wrong alignment on FBuffGameplayEffectToApplyOnHit");
static_assert(sizeof(FBuffGameplayEffectToApplyOnHit) == 0x000030, "Wrong size on FBuffGameplayEffectToApplyOnHit");
static_assert(offsetof(FBuffGameplayEffectToApplyOnHit, TagsRequired) == 0x000000, "Member 'FBuffGameplayEffectToApplyOnHit::TagsRequired' has a wrong offset!");
static_assert(offsetof(FBuffGameplayEffectToApplyOnHit, GameplayEffectToApply) == 0x000020, "Member 'FBuffGameplayEffectToApplyOnHit::GameplayEffectToApply' has a wrong offset!");
static_assert(offsetof(FBuffGameplayEffectToApplyOnHit, GameplayEffectLevel) == 0x000028, "Member 'FBuffGameplayEffectToApplyOnHit::GameplayEffectLevel' has a wrong offset!");

// ScriptStruct Palia.BuffConfig
// 0x0090 (0x0098 - 0x0008)
struct FBuffConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C6[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DisplayDescription;                                // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DurationSecs;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C7[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffDisplayType                              DisplayType;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C8[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GameplayEffectToApply;                             // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBuffGameplayEffectToApplyOnHit> GameplayEffectsToApplyOnHit;                       // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EBuffEffect                                   Effect;                                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C9[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectQuantifierPercent;                           // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuffStackingRule                             StackingRule;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CA[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackingPriority;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuffGroupConfig*                       BuffGroup;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Persist;                                           // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeRemovedByPlayer;                             // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CB[0x2];                                     // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxStacks;                                         // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StrengthLevel;                                     // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CC[0x4];                                     // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffConfig) == 0x000008, "Wrong alignment on FBuffConfig");
static_assert(sizeof(FBuffConfig) == 0x000098, "Wrong size on FBuffConfig");
static_assert(offsetof(FBuffConfig, PersistId) == 0x000008, "Member 'FBuffConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FBuffConfig, DisplayName) == 0x000010, "Member 'FBuffConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FBuffConfig, DisplayDescription) == 0x000028, "Member 'FBuffConfig::DisplayDescription' has a wrong offset!");
static_assert(offsetof(FBuffConfig, DurationSecs) == 0x000040, "Member 'FBuffConfig::DurationSecs' has a wrong offset!");
static_assert(offsetof(FBuffConfig, Icon) == 0x000048, "Member 'FBuffConfig::Icon' has a wrong offset!");
static_assert(offsetof(FBuffConfig, DisplayType) == 0x000050, "Member 'FBuffConfig::DisplayType' has a wrong offset!");
static_assert(offsetof(FBuffConfig, GameplayEffectToApply) == 0x000058, "Member 'FBuffConfig::GameplayEffectToApply' has a wrong offset!");
static_assert(offsetof(FBuffConfig, GameplayEffectsToApplyOnHit) == 0x000060, "Member 'FBuffConfig::GameplayEffectsToApplyOnHit' has a wrong offset!");
static_assert(offsetof(FBuffConfig, Effect) == 0x000070, "Member 'FBuffConfig::Effect' has a wrong offset!");
static_assert(offsetof(FBuffConfig, EffectQuantifierPercent) == 0x000074, "Member 'FBuffConfig::EffectQuantifierPercent' has a wrong offset!");
static_assert(offsetof(FBuffConfig, StackingRule) == 0x000078, "Member 'FBuffConfig::StackingRule' has a wrong offset!");
static_assert(offsetof(FBuffConfig, StackingPriority) == 0x00007C, "Member 'FBuffConfig::StackingPriority' has a wrong offset!");
static_assert(offsetof(FBuffConfig, BuffGroup) == 0x000080, "Member 'FBuffConfig::BuffGroup' has a wrong offset!");
static_assert(offsetof(FBuffConfig, Persist) == 0x000088, "Member 'FBuffConfig::Persist' has a wrong offset!");
static_assert(offsetof(FBuffConfig, bCanBeRemovedByPlayer) == 0x000089, "Member 'FBuffConfig::bCanBeRemovedByPlayer' has a wrong offset!");
static_assert(offsetof(FBuffConfig, MaxStacks) == 0x00008C, "Member 'FBuffConfig::MaxStacks' has a wrong offset!");
static_assert(offsetof(FBuffConfig, StrengthLevel) == 0x000090, "Member 'FBuffConfig::StrengthLevel' has a wrong offset!");

// ScriptStruct Palia.InventoryChange
// 0x0030 (0x0030 - 0x0000)
struct FInventoryChange final
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0000(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CD[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryChange) == 0x000008, "Wrong alignment on FInventoryChange");
static_assert(sizeof(FInventoryChange) == 0x000030, "Wrong size on FInventoryChange");
static_assert(offsetof(FInventoryChange, ItemType) == 0x000000, "Member 'FInventoryChange::ItemType' has a wrong offset!");
static_assert(offsetof(FInventoryChange, Amount) == 0x000028, "Member 'FInventoryChange::Amount' has a wrong offset!");

// ScriptStruct Palia.Mail
// 0x0078 (0x0078 - 0x0000)
struct FMail final
{
public:
	EMailType                                     MailType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MailId;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReadStatus                                   ReadStatus;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionableState                              ActionableState;                                   // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMailSenderType                               MailSenderType;                                    // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CF[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SenderId;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecipientUserId;                                   // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessageContent;                                    // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInventoryChange>               ExchangeItems;                                     // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              SentDateTime;                                      // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireDateTime;                                    // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastUpdatedDateTime;                               // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMail) == 0x000008, "Wrong alignment on FMail");
static_assert(sizeof(FMail) == 0x000078, "Wrong size on FMail");
static_assert(offsetof(FMail, MailType) == 0x000000, "Member 'FMail::MailType' has a wrong offset!");
static_assert(offsetof(FMail, MailId) == 0x000008, "Member 'FMail::MailId' has a wrong offset!");
static_assert(offsetof(FMail, ReadStatus) == 0x000018, "Member 'FMail::ReadStatus' has a wrong offset!");
static_assert(offsetof(FMail, ActionableState) == 0x000019, "Member 'FMail::ActionableState' has a wrong offset!");
static_assert(offsetof(FMail, MailSenderType) == 0x00001A, "Member 'FMail::MailSenderType' has a wrong offset!");
static_assert(offsetof(FMail, SenderId) == 0x000020, "Member 'FMail::SenderId' has a wrong offset!");
static_assert(offsetof(FMail, RecipientUserId) == 0x000030, "Member 'FMail::RecipientUserId' has a wrong offset!");
static_assert(offsetof(FMail, MessageContent) == 0x000040, "Member 'FMail::MessageContent' has a wrong offset!");
static_assert(offsetof(FMail, ExchangeItems) == 0x000050, "Member 'FMail::ExchangeItems' has a wrong offset!");
static_assert(offsetof(FMail, SentDateTime) == 0x000060, "Member 'FMail::SentDateTime' has a wrong offset!");
static_assert(offsetof(FMail, ExpireDateTime) == 0x000068, "Member 'FMail::ExpireDateTime' has a wrong offset!");
static_assert(offsetof(FMail, LastUpdatedDateTime) == 0x000070, "Member 'FMail::LastUpdatedDateTime' has a wrong offset!");

// ScriptStruct Palia.Mailbox
// 0x0010 (0x0010 - 0x0000)
struct FMailbox final
{
public:
	TArray<struct FMail>                          Items;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMailbox) == 0x000008, "Wrong alignment on FMailbox");
static_assert(sizeof(FMailbox) == 0x000010, "Wrong size on FMailbox");
static_assert(offsetof(FMailbox, Items) == 0x000000, "Member 'FMailbox::Items' has a wrong offset!");

// ScriptStruct Palia.MapAreaTransformation_SpawnedActor
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FMapAreaTransformation_SpawnedActor final
{
public:
	uint8                                         Pad_21D0[0x40];                                    // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapAreaTransformation_SpawnedActor) == 0x000008, "Wrong alignment on FMapAreaTransformation_SpawnedActor");
static_assert(sizeof(FMapAreaTransformation_SpawnedActor) == 0x000040, "Wrong size on FMapAreaTransformation_SpawnedActor");

// ScriptStruct Palia.ErrorModalConfig
// 0x0098 (0x00A0 - 0x0008)
struct FErrorModalConfig final : public FTableRowBase
{
public:
	class FText                                   ErrorText;                                         // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ButtonText;                                        // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SubErrorText;                                      // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                ErrorContainerPadding;                             // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                ErrorTextPadding;                                  // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMargin                                TitleTextPadding;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ButtonMinimumDesiredWidth;                         // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D1[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FErrorModalConfig) == 0x000008, "Wrong alignment on FErrorModalConfig");
static_assert(sizeof(FErrorModalConfig) == 0x0000A0, "Wrong size on FErrorModalConfig");
static_assert(offsetof(FErrorModalConfig, ErrorText) == 0x000008, "Member 'FErrorModalConfig::ErrorText' has a wrong offset!");
static_assert(offsetof(FErrorModalConfig, TitleText) == 0x000020, "Member 'FErrorModalConfig::TitleText' has a wrong offset!");
static_assert(offsetof(FErrorModalConfig, ButtonText) == 0x000038, "Member 'FErrorModalConfig::ButtonText' has a wrong offset!");
static_assert(offsetof(FErrorModalConfig, SubErrorText) == 0x000050, "Member 'FErrorModalConfig::SubErrorText' has a wrong offset!");
static_assert(offsetof(FErrorModalConfig, ErrorContainerPadding) == 0x000068, "Member 'FErrorModalConfig::ErrorContainerPadding' has a wrong offset!");
static_assert(offsetof(FErrorModalConfig, ErrorTextPadding) == 0x000078, "Member 'FErrorModalConfig::ErrorTextPadding' has a wrong offset!");
static_assert(offsetof(FErrorModalConfig, TitleTextPadding) == 0x000088, "Member 'FErrorModalConfig::TitleTextPadding' has a wrong offset!");
static_assert(offsetof(FErrorModalConfig, ButtonMinimumDesiredWidth) == 0x000098, "Member 'FErrorModalConfig::ButtonMinimumDesiredWidth' has a wrong offset!");

// ScriptStruct Palia.ArcadeReplayFrame
// 0x0028 (0x0028 - 0x0000)
struct FArcadeReplayFrame final
{
public:
	TArray<struct FArcadeInputState>              Inputs;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         FrameIndex;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ReplayId;                                          // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D2[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArcadeReplayFrame) == 0x000008, "Wrong alignment on FArcadeReplayFrame");
static_assert(sizeof(FArcadeReplayFrame) == 0x000028, "Wrong size on FArcadeReplayFrame");
static_assert(offsetof(FArcadeReplayFrame, Inputs) == 0x000000, "Member 'FArcadeReplayFrame::Inputs' has a wrong offset!");
static_assert(offsetof(FArcadeReplayFrame, FrameIndex) == 0x000010, "Member 'FArcadeReplayFrame::FrameIndex' has a wrong offset!");
static_assert(offsetof(FArcadeReplayFrame, ReplayId) == 0x000014, "Member 'FArcadeReplayFrame::ReplayId' has a wrong offset!");

// ScriptStruct Palia.MailboxFilter
// 0x0030 (0x0030 - 0x0000)
struct FMailboxFilter final
{
public:
	TArray<EReadStatus>                           ExcludedReadStatuses;                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EActionableState>                      ExcludedActionStates;                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EMailType>                             ExcludedMailTypes;                                 // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMailboxFilter) == 0x000008, "Wrong alignment on FMailboxFilter");
static_assert(sizeof(FMailboxFilter) == 0x000030, "Wrong size on FMailboxFilter");
static_assert(offsetof(FMailboxFilter, ExcludedReadStatuses) == 0x000000, "Member 'FMailboxFilter::ExcludedReadStatuses' has a wrong offset!");
static_assert(offsetof(FMailboxFilter, ExcludedActionStates) == 0x000010, "Member 'FMailboxFilter::ExcludedActionStates' has a wrong offset!");
static_assert(offsetof(FMailboxFilter, ExcludedMailTypes) == 0x000020, "Member 'FMailboxFilter::ExcludedMailTypes' has a wrong offset!");

// ScriptStruct Palia.ControlMessage
// 0x0028 (0x0070 - 0x0048)
struct FControlMessage final : public FMessage
{
public:
	EControlMessageType                           ControlMessageType;                                // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D3[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Content;                                           // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FromWorldName;                                     // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FControlMessage) == 0x000008, "Wrong alignment on FControlMessage");
static_assert(sizeof(FControlMessage) == 0x000070, "Wrong size on FControlMessage");
static_assert(offsetof(FControlMessage, ControlMessageType) == 0x000048, "Member 'FControlMessage::ControlMessageType' has a wrong offset!");
static_assert(offsetof(FControlMessage, Content) == 0x000050, "Member 'FControlMessage::Content' has a wrong offset!");
static_assert(offsetof(FControlMessage, FromWorldName) == 0x000060, "Member 'FControlMessage::FromWorldName' has a wrong offset!");

// ScriptStruct Palia.Presence
// 0x00B0 (0x00B0 - 0x0000)
struct FPresence final
{
public:
	struct FUniqueNetIdRepl                       ID;                                                // 0x0000(0x0030)(Edit, BlueprintVisible, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_PresenceStatus                           Status;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D4[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FromServerName;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatusString;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterId;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERedirectsPlatform                            Platform;                                          // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D5[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerExternalPlatformId;                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerExternalPlatformName;                        // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresence) == 0x000008, "Wrong alignment on FPresence");
static_assert(sizeof(FPresence) == 0x0000B0, "Wrong size on FPresence");
static_assert(offsetof(FPresence, ID) == 0x000000, "Member 'FPresence::ID' has a wrong offset!");
static_assert(offsetof(FPresence, Status) == 0x000030, "Member 'FPresence::Status' has a wrong offset!");
static_assert(offsetof(FPresence, FromServerName) == 0x000038, "Member 'FPresence::FromServerName' has a wrong offset!");
static_assert(offsetof(FPresence, MapName) == 0x000048, "Member 'FPresence::MapName' has a wrong offset!");
static_assert(offsetof(FPresence, StatusString) == 0x000058, "Member 'FPresence::StatusString' has a wrong offset!");
static_assert(offsetof(FPresence, CharacterId) == 0x000068, "Member 'FPresence::CharacterId' has a wrong offset!");
static_assert(offsetof(FPresence, CharacterName) == 0x000078, "Member 'FPresence::CharacterName' has a wrong offset!");
static_assert(offsetof(FPresence, Platform) == 0x000088, "Member 'FPresence::Platform' has a wrong offset!");
static_assert(offsetof(FPresence, PlayerExternalPlatformId) == 0x000090, "Member 'FPresence::PlayerExternalPlatformId' has a wrong offset!");
static_assert(offsetof(FPresence, PlayerExternalPlatformName) == 0x0000A0, "Member 'FPresence::PlayerExternalPlatformName' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_MaterialParamOverrides
// 0x00F8 (0x00F8 - 0x0000)
struct FVAL_CharacterCustomization_MaterialParamOverrides final
{
public:
	class FName                                   MaterialSlotName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      ScalarOverrides;                                   // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UTexture2D>> TextureOverrides;                                  // 0x0058(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        VectorOverrides;                                   // 0x00A8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_MaterialParamOverrides) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_MaterialParamOverrides");
static_assert(sizeof(FVAL_CharacterCustomization_MaterialParamOverrides) == 0x0000F8, "Wrong size on FVAL_CharacterCustomization_MaterialParamOverrides");
static_assert(offsetof(FVAL_CharacterCustomization_MaterialParamOverrides, MaterialSlotName) == 0x000000, "Member 'FVAL_CharacterCustomization_MaterialParamOverrides::MaterialSlotName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_MaterialParamOverrides, ScalarOverrides) == 0x000008, "Member 'FVAL_CharacterCustomization_MaterialParamOverrides::ScalarOverrides' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_MaterialParamOverrides, TextureOverrides) == 0x000058, "Member 'FVAL_CharacterCustomization_MaterialParamOverrides::TextureOverrides' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_MaterialParamOverrides, VectorOverrides) == 0x0000A8, "Member 'FVAL_CharacterCustomization_MaterialParamOverrides::VectorOverrides' has a wrong offset!");

// ScriptStruct Palia.SimpleDecorExtraField
// 0x000C (0x000C - 0x0000)
struct FSimpleDecorExtraField final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleDecorExtraField) == 0x000004, "Wrong alignment on FSimpleDecorExtraField");
static_assert(sizeof(FSimpleDecorExtraField) == 0x00000C, "Wrong size on FSimpleDecorExtraField");
static_assert(offsetof(FSimpleDecorExtraField, Name) == 0x000000, "Member 'FSimpleDecorExtraField::Name' has a wrong offset!");
static_assert(offsetof(FSimpleDecorExtraField, IntValue) == 0x000008, "Member 'FSimpleDecorExtraField::IntValue' has a wrong offset!");

// ScriptStruct Palia.SimpleDecorPersistBlock
// 0x0050 (0x0090 - 0x0040)
struct FSimpleDecorPersistBlock final : public FS6PersistBlock
{
public:
	struct FGuid                                  ParentAnchorBlockId;                               // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnchorUniqueId;                                    // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Position;                                          // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Rotation;                                          // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemType;                                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TintPersistID;                                     // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SlotId;                                            // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D6[0x2];                                     // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSimpleDecorExtraField>         ExtraFields;                                       // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleDecorPersistBlock) == 0x000008, "Wrong alignment on FSimpleDecorPersistBlock");
static_assert(sizeof(FSimpleDecorPersistBlock) == 0x000090, "Wrong size on FSimpleDecorPersistBlock");
static_assert(offsetof(FSimpleDecorPersistBlock, ParentAnchorBlockId) == 0x000040, "Member 'FSimpleDecorPersistBlock::ParentAnchorBlockId' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPersistBlock, AnchorUniqueId) == 0x000050, "Member 'FSimpleDecorPersistBlock::AnchorUniqueId' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPersistBlock, Position) == 0x000060, "Member 'FSimpleDecorPersistBlock::Position' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPersistBlock, Rotation) == 0x00006C, "Member 'FSimpleDecorPersistBlock::Rotation' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPersistBlock, ItemType) == 0x000078, "Member 'FSimpleDecorPersistBlock::ItemType' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPersistBlock, TintPersistID) == 0x00007C, "Member 'FSimpleDecorPersistBlock::TintPersistID' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPersistBlock, SlotId) == 0x00007D, "Member 'FSimpleDecorPersistBlock::SlotId' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPersistBlock, ExtraFields) == 0x000080, "Member 'FSimpleDecorPersistBlock::ExtraFields' has a wrong offset!");

// ScriptStruct Palia.HousingPlayerDataSerializeItem
// 0x0044 (0x0050 - 0x000C)
struct FHousingPlayerDataSerializeItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_21D7[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       PlayerId;                                          // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwnerOnHousingPlot;                             // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHousingVisitationState                       VisitationState;                                   // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D8[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHousingOwnershipActor>  OwningHOA;                                         // 0x0044(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D9[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHousingPlayerDataSerializeItem) == 0x000008, "Wrong alignment on FHousingPlayerDataSerializeItem");
static_assert(sizeof(FHousingPlayerDataSerializeItem) == 0x000050, "Wrong size on FHousingPlayerDataSerializeItem");
static_assert(offsetof(FHousingPlayerDataSerializeItem, PlayerId) == 0x000010, "Member 'FHousingPlayerDataSerializeItem::PlayerId' has a wrong offset!");
static_assert(offsetof(FHousingPlayerDataSerializeItem, bIsOwnerOnHousingPlot) == 0x000040, "Member 'FHousingPlayerDataSerializeItem::bIsOwnerOnHousingPlot' has a wrong offset!");
static_assert(offsetof(FHousingPlayerDataSerializeItem, VisitationState) == 0x000041, "Member 'FHousingPlayerDataSerializeItem::VisitationState' has a wrong offset!");
static_assert(offsetof(FHousingPlayerDataSerializeItem, OwningHOA) == 0x000044, "Member 'FHousingPlayerDataSerializeItem::OwningHOA' has a wrong offset!");

// ScriptStruct Palia.ToolConfig
// 0x0028 (0x0030 - 0x0008)
struct FToolConfig final : public FTableRowBase
{
public:
	int32                                         NumberOfSlots;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractText;                                      // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CraftingTimeModifier;                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DB[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FToolConfig) == 0x000008, "Wrong alignment on FToolConfig");
static_assert(sizeof(FToolConfig) == 0x000030, "Wrong size on FToolConfig");
static_assert(offsetof(FToolConfig, NumberOfSlots) == 0x000008, "Member 'FToolConfig::NumberOfSlots' has a wrong offset!");
static_assert(offsetof(FToolConfig, InteractText) == 0x000010, "Member 'FToolConfig::InteractText' has a wrong offset!");
static_assert(offsetof(FToolConfig, CraftingTimeModifier) == 0x000028, "Member 'FToolConfig::CraftingTimeModifier' has a wrong offset!");

// ScriptStruct Palia.VAL_VisitCorrection
// 0x0050 (0x0050 - 0x0000)
struct FVAL_VisitCorrection final
{
public:
	TSoftObjectPtr<class UPrivateSpaceVillagerVisitConfig> Visit;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPrivateSpaceConfig>     PrivateSpace;                                      // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_VisitCorrection) == 0x000008, "Wrong alignment on FVAL_VisitCorrection");
static_assert(sizeof(FVAL_VisitCorrection) == 0x000050, "Wrong size on FVAL_VisitCorrection");
static_assert(offsetof(FVAL_VisitCorrection, Visit) == 0x000000, "Member 'FVAL_VisitCorrection::Visit' has a wrong offset!");
static_assert(offsetof(FVAL_VisitCorrection, PrivateSpace) == 0x000028, "Member 'FVAL_VisitCorrection::PrivateSpace' has a wrong offset!");

// ScriptStruct Palia.VAL_Prototype_BubbleSpawnInstance
// 0x0040 (0x0040 - 0x0000)
struct FVAL_Prototype_BubbleSpawnInstance final
{
public:
	float                                         SpawnAtTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SpawnOffset;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ActorToSpawn;                                      // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_Prototype_BubbleSpawnInstance) == 0x000008, "Wrong alignment on FVAL_Prototype_BubbleSpawnInstance");
static_assert(sizeof(FVAL_Prototype_BubbleSpawnInstance) == 0x000040, "Wrong size on FVAL_Prototype_BubbleSpawnInstance");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnInstance, SpawnAtTime) == 0x000000, "Member 'FVAL_Prototype_BubbleSpawnInstance::SpawnAtTime' has a wrong offset!");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnInstance, SpawnOffset) == 0x000008, "Member 'FVAL_Prototype_BubbleSpawnInstance::SpawnOffset' has a wrong offset!");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnInstance, ActorToSpawn) == 0x000018, "Member 'FVAL_Prototype_BubbleSpawnInstance::ActorToSpawn' has a wrong offset!");

// ScriptStruct Palia.VAL_Prototype_BubbleSpawnRound
// 0x0070 (0x0070 - 0x0000)
struct FVAL_Prototype_BubbleSpawnRound final
{
public:
	class FString                                 RoundID;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoundDuration;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DD[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVAL_Prototype_BubbleSpawnInstance> SpawnInstances;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FComponentReference                    SpawnerComponent;                                  // 0x0028(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         RoundCurrentTime;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DE[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RoundStartPos;                                     // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_Prototype_BubbleSpawnRound) == 0x000008, "Wrong alignment on FVAL_Prototype_BubbleSpawnRound");
static_assert(sizeof(FVAL_Prototype_BubbleSpawnRound) == 0x000070, "Wrong size on FVAL_Prototype_BubbleSpawnRound");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnRound, RoundID) == 0x000000, "Member 'FVAL_Prototype_BubbleSpawnRound::RoundID' has a wrong offset!");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnRound, RoundDuration) == 0x000010, "Member 'FVAL_Prototype_BubbleSpawnRound::RoundDuration' has a wrong offset!");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnRound, SpawnInstances) == 0x000018, "Member 'FVAL_Prototype_BubbleSpawnRound::SpawnInstances' has a wrong offset!");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnRound, SpawnerComponent) == 0x000028, "Member 'FVAL_Prototype_BubbleSpawnRound::SpawnerComponent' has a wrong offset!");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnRound, RoundCurrentTime) == 0x000050, "Member 'FVAL_Prototype_BubbleSpawnRound::RoundCurrentTime' has a wrong offset!");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnRound, RoundStartPos) == 0x000058, "Member 'FVAL_Prototype_BubbleSpawnRound::RoundStartPos' has a wrong offset!");

// ScriptStruct Palia.VillagerQuestPersist
// 0x0048 (0x0048 - 0x0000)
struct FVillagerQuestPersist final
{
public:
	int32                                         VillagerQuestConfigId;                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21DF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         StartedAtMs;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CompletedAtMs;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ActionsCompleted;                                  // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentStep;                                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCompleteable;                                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E0[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 GoalProgress;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHasPartiallyCompleted;                            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E1[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVillagerQuestPersist) == 0x000008, "Wrong alignment on FVillagerQuestPersist");
static_assert(sizeof(FVillagerQuestPersist) == 0x000048, "Wrong size on FVillagerQuestPersist");
static_assert(offsetof(FVillagerQuestPersist, VillagerQuestConfigId) == 0x000000, "Member 'FVillagerQuestPersist::VillagerQuestConfigId' has a wrong offset!");
static_assert(offsetof(FVillagerQuestPersist, StartedAtMs) == 0x000008, "Member 'FVillagerQuestPersist::StartedAtMs' has a wrong offset!");
static_assert(offsetof(FVillagerQuestPersist, CompletedAtMs) == 0x000010, "Member 'FVillagerQuestPersist::CompletedAtMs' has a wrong offset!");
static_assert(offsetof(FVillagerQuestPersist, ActionsCompleted) == 0x000018, "Member 'FVillagerQuestPersist::ActionsCompleted' has a wrong offset!");
static_assert(offsetof(FVillagerQuestPersist, CurrentStep) == 0x000028, "Member 'FVillagerQuestPersist::CurrentStep' has a wrong offset!");
static_assert(offsetof(FVillagerQuestPersist, IsCompleteable) == 0x00002C, "Member 'FVillagerQuestPersist::IsCompleteable' has a wrong offset!");
static_assert(offsetof(FVillagerQuestPersist, GoalProgress) == 0x000030, "Member 'FVillagerQuestPersist::GoalProgress' has a wrong offset!");
static_assert(offsetof(FVillagerQuestPersist, bHasPartiallyCompleted) == 0x000040, "Member 'FVillagerQuestPersist::bHasPartiallyCompleted' has a wrong offset!");

// ScriptStruct Palia.ValeriaPausedTime
// 0x0010 (0x0010 - 0x0000)
struct FValeriaPausedTime final
{
public:
	bool                                          bIsPaused;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TimestampMs;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaPausedTime) == 0x000008, "Wrong alignment on FValeriaPausedTime");
static_assert(sizeof(FValeriaPausedTime) == 0x000010, "Wrong size on FValeriaPausedTime");
static_assert(offsetof(FValeriaPausedTime, bIsPaused) == 0x000000, "Member 'FValeriaPausedTime::bIsPaused' has a wrong offset!");
static_assert(offsetof(FValeriaPausedTime, TimestampMs) == 0x000008, "Member 'FValeriaPausedTime::TimestampMs' has a wrong offset!");

// ScriptStruct Palia.ValeriaAudioSettings
// 0x0014 (0x0014 - 0x0000)
struct FValeriaAudioSettings final
{
public:
	float                                         OverallVolume;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundVolume;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MusicVolume;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DialogueVolume;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPanningRule                                  AudioPanningRule;                                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioMixProfiles                             AudioMixProfile;                                   // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MuteWhenNotInFocus;                                // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E3[0x1];                                     // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaAudioSettings) == 0x000004, "Wrong alignment on FValeriaAudioSettings");
static_assert(sizeof(FValeriaAudioSettings) == 0x000014, "Wrong size on FValeriaAudioSettings");
static_assert(offsetof(FValeriaAudioSettings, OverallVolume) == 0x000000, "Member 'FValeriaAudioSettings::OverallVolume' has a wrong offset!");
static_assert(offsetof(FValeriaAudioSettings, SoundVolume) == 0x000004, "Member 'FValeriaAudioSettings::SoundVolume' has a wrong offset!");
static_assert(offsetof(FValeriaAudioSettings, MusicVolume) == 0x000008, "Member 'FValeriaAudioSettings::MusicVolume' has a wrong offset!");
static_assert(offsetof(FValeriaAudioSettings, DialogueVolume) == 0x00000C, "Member 'FValeriaAudioSettings::DialogueVolume' has a wrong offset!");
static_assert(offsetof(FValeriaAudioSettings, AudioPanningRule) == 0x000010, "Member 'FValeriaAudioSettings::AudioPanningRule' has a wrong offset!");
static_assert(offsetof(FValeriaAudioSettings, AudioMixProfile) == 0x000011, "Member 'FValeriaAudioSettings::AudioMixProfile' has a wrong offset!");
static_assert(offsetof(FValeriaAudioSettings, MuteWhenNotInFocus) == 0x000012, "Member 'FValeriaAudioSettings::MuteWhenNotInFocus' has a wrong offset!");

// ScriptStruct Palia.ItemUpgradeMapping
// 0x0010 (0x0010 - 0x0000)
struct FItemUpgradeMapping final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           ItemTypeOld;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           ItemTypeUpgraded;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemUpgradeMapping) == 0x000008, "Wrong alignment on FItemUpgradeMapping");
static_assert(sizeof(FItemUpgradeMapping) == 0x000010, "Wrong size on FItemUpgradeMapping");
static_assert(offsetof(FItemUpgradeMapping, ItemTypeOld) == 0x000000, "Member 'FItemUpgradeMapping::ItemTypeOld' has a wrong offset!");
static_assert(offsetof(FItemUpgradeMapping, ItemTypeUpgraded) == 0x000008, "Member 'FItemUpgradeMapping::ItemTypeUpgraded' has a wrong offset!");

// ScriptStruct Palia.ValeriaGraphicSettings
// 0x0008 (0x0008 - 0x0000)
struct FValeriaGraphicSettings final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gamma;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaGraphicSettings) == 0x000004, "Wrong alignment on FValeriaGraphicSettings");
static_assert(sizeof(FValeriaGraphicSettings) == 0x000008, "Wrong size on FValeriaGraphicSettings");
static_assert(offsetof(FValeriaGraphicSettings, FOV) == 0x000000, "Member 'FValeriaGraphicSettings::FOV' has a wrong offset!");
static_assert(offsetof(FValeriaGraphicSettings, Gamma) == 0x000004, "Member 'FValeriaGraphicSettings::Gamma' has a wrong offset!");

// ScriptStruct Palia.ValeriaMenuSettings
// 0x0058 (0x0058 - 0x0000)
struct FValeriaMenuSettings final
{
public:
	TMap<EVAL_QuestCategory, bool>                QuestCategoriesExpanded;                           // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	bool                                          CompletedQuestCategoryExpanded;                    // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E4[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastSelectedQuestId;                               // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaMenuSettings) == 0x000008, "Wrong alignment on FValeriaMenuSettings");
static_assert(sizeof(FValeriaMenuSettings) == 0x000058, "Wrong size on FValeriaMenuSettings");
static_assert(offsetof(FValeriaMenuSettings, QuestCategoriesExpanded) == 0x000000, "Member 'FValeriaMenuSettings::QuestCategoriesExpanded' has a wrong offset!");
static_assert(offsetof(FValeriaMenuSettings, CompletedQuestCategoryExpanded) == 0x000050, "Member 'FValeriaMenuSettings::CompletedQuestCategoryExpanded' has a wrong offset!");
static_assert(offsetof(FValeriaMenuSettings, LastSelectedQuestId) == 0x000054, "Member 'FValeriaMenuSettings::LastSelectedQuestId' has a wrong offset!");

// ScriptStruct Palia.AIThreat
// 0x0010 (0x0010 - 0x0000)
struct FAIThreat final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIThreat) == 0x000008, "Wrong alignment on FAIThreat");
static_assert(sizeof(FAIThreat) == 0x000010, "Wrong size on FAIThreat");
static_assert(offsetof(FAIThreat, Actor) == 0x000000, "Member 'FAIThreat::Actor' has a wrong offset!");
static_assert(offsetof(FAIThreat, Level) == 0x000008, "Member 'FAIThreat::Level' has a wrong offset!");
static_assert(offsetof(FAIThreat, Distance) == 0x00000C, "Member 'FAIThreat::Distance' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_SkinMaterialSet
// 0x0070 (0x0070 - 0x0000)
struct FVAL_CharacterCustomization_SkinMaterialSet final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      HeadSkinMaterial;                                  // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      BodySkinMaterial;                                  // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVAL_CharacterCustomization_MaterialParamOverrides> HeadMaterialParamOverrides;                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVAL_CharacterCustomization_MaterialParamOverrides> BodyMaterialParamOverrides;                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_SkinMaterialSet) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_SkinMaterialSet");
static_assert(sizeof(FVAL_CharacterCustomization_SkinMaterialSet) == 0x000070, "Wrong size on FVAL_CharacterCustomization_SkinMaterialSet");
static_assert(offsetof(FVAL_CharacterCustomization_SkinMaterialSet, HeadSkinMaterial) == 0x000000, "Member 'FVAL_CharacterCustomization_SkinMaterialSet::HeadSkinMaterial' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_SkinMaterialSet, BodySkinMaterial) == 0x000028, "Member 'FVAL_CharacterCustomization_SkinMaterialSet::BodySkinMaterial' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_SkinMaterialSet, HeadMaterialParamOverrides) == 0x000050, "Member 'FVAL_CharacterCustomization_SkinMaterialSet::HeadMaterialParamOverrides' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_SkinMaterialSet, BodyMaterialParamOverrides) == 0x000060, "Member 'FVAL_CharacterCustomization_SkinMaterialSet::BodyMaterialParamOverrides' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_SkinTone_PerBodyTypeConfig
// 0x0080 (0x00E8 - 0x0068)
struct FVAL_CharacterCustomizationItem_SkinTone_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	struct FLinearColor                           UIPreviewColor;                                    // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVAL_CharacterCustomization_SkinMaterialSet SkinMaterialSet;                                   // 0x0078(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_SkinTone_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_SkinTone_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_SkinTone_PerBodyTypeConfig) == 0x0000E8, "Wrong size on FVAL_CharacterCustomizationItem_SkinTone_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_SkinTone_PerBodyTypeConfig, UIPreviewColor) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_SkinTone_PerBodyTypeConfig::UIPreviewColor' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_SkinTone_PerBodyTypeConfig, SkinMaterialSet) == 0x000078, "Member 'FVAL_CharacterCustomizationItem_SkinTone_PerBodyTypeConfig::SkinMaterialSet' has a wrong offset!");

// ScriptStruct Palia.VillagerRelationshipChange
// 0x0010 (0x0010 - 0x0000)
struct FVillagerRelationshipChange final
{
public:
	int32                                         VillagerCoreId;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountChanged;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelationshipType                             Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewLevelReached;                                  // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E5[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewLevel;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerRelationshipChange) == 0x000004, "Wrong alignment on FVillagerRelationshipChange");
static_assert(sizeof(FVillagerRelationshipChange) == 0x000010, "Wrong size on FVillagerRelationshipChange");
static_assert(offsetof(FVillagerRelationshipChange, VillagerCoreId) == 0x000000, "Member 'FVillagerRelationshipChange::VillagerCoreId' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipChange, AmountChanged) == 0x000004, "Member 'FVillagerRelationshipChange::AmountChanged' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipChange, Type) == 0x000008, "Member 'FVillagerRelationshipChange::Type' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipChange, bNewLevelReached) == 0x000009, "Member 'FVillagerRelationshipChange::bNewLevelReached' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipChange, NewLevel) == 0x00000C, "Member 'FVillagerRelationshipChange::NewLevel' has a wrong offset!");

// ScriptStruct Palia.VAL_ChatProximityEntity
// 0x0028 (0x0028 - 0x0000)
struct FVAL_ChatProximityEntity final
{
public:
	struct FGuid                                  AccountId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterId;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Pawn;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_ChatProximityEntity) == 0x000008, "Wrong alignment on FVAL_ChatProximityEntity");
static_assert(sizeof(FVAL_ChatProximityEntity) == 0x000028, "Wrong size on FVAL_ChatProximityEntity");
static_assert(offsetof(FVAL_ChatProximityEntity, AccountId) == 0x000000, "Member 'FVAL_ChatProximityEntity::AccountId' has a wrong offset!");
static_assert(offsetof(FVAL_ChatProximityEntity, CharacterId) == 0x000010, "Member 'FVAL_ChatProximityEntity::CharacterId' has a wrong offset!");
static_assert(offsetof(FVAL_ChatProximityEntity, Pawn) == 0x000020, "Member 'FVAL_ChatProximityEntity::Pawn' has a wrong offset!");

// ScriptStruct Palia.SeedConfig
// 0x00A8 (0x00A8 - 0x0000)
struct FSeedConfig final
{
public:
	EPlantSize                                    PlantSize;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBePlanted;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E6[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DaysRequiredToHarvest;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepeatHarvest;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E7[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxRepeatHarvests;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DaysRequiredToReharvest;                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastReharvestMeshDay;                              // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             ReharvestMesh;                                     // 0x0018(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGrowthPhase>                   GrowthPhases;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                MeshOffset;                                        // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PlantIcon;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> HarvestItemType;                                   // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             HarvestRewards;                                    // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSeedConfig) == 0x000008, "Wrong alignment on FSeedConfig");
static_assert(sizeof(FSeedConfig) == 0x0000A8, "Wrong size on FSeedConfig");
static_assert(offsetof(FSeedConfig, PlantSize) == 0x000000, "Member 'FSeedConfig::PlantSize' has a wrong offset!");
static_assert(offsetof(FSeedConfig, bCanBePlanted) == 0x000001, "Member 'FSeedConfig::bCanBePlanted' has a wrong offset!");
static_assert(offsetof(FSeedConfig, DaysRequiredToHarvest) == 0x000004, "Member 'FSeedConfig::DaysRequiredToHarvest' has a wrong offset!");
static_assert(offsetof(FSeedConfig, bRepeatHarvest) == 0x000008, "Member 'FSeedConfig::bRepeatHarvest' has a wrong offset!");
static_assert(offsetof(FSeedConfig, MaxRepeatHarvests) == 0x00000C, "Member 'FSeedConfig::MaxRepeatHarvests' has a wrong offset!");
static_assert(offsetof(FSeedConfig, DaysRequiredToReharvest) == 0x000010, "Member 'FSeedConfig::DaysRequiredToReharvest' has a wrong offset!");
static_assert(offsetof(FSeedConfig, LastReharvestMeshDay) == 0x000014, "Member 'FSeedConfig::LastReharvestMeshDay' has a wrong offset!");
static_assert(offsetof(FSeedConfig, ReharvestMesh) == 0x000018, "Member 'FSeedConfig::ReharvestMesh' has a wrong offset!");
static_assert(offsetof(FSeedConfig, GrowthPhases) == 0x000040, "Member 'FSeedConfig::GrowthPhases' has a wrong offset!");
static_assert(offsetof(FSeedConfig, MeshOffset) == 0x000050, "Member 'FSeedConfig::MeshOffset' has a wrong offset!");
static_assert(offsetof(FSeedConfig, PlantIcon) == 0x000068, "Member 'FSeedConfig::PlantIcon' has a wrong offset!");
static_assert(offsetof(FSeedConfig, HarvestItemType) == 0x000070, "Member 'FSeedConfig::HarvestItemType' has a wrong offset!");
static_assert(offsetof(FSeedConfig, HarvestRewards) == 0x000098, "Member 'FSeedConfig::HarvestRewards' has a wrong offset!");

// ScriptStruct Palia.VAL_FoliageData
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FVAL_FoliageData final
{
public:
	uint8                                         Pad_21E8[0xF0];                                    // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_FoliageData) == 0x000010, "Wrong alignment on FVAL_FoliageData");
static_assert(sizeof(FVAL_FoliageData) == 0x0000F0, "Wrong size on FVAL_FoliageData");

// ScriptStruct Palia.ComplexRecipeIngredient
// 0x0030 (0x0030 - 0x0000)
struct FComplexRecipeIngredient final
{
public:
	int32                                         UniqueID;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  OwningPlayerId;                                    // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CarryingPlayerId;                                  // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SellValueOfInputs;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCarried;                                        // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E9[0x3];                                     // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComplexRecipeIngredient) == 0x000004, "Wrong alignment on FComplexRecipeIngredient");
static_assert(sizeof(FComplexRecipeIngredient) == 0x000030, "Wrong size on FComplexRecipeIngredient");
static_assert(offsetof(FComplexRecipeIngredient, UniqueID) == 0x000000, "Member 'FComplexRecipeIngredient::UniqueID' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredient, OwningPlayerId) == 0x000004, "Member 'FComplexRecipeIngredient::OwningPlayerId' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredient, CarryingPlayerId) == 0x000014, "Member 'FComplexRecipeIngredient::CarryingPlayerId' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredient, QualityStars) == 0x000024, "Member 'FComplexRecipeIngredient::QualityStars' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredient, SellValueOfInputs) == 0x000028, "Member 'FComplexRecipeIngredient::SellValueOfInputs' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredient, bIsCarried) == 0x00002C, "Member 'FComplexRecipeIngredient::bIsCarried' has a wrong offset!");

// ScriptStruct Palia.ComplexRecipeIngredientSet
// 0x0038 (0x0038 - 0x0000)
struct FComplexRecipeIngredientSet final
{
public:
	int32                                         ItemPersistId;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrafterPersistId;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ItemIcon;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FComplexRecipeIngredient>       Shelved;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FComplexRecipeIngredient>       InPlay;                                            // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShelvedHasStarQuality;                            // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntermediate;                                     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EA[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComplexRecipeIngredientSet) == 0x000008, "Wrong alignment on FComplexRecipeIngredientSet");
static_assert(sizeof(FComplexRecipeIngredientSet) == 0x000038, "Wrong size on FComplexRecipeIngredientSet");
static_assert(offsetof(FComplexRecipeIngredientSet, ItemPersistId) == 0x000000, "Member 'FComplexRecipeIngredientSet::ItemPersistId' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredientSet, CrafterPersistId) == 0x000004, "Member 'FComplexRecipeIngredientSet::CrafterPersistId' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredientSet, ItemIcon) == 0x000008, "Member 'FComplexRecipeIngredientSet::ItemIcon' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredientSet, Shelved) == 0x000010, "Member 'FComplexRecipeIngredientSet::Shelved' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredientSet, InPlay) == 0x000020, "Member 'FComplexRecipeIngredientSet::InPlay' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredientSet, bShelvedHasStarQuality) == 0x000030, "Member 'FComplexRecipeIngredientSet::bShelvedHasStarQuality' has a wrong offset!");
static_assert(offsetof(FComplexRecipeIngredientSet, bIntermediate) == 0x000031, "Member 'FComplexRecipeIngredientSet::bIntermediate' has a wrong offset!");

// ScriptStruct Palia.ComplexRecipeMinigame
// 0x0004 (0x0004 - 0x0000)
struct FComplexRecipeMinigame final
{
public:
	float                                         SuccessPercent;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComplexRecipeMinigame) == 0x000004, "Wrong alignment on FComplexRecipeMinigame");
static_assert(sizeof(FComplexRecipeMinigame) == 0x000004, "Wrong size on FComplexRecipeMinigame");
static_assert(offsetof(FComplexRecipeMinigame, SuccessPercent) == 0x000000, "Member 'FComplexRecipeMinigame::SuccessPercent' has a wrong offset!");

// ScriptStruct Palia.AddedIngredient
// 0x0078 (0x0078 - 0x0000)
struct FAddedIngredient final
{
public:
	struct FValeriaItem                           Item;                                              // 0x0000(0x0060)(NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerId;                                          // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIntermediate;                                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EB[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAddedIngredient) == 0x000008, "Wrong alignment on FAddedIngredient");
static_assert(sizeof(FAddedIngredient) == 0x000078, "Wrong size on FAddedIngredient");
static_assert(offsetof(FAddedIngredient, Item) == 0x000000, "Member 'FAddedIngredient::Item' has a wrong offset!");
static_assert(offsetof(FAddedIngredient, PlayerId) == 0x000060, "Member 'FAddedIngredient::PlayerId' has a wrong offset!");
static_assert(offsetof(FAddedIngredient, bIntermediate) == 0x000070, "Member 'FAddedIngredient::bIntermediate' has a wrong offset!");

// ScriptStruct Palia.ComplexRecipeRecord
// 0x0070 (0x0070 - 0x0000)
struct FComplexRecipeRecord final
{
public:
	int32                                         RecipeId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillType                                    SkillType;                                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCrafterComponent*                      OwningCrafter;                                     // 0x0008(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrafterConfigId;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21ED[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FComplexRecipeCrafter>          Crafters;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FComplexRecipeIngredientSet>    Ingredients;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FComplexRecipeMinigame>         Minigames;                                         // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAddedIngredient>               UsedItems;                                         // 0x0048(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComplexRecipeState                           State;                                             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumeStarQualityIngredients;                    // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EE[0x6];                                     // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComplexRecipeRecord) == 0x000008, "Wrong alignment on FComplexRecipeRecord");
static_assert(sizeof(FComplexRecipeRecord) == 0x000070, "Wrong size on FComplexRecipeRecord");
static_assert(offsetof(FComplexRecipeRecord, RecipeId) == 0x000000, "Member 'FComplexRecipeRecord::RecipeId' has a wrong offset!");
static_assert(offsetof(FComplexRecipeRecord, SkillType) == 0x000004, "Member 'FComplexRecipeRecord::SkillType' has a wrong offset!");
static_assert(offsetof(FComplexRecipeRecord, OwningCrafter) == 0x000008, "Member 'FComplexRecipeRecord::OwningCrafter' has a wrong offset!");
static_assert(offsetof(FComplexRecipeRecord, CrafterConfigId) == 0x000010, "Member 'FComplexRecipeRecord::CrafterConfigId' has a wrong offset!");
static_assert(offsetof(FComplexRecipeRecord, Crafters) == 0x000018, "Member 'FComplexRecipeRecord::Crafters' has a wrong offset!");
static_assert(offsetof(FComplexRecipeRecord, Ingredients) == 0x000028, "Member 'FComplexRecipeRecord::Ingredients' has a wrong offset!");
static_assert(offsetof(FComplexRecipeRecord, Minigames) == 0x000038, "Member 'FComplexRecipeRecord::Minigames' has a wrong offset!");
static_assert(offsetof(FComplexRecipeRecord, UsedItems) == 0x000048, "Member 'FComplexRecipeRecord::UsedItems' has a wrong offset!");
static_assert(offsetof(FComplexRecipeRecord, SessionId) == 0x000058, "Member 'FComplexRecipeRecord::SessionId' has a wrong offset!");
static_assert(offsetof(FComplexRecipeRecord, State) == 0x000068, "Member 'FComplexRecipeRecord::State' has a wrong offset!");
static_assert(offsetof(FComplexRecipeRecord, bConsumeStarQualityIngredients) == 0x000069, "Member 'FComplexRecipeRecord::bConsumeStarQualityIngredients' has a wrong offset!");

// ScriptStruct Palia.VAL_CharCustomization_CosmeticTagData
// 0x0020 (0x0028 - 0x0008)
struct FVAL_CharCustomization_CosmeticTagData final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EVAL_CharacterCustomization_CosmeticTagType   TagType;                                           // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EF[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_CharCustomization_CosmeticTagData) == 0x000008, "Wrong alignment on FVAL_CharCustomization_CosmeticTagData");
static_assert(sizeof(FVAL_CharCustomization_CosmeticTagData) == 0x000028, "Wrong size on FVAL_CharCustomization_CosmeticTagData");
static_assert(offsetof(FVAL_CharCustomization_CosmeticTagData, DisplayName) == 0x000008, "Member 'FVAL_CharCustomization_CosmeticTagData::DisplayName' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_CosmeticTagData, TagType) == 0x000020, "Member 'FVAL_CharCustomization_CosmeticTagData::TagType' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_CosmeticTagFilterStruct
// 0x0038 (0x0038 - 0x0000)
struct FVAL_CharacterCustomization_CosmeticTagFilterStruct final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVAL_CharCustomization_CosmeticTagData TagData;                                           // 0x0010(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_CosmeticTagFilterStruct) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_CosmeticTagFilterStruct");
static_assert(sizeof(FVAL_CharacterCustomization_CosmeticTagFilterStruct) == 0x000038, "Wrong size on FVAL_CharacterCustomization_CosmeticTagFilterStruct");
static_assert(offsetof(FVAL_CharacterCustomization_CosmeticTagFilterStruct, TagName) == 0x000000, "Member 'FVAL_CharacterCustomization_CosmeticTagFilterStruct::TagName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_CosmeticTagFilterStruct, TagData) == 0x000010, "Member 'FVAL_CharacterCustomization_CosmeticTagFilterStruct::TagData' has a wrong offset!");

// ScriptStruct Palia.VAL_CharCustomization_FilteringSettings
// 0x00C8 (0x00C8 - 0x0000)
struct FVAL_CharCustomization_FilteringSettings final
{
public:
	EVAL_CharacterBodyType                        BodyType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TSoftObjectPtr<class UVAL_CharacterCustomizationItemBase>> FilteringItems;                                    // 0x0008(0x0050)(Edit, BlueprintVisible, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<TSubclassOf<class UVAL_CharacterCustomizationItemBase>> ItemClasses;                                       // 0x0058(0x0050)(Edit, BlueprintVisible, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 SearchString;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVAL_CharacterCustomization_CosmeticTagFilterStruct> FilteringTags;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharCustomization_FilteringSettings) == 0x000008, "Wrong alignment on FVAL_CharCustomization_FilteringSettings");
static_assert(sizeof(FVAL_CharCustomization_FilteringSettings) == 0x0000C8, "Wrong size on FVAL_CharCustomization_FilteringSettings");
static_assert(offsetof(FVAL_CharCustomization_FilteringSettings, BodyType) == 0x000000, "Member 'FVAL_CharCustomization_FilteringSettings::BodyType' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_FilteringSettings, FilteringItems) == 0x000008, "Member 'FVAL_CharCustomization_FilteringSettings::FilteringItems' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_FilteringSettings, ItemClasses) == 0x000058, "Member 'FVAL_CharCustomization_FilteringSettings::ItemClasses' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_FilteringSettings, SearchString) == 0x0000A8, "Member 'FVAL_CharCustomization_FilteringSettings::SearchString' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_FilteringSettings, FilteringTags) == 0x0000B8, "Member 'FVAL_CharCustomization_FilteringSettings::FilteringTags' has a wrong offset!");

// ScriptStruct Palia.NearbyCreatureReqSubConfig
// 0x0018 (0x0018 - 0x0000)
struct FNearbyCreatureReqSubConfig final
{
public:
	struct FDataTableRowHandle                    RequiredCreature;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DistanceToCheck;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F1[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNearbyCreatureReqSubConfig) == 0x000008, "Wrong alignment on FNearbyCreatureReqSubConfig");
static_assert(sizeof(FNearbyCreatureReqSubConfig) == 0x000018, "Wrong size on FNearbyCreatureReqSubConfig");
static_assert(offsetof(FNearbyCreatureReqSubConfig, RequiredCreature) == 0x000000, "Member 'FNearbyCreatureReqSubConfig::RequiredCreature' has a wrong offset!");
static_assert(offsetof(FNearbyCreatureReqSubConfig, DistanceToCheck) == 0x000010, "Member 'FNearbyCreatureReqSubConfig::DistanceToCheck' has a wrong offset!");

// ScriptStruct Palia.FishingLevelNibbleLevelConfig
// 0x0010 (0x0018 - 0x0008)
struct FFishingLevelNibbleLevelConfig final : public FTableRowBase
{
public:
	TArray<struct FDataTableRowHandle>            FishNibbleConfigs;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingLevelNibbleLevelConfig) == 0x000008, "Wrong alignment on FFishingLevelNibbleLevelConfig");
static_assert(sizeof(FFishingLevelNibbleLevelConfig) == 0x000018, "Wrong size on FFishingLevelNibbleLevelConfig");
static_assert(offsetof(FFishingLevelNibbleLevelConfig, FishNibbleConfigs) == 0x000008, "Member 'FFishingLevelNibbleLevelConfig::FishNibbleConfigs' has a wrong offset!");

// ScriptStruct Palia.NearbyGatherableItemReqSubConfig
// 0x0010 (0x0010 - 0x0000)
struct FNearbyGatherableItemReqSubConfig final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           RequiredItemTypeFromGatherable;                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToCheck;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F2[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNearbyGatherableItemReqSubConfig) == 0x000008, "Wrong alignment on FNearbyGatherableItemReqSubConfig");
static_assert(sizeof(FNearbyGatherableItemReqSubConfig) == 0x000010, "Wrong size on FNearbyGatherableItemReqSubConfig");
static_assert(offsetof(FNearbyGatherableItemReqSubConfig, RequiredItemTypeFromGatherable) == 0x000000, "Member 'FNearbyGatherableItemReqSubConfig::RequiredItemTypeFromGatherable' has a wrong offset!");
static_assert(offsetof(FNearbyGatherableItemReqSubConfig, DistanceToCheck) == 0x000008, "Member 'FNearbyGatherableItemReqSubConfig::DistanceToCheck' has a wrong offset!");

// ScriptStruct Palia.CinematicSequenceOptions
// 0x0010 (0x0010 - 0x0000)
struct FCinematicSequenceOptions final
{
public:
	bool                                          bHidePlayer;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidePlayerOnClients;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsHUD;                                       // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsMovement;                                  // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsTurning;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideNPCs;                                         // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideOtherPlayers;                                 // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkippable;                                        // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideCreatures;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F3[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinSpecGraphicsLevel;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCinematicSequenceOptions) == 0x000004, "Wrong alignment on FCinematicSequenceOptions");
static_assert(sizeof(FCinematicSequenceOptions) == 0x000010, "Wrong size on FCinematicSequenceOptions");
static_assert(offsetof(FCinematicSequenceOptions, bHidePlayer) == 0x000000, "Member 'FCinematicSequenceOptions::bHidePlayer' has a wrong offset!");
static_assert(offsetof(FCinematicSequenceOptions, bHidePlayerOnClients) == 0x000001, "Member 'FCinematicSequenceOptions::bHidePlayerOnClients' has a wrong offset!");
static_assert(offsetof(FCinematicSequenceOptions, bAffectsHUD) == 0x000002, "Member 'FCinematicSequenceOptions::bAffectsHUD' has a wrong offset!");
static_assert(offsetof(FCinematicSequenceOptions, bAffectsMovement) == 0x000003, "Member 'FCinematicSequenceOptions::bAffectsMovement' has a wrong offset!");
static_assert(offsetof(FCinematicSequenceOptions, bAffectsTurning) == 0x000004, "Member 'FCinematicSequenceOptions::bAffectsTurning' has a wrong offset!");
static_assert(offsetof(FCinematicSequenceOptions, bHideNPCs) == 0x000005, "Member 'FCinematicSequenceOptions::bHideNPCs' has a wrong offset!");
static_assert(offsetof(FCinematicSequenceOptions, bHideOtherPlayers) == 0x000006, "Member 'FCinematicSequenceOptions::bHideOtherPlayers' has a wrong offset!");
static_assert(offsetof(FCinematicSequenceOptions, bSkippable) == 0x000007, "Member 'FCinematicSequenceOptions::bSkippable' has a wrong offset!");
static_assert(offsetof(FCinematicSequenceOptions, bHideCreatures) == 0x000008, "Member 'FCinematicSequenceOptions::bHideCreatures' has a wrong offset!");
static_assert(offsetof(FCinematicSequenceOptions, MinSpecGraphicsLevel) == 0x00000C, "Member 'FCinematicSequenceOptions::MinSpecGraphicsLevel' has a wrong offset!");

// ScriptStruct Palia.StoreRecipeIngredient
// 0x0028 (0x0028 - 0x0000)
struct FStoreRecipeIngredient final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F4[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoreRecipeIngredient) == 0x000008, "Wrong alignment on FStoreRecipeIngredient");
static_assert(sizeof(FStoreRecipeIngredient) == 0x000028, "Wrong size on FStoreRecipeIngredient");
static_assert(offsetof(FStoreRecipeIngredient, Icon) == 0x000000, "Member 'FStoreRecipeIngredient::Icon' has a wrong offset!");
static_assert(offsetof(FStoreRecipeIngredient, DisplayName) == 0x000008, "Member 'FStoreRecipeIngredient::DisplayName' has a wrong offset!");
static_assert(offsetof(FStoreRecipeIngredient, Quantity) == 0x000020, "Member 'FStoreRecipeIngredient::Quantity' has a wrong offset!");

// ScriptStruct Palia.StoreItem
// 0x00F8 (0x00F8 - 0x0000)
struct FStoreItem final
{
public:
	uint8                                         Pad_21F5[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FValeriaItem                           ValeriaItem;                                       // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         NumAvailable;                                      // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRecentlyBought;                                 // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CostText;                                          // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuyCurrency;                                       // 0x0094(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    BuyVital;                                          // 0x009C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F6[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> BuyItemType;                                       // 0x00A0(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRecipe;                                         // 0x00C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F7[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecipePersistId;                                   // 0x00CC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UiIndex;                                           // 0x00D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeetsPurchaseRequirements;                        // 0x00D4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELootFilterResult                             PurchaseRequirementsFilterResult;                  // 0x00D5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAfford;                                        // 0x00D6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F8[0x1];                                     // 0x00D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ComprehensiveRequirementText;                      // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStoreRecipeIngredient>         RecipeIngredients;                                 // 0x00E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreItem) == 0x000008, "Wrong alignment on FStoreItem");
static_assert(sizeof(FStoreItem) == 0x0000F8, "Wrong size on FStoreItem");
static_assert(offsetof(FStoreItem, ValeriaItem) == 0x000010, "Member 'FStoreItem::ValeriaItem' has a wrong offset!");
static_assert(offsetof(FStoreItem, NumAvailable) == 0x000070, "Member 'FStoreItem::NumAvailable' has a wrong offset!");
static_assert(offsetof(FStoreItem, NumRecentlyBought) == 0x000074, "Member 'FStoreItem::NumRecentlyBought' has a wrong offset!");
static_assert(offsetof(FStoreItem, CostText) == 0x000078, "Member 'FStoreItem::CostText' has a wrong offset!");
static_assert(offsetof(FStoreItem, Cost) == 0x000090, "Member 'FStoreItem::Cost' has a wrong offset!");
static_assert(offsetof(FStoreItem, BuyCurrency) == 0x000094, "Member 'FStoreItem::BuyCurrency' has a wrong offset!");
static_assert(offsetof(FStoreItem, BuyVital) == 0x00009C, "Member 'FStoreItem::BuyVital' has a wrong offset!");
static_assert(offsetof(FStoreItem, BuyItemType) == 0x0000A0, "Member 'FStoreItem::BuyItemType' has a wrong offset!");
static_assert(offsetof(FStoreItem, bIsRecipe) == 0x0000C8, "Member 'FStoreItem::bIsRecipe' has a wrong offset!");
static_assert(offsetof(FStoreItem, RecipePersistId) == 0x0000CC, "Member 'FStoreItem::RecipePersistId' has a wrong offset!");
static_assert(offsetof(FStoreItem, UiIndex) == 0x0000D0, "Member 'FStoreItem::UiIndex' has a wrong offset!");
static_assert(offsetof(FStoreItem, bMeetsPurchaseRequirements) == 0x0000D4, "Member 'FStoreItem::bMeetsPurchaseRequirements' has a wrong offset!");
static_assert(offsetof(FStoreItem, PurchaseRequirementsFilterResult) == 0x0000D5, "Member 'FStoreItem::PurchaseRequirementsFilterResult' has a wrong offset!");
static_assert(offsetof(FStoreItem, bCanAfford) == 0x0000D6, "Member 'FStoreItem::bCanAfford' has a wrong offset!");
static_assert(offsetof(FStoreItem, ComprehensiveRequirementText) == 0x0000D8, "Member 'FStoreItem::ComprehensiveRequirementText' has a wrong offset!");
static_assert(offsetof(FStoreItem, RecipeIngredients) == 0x0000E8, "Member 'FStoreItem::RecipeIngredients' has a wrong offset!");

// ScriptStruct Palia.VAL_GameplayEventListener
// 0x0028 (0x0028 - 0x0000)
struct FVAL_GameplayEventListener final
{
public:
	class UVAL_GameplayEvent*                     EventToMatch;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVAL_GameplayEventListenerId           ID;                                                // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F9[0x10];                                    // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_GameplayEventListener) == 0x000008, "Wrong alignment on FVAL_GameplayEventListener");
static_assert(sizeof(FVAL_GameplayEventListener) == 0x000028, "Wrong size on FVAL_GameplayEventListener");
static_assert(offsetof(FVAL_GameplayEventListener, EventToMatch) == 0x000000, "Member 'FVAL_GameplayEventListener::EventToMatch' has a wrong offset!");
static_assert(offsetof(FVAL_GameplayEventListener, ID) == 0x000008, "Member 'FVAL_GameplayEventListener::ID' has a wrong offset!");

// ScriptStruct Palia.VAL_GameplayEventListenerArray
// 0x0010 (0x0010 - 0x0000)
struct FVAL_GameplayEventListenerArray final
{
public:
	TArray<struct FVAL_GameplayEventListener>     Listeners;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_GameplayEventListenerArray) == 0x000008, "Wrong alignment on FVAL_GameplayEventListenerArray");
static_assert(sizeof(FVAL_GameplayEventListenerArray) == 0x000010, "Wrong size on FVAL_GameplayEventListenerArray");
static_assert(offsetof(FVAL_GameplayEventListenerArray, Listeners) == 0x000000, "Member 'FVAL_GameplayEventListenerArray::Listeners' has a wrong offset!");

// ScriptStruct Palia.CrafterConfig
// 0x00D8 (0x00E0 - 0x0008)
struct FCrafterConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CrafterName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CrafterPromptOverride;                             // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CurrentJobTextOverride;                            // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              HudIcon;                                           // 0x0058(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CrafterFToInteractText;                            // 0x0080(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESkillType                                    SkillType;                                         // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStarQuality;                                      // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiCraftCapable;                                // 0x009A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowIntermixingRegularAndStarQualityIngredients; // 0x009B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredLevel;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CraftTimeMultiplier;                               // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CraftTimeOverride;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrafterMode                                  Mode;                                              // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBurnsStuff;                                       // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideInWorldUIWhileCrafting;                       // 0x00AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPickupOnCraftingEnd;                          // 0x00AB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideRecipesUIPane;                                // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FB[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityToolConfig                     AbilityActivate;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAbilityToolConfig                     AbilityAddIngredient;                              // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FAbilityToolConfig                     AbilityCollect;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrafterConfig) == 0x000008, "Wrong alignment on FCrafterConfig");
static_assert(sizeof(FCrafterConfig) == 0x0000E0, "Wrong size on FCrafterConfig");
static_assert(offsetof(FCrafterConfig, PersistId) == 0x000008, "Member 'FCrafterConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, CrafterName) == 0x000010, "Member 'FCrafterConfig::CrafterName' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, CrafterPromptOverride) == 0x000028, "Member 'FCrafterConfig::CrafterPromptOverride' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, CurrentJobTextOverride) == 0x000040, "Member 'FCrafterConfig::CurrentJobTextOverride' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, HudIcon) == 0x000058, "Member 'FCrafterConfig::HudIcon' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, CrafterFToInteractText) == 0x000080, "Member 'FCrafterConfig::CrafterFToInteractText' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, SkillType) == 0x000098, "Member 'FCrafterConfig::SkillType' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, bStarQuality) == 0x000099, "Member 'FCrafterConfig::bStarQuality' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, bMultiCraftCapable) == 0x00009A, "Member 'FCrafterConfig::bMultiCraftCapable' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, bAllowIntermixingRegularAndStarQualityIngredients) == 0x00009B, "Member 'FCrafterConfig::bAllowIntermixingRegularAndStarQualityIngredients' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, RequiredLevel) == 0x00009C, "Member 'FCrafterConfig::RequiredLevel' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, CraftTimeMultiplier) == 0x0000A0, "Member 'FCrafterConfig::CraftTimeMultiplier' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, CraftTimeOverride) == 0x0000A4, "Member 'FCrafterConfig::CraftTimeOverride' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, Mode) == 0x0000A8, "Member 'FCrafterConfig::Mode' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, bBurnsStuff) == 0x0000A9, "Member 'FCrafterConfig::bBurnsStuff' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, bHideInWorldUIWhileCrafting) == 0x0000AA, "Member 'FCrafterConfig::bHideInWorldUIWhileCrafting' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, bAutoPickupOnCraftingEnd) == 0x0000AB, "Member 'FCrafterConfig::bAutoPickupOnCraftingEnd' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, bHideRecipesUIPane) == 0x0000AC, "Member 'FCrafterConfig::bHideRecipesUIPane' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, AbilityActivate) == 0x0000B0, "Member 'FCrafterConfig::AbilityActivate' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, AbilityAddIngredient) == 0x0000C0, "Member 'FCrafterConfig::AbilityAddIngredient' has a wrong offset!");
static_assert(offsetof(FCrafterConfig, AbilityCollect) == 0x0000D0, "Member 'FCrafterConfig::AbilityCollect' has a wrong offset!");

// ScriptStruct Palia.WeatherStateProperties
// 0x0028 (0x0028 - 0x0000)
struct FWeatherStateProperties final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameStates;                                        // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherStateProperties) == 0x000008, "Wrong alignment on FWeatherStateProperties");
static_assert(sizeof(FWeatherStateProperties) == 0x000028, "Wrong size on FWeatherStateProperties");
static_assert(offsetof(FWeatherStateProperties, Name) == 0x000000, "Member 'FWeatherStateProperties::Name' has a wrong offset!");
static_assert(offsetof(FWeatherStateProperties, GameStates) == 0x000008, "Member 'FWeatherStateProperties::GameStates' has a wrong offset!");

// ScriptStruct Palia.WeatherStateDateTime
// 0x0038 (0x0038 - 0x0000)
struct FWeatherStateDateTime final
{
public:
	int64                                         StartTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EndTime;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeatherStateProperties                WeatherState;                                      // 0x0010(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherStateDateTime) == 0x000008, "Wrong alignment on FWeatherStateDateTime");
static_assert(sizeof(FWeatherStateDateTime) == 0x000038, "Wrong size on FWeatherStateDateTime");
static_assert(offsetof(FWeatherStateDateTime, StartTime) == 0x000000, "Member 'FWeatherStateDateTime::StartTime' has a wrong offset!");
static_assert(offsetof(FWeatherStateDateTime, EndTime) == 0x000008, "Member 'FWeatherStateDateTime::EndTime' has a wrong offset!");
static_assert(offsetof(FWeatherStateDateTime, WeatherState) == 0x000010, "Member 'FWeatherStateDateTime::WeatherState' has a wrong offset!");

// ScriptStruct Palia.Friend
// 0x0058 (0x0058 - 0x0000)
struct FFriend final
{
public:
	struct FUniqueNetIdRepl                       ID;                                                // 0x0000(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RealName;                                          // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFriendStatus                                 Status;                                            // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FC[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFriend) == 0x000008, "Wrong alignment on FFriend");
static_assert(sizeof(FFriend) == 0x000058, "Wrong size on FFriend");
static_assert(offsetof(FFriend, ID) == 0x000000, "Member 'FFriend::ID' has a wrong offset!");
static_assert(offsetof(FFriend, DisplayName) == 0x000030, "Member 'FFriend::DisplayName' has a wrong offset!");
static_assert(offsetof(FFriend, RealName) == 0x000040, "Member 'FFriend::RealName' has a wrong offset!");
static_assert(offsetof(FFriend, Status) == 0x000050, "Member 'FFriend::Status' has a wrong offset!");

// ScriptStruct Palia.HotPotGameState
// 0x0030 (0x0030 - 0x0000)
struct FHotPotGameState final
{
public:
	int32                                         OwnedIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHotPotPlayerState>             PlayerStates;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumDrawTiles;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubgameState                                 CurrentState;                                      // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FE[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentTurnIndex;                                  // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundCount;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoStartTimestamp;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoStartSeconds;                                  // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHotPotGameState) == 0x000008, "Wrong alignment on FHotPotGameState");
static_assert(sizeof(FHotPotGameState) == 0x000030, "Wrong size on FHotPotGameState");
static_assert(offsetof(FHotPotGameState, OwnedIndex) == 0x000000, "Member 'FHotPotGameState::OwnedIndex' has a wrong offset!");
static_assert(offsetof(FHotPotGameState, PlayerStates) == 0x000008, "Member 'FHotPotGameState::PlayerStates' has a wrong offset!");
static_assert(offsetof(FHotPotGameState, NumDrawTiles) == 0x000018, "Member 'FHotPotGameState::NumDrawTiles' has a wrong offset!");
static_assert(offsetof(FHotPotGameState, CurrentState) == 0x00001C, "Member 'FHotPotGameState::CurrentState' has a wrong offset!");
static_assert(offsetof(FHotPotGameState, CurrentTurnIndex) == 0x000020, "Member 'FHotPotGameState::CurrentTurnIndex' has a wrong offset!");
static_assert(offsetof(FHotPotGameState, RoundCount) == 0x000024, "Member 'FHotPotGameState::RoundCount' has a wrong offset!");
static_assert(offsetof(FHotPotGameState, AutoStartTimestamp) == 0x000028, "Member 'FHotPotGameState::AutoStartTimestamp' has a wrong offset!");
static_assert(offsetof(FHotPotGameState, AutoStartSeconds) == 0x00002C, "Member 'FHotPotGameState::AutoStartSeconds' has a wrong offset!");

// ScriptStruct Palia.InventoryRequest
// 0x00D0 (0x00D0 - 0x0000)
struct FInventoryRequest final
{
public:
	struct FGuid                                  RequestID;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       RequesterId;                                       // 0x0010(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryRequestStatus                       Status;                                            // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21FF[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId;                                            // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0048(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCountPartial;                                  // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpiresAt;                                         // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       FillerId;                                          // 0x0088(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              FilledTime;                                        // 0x00B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilledStarQuality;                                 // 0x00C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStarQualityConstraint                 StarQualityConstraint;                             // 0x00C4(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2200[0x4];                                     // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryRequest) == 0x000008, "Wrong alignment on FInventoryRequest");
static_assert(sizeof(FInventoryRequest) == 0x0000D0, "Wrong size on FInventoryRequest");
static_assert(offsetof(FInventoryRequest, RequestID) == 0x000000, "Member 'FInventoryRequest::RequestID' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, RequesterId) == 0x000010, "Member 'FInventoryRequest::RequesterId' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, Status) == 0x000040, "Member 'FInventoryRequest::Status' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, ItemId) == 0x000044, "Member 'FInventoryRequest::ItemId' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, ItemType) == 0x000048, "Member 'FInventoryRequest::ItemType' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, ItemCount) == 0x000070, "Member 'FInventoryRequest::ItemCount' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, ItemCountPartial) == 0x000074, "Member 'FInventoryRequest::ItemCountPartial' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, CreatedAt) == 0x000078, "Member 'FInventoryRequest::CreatedAt' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, ExpiresAt) == 0x000080, "Member 'FInventoryRequest::ExpiresAt' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, FillerId) == 0x000088, "Member 'FInventoryRequest::FillerId' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, FilledTime) == 0x0000B8, "Member 'FInventoryRequest::FilledTime' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, FilledStarQuality) == 0x0000C0, "Member 'FInventoryRequest::FilledStarQuality' has a wrong offset!");
static_assert(offsetof(FInventoryRequest, StarQualityConstraint) == 0x0000C4, "Member 'FInventoryRequest::StarQualityConstraint' has a wrong offset!");

// ScriptStruct Palia.PrivateSpaceDestination
// 0x0010 (0x0010 - 0x0000)
struct FPrivateSpaceDestination final
{
public:
	class UPrivateSpaceLevelHandle*               PSHandle;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTeleportDestinationComponent*          TeleportDestination;                               // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrivateSpaceDestination) == 0x000008, "Wrong alignment on FPrivateSpaceDestination");
static_assert(sizeof(FPrivateSpaceDestination) == 0x000010, "Wrong size on FPrivateSpaceDestination");
static_assert(offsetof(FPrivateSpaceDestination, PSHandle) == 0x000000, "Member 'FPrivateSpaceDestination::PSHandle' has a wrong offset!");
static_assert(offsetof(FPrivateSpaceDestination, TeleportDestination) == 0x000008, "Member 'FPrivateSpaceDestination::TeleportDestination' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig
// 0x01F8 (0x0260 - 0x0068)
struct FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	struct FVAL_CharacterCustomization_MaterialParamOverrides TorsoMaterialParamOverrides;                       // 0x0068(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FVAL_CharacterCustomization_MaterialParamOverrides LegsMaterialParamOverrides;                        // 0x0160(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   TattooBaseColorMaterialParameterName;              // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig) == 0x000260, "Wrong size on FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig, TorsoMaterialParamOverrides) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig::TorsoMaterialParamOverrides' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig, LegsMaterialParamOverrides) == 0x000160, "Member 'FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig::LegsMaterialParamOverrides' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig, TattooBaseColorMaterialParameterName) == 0x000258, "Member 'FVAL_CharacterCustomizationItem_BodyTattoo_PerBodyTypeConfig::TattooBaseColorMaterialParameterName' has a wrong offset!");

// ScriptStruct Palia.TargetPointArray
// 0x0010 (0x0010 - 0x0000)
struct FTargetPointArray final
{
public:
	TArray<class AValeriaTargetPoint*>            Entries;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTargetPointArray) == 0x000008, "Wrong alignment on FTargetPointArray");
static_assert(sizeof(FTargetPointArray) == 0x000010, "Wrong size on FTargetPointArray");
static_assert(offsetof(FTargetPointArray, Entries) == 0x000000, "Member 'FTargetPointArray::Entries' has a wrong offset!");

// ScriptStruct Palia.FishChanceTable
// 0x0108 (0x0108 - 0x0000)
struct FFishChanceTable final
{
public:
	struct FDataTableRowHandle                    FishConfig;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimeOfDayFilter                       TimeOfDay;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FLootRequirements                      Requirements;                                      // 0x0028(0x00D8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2201[0x4];                                     // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishChanceTable) == 0x000008, "Wrong alignment on FFishChanceTable");
static_assert(sizeof(FFishChanceTable) == 0x000108, "Wrong size on FFishChanceTable");
static_assert(offsetof(FFishChanceTable, FishConfig) == 0x000000, "Member 'FFishChanceTable::FishConfig' has a wrong offset!");
static_assert(offsetof(FFishChanceTable, TimeOfDay) == 0x000010, "Member 'FFishChanceTable::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FFishChanceTable, Requirements) == 0x000028, "Member 'FFishChanceTable::Requirements' has a wrong offset!");
static_assert(offsetof(FFishChanceTable, Weight) == 0x000100, "Member 'FFishChanceTable::Weight' has a wrong offset!");

// ScriptStruct Palia.VAL_ServerSpaceContainer
// 0x0050 (0x0050 - 0x0000)
struct FVAL_ServerSpaceContainer final
{
public:
	TMap<struct FGuid, struct FVAL_ServerSpace>   Table;                                             // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_ServerSpaceContainer) == 0x000008, "Wrong alignment on FVAL_ServerSpaceContainer");
static_assert(sizeof(FVAL_ServerSpaceContainer) == 0x000050, "Wrong size on FVAL_ServerSpaceContainer");
static_assert(offsetof(FVAL_ServerSpaceContainer, Table) == 0x000000, "Member 'FVAL_ServerSpaceContainer::Table' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationLoadout
// 0x0900 (0x0900 - 0x0000)
struct FVAL_CharacterCustomizationLoadout final
{
public:
	EVAL_CharacterBodyType                        BodyType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2202[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVAL_CharacterCustomization_BodyData   BodyData;                                          // 0x0004(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2203[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_AnimSet> AnimSetItem;                                       // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               AnimSet_VariantSelections;                         // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_SkinTone> SkinToneItem;                                      // 0x0090(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               SkinTone_VariantSelections;                        // 0x00B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Eyes> EyesItem;                                          // 0x0108(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               Eyes_VariantSelections;                            // 0x0130(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_HairStyle> HairStyleItem;                                     // 0x0180(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               HairStyle_VariantSelections;                       // 0x01A8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Head> HeadItem;                                          // 0x01F8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               Head_VariantSelections;                            // 0x0220(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Torso> TorsoItem;                                         // 0x0270(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               Torso_VariantSelections;                           // 0x0298(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Legs> LegsItem;                                          // 0x02E8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               Legs_VariantSelections;                            // 0x0310(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Hat> HatItem;                                           // 0x0360(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               Hat_VariantSelections;                             // 0x0388(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_FaceMask> FaceMaskItem;                                      // 0x03D8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               FaceMask_VariantSelections;                        // 0x0400(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_FacialHairStyle> FacialHairStyleItem;                               // 0x0450(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               FacialHairStyle_VariantSelections;                 // 0x0478(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_FaceTattoo> FaceTattooItem;                                    // 0x04C8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               FaceTattoo_VariantSelections;                      // 0x04F0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_BodyTattoo> BodyTattooItem;                                    // 0x0540(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               BodyTattoo_VariantSelections;                      // 0x0568(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Makeup> MakeupItem;                                        // 0x05B8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               Makeup_VariantSelections;                          // 0x05E0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_FaceComplexion> FaceComplexionItem;                                // 0x0630(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               FaceComplexion_VariantSelections;                  // 0x0658(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_BodyComplexion> BodyComplexionItem;                                // 0x06A8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               BodyComplexion_VariantSelections;                  // 0x06D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Glider> GliderItem;                                        // 0x0720(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               Glider_VariantSelections;                          // 0x0748(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_GliderTrail> GliderTrailItem;                                   // 0x0798(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               GliderTrail_VariantSelections;                     // 0x07C0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Voice> VoiceItem;                                         // 0x0810(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               Voice_VariantSelections;                           // 0x0838(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Pet> PetItem;                                           // 0x0888(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGuid>               Pet_VariantSelections;                             // 0x08B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationLoadout) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationLoadout");
static_assert(sizeof(FVAL_CharacterCustomizationLoadout) == 0x000900, "Wrong size on FVAL_CharacterCustomizationLoadout");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, BodyType) == 0x000000, "Member 'FVAL_CharacterCustomizationLoadout::BodyType' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, BodyData) == 0x000004, "Member 'FVAL_CharacterCustomizationLoadout::BodyData' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, AnimSetItem) == 0x000018, "Member 'FVAL_CharacterCustomizationLoadout::AnimSetItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, AnimSet_VariantSelections) == 0x000040, "Member 'FVAL_CharacterCustomizationLoadout::AnimSet_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, SkinToneItem) == 0x000090, "Member 'FVAL_CharacterCustomizationLoadout::SkinToneItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, SkinTone_VariantSelections) == 0x0000B8, "Member 'FVAL_CharacterCustomizationLoadout::SkinTone_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, EyesItem) == 0x000108, "Member 'FVAL_CharacterCustomizationLoadout::EyesItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, Eyes_VariantSelections) == 0x000130, "Member 'FVAL_CharacterCustomizationLoadout::Eyes_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, HairStyleItem) == 0x000180, "Member 'FVAL_CharacterCustomizationLoadout::HairStyleItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, HairStyle_VariantSelections) == 0x0001A8, "Member 'FVAL_CharacterCustomizationLoadout::HairStyle_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, HeadItem) == 0x0001F8, "Member 'FVAL_CharacterCustomizationLoadout::HeadItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, Head_VariantSelections) == 0x000220, "Member 'FVAL_CharacterCustomizationLoadout::Head_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, TorsoItem) == 0x000270, "Member 'FVAL_CharacterCustomizationLoadout::TorsoItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, Torso_VariantSelections) == 0x000298, "Member 'FVAL_CharacterCustomizationLoadout::Torso_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, LegsItem) == 0x0002E8, "Member 'FVAL_CharacterCustomizationLoadout::LegsItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, Legs_VariantSelections) == 0x000310, "Member 'FVAL_CharacterCustomizationLoadout::Legs_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, HatItem) == 0x000360, "Member 'FVAL_CharacterCustomizationLoadout::HatItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, Hat_VariantSelections) == 0x000388, "Member 'FVAL_CharacterCustomizationLoadout::Hat_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, FaceMaskItem) == 0x0003D8, "Member 'FVAL_CharacterCustomizationLoadout::FaceMaskItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, FaceMask_VariantSelections) == 0x000400, "Member 'FVAL_CharacterCustomizationLoadout::FaceMask_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, FacialHairStyleItem) == 0x000450, "Member 'FVAL_CharacterCustomizationLoadout::FacialHairStyleItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, FacialHairStyle_VariantSelections) == 0x000478, "Member 'FVAL_CharacterCustomizationLoadout::FacialHairStyle_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, FaceTattooItem) == 0x0004C8, "Member 'FVAL_CharacterCustomizationLoadout::FaceTattooItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, FaceTattoo_VariantSelections) == 0x0004F0, "Member 'FVAL_CharacterCustomizationLoadout::FaceTattoo_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, BodyTattooItem) == 0x000540, "Member 'FVAL_CharacterCustomizationLoadout::BodyTattooItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, BodyTattoo_VariantSelections) == 0x000568, "Member 'FVAL_CharacterCustomizationLoadout::BodyTattoo_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, MakeupItem) == 0x0005B8, "Member 'FVAL_CharacterCustomizationLoadout::MakeupItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, Makeup_VariantSelections) == 0x0005E0, "Member 'FVAL_CharacterCustomizationLoadout::Makeup_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, FaceComplexionItem) == 0x000630, "Member 'FVAL_CharacterCustomizationLoadout::FaceComplexionItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, FaceComplexion_VariantSelections) == 0x000658, "Member 'FVAL_CharacterCustomizationLoadout::FaceComplexion_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, BodyComplexionItem) == 0x0006A8, "Member 'FVAL_CharacterCustomizationLoadout::BodyComplexionItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, BodyComplexion_VariantSelections) == 0x0006D0, "Member 'FVAL_CharacterCustomizationLoadout::BodyComplexion_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, GliderItem) == 0x000720, "Member 'FVAL_CharacterCustomizationLoadout::GliderItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, Glider_VariantSelections) == 0x000748, "Member 'FVAL_CharacterCustomizationLoadout::Glider_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, GliderTrailItem) == 0x000798, "Member 'FVAL_CharacterCustomizationLoadout::GliderTrailItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, GliderTrail_VariantSelections) == 0x0007C0, "Member 'FVAL_CharacterCustomizationLoadout::GliderTrail_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, VoiceItem) == 0x000810, "Member 'FVAL_CharacterCustomizationLoadout::VoiceItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, Voice_VariantSelections) == 0x000838, "Member 'FVAL_CharacterCustomizationLoadout::Voice_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, PetItem) == 0x000888, "Member 'FVAL_CharacterCustomizationLoadout::PetItem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout, Pet_VariantSelections) == 0x0008B0, "Member 'FVAL_CharacterCustomizationLoadout::Pet_VariantSelections' has a wrong offset!");

// ScriptStruct Palia.VillagerMailGlobalConfig
// 0x0010 (0x0010 - 0x0000)
struct FVillagerMailGlobalConfig final
{
public:
	TArray<struct FTimeOfDayHourMinute>           TimesToDeliverMail;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerMailGlobalConfig) == 0x000008, "Wrong alignment on FVillagerMailGlobalConfig");
static_assert(sizeof(FVillagerMailGlobalConfig) == 0x000010, "Wrong size on FVillagerMailGlobalConfig");
static_assert(offsetof(FVillagerMailGlobalConfig, TimesToDeliverMail) == 0x000000, "Member 'FVillagerMailGlobalConfig::TimesToDeliverMail' has a wrong offset!");

// ScriptStruct Palia.WeeklyEventConfig
// 0x000C (0x000C - 0x0000)
struct FWeeklyEventConfig final
{
public:
	ES6DayOfWeek                                  DayOfWeek;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2204[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Hour;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeeklyEventConfig) == 0x000004, "Wrong alignment on FWeeklyEventConfig");
static_assert(sizeof(FWeeklyEventConfig) == 0x00000C, "Wrong size on FWeeklyEventConfig");
static_assert(offsetof(FWeeklyEventConfig, DayOfWeek) == 0x000000, "Member 'FWeeklyEventConfig::DayOfWeek' has a wrong offset!");
static_assert(offsetof(FWeeklyEventConfig, Hour) == 0x000004, "Member 'FWeeklyEventConfig::Hour' has a wrong offset!");
static_assert(offsetof(FWeeklyEventConfig, Minute) == 0x000008, "Member 'FWeeklyEventConfig::Minute' has a wrong offset!");

// ScriptStruct Palia.InventoryGlobalConfig
// 0x0068 (0x0068 - 0x0000)
struct FInventoryGlobalConfig final
{
public:
	int32                                         MaxStorageBags;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2205[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OverflowItemDeletedNotification;                   // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FNotification                          InventoryFullNotification;                         // 0x0020(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ItemSentToStorageChestNotification;                // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryGlobalConfig) == 0x000008, "Wrong alignment on FInventoryGlobalConfig");
static_assert(sizeof(FInventoryGlobalConfig) == 0x000068, "Wrong size on FInventoryGlobalConfig");
static_assert(offsetof(FInventoryGlobalConfig, MaxStorageBags) == 0x000000, "Member 'FInventoryGlobalConfig::MaxStorageBags' has a wrong offset!");
static_assert(offsetof(FInventoryGlobalConfig, OverflowItemDeletedNotification) == 0x000008, "Member 'FInventoryGlobalConfig::OverflowItemDeletedNotification' has a wrong offset!");
static_assert(offsetof(FInventoryGlobalConfig, InventoryFullNotification) == 0x000020, "Member 'FInventoryGlobalConfig::InventoryFullNotification' has a wrong offset!");
static_assert(offsetof(FInventoryGlobalConfig, ItemSentToStorageChestNotification) == 0x000050, "Member 'FInventoryGlobalConfig::ItemSentToStorageChestNotification' has a wrong offset!");

// ScriptStruct Palia.PlayerActionsGlobalConfig
// 0x0004 (0x0004 - 0x0000)
struct FPlayerActionsGlobalConfig final
{
public:
	int32                                         ActionQueueNumMax;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerActionsGlobalConfig) == 0x000004, "Wrong alignment on FPlayerActionsGlobalConfig");
static_assert(sizeof(FPlayerActionsGlobalConfig) == 0x000004, "Wrong size on FPlayerActionsGlobalConfig");
static_assert(offsetof(FPlayerActionsGlobalConfig, ActionQueueNumMax) == 0x000000, "Member 'FPlayerActionsGlobalConfig::ActionQueueNumMax' has a wrong offset!");

// ScriptStruct Palia.PlayerRequestsConfig
// 0x0010 (0x0010 - 0x0000)
struct FPlayerRequestsConfig final
{
public:
	int32                                         MaxNumberOfOpenRequests;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardPercentOfRequestPrice;                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTradesPerInterval;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTradesIntervalSecs;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerRequestsConfig) == 0x000004, "Wrong alignment on FPlayerRequestsConfig");
static_assert(sizeof(FPlayerRequestsConfig) == 0x000010, "Wrong size on FPlayerRequestsConfig");
static_assert(offsetof(FPlayerRequestsConfig, MaxNumberOfOpenRequests) == 0x000000, "Member 'FPlayerRequestsConfig::MaxNumberOfOpenRequests' has a wrong offset!");
static_assert(offsetof(FPlayerRequestsConfig, RewardPercentOfRequestPrice) == 0x000004, "Member 'FPlayerRequestsConfig::RewardPercentOfRequestPrice' has a wrong offset!");
static_assert(offsetof(FPlayerRequestsConfig, MaxTradesPerInterval) == 0x000008, "Member 'FPlayerRequestsConfig::MaxTradesPerInterval' has a wrong offset!");
static_assert(offsetof(FPlayerRequestsConfig, MaxTradesIntervalSecs) == 0x00000C, "Member 'FPlayerRequestsConfig::MaxTradesIntervalSecs' has a wrong offset!");

// ScriptStruct Palia.ThreatConfig
// 0x0020 (0x0020 - 0x0000)
struct FThreatConfig final
{
public:
	float                                         NewLeaderChangeForLeader;                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewLeaderPercentChangeForNonLeaders;               // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClosestActorThreatPerSecond;                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2206[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ProximityThreatPerSecond;                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThreatPerDamage;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2207[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatConfig) == 0x000008, "Wrong alignment on FThreatConfig");
static_assert(sizeof(FThreatConfig) == 0x000020, "Wrong size on FThreatConfig");
static_assert(offsetof(FThreatConfig, NewLeaderChangeForLeader) == 0x000000, "Member 'FThreatConfig::NewLeaderChangeForLeader' has a wrong offset!");
static_assert(offsetof(FThreatConfig, NewLeaderPercentChangeForNonLeaders) == 0x000004, "Member 'FThreatConfig::NewLeaderPercentChangeForNonLeaders' has a wrong offset!");
static_assert(offsetof(FThreatConfig, ClosestActorThreatPerSecond) == 0x000008, "Member 'FThreatConfig::ClosestActorThreatPerSecond' has a wrong offset!");
static_assert(offsetof(FThreatConfig, ProximityThreatPerSecond) == 0x000010, "Member 'FThreatConfig::ProximityThreatPerSecond' has a wrong offset!");
static_assert(offsetof(FThreatConfig, ThreatPerDamage) == 0x000018, "Member 'FThreatConfig::ThreatPerDamage' has a wrong offset!");

// ScriptStruct Palia.GlobalsConfig
// 0x0368 (0x0368 - 0x0000)
struct FGlobalsConfig final
{
public:
	int32                                         SecondsInADayInValeria;                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDayMorningStartsAt;                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDayDaylightStartsAt;                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDayEveningStartsAt;                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDayNightStartsAt;                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2208[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FImpactConfig>                  ImpactsForPlayers;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FImpactConfig>                  ImpactsForEnemies;                                 // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDateTime                              DateValeriaWasCreated;                             // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeeklyEventConfig                     ChallengeResetTime;                                // 0x0040(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         DailyResetTime;                                    // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCharacterGlobalConfig*                 Character;                                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCraftingGlobalConfig*                  Crafting;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDev_SpawnActorConfig*                  Dev_SpawnActor;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFishingGlobalConfig*                   Fishing;                                           // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFocusGlobalConfig*                     Focus;                                             // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameServerGlobalConfig*                GameServer;                                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGardeningGlobalConfig*                 Gardening;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGatherableGlobalConfig*                Gathering;                                         // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGearGlobalConfig*                      Gear;                                              // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHousingGlobalConfig*                   Housing;                                           // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInstrumentGlobalConfig*                Instrument;                                        // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UVAL_InputGlobalConfig*                 Input;                                             // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FInventoryGlobalConfig                 Inventory;                                         // 0x00B0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FItemGlobalConfig                      Item;                                              // 0x0118(0x0110)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVillagerMailGlobalConfig              Mail;                                              // 0x0228(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UPlacementGlobalConfig*                 Placement;                                         // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPlayerActionsGlobalConfig             PlayerActions;                                     // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	struct FPlayerRequestsConfig                  PlayerRequests;                                    // 0x0244(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2209[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerTagGlobalConfig*                 PlayerTags;                                        // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UQualityGlobalConfig*                   Quality;                                           // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UShippingBinGlobalConfig*               ShippingBin;                                       // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USkillLevelsGlobalConfig*               SkillLevels;                                       // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStartingLoadoutGlobalConfig*           StartingLoadout;                                   // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FStorageGlobalConfig                   Storage;                                           // 0x0280(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FStoresGlobalConfig                    Stores;                                            // 0x02E8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FThreatConfig                          Threat;                                            // 0x0330(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	class UVillagerDialogueGlobalConfig*          VillagerDialogue;                                  // 0x0350(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWorldMapGlobalConfig*                  WorldMapGlobalConfig;                              // 0x0358(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UResourceTrackerGlobalConfig*           ResourceTracker;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGlobalsConfig) == 0x000008, "Wrong alignment on FGlobalsConfig");
static_assert(sizeof(FGlobalsConfig) == 0x000368, "Wrong size on FGlobalsConfig");
static_assert(offsetof(FGlobalsConfig, SecondsInADayInValeria) == 0x000000, "Member 'FGlobalsConfig::SecondsInADayInValeria' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, TimeOfDayMorningStartsAt) == 0x000004, "Member 'FGlobalsConfig::TimeOfDayMorningStartsAt' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, TimeOfDayDaylightStartsAt) == 0x000008, "Member 'FGlobalsConfig::TimeOfDayDaylightStartsAt' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, TimeOfDayEveningStartsAt) == 0x00000C, "Member 'FGlobalsConfig::TimeOfDayEveningStartsAt' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, TimeOfDayNightStartsAt) == 0x000010, "Member 'FGlobalsConfig::TimeOfDayNightStartsAt' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, ImpactsForPlayers) == 0x000018, "Member 'FGlobalsConfig::ImpactsForPlayers' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, ImpactsForEnemies) == 0x000028, "Member 'FGlobalsConfig::ImpactsForEnemies' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, DateValeriaWasCreated) == 0x000038, "Member 'FGlobalsConfig::DateValeriaWasCreated' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, ChallengeResetTime) == 0x000040, "Member 'FGlobalsConfig::ChallengeResetTime' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, DailyResetTime) == 0x00004C, "Member 'FGlobalsConfig::DailyResetTime' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Character) == 0x000050, "Member 'FGlobalsConfig::Character' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Crafting) == 0x000058, "Member 'FGlobalsConfig::Crafting' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Dev_SpawnActor) == 0x000060, "Member 'FGlobalsConfig::Dev_SpawnActor' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Fishing) == 0x000068, "Member 'FGlobalsConfig::Fishing' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Focus) == 0x000070, "Member 'FGlobalsConfig::Focus' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, GameServer) == 0x000078, "Member 'FGlobalsConfig::GameServer' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Gardening) == 0x000080, "Member 'FGlobalsConfig::Gardening' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Gathering) == 0x000088, "Member 'FGlobalsConfig::Gathering' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Gear) == 0x000090, "Member 'FGlobalsConfig::Gear' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Housing) == 0x000098, "Member 'FGlobalsConfig::Housing' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Instrument) == 0x0000A0, "Member 'FGlobalsConfig::Instrument' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Input) == 0x0000A8, "Member 'FGlobalsConfig::Input' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Inventory) == 0x0000B0, "Member 'FGlobalsConfig::Inventory' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Item) == 0x000118, "Member 'FGlobalsConfig::Item' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Mail) == 0x000228, "Member 'FGlobalsConfig::Mail' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Placement) == 0x000238, "Member 'FGlobalsConfig::Placement' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, PlayerActions) == 0x000240, "Member 'FGlobalsConfig::PlayerActions' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, PlayerRequests) == 0x000244, "Member 'FGlobalsConfig::PlayerRequests' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, PlayerTags) == 0x000258, "Member 'FGlobalsConfig::PlayerTags' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Quality) == 0x000260, "Member 'FGlobalsConfig::Quality' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, ShippingBin) == 0x000268, "Member 'FGlobalsConfig::ShippingBin' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, SkillLevels) == 0x000270, "Member 'FGlobalsConfig::SkillLevels' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, StartingLoadout) == 0x000278, "Member 'FGlobalsConfig::StartingLoadout' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Storage) == 0x000280, "Member 'FGlobalsConfig::Storage' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Stores) == 0x0002E8, "Member 'FGlobalsConfig::Stores' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, Threat) == 0x000330, "Member 'FGlobalsConfig::Threat' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, VillagerDialogue) == 0x000350, "Member 'FGlobalsConfig::VillagerDialogue' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, WorldMapGlobalConfig) == 0x000358, "Member 'FGlobalsConfig::WorldMapGlobalConfig' has a wrong offset!");
static_assert(offsetof(FGlobalsConfig, ResourceTracker) == 0x000360, "Member 'FGlobalsConfig::ResourceTracker' has a wrong offset!");

// ScriptStruct Palia.BingoBoardgameState
// 0x0070 (0x0070 - 0x0000)
struct FBingoBoardgameState final
{
public:
	int32                                         BingoGridCellProgressArray[0x19];                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220A[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ExpirationTime;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBingoBoardgameState) == 0x000008, "Wrong alignment on FBingoBoardgameState");
static_assert(sizeof(FBingoBoardgameState) == 0x000070, "Wrong size on FBingoBoardgameState");
static_assert(offsetof(FBingoBoardgameState, BingoGridCellProgressArray) == 0x000000, "Member 'FBingoBoardgameState::BingoGridCellProgressArray' has a wrong offset!");
static_assert(offsetof(FBingoBoardgameState, ExpirationTime) == 0x000068, "Member 'FBingoBoardgameState::ExpirationTime' has a wrong offset!");

// ScriptStruct Palia.MontageInfo
// 0x0018 (0x0018 - 0x0000)
struct FMontageInfo final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSectionName;                                  // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMontageInfo) == 0x000008, "Wrong alignment on FMontageInfo");
static_assert(sizeof(FMontageInfo) == 0x000018, "Wrong size on FMontageInfo");
static_assert(offsetof(FMontageInfo, AnimMontage) == 0x000000, "Member 'FMontageInfo::AnimMontage' has a wrong offset!");
static_assert(offsetof(FMontageInfo, InPlayRate) == 0x000008, "Member 'FMontageInfo::InPlayRate' has a wrong offset!");
static_assert(offsetof(FMontageInfo, StartSectionName) == 0x00000C, "Member 'FMontageInfo::StartSectionName' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_FaceComplexion_PerBodyTypeConfig
// 0x0000 (0x0068 - 0x0068)
struct FVAL_CharacterCustomizationItem_FaceComplexion_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
};
static_assert(alignof(FVAL_CharacterCustomizationItem_FaceComplexion_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_FaceComplexion_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_FaceComplexion_PerBodyTypeConfig) == 0x000068, "Wrong size on FVAL_CharacterCustomizationItem_FaceComplexion_PerBodyTypeConfig");

// ScriptStruct Palia.VAL_BingoBoardgameReplicatedState
// 0x0080 (0x0080 - 0x0000)
struct FVAL_BingoBoardgameReplicatedState final
{
public:
	struct FDateTime                              FetchBingoBoardTimestamp;                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BingoBoardConfigurationIndex;                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBingoBoardgameState                   BingoBoardgameState;                               // 0x0010(0x0070)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_BingoBoardgameReplicatedState) == 0x000008, "Wrong alignment on FVAL_BingoBoardgameReplicatedState");
static_assert(sizeof(FVAL_BingoBoardgameReplicatedState) == 0x000080, "Wrong size on FVAL_BingoBoardgameReplicatedState");
static_assert(offsetof(FVAL_BingoBoardgameReplicatedState, FetchBingoBoardTimestamp) == 0x000000, "Member 'FVAL_BingoBoardgameReplicatedState::FetchBingoBoardTimestamp' has a wrong offset!");
static_assert(offsetof(FVAL_BingoBoardgameReplicatedState, BingoBoardConfigurationIndex) == 0x000008, "Member 'FVAL_BingoBoardgameReplicatedState::BingoBoardConfigurationIndex' has a wrong offset!");
static_assert(offsetof(FVAL_BingoBoardgameReplicatedState, BingoBoardgameState) == 0x000010, "Member 'FVAL_BingoBoardgameReplicatedState::BingoBoardgameState' has a wrong offset!");

// ScriptStruct Palia.AbilityMoveConfig
// 0x0001 (0x0001 - 0x0000)
struct FAbilityMoveConfig final
{
public:
	uint8                                         Pad_220D[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityMoveConfig) == 0x000001, "Wrong alignment on FAbilityMoveConfig");
static_assert(sizeof(FAbilityMoveConfig) == 0x000001, "Wrong size on FAbilityMoveConfig");

// ScriptStruct Palia.VAL_CharacterCustomizationLoadout_ReplDTO
// 0x0274 (0x0274 - 0x0000)
struct FVAL_CharacterCustomizationLoadout_ReplDTO final
{
public:
	struct FGuid                                  LoadoutId;                                         // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_CharacterBodyType                        BodyType;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220E[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  AnimSetId;                                         // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSet_VariantSelections[0x4];                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SkinToneId;                                        // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinTone_VariantSelections[0x4];                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  EyesId;                                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Eyes_VariantSelections[0x4];                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  HairStyleId;                                       // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HairStyle_VariantSelections[0x4];                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  HeadId;                                            // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Head_VariantSelections[0x4];                       // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  TorsoId;                                           // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Torso_VariantSelections[0x4];                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  LegsId;                                            // 0x00D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Legs_VariantSelections[0x4];                       // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  HatId;                                             // 0x00F4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hat_VariantSelections[0x4];                        // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  FaceMaskId;                                        // 0x0114(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceMask_VariantSelections[0x4];                   // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  FacialHairStyleId;                                 // 0x0134(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FacialHairStyle_VariantSelections[0x4];            // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  FaceTattooId;                                      // 0x0154(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceTattoo_VariantSelections[0x4];                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BodyTattooId;                                      // 0x0174(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyTattoo_VariantSelections[0x4];                 // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MakeupId;                                          // 0x0194(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Makeup_VariantSelections[0x4];                     // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  FaceComplexionId;                                  // 0x01B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceComplexion_VariantSelections[0x4];             // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BodyComplexionId;                                  // 0x01D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyComplexion_VariantSelections[0x4];             // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  GliderId;                                          // 0x01F4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Glider_VariantSelections[0x4];                     // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  GliderTrailId;                                     // 0x0214(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GliderTrail_VariantSelections[0x4];                // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VoiceId;                                           // 0x0234(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Voice_VariantSelections[0x4];                      // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PetId;                                             // 0x0254(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pet_VariantSelections[0x4];                        // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationLoadout_ReplDTO) == 0x000004, "Wrong alignment on FVAL_CharacterCustomizationLoadout_ReplDTO");
static_assert(sizeof(FVAL_CharacterCustomizationLoadout_ReplDTO) == 0x000274, "Wrong size on FVAL_CharacterCustomizationLoadout_ReplDTO");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, LoadoutId) == 0x000000, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::LoadoutId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, BodyType) == 0x000010, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::BodyType' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, AnimSetId) == 0x000014, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::AnimSetId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, AnimSet_VariantSelections) == 0x000024, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::AnimSet_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, SkinToneId) == 0x000034, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::SkinToneId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, SkinTone_VariantSelections) == 0x000044, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::SkinTone_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, EyesId) == 0x000054, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::EyesId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, Eyes_VariantSelections) == 0x000064, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::Eyes_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, HairStyleId) == 0x000074, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::HairStyleId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, HairStyle_VariantSelections) == 0x000084, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::HairStyle_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, HeadId) == 0x000094, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::HeadId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, Head_VariantSelections) == 0x0000A4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::Head_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, TorsoId) == 0x0000B4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::TorsoId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, Torso_VariantSelections) == 0x0000C4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::Torso_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, LegsId) == 0x0000D4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::LegsId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, Legs_VariantSelections) == 0x0000E4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::Legs_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, HatId) == 0x0000F4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::HatId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, Hat_VariantSelections) == 0x000104, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::Hat_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, FaceMaskId) == 0x000114, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::FaceMaskId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, FaceMask_VariantSelections) == 0x000124, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::FaceMask_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, FacialHairStyleId) == 0x000134, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::FacialHairStyleId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, FacialHairStyle_VariantSelections) == 0x000144, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::FacialHairStyle_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, FaceTattooId) == 0x000154, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::FaceTattooId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, FaceTattoo_VariantSelections) == 0x000164, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::FaceTattoo_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, BodyTattooId) == 0x000174, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::BodyTattooId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, BodyTattoo_VariantSelections) == 0x000184, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::BodyTattoo_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, MakeupId) == 0x000194, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::MakeupId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, Makeup_VariantSelections) == 0x0001A4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::Makeup_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, FaceComplexionId) == 0x0001B4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::FaceComplexionId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, FaceComplexion_VariantSelections) == 0x0001C4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::FaceComplexion_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, BodyComplexionId) == 0x0001D4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::BodyComplexionId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, BodyComplexion_VariantSelections) == 0x0001E4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::BodyComplexion_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, GliderId) == 0x0001F4, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::GliderId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, Glider_VariantSelections) == 0x000204, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::Glider_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, GliderTrailId) == 0x000214, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::GliderTrailId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, GliderTrail_VariantSelections) == 0x000224, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::GliderTrail_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, VoiceId) == 0x000234, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::VoiceId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, Voice_VariantSelections) == 0x000244, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::Voice_VariantSelections' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, PetId) == 0x000254, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::PetId' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationLoadout_ReplDTO, Pet_VariantSelections) == 0x000264, "Member 'FVAL_CharacterCustomizationLoadout_ReplDTO::Pet_VariantSelections' has a wrong offset!");

// ScriptStruct Palia.DialogueHistory
// 0x0008 (0x0058 - 0x0050)
struct FDialogueHistory final : public FDialogueHistoryPersistBlock
{
public:
	uint8                                         Pad_220F[0x8];                                     // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueHistory) == 0x000008, "Wrong alignment on FDialogueHistory");
static_assert(sizeof(FDialogueHistory) == 0x000058, "Wrong size on FDialogueHistory");

// ScriptStruct Palia.VAL_PremiumCurrencyProduct
// 0x0088 (0x0088 - 0x0000)
struct FVAL_PremiumCurrencyProduct final
{
public:
	struct FGuid                                  Product_id;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Currency;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bonus;                                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2210[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Tax_message;                                       // 0x0040(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   DisplayPriceText;                                  // 0x0058(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   DisplayRegularPriceText;                           // 0x0070(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PremiumCurrencyProduct) == 0x000008, "Wrong alignment on FVAL_PremiumCurrencyProduct");
static_assert(sizeof(FVAL_PremiumCurrencyProduct) == 0x000088, "Wrong size on FVAL_PremiumCurrencyProduct");
static_assert(offsetof(FVAL_PremiumCurrencyProduct, Product_id) == 0x000000, "Member 'FVAL_PremiumCurrencyProduct::Product_id' has a wrong offset!");
static_assert(offsetof(FVAL_PremiumCurrencyProduct, Name) == 0x000010, "Member 'FVAL_PremiumCurrencyProduct::Name' has a wrong offset!");
static_assert(offsetof(FVAL_PremiumCurrencyProduct, Currency) == 0x000020, "Member 'FVAL_PremiumCurrencyProduct::Currency' has a wrong offset!");
static_assert(offsetof(FVAL_PremiumCurrencyProduct, Price) == 0x000030, "Member 'FVAL_PremiumCurrencyProduct::Price' has a wrong offset!");
static_assert(offsetof(FVAL_PremiumCurrencyProduct, Quantity) == 0x000034, "Member 'FVAL_PremiumCurrencyProduct::Quantity' has a wrong offset!");
static_assert(offsetof(FVAL_PremiumCurrencyProduct, bonus) == 0x000038, "Member 'FVAL_PremiumCurrencyProduct::bonus' has a wrong offset!");
static_assert(offsetof(FVAL_PremiumCurrencyProduct, Tax_message) == 0x000040, "Member 'FVAL_PremiumCurrencyProduct::Tax_message' has a wrong offset!");
static_assert(offsetof(FVAL_PremiumCurrencyProduct, DisplayPriceText) == 0x000058, "Member 'FVAL_PremiumCurrencyProduct::DisplayPriceText' has a wrong offset!");
static_assert(offsetof(FVAL_PremiumCurrencyProduct, DisplayRegularPriceText) == 0x000070, "Member 'FVAL_PremiumCurrencyProduct::DisplayRegularPriceText' has a wrong offset!");

// ScriptStruct Palia.VAL_UpdateSpawnedPetPayload
// 0x0038 (0x0038 - 0x0000)
struct FVAL_UpdateSpawnedPetPayload final
{
public:
	class AValeriaCharacter*                      Character;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Pet> NewPet;                                            // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_UpdateSpawnedPetContext                  Context;                                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2211[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_UpdateSpawnedPetPayload) == 0x000008, "Wrong alignment on FVAL_UpdateSpawnedPetPayload");
static_assert(sizeof(FVAL_UpdateSpawnedPetPayload) == 0x000038, "Wrong size on FVAL_UpdateSpawnedPetPayload");
static_assert(offsetof(FVAL_UpdateSpawnedPetPayload, Character) == 0x000000, "Member 'FVAL_UpdateSpawnedPetPayload::Character' has a wrong offset!");
static_assert(offsetof(FVAL_UpdateSpawnedPetPayload, NewPet) == 0x000008, "Member 'FVAL_UpdateSpawnedPetPayload::NewPet' has a wrong offset!");
static_assert(offsetof(FVAL_UpdateSpawnedPetPayload, Context) == 0x000030, "Member 'FVAL_UpdateSpawnedPetPayload::Context' has a wrong offset!");

// ScriptStruct Palia.VAL_PartyMember
// 0x0050 (0x0050 - 0x0000)
struct FVAL_PartyMember final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  AccountId;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterId;                                       // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PartyMember) == 0x000008, "Wrong alignment on FVAL_PartyMember");
static_assert(sizeof(FVAL_PartyMember) == 0x000050, "Wrong size on FVAL_PartyMember");
static_assert(offsetof(FVAL_PartyMember, NetId) == 0x000000, "Member 'FVAL_PartyMember::NetId' has a wrong offset!");
static_assert(offsetof(FVAL_PartyMember, AccountId) == 0x000030, "Member 'FVAL_PartyMember::AccountId' has a wrong offset!");
static_assert(offsetof(FVAL_PartyMember, CharacterId) == 0x000040, "Member 'FVAL_PartyMember::CharacterId' has a wrong offset!");

// ScriptStruct Palia.VAL_PartyInvite
// 0x00B8 (0x00B8 - 0x0000)
struct FVAL_PartyInvite final
{
public:
	struct FVAL_PartyMember                       Sender;                                            // 0x0000(0x0050)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVAL_PartyMember                       Recipient;                                         // 0x0050(0x0050)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreationTimestamp;                                 // 0x00A0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2212[0x10];                                    // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_PartyInvite) == 0x000008, "Wrong alignment on FVAL_PartyInvite");
static_assert(sizeof(FVAL_PartyInvite) == 0x0000B8, "Wrong size on FVAL_PartyInvite");
static_assert(offsetof(FVAL_PartyInvite, Sender) == 0x000000, "Member 'FVAL_PartyInvite::Sender' has a wrong offset!");
static_assert(offsetof(FVAL_PartyInvite, Recipient) == 0x000050, "Member 'FVAL_PartyInvite::Recipient' has a wrong offset!");
static_assert(offsetof(FVAL_PartyInvite, CreationTimestamp) == 0x0000A0, "Member 'FVAL_PartyInvite::CreationTimestamp' has a wrong offset!");

// ScriptStruct Palia.SkillPointCost
// 0x0004 (0x0004 - 0x0000)
struct FSkillPointCost final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillPointCost) == 0x000004, "Wrong alignment on FSkillPointCost");
static_assert(sizeof(FSkillPointCost) == 0x000004, "Wrong size on FSkillPointCost");
static_assert(offsetof(FSkillPointCost, Amount) == 0x000000, "Member 'FSkillPointCost::Amount' has a wrong offset!");

// ScriptStruct Palia.VAL_Party
// 0x0108 (0x0108 - 0x0000)
struct FVAL_Party final
{
public:
	TSet<struct FVAL_PartyInvite>                 OutgoingInvites;                                   // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FVAL_PartyMember                       Leader;                                            // 0x0050(0x0050)(BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<struct FVAL_PartyMember>                 Members;                                           // 0x00A0(0x0050)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FString                                 ID;                                                // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDateTime                              CreationTimestamp;                                 // 0x0100(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FVAL_Party) == 0x000008, "Wrong alignment on FVAL_Party");
static_assert(sizeof(FVAL_Party) == 0x000108, "Wrong size on FVAL_Party");
static_assert(offsetof(FVAL_Party, OutgoingInvites) == 0x000000, "Member 'FVAL_Party::OutgoingInvites' has a wrong offset!");
static_assert(offsetof(FVAL_Party, Leader) == 0x000050, "Member 'FVAL_Party::Leader' has a wrong offset!");
static_assert(offsetof(FVAL_Party, Members) == 0x0000A0, "Member 'FVAL_Party::Members' has a wrong offset!");
static_assert(offsetof(FVAL_Party, ID) == 0x0000F0, "Member 'FVAL_Party::ID' has a wrong offset!");
static_assert(offsetof(FVAL_Party, CreationTimestamp) == 0x000100, "Member 'FVAL_Party::CreationTimestamp' has a wrong offset!");

// ScriptStruct Palia.ApplyRewardsToPlayerTelemetryData
// 0x0038 (0x0038 - 0x0000)
struct FApplyRewardsToPlayerTelemetryData final
{
public:
	TArray<struct FAddedIngredient>               UsedItems;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ToolUsed;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         NowMs;                                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecipeId;                                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Contributors;                                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Experience;                                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2213[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FApplyRewardsToPlayerTelemetryData) == 0x000008, "Wrong alignment on FApplyRewardsToPlayerTelemetryData");
static_assert(sizeof(FApplyRewardsToPlayerTelemetryData) == 0x000038, "Wrong size on FApplyRewardsToPlayerTelemetryData");
static_assert(offsetof(FApplyRewardsToPlayerTelemetryData, UsedItems) == 0x000000, "Member 'FApplyRewardsToPlayerTelemetryData::UsedItems' has a wrong offset!");
static_assert(offsetof(FApplyRewardsToPlayerTelemetryData, ToolUsed) == 0x000010, "Member 'FApplyRewardsToPlayerTelemetryData::ToolUsed' has a wrong offset!");
static_assert(offsetof(FApplyRewardsToPlayerTelemetryData, NowMs) == 0x000020, "Member 'FApplyRewardsToPlayerTelemetryData::NowMs' has a wrong offset!");
static_assert(offsetof(FApplyRewardsToPlayerTelemetryData, RecipeId) == 0x000028, "Member 'FApplyRewardsToPlayerTelemetryData::RecipeId' has a wrong offset!");
static_assert(offsetof(FApplyRewardsToPlayerTelemetryData, Contributors) == 0x00002C, "Member 'FApplyRewardsToPlayerTelemetryData::Contributors' has a wrong offset!");
static_assert(offsetof(FApplyRewardsToPlayerTelemetryData, Experience) == 0x000030, "Member 'FApplyRewardsToPlayerTelemetryData::Experience' has a wrong offset!");
static_assert(offsetof(FApplyRewardsToPlayerTelemetryData, bSuccess) == 0x000034, "Member 'FApplyRewardsToPlayerTelemetryData::bSuccess' has a wrong offset!");

// ScriptStruct Palia.TrackedVillagerInfo
// 0x0010 (0x001C - 0x000C)
struct FTrackedVillagerInfo final : public FFastArraySerializerItem
{
public:
	int32                                         VillagerId;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AValeriaVillagerCharacter> Villager;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialogueType                                 MostNotableGenericDialogueType;                    // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialogueType                                 MostNotableNonChatDialogueType;                    // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPinnedQuest;                                      // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2214[0x1];                                     // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackedVillagerInfo) == 0x000004, "Wrong alignment on FTrackedVillagerInfo");
static_assert(sizeof(FTrackedVillagerInfo) == 0x00001C, "Wrong size on FTrackedVillagerInfo");
static_assert(offsetof(FTrackedVillagerInfo, VillagerId) == 0x00000C, "Member 'FTrackedVillagerInfo::VillagerId' has a wrong offset!");
static_assert(offsetof(FTrackedVillagerInfo, Villager) == 0x000010, "Member 'FTrackedVillagerInfo::Villager' has a wrong offset!");
static_assert(offsetof(FTrackedVillagerInfo, MostNotableGenericDialogueType) == 0x000018, "Member 'FTrackedVillagerInfo::MostNotableGenericDialogueType' has a wrong offset!");
static_assert(offsetof(FTrackedVillagerInfo, MostNotableNonChatDialogueType) == 0x000019, "Member 'FTrackedVillagerInfo::MostNotableNonChatDialogueType' has a wrong offset!");
static_assert(offsetof(FTrackedVillagerInfo, bPinnedQuest) == 0x00001A, "Member 'FTrackedVillagerInfo::bPinnedQuest' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_SkeletalMeshComponentConfig
// 0x0150 (0x0150 - 0x0000)
struct FVAL_CharacterCustomization_SkeletalMeshComponentConfig final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UMaterialInterface>> MaterialOverrides;                                 // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         WidthAdditiveAnimationAlpha;                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2215[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   AnimInstanceType;                                  // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVAL_CharacterCustomization_AdditionalAnimationsConfig AnimationSwappingConfig;                           // 0x00A8(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              AudioAnimNotifyMappings;                           // 0x0128(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_SkeletalMeshComponentConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_SkeletalMeshComponentConfig");
static_assert(sizeof(FVAL_CharacterCustomization_SkeletalMeshComponentConfig) == 0x000150, "Wrong size on FVAL_CharacterCustomization_SkeletalMeshComponentConfig");
static_assert(offsetof(FVAL_CharacterCustomization_SkeletalMeshComponentConfig, Mesh) == 0x000000, "Member 'FVAL_CharacterCustomization_SkeletalMeshComponentConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_SkeletalMeshComponentConfig, MaterialOverrides) == 0x000028, "Member 'FVAL_CharacterCustomization_SkeletalMeshComponentConfig::MaterialOverrides' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_SkeletalMeshComponentConfig, WidthAdditiveAnimationAlpha) == 0x000078, "Member 'FVAL_CharacterCustomization_SkeletalMeshComponentConfig::WidthAdditiveAnimationAlpha' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_SkeletalMeshComponentConfig, AnimInstanceType) == 0x000080, "Member 'FVAL_CharacterCustomization_SkeletalMeshComponentConfig::AnimInstanceType' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_SkeletalMeshComponentConfig, AnimationSwappingConfig) == 0x0000A8, "Member 'FVAL_CharacterCustomization_SkeletalMeshComponentConfig::AnimationSwappingConfig' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_SkeletalMeshComponentConfig, AudioAnimNotifyMappings) == 0x000128, "Member 'FVAL_CharacterCustomization_SkeletalMeshComponentConfig::AudioAnimNotifyMappings' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig
// 0x0190 (0x01F8 - 0x0068)
struct FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	struct FVAL_CharacterCustomization_SkeletalMeshComponentConfig MeshConfig;                                        // 0x0068(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   DiffuseColorizingMaterialSlotName;                 // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HairBaseDiffuseColorMaterialParameterName;         // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HairTipDiffuseColorMaterialParameterName;          // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyebrowColorDiffuseColorMaterialParameterName;     // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeadHairMaskMaterialSlotName;                      // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeadHairMaskMaterialParameterName;                 // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVAL_CharacterCustomization_MaterialParamOverrides> HeadMaterialParamOverrides;                        // 0x01E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig) == 0x0001F8, "Wrong size on FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig, MeshConfig) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig::MeshConfig' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig, DiffuseColorizingMaterialSlotName) == 0x0001B8, "Member 'FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig::DiffuseColorizingMaterialSlotName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig, HairBaseDiffuseColorMaterialParameterName) == 0x0001C0, "Member 'FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig::HairBaseDiffuseColorMaterialParameterName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig, HairTipDiffuseColorMaterialParameterName) == 0x0001C8, "Member 'FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig::HairTipDiffuseColorMaterialParameterName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig, EyebrowColorDiffuseColorMaterialParameterName) == 0x0001D0, "Member 'FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig::EyebrowColorDiffuseColorMaterialParameterName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig, HeadHairMaskMaterialSlotName) == 0x0001D8, "Member 'FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig::HeadHairMaskMaterialSlotName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig, HeadHairMaskMaterialParameterName) == 0x0001E0, "Member 'FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig::HeadHairMaskMaterialParameterName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig, HeadMaterialParamOverrides) == 0x0001E8, "Member 'FVAL_CharacterCustomizationItem_HairStyle_PerBodyTypeConfig::HeadMaterialParamOverrides' has a wrong offset!");

// ScriptStruct Palia.PlayerGuildLevelInfo
// 0x0020 (0x0020 - 0x0000)
struct FPlayerGuildLevelInfo final
{
public:
	int64                                         TotalXp;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CurrentLevel;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MinXpRequiredForCurrentLevel;                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RelativeXpForNextLevel;                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerGuildLevelInfo) == 0x000008, "Wrong alignment on FPlayerGuildLevelInfo");
static_assert(sizeof(FPlayerGuildLevelInfo) == 0x000020, "Wrong size on FPlayerGuildLevelInfo");
static_assert(offsetof(FPlayerGuildLevelInfo, TotalXp) == 0x000000, "Member 'FPlayerGuildLevelInfo::TotalXp' has a wrong offset!");
static_assert(offsetof(FPlayerGuildLevelInfo, CurrentLevel) == 0x000008, "Member 'FPlayerGuildLevelInfo::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FPlayerGuildLevelInfo, MinXpRequiredForCurrentLevel) == 0x000010, "Member 'FPlayerGuildLevelInfo::MinXpRequiredForCurrentLevel' has a wrong offset!");
static_assert(offsetof(FPlayerGuildLevelInfo, RelativeXpForNextLevel) == 0x000018, "Member 'FPlayerGuildLevelInfo::RelativeXpForNextLevel' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildQuestTracker
// 0x0018 (0x0018 - 0x0000)
struct FVAL_PlayerGuildQuestTracker final
{
public:
	int32                                         MaximumPinnedQuestCount;                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2216[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          PinnedQuestIds;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildQuestTracker) == 0x000008, "Wrong alignment on FVAL_PlayerGuildQuestTracker");
static_assert(sizeof(FVAL_PlayerGuildQuestTracker) == 0x000018, "Wrong size on FVAL_PlayerGuildQuestTracker");
static_assert(offsetof(FVAL_PlayerGuildQuestTracker, MaximumPinnedQuestCount) == 0x000000, "Member 'FVAL_PlayerGuildQuestTracker::MaximumPinnedQuestCount' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildQuestTracker, PinnedQuestIds) == 0x000008, "Member 'FVAL_PlayerGuildQuestTracker::PinnedQuestIds' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuild
// 0x0118 (0x0118 - 0x0000)
struct FVAL_PlayerGuild final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       OwnerId;                                           // 0x0010(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0040(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAt;                                         // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0060(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              DescriptionUpdatedAt;                              // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       DescriptionUpdatedBy;                              // 0x0080(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Motto;                                             // 0x00B0(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              MottoUpdatedAt;                                    // 0x00C8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       MottoUpdatedBy;                                    // 0x00D0(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_PlayerGuildApplicationPolicy             ApplicationPolicy;                                 // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_PlayerGuildInvitationPolicy              InvitationPolicy;                                  // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2217[0x6];                                     // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVAL_PlayerGuildRosterEntry>    Roster;                                            // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuild) == 0x000008, "Wrong alignment on FVAL_PlayerGuild");
static_assert(sizeof(FVAL_PlayerGuild) == 0x000118, "Wrong size on FVAL_PlayerGuild");
static_assert(offsetof(FVAL_PlayerGuild, ID) == 0x000000, "Member 'FVAL_PlayerGuild::ID' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, OwnerId) == 0x000010, "Member 'FVAL_PlayerGuild::OwnerId' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, Name) == 0x000040, "Member 'FVAL_PlayerGuild::Name' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, CreatedAt) == 0x000058, "Member 'FVAL_PlayerGuild::CreatedAt' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, Description) == 0x000060, "Member 'FVAL_PlayerGuild::Description' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, DescriptionUpdatedAt) == 0x000078, "Member 'FVAL_PlayerGuild::DescriptionUpdatedAt' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, DescriptionUpdatedBy) == 0x000080, "Member 'FVAL_PlayerGuild::DescriptionUpdatedBy' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, Motto) == 0x0000B0, "Member 'FVAL_PlayerGuild::Motto' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, MottoUpdatedAt) == 0x0000C8, "Member 'FVAL_PlayerGuild::MottoUpdatedAt' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, MottoUpdatedBy) == 0x0000D0, "Member 'FVAL_PlayerGuild::MottoUpdatedBy' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, ApplicationPolicy) == 0x000100, "Member 'FVAL_PlayerGuild::ApplicationPolicy' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, InvitationPolicy) == 0x000101, "Member 'FVAL_PlayerGuild::InvitationPolicy' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuild, Roster) == 0x000108, "Member 'FVAL_PlayerGuild::Roster' has a wrong offset!");

// ScriptStruct Palia.CrafterAutomaticPersistBlock
// 0x0010 (0x0120 - 0x0110)
struct FCrafterAutomaticPersistBlock final : public FCrafterPersistBlock
{
public:
	TArray<int32>                                 RecipeListUnlocked;                                // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrafterAutomaticPersistBlock) == 0x000008, "Wrong alignment on FCrafterAutomaticPersistBlock");
static_assert(sizeof(FCrafterAutomaticPersistBlock) == 0x000120, "Wrong size on FCrafterAutomaticPersistBlock");
static_assert(offsetof(FCrafterAutomaticPersistBlock, RecipeListUnlocked) == 0x000110, "Member 'FCrafterAutomaticPersistBlock::RecipeListUnlocked' has a wrong offset!");

// ScriptStruct Palia.QuestSelectorOption
// 0x000C (0x000C - 0x0000)
struct FQuestSelectorOption final
{
public:
	int32                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestName;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestSelectorOption) == 0x000004, "Wrong alignment on FQuestSelectorOption");
static_assert(sizeof(FQuestSelectorOption) == 0x00000C, "Wrong size on FQuestSelectorOption");
static_assert(offsetof(FQuestSelectorOption, Weight) == 0x000000, "Member 'FQuestSelectorOption::Weight' has a wrong offset!");
static_assert(offsetof(FQuestSelectorOption, QuestName) == 0x000004, "Member 'FQuestSelectorOption::QuestName' has a wrong offset!");

// ScriptStruct Palia.QuestSelectorConfig
// 0x0030 (0x0038 - 0x0008)
struct FQuestSelectorConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2218[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestSelectorOption>           Options;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestSelectorConfig) == 0x000008, "Wrong alignment on FQuestSelectorConfig");
static_assert(sizeof(FQuestSelectorConfig) == 0x000038, "Wrong size on FQuestSelectorConfig");
static_assert(offsetof(FQuestSelectorConfig, PersistId) == 0x000008, "Member 'FQuestSelectorConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FQuestSelectorConfig, Options) == 0x000010, "Member 'FQuestSelectorConfig::Options' has a wrong offset!");
static_assert(offsetof(FQuestSelectorConfig, DisplayName) == 0x000020, "Member 'FQuestSelectorConfig::DisplayName' has a wrong offset!");

// ScriptStruct Palia.FishConfig
// 0x01F0 (0x01F8 - 0x0008)
struct FFishConfig final : public FTableRowBase
{
public:
	struct FDataTableRowHandle                    SkillXpEarnings;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   FishBlueprint;                                     // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           FishItemType;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldStruggle;                                   // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2219[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    FishingLevel;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevel;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221A[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuestRewardConfig                     Reward;                                            // 0x0068(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRotator                               CelebrationRotationOffset;                         // 0x01E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishConfig) == 0x000008, "Wrong alignment on FFishConfig");
static_assert(sizeof(FFishConfig) == 0x0001F8, "Wrong size on FFishConfig");
static_assert(offsetof(FFishConfig, SkillXpEarnings) == 0x000008, "Member 'FFishConfig::SkillXpEarnings' has a wrong offset!");
static_assert(offsetof(FFishConfig, FishBlueprint) == 0x000018, "Member 'FFishConfig::FishBlueprint' has a wrong offset!");
static_assert(offsetof(FFishConfig, FishItemType) == 0x000040, "Member 'FFishConfig::FishItemType' has a wrong offset!");
static_assert(offsetof(FFishConfig, QualityStars) == 0x000048, "Member 'FFishConfig::QualityStars' has a wrong offset!");
static_assert(offsetof(FFishConfig, bShouldStruggle) == 0x00004C, "Member 'FFishConfig::bShouldStruggle' has a wrong offset!");
static_assert(offsetof(FFishConfig, FishingLevel) == 0x000050, "Member 'FFishConfig::FishingLevel' has a wrong offset!");
static_assert(offsetof(FFishConfig, DifficultyLevel) == 0x000060, "Member 'FFishConfig::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFishConfig, Reward) == 0x000068, "Member 'FFishConfig::Reward' has a wrong offset!");
static_assert(offsetof(FFishConfig, CelebrationRotationOffset) == 0x0001E0, "Member 'FFishConfig::CelebrationRotationOffset' has a wrong offset!");

// ScriptStruct Palia.MaterialInstanceDynamicToAnimate
// 0x0010 (0x0010 - 0x0000)
struct FMaterialInstanceDynamicToAnimate final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialInstanceDynamicToAnimate) == 0x000008, "Wrong alignment on FMaterialInstanceDynamicToAnimate");
static_assert(sizeof(FMaterialInstanceDynamicToAnimate) == 0x000010, "Wrong size on FMaterialInstanceDynamicToAnimate");
static_assert(offsetof(FMaterialInstanceDynamicToAnimate, Mid) == 0x000000, "Member 'FMaterialInstanceDynamicToAnimate::Mid' has a wrong offset!");
static_assert(offsetof(FMaterialInstanceDynamicToAnimate, ParameterName) == 0x000008, "Member 'FMaterialInstanceDynamicToAnimate::ParameterName' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildInvitation
// 0x0078 (0x0078 - 0x0000)
struct FVAL_PlayerGuildInvitation final
{
public:
	struct FGuid                                  PlayerGuildId;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       InviteeUserId;                                     // 0x0010(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       SenderUserId;                                      // 0x0040(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SentAt;                                            // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildInvitation) == 0x000008, "Wrong alignment on FVAL_PlayerGuildInvitation");
static_assert(sizeof(FVAL_PlayerGuildInvitation) == 0x000078, "Wrong size on FVAL_PlayerGuildInvitation");
static_assert(offsetof(FVAL_PlayerGuildInvitation, PlayerGuildId) == 0x000000, "Member 'FVAL_PlayerGuildInvitation::PlayerGuildId' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildInvitation, InviteeUserId) == 0x000010, "Member 'FVAL_PlayerGuildInvitation::InviteeUserId' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildInvitation, SenderUserId) == 0x000040, "Member 'FVAL_PlayerGuildInvitation::SenderUserId' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerGuildInvitation, SentAt) == 0x000070, "Member 'FVAL_PlayerGuildInvitation::SentAt' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildInvitationList
// 0x0010 (0x0010 - 0x0000)
struct FVAL_PlayerGuildInvitationList final
{
public:
	TArray<struct FVAL_PlayerGuildInvitation>     List;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildInvitationList) == 0x000008, "Wrong alignment on FVAL_PlayerGuildInvitationList");
static_assert(sizeof(FVAL_PlayerGuildInvitationList) == 0x000010, "Wrong size on FVAL_PlayerGuildInvitationList");
static_assert(offsetof(FVAL_PlayerGuildInvitationList, List) == 0x000000, "Member 'FVAL_PlayerGuildInvitationList::List' has a wrong offset!");

// ScriptStruct Palia.VillagerCoreConfigLists
// 0x0010 (0x0010 - 0x0000)
struct FVillagerCoreConfigLists final
{
public:
	TArray<class FName>                           GiftPreferenceConfigs;                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerCoreConfigLists) == 0x000008, "Wrong alignment on FVillagerCoreConfigLists");
static_assert(sizeof(FVillagerCoreConfigLists) == 0x000010, "Wrong size on FVillagerCoreConfigLists");
static_assert(offsetof(FVillagerCoreConfigLists, GiftPreferenceConfigs) == 0x000000, "Member 'FVillagerCoreConfigLists::GiftPreferenceConfigs' has a wrong offset!");

// ScriptStruct Palia.ConfigsManager
// 0x0B90 (0x0B90 - 0x0000)
struct FConfigsManager final
{
public:
	class UDataTable*                             InventoryBagConfigDataTable;                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ItemStorageConfigDataTable;                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             LevelConfigDataTable;                              // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CrafterConfigDataTable;                            // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ToolConfigDataTable;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             RecipeConfigDataTable;                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             VitalConfigDataTable;                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FishingLevelConfigDataTable;                       // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FishingLootConfigDataTable;                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             SkillLevelConfigDataTable;                         // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FishingRodConfigDataTable;                         // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FishConfigDataTable;                               // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             LauncherConfigDataTable;                           // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             QuestConfigDataTable;                              // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             QuestSelectorConfigDataTable;                      // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ShopConfigDataTable;                               // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             VillagerConfigDataTable;                           // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             VillagerCoreConfigDataTable;                       // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             VillagerRelationshipLevelConfigDataTable;          // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVillagerRelationshipRewardsMetaConfigDataAsset* VillagerRelationshipIntervalRewardsMetaConfig;     // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             VillagerGiftPreferenceConfigDataTable;             // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             LevelerConfigDataTable;                            // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             BuffConfigDataTable;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FactionConfigDataTable;                            // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ErrorMessagesDataTable;                            // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ErrorModalDataTable;                               // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             VillagerMailMessageConfigDataTable;                // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CreatureConfigDataTable;                           // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             BookConfigDataTable;                               // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVillagerGiftPreferenceMetaConfigDataAsset* VillagerGiftPreferenceMetaConfig;                  // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             SpawnRarityConfigDataTable;                        // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             WeatherPatternDataTable;                           // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             IngredientTagConfigDataTable;                      // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             OneTimeItemConfigDataTable;                        // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_SequencerStandardBindingsDataAsset* SequencerStandardBindings;                         // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           CharacterItemType;                                 // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   HomePlotType;                                      // 0x0120(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInstrumentSongConfig*>          AllSongs;                                          // 0x0148(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FGlobalsConfig                         Globals;                                           // 0x0158(0x0368)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      InventoryBagConfig_IdToFName;                      // 0x04C0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset>> ItemConfig_IdToSoftPtr;                            // 0x0510(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      CrafterConfig_IdToFName;                           // 0x0560(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      RecipeConfig_IdToFName;                            // 0x05B0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      VitalConfigMapping_IdToFName;                      // 0x0600(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      SkillLevelConfigMapping_IdToFName;                 // 0x0650(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      QuestConfigMapping_IdToFName;                      // 0x06A0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      QuestSelectorConfigMapping_IdToFName;              // 0x06F0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      ShopConfigMapping_IdToFName;                       // 0x0740(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      VillagerConfigMapping_IdToFName;                   // 0x0790(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      VillagerCoreConfigMapping_IdToFName;               // 0x07E0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      BuffConfig_IdToFName;                              // 0x0830(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      VillagerMailMessageConfigMapping_IdToFName;        // 0x0880(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      CreatureConfigMapping_IdToFName;                   // 0x08D0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      BookConfigMapping_IdToFName;                       // 0x0920(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class FName>                      VillagerGiftPreferenceConfigMapping_IdToFName;     // 0x0970(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<int32>                                 AllRecipeIds;                                      // 0x09C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FString, int32>                    RecipeLookupTable;                                 // 0x09D0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FVillagerCoreConfigLists> VillagerNameToCoreConfigLists;                     // 0x0A20(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_221B[0x50];                                    // 0x0A70(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            VillagerConfigIdToCoreConfigIdMap;                 // 0x0AC0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FVillagerRelationshipLevelConfig> VillagerRelationshipLevels;                        // 0x0B10(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FVillagerCoreConfigLists               EmptyVillagerCoreConfigLists;                      // 0x0B20(0x0010)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_221C[0x20];                                    // 0x0B30(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESkillType>                            AllSkillTypes;                                     // 0x0B50(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<EVitalType>                            AllVitalTypes;                                     // 0x0B60(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_221D[0x20];                                    // 0x0B70(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConfigsManager) == 0x000008, "Wrong alignment on FConfigsManager");
static_assert(sizeof(FConfigsManager) == 0x000B90, "Wrong size on FConfigsManager");
static_assert(offsetof(FConfigsManager, InventoryBagConfigDataTable) == 0x000000, "Member 'FConfigsManager::InventoryBagConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, ItemStorageConfigDataTable) == 0x000008, "Member 'FConfigsManager::ItemStorageConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, LevelConfigDataTable) == 0x000010, "Member 'FConfigsManager::LevelConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, CrafterConfigDataTable) == 0x000018, "Member 'FConfigsManager::CrafterConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, ToolConfigDataTable) == 0x000020, "Member 'FConfigsManager::ToolConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, RecipeConfigDataTable) == 0x000028, "Member 'FConfigsManager::RecipeConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VitalConfigDataTable) == 0x000030, "Member 'FConfigsManager::VitalConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, FishingLevelConfigDataTable) == 0x000038, "Member 'FConfigsManager::FishingLevelConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, FishingLootConfigDataTable) == 0x000040, "Member 'FConfigsManager::FishingLootConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, SkillLevelConfigDataTable) == 0x000048, "Member 'FConfigsManager::SkillLevelConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, FishingRodConfigDataTable) == 0x000050, "Member 'FConfigsManager::FishingRodConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, FishConfigDataTable) == 0x000058, "Member 'FConfigsManager::FishConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, LauncherConfigDataTable) == 0x000060, "Member 'FConfigsManager::LauncherConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, QuestConfigDataTable) == 0x000068, "Member 'FConfigsManager::QuestConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, QuestSelectorConfigDataTable) == 0x000070, "Member 'FConfigsManager::QuestSelectorConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, ShopConfigDataTable) == 0x000078, "Member 'FConfigsManager::ShopConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerConfigDataTable) == 0x000080, "Member 'FConfigsManager::VillagerConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerCoreConfigDataTable) == 0x000088, "Member 'FConfigsManager::VillagerCoreConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerRelationshipLevelConfigDataTable) == 0x000090, "Member 'FConfigsManager::VillagerRelationshipLevelConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerRelationshipIntervalRewardsMetaConfig) == 0x000098, "Member 'FConfigsManager::VillagerRelationshipIntervalRewardsMetaConfig' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerGiftPreferenceConfigDataTable) == 0x0000A0, "Member 'FConfigsManager::VillagerGiftPreferenceConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, LevelerConfigDataTable) == 0x0000A8, "Member 'FConfigsManager::LevelerConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, BuffConfigDataTable) == 0x0000B0, "Member 'FConfigsManager::BuffConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, FactionConfigDataTable) == 0x0000B8, "Member 'FConfigsManager::FactionConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, ErrorMessagesDataTable) == 0x0000C0, "Member 'FConfigsManager::ErrorMessagesDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, ErrorModalDataTable) == 0x0000C8, "Member 'FConfigsManager::ErrorModalDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerMailMessageConfigDataTable) == 0x0000D0, "Member 'FConfigsManager::VillagerMailMessageConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, CreatureConfigDataTable) == 0x0000D8, "Member 'FConfigsManager::CreatureConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, BookConfigDataTable) == 0x0000E0, "Member 'FConfigsManager::BookConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerGiftPreferenceMetaConfig) == 0x0000E8, "Member 'FConfigsManager::VillagerGiftPreferenceMetaConfig' has a wrong offset!");
static_assert(offsetof(FConfigsManager, SpawnRarityConfigDataTable) == 0x0000F0, "Member 'FConfigsManager::SpawnRarityConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, WeatherPatternDataTable) == 0x0000F8, "Member 'FConfigsManager::WeatherPatternDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, IngredientTagConfigDataTable) == 0x000100, "Member 'FConfigsManager::IngredientTagConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, OneTimeItemConfigDataTable) == 0x000108, "Member 'FConfigsManager::OneTimeItemConfigDataTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, SequencerStandardBindings) == 0x000110, "Member 'FConfigsManager::SequencerStandardBindings' has a wrong offset!");
static_assert(offsetof(FConfigsManager, CharacterItemType) == 0x000118, "Member 'FConfigsManager::CharacterItemType' has a wrong offset!");
static_assert(offsetof(FConfigsManager, HomePlotType) == 0x000120, "Member 'FConfigsManager::HomePlotType' has a wrong offset!");
static_assert(offsetof(FConfigsManager, AllSongs) == 0x000148, "Member 'FConfigsManager::AllSongs' has a wrong offset!");
static_assert(offsetof(FConfigsManager, Globals) == 0x000158, "Member 'FConfigsManager::Globals' has a wrong offset!");
static_assert(offsetof(FConfigsManager, InventoryBagConfig_IdToFName) == 0x0004C0, "Member 'FConfigsManager::InventoryBagConfig_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, ItemConfig_IdToSoftPtr) == 0x000510, "Member 'FConfigsManager::ItemConfig_IdToSoftPtr' has a wrong offset!");
static_assert(offsetof(FConfigsManager, CrafterConfig_IdToFName) == 0x000560, "Member 'FConfigsManager::CrafterConfig_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, RecipeConfig_IdToFName) == 0x0005B0, "Member 'FConfigsManager::RecipeConfig_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VitalConfigMapping_IdToFName) == 0x000600, "Member 'FConfigsManager::VitalConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, SkillLevelConfigMapping_IdToFName) == 0x000650, "Member 'FConfigsManager::SkillLevelConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, QuestConfigMapping_IdToFName) == 0x0006A0, "Member 'FConfigsManager::QuestConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, QuestSelectorConfigMapping_IdToFName) == 0x0006F0, "Member 'FConfigsManager::QuestSelectorConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, ShopConfigMapping_IdToFName) == 0x000740, "Member 'FConfigsManager::ShopConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerConfigMapping_IdToFName) == 0x000790, "Member 'FConfigsManager::VillagerConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerCoreConfigMapping_IdToFName) == 0x0007E0, "Member 'FConfigsManager::VillagerCoreConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, BuffConfig_IdToFName) == 0x000830, "Member 'FConfigsManager::BuffConfig_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerMailMessageConfigMapping_IdToFName) == 0x000880, "Member 'FConfigsManager::VillagerMailMessageConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, CreatureConfigMapping_IdToFName) == 0x0008D0, "Member 'FConfigsManager::CreatureConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, BookConfigMapping_IdToFName) == 0x000920, "Member 'FConfigsManager::BookConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerGiftPreferenceConfigMapping_IdToFName) == 0x000970, "Member 'FConfigsManager::VillagerGiftPreferenceConfigMapping_IdToFName' has a wrong offset!");
static_assert(offsetof(FConfigsManager, AllRecipeIds) == 0x0009C0, "Member 'FConfigsManager::AllRecipeIds' has a wrong offset!");
static_assert(offsetof(FConfigsManager, RecipeLookupTable) == 0x0009D0, "Member 'FConfigsManager::RecipeLookupTable' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerNameToCoreConfigLists) == 0x000A20, "Member 'FConfigsManager::VillagerNameToCoreConfigLists' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerConfigIdToCoreConfigIdMap) == 0x000AC0, "Member 'FConfigsManager::VillagerConfigIdToCoreConfigIdMap' has a wrong offset!");
static_assert(offsetof(FConfigsManager, VillagerRelationshipLevels) == 0x000B10, "Member 'FConfigsManager::VillagerRelationshipLevels' has a wrong offset!");
static_assert(offsetof(FConfigsManager, EmptyVillagerCoreConfigLists) == 0x000B20, "Member 'FConfigsManager::EmptyVillagerCoreConfigLists' has a wrong offset!");
static_assert(offsetof(FConfigsManager, AllSkillTypes) == 0x000B50, "Member 'FConfigsManager::AllSkillTypes' has a wrong offset!");
static_assert(offsetof(FConfigsManager, AllVitalTypes) == 0x000B60, "Member 'FConfigsManager::AllVitalTypes' has a wrong offset!");

// ScriptStruct Palia.VAL_VariantChannelSettings
// 0x0040 (0x0040 - 0x0000)
struct FVAL_VariantChannelSettings final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_VariantChannelSettings) == 0x000008, "Wrong alignment on FVAL_VariantChannelSettings");
static_assert(sizeof(FVAL_VariantChannelSettings) == 0x000040, "Wrong size on FVAL_VariantChannelSettings");
static_assert(offsetof(FVAL_VariantChannelSettings, DisplayName) == 0x000000, "Member 'FVAL_VariantChannelSettings::DisplayName' has a wrong offset!");
static_assert(offsetof(FVAL_VariantChannelSettings, Icon) == 0x000018, "Member 'FVAL_VariantChannelSettings::Icon' has a wrong offset!");

// ScriptStruct Palia.ConsumableItem
// 0x0018 (0x0018 - 0x0000)
struct FConsumableItem final
{
public:
	class FString                                 ConsumableType;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsumableItem) == 0x000008, "Wrong alignment on FConsumableItem");
static_assert(sizeof(FConsumableItem) == 0x000018, "Wrong size on FConsumableItem");
static_assert(offsetof(FConsumableItem, ConsumableType) == 0x000000, "Member 'FConsumableItem::ConsumableType' has a wrong offset!");
static_assert(offsetof(FConsumableItem, ItemId) == 0x000010, "Member 'FConsumableItem::ItemId' has a wrong offset!");
static_assert(offsetof(FConsumableItem, Quantity) == 0x000014, "Member 'FConsumableItem::Quantity' has a wrong offset!");

// ScriptStruct Palia.ConsumableReward
// 0x0030 (0x0030 - 0x0000)
struct FConsumableReward final
{
public:
	struct FGuid                                  OriginId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginType;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FConsumableItem>                Items;                                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsumableReward) == 0x000008, "Wrong alignment on FConsumableReward");
static_assert(sizeof(FConsumableReward) == 0x000030, "Wrong size on FConsumableReward");
static_assert(offsetof(FConsumableReward, OriginId) == 0x000000, "Member 'FConsumableReward::OriginId' has a wrong offset!");
static_assert(offsetof(FConsumableReward, OriginType) == 0x000010, "Member 'FConsumableReward::OriginType' has a wrong offset!");
static_assert(offsetof(FConsumableReward, Items) == 0x000020, "Member 'FConsumableReward::Items' has a wrong offset!");

// ScriptStruct Palia.KickedVisitorPersist
// 0x0020 (0x0020 - 0x0000)
struct FKickedVisitorPersist final
{
public:
	struct FGuid                                  VisitorID;                                         // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         KickTime;                                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Duration;                                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKickedVisitorPersist) == 0x000008, "Wrong alignment on FKickedVisitorPersist");
static_assert(sizeof(FKickedVisitorPersist) == 0x000020, "Wrong size on FKickedVisitorPersist");
static_assert(offsetof(FKickedVisitorPersist, VisitorID) == 0x000000, "Member 'FKickedVisitorPersist::VisitorID' has a wrong offset!");
static_assert(offsetof(FKickedVisitorPersist, KickTime) == 0x000010, "Member 'FKickedVisitorPersist::KickTime' has a wrong offset!");
static_assert(offsetof(FKickedVisitorPersist, Duration) == 0x000018, "Member 'FKickedVisitorPersist::Duration' has a wrong offset!");

// ScriptStruct Palia.HousingOwnershipPersistBlock
// 0x0060 (0x00A0 - 0x0040)
struct FHousingOwnershipPersistBlock final : public FS6PersistBlock
{
public:
	class FString                                 ContainerHash;                                     // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveHousingSlot;                                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextSlotId;                                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHousingSlotPersist>            HousingSlotData;                                   // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 UnlockedPlotPersistIds;                            // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumTotalSimpleDecors;                              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTotalPlaceables;                                // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHouseOwnershipTitlePersist>    OwnershipList;                                     // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FKickedVisitorPersist>          KickedList;                                        // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHousingOwnershipPersistBlock) == 0x000008, "Wrong alignment on FHousingOwnershipPersistBlock");
static_assert(sizeof(FHousingOwnershipPersistBlock) == 0x0000A0, "Wrong size on FHousingOwnershipPersistBlock");
static_assert(offsetof(FHousingOwnershipPersistBlock, ContainerHash) == 0x000040, "Member 'FHousingOwnershipPersistBlock::ContainerHash' has a wrong offset!");
static_assert(offsetof(FHousingOwnershipPersistBlock, ActiveHousingSlot) == 0x000050, "Member 'FHousingOwnershipPersistBlock::ActiveHousingSlot' has a wrong offset!");
static_assert(offsetof(FHousingOwnershipPersistBlock, NextSlotId) == 0x000054, "Member 'FHousingOwnershipPersistBlock::NextSlotId' has a wrong offset!");
static_assert(offsetof(FHousingOwnershipPersistBlock, HousingSlotData) == 0x000058, "Member 'FHousingOwnershipPersistBlock::HousingSlotData' has a wrong offset!");
static_assert(offsetof(FHousingOwnershipPersistBlock, UnlockedPlotPersistIds) == 0x000068, "Member 'FHousingOwnershipPersistBlock::UnlockedPlotPersistIds' has a wrong offset!");
static_assert(offsetof(FHousingOwnershipPersistBlock, NumTotalSimpleDecors) == 0x000078, "Member 'FHousingOwnershipPersistBlock::NumTotalSimpleDecors' has a wrong offset!");
static_assert(offsetof(FHousingOwnershipPersistBlock, NumTotalPlaceables) == 0x00007C, "Member 'FHousingOwnershipPersistBlock::NumTotalPlaceables' has a wrong offset!");
static_assert(offsetof(FHousingOwnershipPersistBlock, OwnershipList) == 0x000080, "Member 'FHousingOwnershipPersistBlock::OwnershipList' has a wrong offset!");
static_assert(offsetof(FHousingOwnershipPersistBlock, KickedList) == 0x000090, "Member 'FHousingOwnershipPersistBlock::KickedList' has a wrong offset!");

// ScriptStruct Palia.PlaceableBasePersistBlock
// 0x0058 (0x0098 - 0x0040)
struct FPlaceableBasePersistBlock final : public FS6PersistBlock
{
public:
	int32                                         ItemType;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221E[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         LastSavedAtMs;                                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnchorType;                                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_221F[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AnchorUniqueId;                                    // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  AnchorId;                                          // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HousingSlotId;                                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Location;                                          // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Rotation;                                          // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2220[0x4];                                     // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaceableBasePersistBlock) == 0x000008, "Wrong alignment on FPlaceableBasePersistBlock");
static_assert(sizeof(FPlaceableBasePersistBlock) == 0x000098, "Wrong size on FPlaceableBasePersistBlock");
static_assert(offsetof(FPlaceableBasePersistBlock, ItemType) == 0x000040, "Member 'FPlaceableBasePersistBlock::ItemType' has a wrong offset!");
static_assert(offsetof(FPlaceableBasePersistBlock, LastSavedAtMs) == 0x000048, "Member 'FPlaceableBasePersistBlock::LastSavedAtMs' has a wrong offset!");
static_assert(offsetof(FPlaceableBasePersistBlock, AnchorType) == 0x000050, "Member 'FPlaceableBasePersistBlock::AnchorType' has a wrong offset!");
static_assert(offsetof(FPlaceableBasePersistBlock, AnchorUniqueId) == 0x000058, "Member 'FPlaceableBasePersistBlock::AnchorUniqueId' has a wrong offset!");
static_assert(offsetof(FPlaceableBasePersistBlock, AnchorId) == 0x000068, "Member 'FPlaceableBasePersistBlock::AnchorId' has a wrong offset!");
static_assert(offsetof(FPlaceableBasePersistBlock, HousingSlotId) == 0x000078, "Member 'FPlaceableBasePersistBlock::HousingSlotId' has a wrong offset!");
static_assert(offsetof(FPlaceableBasePersistBlock, Location) == 0x00007C, "Member 'FPlaceableBasePersistBlock::Location' has a wrong offset!");
static_assert(offsetof(FPlaceableBasePersistBlock, Rotation) == 0x000088, "Member 'FPlaceableBasePersistBlock::Rotation' has a wrong offset!");

// ScriptStruct Palia.TimedDropPersistBlock
// 0x0008 (0x0048 - 0x0040)
struct FTimedDropPersistBlock final : public FS6PersistBlock
{
public:
	int64                                         LastResetTimestampMs;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimedDropPersistBlock) == 0x000008, "Wrong alignment on FTimedDropPersistBlock");
static_assert(sizeof(FTimedDropPersistBlock) == 0x000048, "Wrong size on FTimedDropPersistBlock");
static_assert(offsetof(FTimedDropPersistBlock, LastResetTimestampMs) == 0x000040, "Member 'FTimedDropPersistBlock::LastResetTimestampMs' has a wrong offset!");

// ScriptStruct Palia.PlaceablePlugAndSocketPersistBlock
// 0x0018 (0x0058 - 0x0040)
struct FPlaceablePlugAndSocketPersistBlock final : public FS6PersistBlock
{
public:
	struct FGuid                                  SocketParentId;                                    // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SocketPersistId;                                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2221[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaceablePlugAndSocketPersistBlock) == 0x000008, "Wrong alignment on FPlaceablePlugAndSocketPersistBlock");
static_assert(sizeof(FPlaceablePlugAndSocketPersistBlock) == 0x000058, "Wrong size on FPlaceablePlugAndSocketPersistBlock");
static_assert(offsetof(FPlaceablePlugAndSocketPersistBlock, SocketParentId) == 0x000040, "Member 'FPlaceablePlugAndSocketPersistBlock::SocketParentId' has a wrong offset!");
static_assert(offsetof(FPlaceablePlugAndSocketPersistBlock, SocketPersistId) == 0x000050, "Member 'FPlaceablePlugAndSocketPersistBlock::SocketPersistId' has a wrong offset!");

// ScriptStruct Palia.WallpaperPersistBlock
// 0x0010 (0x0050 - 0x0040)
struct FWallpaperPersistBlock final : public FS6PersistBlock
{
public:
	TArray<struct FWallpaperItemPersist>          Wallpapers;                                        // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWallpaperPersistBlock) == 0x000008, "Wrong alignment on FWallpaperPersistBlock");
static_assert(sizeof(FWallpaperPersistBlock) == 0x000050, "Wrong size on FWallpaperPersistBlock");
static_assert(offsetof(FWallpaperPersistBlock, Wallpapers) == 0x000040, "Member 'FWallpaperPersistBlock::Wallpapers' has a wrong offset!");

// ScriptStruct Palia.WaterForRewardsPersistBlock
// 0x0020 (0x0060 - 0x0040)
struct FWaterForRewardsPersistBlock final : public FS6PersistBlock
{
public:
	int64                                         ValeriaTimeRewardCollectedAt;                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimesWatered;                                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2222[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ValeriaTimeWateredAt;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimesCollected;                                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2223[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaterForRewardsPersistBlock) == 0x000008, "Wrong alignment on FWaterForRewardsPersistBlock");
static_assert(sizeof(FWaterForRewardsPersistBlock) == 0x000060, "Wrong size on FWaterForRewardsPersistBlock");
static_assert(offsetof(FWaterForRewardsPersistBlock, ValeriaTimeRewardCollectedAt) == 0x000040, "Member 'FWaterForRewardsPersistBlock::ValeriaTimeRewardCollectedAt' has a wrong offset!");
static_assert(offsetof(FWaterForRewardsPersistBlock, TimesWatered) == 0x000048, "Member 'FWaterForRewardsPersistBlock::TimesWatered' has a wrong offset!");
static_assert(offsetof(FWaterForRewardsPersistBlock, ValeriaTimeWateredAt) == 0x000050, "Member 'FWaterForRewardsPersistBlock::ValeriaTimeWateredAt' has a wrong offset!");
static_assert(offsetof(FWaterForRewardsPersistBlock, TimesCollected) == 0x000058, "Member 'FWaterForRewardsPersistBlock::TimesCollected' has a wrong offset!");

// ScriptStruct Palia.HousingPersistContainer
// 0x0190 (0x01A8 - 0x0018)
struct FHousingPersistContainer final : public FS6PersistContainer
{
public:
	struct FHousingOwnershipPersistBlock          HOA;                                               // 0x0018(0x00A0)(NativeAccessSpecifierPublic)
	TArray<struct FPlaceableBasePersistBlock>     Placeables;                                        // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSimpleDecorPersistBlock>       SimpleDecors;                                      // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCrafterPersistBlock>           Crafters;                                          // 0x00D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCrafterAutomaticPersistBlock>  Autocrafters;                                      // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTimedDropPersistBlock>         TimedDropDecorations;                              // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLevelerPersistBlock>           Leveler;                                           // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlaceablePlugAndSocketPersistBlock> Sockets;                                           // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWallpaperPersistBlock>         Wallpaper;                                         // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableAlterationsPersistBlock> Alterations;                                       // 0x0138(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGardenPersistBlock>            Garden;                                            // 0x0148(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWormFarmPersistBlock>          WormFarm;                                          // 0x0158(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInventoryPersistBlock>         Inventory;                                         // 0x0168(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FShippingBinPersistBlock>       ShippingBin;                                       // 0x0178(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGardenManagementPersistBlock>  GardenManagement;                                  // 0x0188(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWaterForRewardsPersistBlock>   WaterForRewards;                                   // 0x0198(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHousingPersistContainer) == 0x000008, "Wrong alignment on FHousingPersistContainer");
static_assert(sizeof(FHousingPersistContainer) == 0x0001A8, "Wrong size on FHousingPersistContainer");
static_assert(offsetof(FHousingPersistContainer, HOA) == 0x000018, "Member 'FHousingPersistContainer::HOA' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, Placeables) == 0x0000B8, "Member 'FHousingPersistContainer::Placeables' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, SimpleDecors) == 0x0000C8, "Member 'FHousingPersistContainer::SimpleDecors' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, Crafters) == 0x0000D8, "Member 'FHousingPersistContainer::Crafters' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, Autocrafters) == 0x0000E8, "Member 'FHousingPersistContainer::Autocrafters' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, TimedDropDecorations) == 0x0000F8, "Member 'FHousingPersistContainer::TimedDropDecorations' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, Leveler) == 0x000108, "Member 'FHousingPersistContainer::Leveler' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, Sockets) == 0x000118, "Member 'FHousingPersistContainer::Sockets' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, Wallpaper) == 0x000128, "Member 'FHousingPersistContainer::Wallpaper' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, Alterations) == 0x000138, "Member 'FHousingPersistContainer::Alterations' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, Garden) == 0x000148, "Member 'FHousingPersistContainer::Garden' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, WormFarm) == 0x000158, "Member 'FHousingPersistContainer::WormFarm' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, Inventory) == 0x000168, "Member 'FHousingPersistContainer::Inventory' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, ShippingBin) == 0x000178, "Member 'FHousingPersistContainer::ShippingBin' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, GardenManagement) == 0x000188, "Member 'FHousingPersistContainer::GardenManagement' has a wrong offset!");
static_assert(offsetof(FHousingPersistContainer, WaterForRewards) == 0x000198, "Member 'FHousingPersistContainer::WaterForRewards' has a wrong offset!");

// ScriptStruct Palia.VAL_OnClaimPlayerRewardDelegates
// 0x0020 (0x0020 - 0x0000)
struct FVAL_OnClaimPlayerRewardDelegates final
{
public:
	TDelegate<void(class UVAL_RewardsPlayerComponent* Component)> OnSuccess;                                         // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UVAL_RewardsPlayerComponent* Component, class FText& Error)> OnFailure;                                         // 0x0010(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_OnClaimPlayerRewardDelegates) == 0x000004, "Wrong alignment on FVAL_OnClaimPlayerRewardDelegates");
static_assert(sizeof(FVAL_OnClaimPlayerRewardDelegates) == 0x000020, "Wrong size on FVAL_OnClaimPlayerRewardDelegates");
static_assert(offsetof(FVAL_OnClaimPlayerRewardDelegates, OnSuccess) == 0x000000, "Member 'FVAL_OnClaimPlayerRewardDelegates::OnSuccess' has a wrong offset!");
static_assert(offsetof(FVAL_OnClaimPlayerRewardDelegates, OnFailure) == 0x000010, "Member 'FVAL_OnClaimPlayerRewardDelegates::OnFailure' has a wrong offset!");

// ScriptStruct Palia.ClockTimeInValeria
// 0x0010 (0x0010 - 0x0000)
struct FClockTimeInValeria final
{
public:
	int32                                         Day;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hour;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Second;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClockTimeInValeria) == 0x000004, "Wrong alignment on FClockTimeInValeria");
static_assert(sizeof(FClockTimeInValeria) == 0x000010, "Wrong size on FClockTimeInValeria");
static_assert(offsetof(FClockTimeInValeria, Day) == 0x000000, "Member 'FClockTimeInValeria::Day' has a wrong offset!");
static_assert(offsetof(FClockTimeInValeria, Hour) == 0x000004, "Member 'FClockTimeInValeria::Hour' has a wrong offset!");
static_assert(offsetof(FClockTimeInValeria, Minute) == 0x000008, "Member 'FClockTimeInValeria::Minute' has a wrong offset!");
static_assert(offsetof(FClockTimeInValeria, Second) == 0x00000C, "Member 'FClockTimeInValeria::Second' has a wrong offset!");

// ScriptStruct Palia.PlacementSubExtents
// 0x0030 (0x0030 - 0x0000)
struct FPlacementSubExtents final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extents;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlacementSubExtents) == 0x000008, "Wrong alignment on FPlacementSubExtents");
static_assert(sizeof(FPlacementSubExtents) == 0x000030, "Wrong size on FPlacementSubExtents");
static_assert(offsetof(FPlacementSubExtents, Offset) == 0x000000, "Member 'FPlacementSubExtents::Offset' has a wrong offset!");
static_assert(offsetof(FPlacementSubExtents, Extents) == 0x000018, "Member 'FPlacementSubExtents::Extents' has a wrong offset!");

// ScriptStruct Palia.PlacementConfig
// 0x01F0 (0x01F0 - 0x0000)
struct FPlacementConfig final
{
public:
	bool                                          bCanBePlaced;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2224[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PlacementText;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bPlacementRequiresStarQuality;                     // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeMoved;                                       // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeSummoned;                                    // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2225[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Placeable;                                         // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SpawnerPlaceable;                                  // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaceableStartingLevel;                            // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaceableUsesHousingInventory;                    // 0x007C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2226[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HousingInventorySortOrder;                         // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2227[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlacementExtents;                                  // 0x0088(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlacementSubExtents>           SubPlacementExtents;                               // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSingleTagFilter                       PlacementAllowedTags;                              // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPlacementPlugConnectorConfig          Plug;                                              // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UDataTable*                             SocketsTable;                                      // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaceableOnWorldTerrain;                          // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2228[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EPhysicalSurface>                      AcceptableWorldTerrainPlacementSurfaces;           // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MaxNumberPlacedOnWorldTerrainAtATime;              // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceToWorldTerrain;                         // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleSlopeCanPlaceOnWorldTerrain;               // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceBetweenOtherWorldTerrainPlaceablesOfSameType; // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoresGridAndBounds;                             // 0x0130(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoresClipping;                                  // 0x0131(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2229[0x6];                                     // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTagFilter                             PermissiveClippingTagFilter;                       // 0x0138(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bAlwaysAnchorsToPlot;                              // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisallowFreePlacement;                            // 0x0161(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222A[0x2];                                     // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GridCellSnappingScale;                             // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AlterationsTable;                                  // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRotationAngle;                                  // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysRotateAroundZAxis;                          // 0x0174(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventMovementOutsideHousingMenu;                // 0x0175(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeRotatedDuringPlacement;                      // 0x0176(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFencePlacementType                           FencePlacement;                                    // 0x0177(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickyPlacementDistance;                           // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222B[0x4];                                     // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTagFilter                             StickyPlacementTagFilter;                          // 0x0180(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         StickyPlacementOrthogonalSnapScale;                // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalWallAnchorMatchingDistance;                // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalWallAnchorMatchingDistance;              // 0x01B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalGroundAnchorMatchingDistance;            // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlacementOffsetInSocketMode;                       // 0x01B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RegionSnapPointFilter;                             // 0x01D0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlacementConfig) == 0x000008, "Wrong alignment on FPlacementConfig");
static_assert(sizeof(FPlacementConfig) == 0x0001F0, "Wrong size on FPlacementConfig");
static_assert(offsetof(FPlacementConfig, bCanBePlaced) == 0x000000, "Member 'FPlacementConfig::bCanBePlaced' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, PlacementText) == 0x000008, "Member 'FPlacementConfig::PlacementText' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bPlacementRequiresStarQuality) == 0x000020, "Member 'FPlacementConfig::bPlacementRequiresStarQuality' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bCanBeMoved) == 0x000021, "Member 'FPlacementConfig::bCanBeMoved' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bCanBeSummoned) == 0x000022, "Member 'FPlacementConfig::bCanBeSummoned' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, Placeable) == 0x000028, "Member 'FPlacementConfig::Placeable' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, SpawnerPlaceable) == 0x000050, "Member 'FPlacementConfig::SpawnerPlaceable' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, PlaceableStartingLevel) == 0x000078, "Member 'FPlacementConfig::PlaceableStartingLevel' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bPlaceableUsesHousingInventory) == 0x00007C, "Member 'FPlacementConfig::bPlaceableUsesHousingInventory' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, HousingInventorySortOrder) == 0x000080, "Member 'FPlacementConfig::HousingInventorySortOrder' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, PlacementExtents) == 0x000088, "Member 'FPlacementConfig::PlacementExtents' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, SubPlacementExtents) == 0x0000A0, "Member 'FPlacementConfig::SubPlacementExtents' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, PlacementAllowedTags) == 0x0000B0, "Member 'FPlacementConfig::PlacementAllowedTags' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, Plug) == 0x0000D8, "Member 'FPlacementConfig::Plug' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, SocketsTable) == 0x000100, "Member 'FPlacementConfig::SocketsTable' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bPlaceableOnWorldTerrain) == 0x000108, "Member 'FPlacementConfig::bPlaceableOnWorldTerrain' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, AcceptableWorldTerrainPlacementSurfaces) == 0x000110, "Member 'FPlacementConfig::AcceptableWorldTerrainPlacementSurfaces' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, MaxNumberPlacedOnWorldTerrainAtATime) == 0x000120, "Member 'FPlacementConfig::MaxNumberPlacedOnWorldTerrainAtATime' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, MaxDistanceToWorldTerrain) == 0x000124, "Member 'FPlacementConfig::MaxDistanceToWorldTerrain' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, MaxAngleSlopeCanPlaceOnWorldTerrain) == 0x000128, "Member 'FPlacementConfig::MaxAngleSlopeCanPlaceOnWorldTerrain' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, MaxDistanceBetweenOtherWorldTerrainPlaceablesOfSameType) == 0x00012C, "Member 'FPlacementConfig::MaxDistanceBetweenOtherWorldTerrainPlaceablesOfSameType' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bIgnoresGridAndBounds) == 0x000130, "Member 'FPlacementConfig::bIgnoresGridAndBounds' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bIgnoresClipping) == 0x000131, "Member 'FPlacementConfig::bIgnoresClipping' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, PermissiveClippingTagFilter) == 0x000138, "Member 'FPlacementConfig::PermissiveClippingTagFilter' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bAlwaysAnchorsToPlot) == 0x000160, "Member 'FPlacementConfig::bAlwaysAnchorsToPlot' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bDisallowFreePlacement) == 0x000161, "Member 'FPlacementConfig::bDisallowFreePlacement' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, GridCellSnappingScale) == 0x000164, "Member 'FPlacementConfig::GridCellSnappingScale' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, AlterationsTable) == 0x000168, "Member 'FPlacementConfig::AlterationsTable' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, MinRotationAngle) == 0x000170, "Member 'FPlacementConfig::MinRotationAngle' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bAlwaysRotateAroundZAxis) == 0x000174, "Member 'FPlacementConfig::bAlwaysRotateAroundZAxis' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bPreventMovementOutsideHousingMenu) == 0x000175, "Member 'FPlacementConfig::bPreventMovementOutsideHousingMenu' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, bCanBeRotatedDuringPlacement) == 0x000176, "Member 'FPlacementConfig::bCanBeRotatedDuringPlacement' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, FencePlacement) == 0x000177, "Member 'FPlacementConfig::FencePlacement' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, StickyPlacementDistance) == 0x000178, "Member 'FPlacementConfig::StickyPlacementDistance' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, StickyPlacementTagFilter) == 0x000180, "Member 'FPlacementConfig::StickyPlacementTagFilter' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, StickyPlacementOrthogonalSnapScale) == 0x0001A8, "Member 'FPlacementConfig::StickyPlacementOrthogonalSnapScale' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, VerticalWallAnchorMatchingDistance) == 0x0001AC, "Member 'FPlacementConfig::VerticalWallAnchorMatchingDistance' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, HorizontalWallAnchorMatchingDistance) == 0x0001B0, "Member 'FPlacementConfig::HorizontalWallAnchorMatchingDistance' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, HorizontalGroundAnchorMatchingDistance) == 0x0001B4, "Member 'FPlacementConfig::HorizontalGroundAnchorMatchingDistance' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, PlacementOffsetInSocketMode) == 0x0001B8, "Member 'FPlacementConfig::PlacementOffsetInSocketMode' has a wrong offset!");
static_assert(offsetof(FPlacementConfig, RegionSnapPointFilter) == 0x0001D0, "Member 'FPlacementConfig::RegionSnapPointFilter' has a wrong offset!");

// ScriptStruct Palia.EquipViewConfig
// 0x0050 (0x0050 - 0x0000)
struct FEquipViewConfig final
{
public:
	TSoftClassPtr<class UClass>                   LeftHand;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   RightHand;                                         // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEquipViewConfig) == 0x000008, "Wrong alignment on FEquipViewConfig");
static_assert(sizeof(FEquipViewConfig) == 0x000050, "Wrong size on FEquipViewConfig");
static_assert(offsetof(FEquipViewConfig, LeftHand) == 0x000000, "Member 'FEquipViewConfig::LeftHand' has a wrong offset!");
static_assert(offsetof(FEquipViewConfig, RightHand) == 0x000028, "Member 'FEquipViewConfig::RightHand' has a wrong offset!");

// ScriptStruct Palia.ItemPlayerRequestConfig
// 0x0004 (0x0004 - 0x0000)
struct FItemPlayerRequestConfig final
{
public:
	int32                                         MaxNumberPerRequest;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemPlayerRequestConfig) == 0x000004, "Wrong alignment on FItemPlayerRequestConfig");
static_assert(sizeof(FItemPlayerRequestConfig) == 0x000004, "Wrong size on FItemPlayerRequestConfig");
static_assert(offsetof(FItemPlayerRequestConfig, MaxNumberPerRequest) == 0x000000, "Member 'FItemPlayerRequestConfig::MaxNumberPerRequest' has a wrong offset!");

// ScriptStruct Palia.ItemVariantVisualConfig
// 0x0010 (0x0010 - 0x0000)
struct FItemVariantVisualConfig final
{
public:
	TArray<struct FItemVariantVisualConfigReplacement> Replacements;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemVariantVisualConfig) == 0x000008, "Wrong alignment on FItemVariantVisualConfig");
static_assert(sizeof(FItemVariantVisualConfig) == 0x000010, "Wrong size on FItemVariantVisualConfig");
static_assert(offsetof(FItemVariantVisualConfig, Replacements) == 0x000000, "Member 'FItemVariantVisualConfig::Replacements' has a wrong offset!");

// ScriptStruct Palia.ItemVariantConfig
// 0x0040 (0x0040 - 0x0000)
struct FItemVariantConfig final
{
public:
	int32                                         TintPersistID;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconOverride;                                      // 0x0008(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemVariantVisualConfig               MaterialOverrides;                                 // 0x0030(0x0010)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemVariantConfig) == 0x000008, "Wrong alignment on FItemVariantConfig");
static_assert(sizeof(FItemVariantConfig) == 0x000040, "Wrong size on FItemVariantConfig");
static_assert(offsetof(FItemVariantConfig, TintPersistID) == 0x000000, "Member 'FItemVariantConfig::TintPersistID' has a wrong offset!");
static_assert(offsetof(FItemVariantConfig, IconOverride) == 0x000008, "Member 'FItemVariantConfig::IconOverride' has a wrong offset!");
static_assert(offsetof(FItemVariantConfig, MaterialOverrides) == 0x000030, "Member 'FItemVariantConfig::MaterialOverrides' has a wrong offset!");

// ScriptStruct Palia.ItemVariantsConfig
// 0x0018 (0x0018 - 0x0000)
struct FItemVariantsConfig final
{
public:
	TArray<struct FItemVariantConfig>             Variants;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUseRandomMeshVariant;                             // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemVariantsConfig) == 0x000008, "Wrong alignment on FItemVariantsConfig");
static_assert(sizeof(FItemVariantsConfig) == 0x000018, "Wrong size on FItemVariantsConfig");
static_assert(offsetof(FItemVariantsConfig, Variants) == 0x000000, "Member 'FItemVariantsConfig::Variants' has a wrong offset!");
static_assert(offsetof(FItemVariantsConfig, bUseRandomMeshVariant) == 0x000010, "Member 'FItemVariantsConfig::bUseRandomMeshVariant' has a wrong offset!");

// ScriptStruct Palia.DEPRECATED_ItemConfig
// 0x05A0 (0x05A8 - 0x0008)
struct FDEPRECATED_ItemConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStackSize;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           StarQualityDescription;                            // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlacementConfig                       Placement;                                         // 0x0058(0x01F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FStartingItemConfig                    StartsWith;                                        // 0x0248(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_222E[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillPointCost                        SkillPointCost;                                    // 0x024C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSkillPointRequirement>         SkillPointRequirements;                            // 0x0250(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Shop;                                              // 0x0270(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquipViewConfig                       EquippedView;                                      // 0x0298(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bCanBeConsumed;                                    // 0x02E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSimpleDecor;                                    // 0x02E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x02EA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222F[0x5];                                     // 0x02EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    NormalQualityBuffConfig;                           // 0x02F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    StarQualityBuffConfig;                             // 0x0300(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             ConsumeRewards;                                    // 0x0310(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ConsumeText;                                       // 0x0320(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESkillType                                    ConsumeSkillLimit;                                 // 0x0338(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2230[0x3];                                     // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConsumeSkillLimitLevel;                            // 0x033C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemUseConfig                         ItemUseConfig;                                     // 0x0340(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EItemCategory                                 Category;                                          // 0x0358(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   Rarity;                                            // 0x0359(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemQuality                                  Quality;                                           // 0x035A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2231[0x5];                                     // 0x035B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTagList                               Tags;                                              // 0x0360(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SellValueConfig;                                   // 0x0380(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EVitalType                                    RequestRewardType;                                 // 0x0390(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2232[0x3];                                     // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequestRewardAmount;                               // 0x0394(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FishingRodConfigName;                              // 0x0398(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    LauncherConfig;                                    // 0x03A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ProjectileActor;                                   // 0x03B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            ProjectileMesh;                                    // 0x03D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreventGifting;                                    // 0x03E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2233[0x3];                                     // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WormFarmFoodValue;                                 // 0x03E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StorageStackLimit;                                 // 0x03E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2234[0x4];                                     // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EItemStorageCategory>                  CanStore;                                          // 0x03F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   StorageName;                                       // 0x0400(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   StorageType;                                       // 0x0418(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         AddedStorageCapacity;                              // 0x0430(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2235[0x4];                                     // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AddedMaxStoragePerLevel;                           // 0x0438(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    AbilitiesConfig;                                   // 0x0448(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UGardenBuffConfig*                      GardenBuffConfig;                                  // 0x0458(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSeedConfig                            SeedConfig;                                        // 0x0460(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bIsWateringCan;                                    // 0x0508(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2236[0x3];                                     // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemPlayerRequestConfig               PlayerRequestConfig;                               // 0x050C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FItemTrackingConfig                    ItemTracking;                                      // 0x0510(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2237[0x7];                                     // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemUpgradeConfig*                     ItemUpgradeConfig;                                 // 0x0518(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeDestroyed;                                   // 0x0520(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2238[0x7];                                     // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   EquipGameplayEffect;                               // 0x0528(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HousingPlacementCost;                              // 0x0550(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoConsumeOnAcquire;                             // 0x0554(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUniqueDrop;                                     // 0x0555(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowNewUniqueDropIfLeavesPossession;             // 0x0556(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2239[0x1];                                     // 0x0557(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    ThisItemBeginsAQuest;                              // 0x0558(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsQuestItem;                                      // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_223A[0x7];                                     // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    AudioConfig;                                       // 0x0570(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AbsorptionValue;                                   // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_223B[0x4];                                     // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGearConfig*                            GearConfig;                                        // 0x0588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemVariantsConfig                    ItemVariantsConfig;                                // 0x0590(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDEPRECATED_ItemConfig) == 0x000008, "Wrong alignment on FDEPRECATED_ItemConfig");
static_assert(sizeof(FDEPRECATED_ItemConfig) == 0x0005A8, "Wrong size on FDEPRECATED_ItemConfig");
static_assert(offsetof(FDEPRECATED_ItemConfig, PersistId) == 0x000008, "Member 'FDEPRECATED_ItemConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, MaxStackSize) == 0x00000C, "Member 'FDEPRECATED_ItemConfig::MaxStackSize' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, DisplayName) == 0x000010, "Member 'FDEPRECATED_ItemConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, Description) == 0x000028, "Member 'FDEPRECATED_ItemConfig::Description' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, StarQualityDescription) == 0x000040, "Member 'FDEPRECATED_ItemConfig::StarQualityDescription' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, Icon) == 0x000050, "Member 'FDEPRECATED_ItemConfig::Icon' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, Placement) == 0x000058, "Member 'FDEPRECATED_ItemConfig::Placement' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, StartsWith) == 0x000248, "Member 'FDEPRECATED_ItemConfig::StartsWith' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, SkillPointCost) == 0x00024C, "Member 'FDEPRECATED_ItemConfig::SkillPointCost' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, SkillPointRequirements) == 0x000250, "Member 'FDEPRECATED_ItemConfig::SkillPointRequirements' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, Materials) == 0x000260, "Member 'FDEPRECATED_ItemConfig::Materials' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, Shop) == 0x000270, "Member 'FDEPRECATED_ItemConfig::Shop' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, EquippedView) == 0x000298, "Member 'FDEPRECATED_ItemConfig::EquippedView' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, bCanBeConsumed) == 0x0002E8, "Member 'FDEPRECATED_ItemConfig::bCanBeConsumed' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, bIsSimpleDecor) == 0x0002E9, "Member 'FDEPRECATED_ItemConfig::bIsSimpleDecor' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, bIsEnabled) == 0x0002EA, "Member 'FDEPRECATED_ItemConfig::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, NormalQualityBuffConfig) == 0x0002F0, "Member 'FDEPRECATED_ItemConfig::NormalQualityBuffConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, StarQualityBuffConfig) == 0x000300, "Member 'FDEPRECATED_ItemConfig::StarQualityBuffConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ConsumeRewards) == 0x000310, "Member 'FDEPRECATED_ItemConfig::ConsumeRewards' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ConsumeText) == 0x000320, "Member 'FDEPRECATED_ItemConfig::ConsumeText' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ConsumeSkillLimit) == 0x000338, "Member 'FDEPRECATED_ItemConfig::ConsumeSkillLimit' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ConsumeSkillLimitLevel) == 0x00033C, "Member 'FDEPRECATED_ItemConfig::ConsumeSkillLimitLevel' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ItemUseConfig) == 0x000340, "Member 'FDEPRECATED_ItemConfig::ItemUseConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, Category) == 0x000358, "Member 'FDEPRECATED_ItemConfig::Category' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, Rarity) == 0x000359, "Member 'FDEPRECATED_ItemConfig::Rarity' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, Quality) == 0x00035A, "Member 'FDEPRECATED_ItemConfig::Quality' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, Tags) == 0x000360, "Member 'FDEPRECATED_ItemConfig::Tags' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, SellValueConfig) == 0x000380, "Member 'FDEPRECATED_ItemConfig::SellValueConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, RequestRewardType) == 0x000390, "Member 'FDEPRECATED_ItemConfig::RequestRewardType' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, RequestRewardAmount) == 0x000394, "Member 'FDEPRECATED_ItemConfig::RequestRewardAmount' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, FishingRodConfigName) == 0x000398, "Member 'FDEPRECATED_ItemConfig::FishingRodConfigName' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, LauncherConfig) == 0x0003A0, "Member 'FDEPRECATED_ItemConfig::LauncherConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ProjectileActor) == 0x0003B0, "Member 'FDEPRECATED_ItemConfig::ProjectileActor' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ProjectileMesh) == 0x0003D8, "Member 'FDEPRECATED_ItemConfig::ProjectileMesh' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, PreventGifting) == 0x0003E0, "Member 'FDEPRECATED_ItemConfig::PreventGifting' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, WormFarmFoodValue) == 0x0003E4, "Member 'FDEPRECATED_ItemConfig::WormFarmFoodValue' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, StorageStackLimit) == 0x0003E8, "Member 'FDEPRECATED_ItemConfig::StorageStackLimit' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, CanStore) == 0x0003F0, "Member 'FDEPRECATED_ItemConfig::CanStore' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, StorageName) == 0x000400, "Member 'FDEPRECATED_ItemConfig::StorageName' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, StorageType) == 0x000418, "Member 'FDEPRECATED_ItemConfig::StorageType' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, AddedStorageCapacity) == 0x000430, "Member 'FDEPRECATED_ItemConfig::AddedStorageCapacity' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, AddedMaxStoragePerLevel) == 0x000438, "Member 'FDEPRECATED_ItemConfig::AddedMaxStoragePerLevel' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, AbilitiesConfig) == 0x000448, "Member 'FDEPRECATED_ItemConfig::AbilitiesConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, GardenBuffConfig) == 0x000458, "Member 'FDEPRECATED_ItemConfig::GardenBuffConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, SeedConfig) == 0x000460, "Member 'FDEPRECATED_ItemConfig::SeedConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, bIsWateringCan) == 0x000508, "Member 'FDEPRECATED_ItemConfig::bIsWateringCan' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, PlayerRequestConfig) == 0x00050C, "Member 'FDEPRECATED_ItemConfig::PlayerRequestConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ItemTracking) == 0x000510, "Member 'FDEPRECATED_ItemConfig::ItemTracking' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ItemUpgradeConfig) == 0x000518, "Member 'FDEPRECATED_ItemConfig::ItemUpgradeConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, bCanBeDestroyed) == 0x000520, "Member 'FDEPRECATED_ItemConfig::bCanBeDestroyed' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, EquipGameplayEffect) == 0x000528, "Member 'FDEPRECATED_ItemConfig::EquipGameplayEffect' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, HousingPlacementCost) == 0x000550, "Member 'FDEPRECATED_ItemConfig::HousingPlacementCost' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, bAutoConsumeOnAcquire) == 0x000554, "Member 'FDEPRECATED_ItemConfig::bAutoConsumeOnAcquire' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, bIsUniqueDrop) == 0x000555, "Member 'FDEPRECATED_ItemConfig::bIsUniqueDrop' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, bAllowNewUniqueDropIfLeavesPossession) == 0x000556, "Member 'FDEPRECATED_ItemConfig::bAllowNewUniqueDropIfLeavesPossession' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ThisItemBeginsAQuest) == 0x000558, "Member 'FDEPRECATED_ItemConfig::ThisItemBeginsAQuest' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, bIsQuestItem) == 0x000568, "Member 'FDEPRECATED_ItemConfig::bIsQuestItem' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, AudioConfig) == 0x000570, "Member 'FDEPRECATED_ItemConfig::AudioConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, AbsorptionValue) == 0x000580, "Member 'FDEPRECATED_ItemConfig::AbsorptionValue' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, GearConfig) == 0x000588, "Member 'FDEPRECATED_ItemConfig::GearConfig' has a wrong offset!");
static_assert(offsetof(FDEPRECATED_ItemConfig, ItemVariantsConfig) == 0x000590, "Member 'FDEPRECATED_ItemConfig::ItemVariantsConfig' has a wrong offset!");

// ScriptStruct Palia.ValeriaTimeSpan
// 0x0020 (0x0020 - 0x0000)
struct FValeriaTimeSpan final
{
public:
	struct FClockTimeInValeria                    Start;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FClockTimeInValeria                    End;                                               // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaTimeSpan) == 0x000004, "Wrong alignment on FValeriaTimeSpan");
static_assert(sizeof(FValeriaTimeSpan) == 0x000020, "Wrong size on FValeriaTimeSpan");
static_assert(offsetof(FValeriaTimeSpan, Start) == 0x000000, "Member 'FValeriaTimeSpan::Start' has a wrong offset!");
static_assert(offsetof(FValeriaTimeSpan, End) == 0x000010, "Member 'FValeriaTimeSpan::End' has a wrong offset!");

// ScriptStruct Palia.WorldMapConfig
// 0x0078 (0x0078 - 0x0000)
struct FWorldMapConfig final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldMapDisplayType                          WorldMapDisplayType;                               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_223C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BottomRightCorner;                                 // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TopLeftCorner;                                     // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerMustBeWithinBounds;                         // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_223D[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberMarkersRequired;                             // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldMapType                                 WorldMapType;                                      // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_223E[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldMapConfig) == 0x000008, "Wrong alignment on FWorldMapConfig");
static_assert(sizeof(FWorldMapConfig) == 0x000078, "Wrong size on FWorldMapConfig");
static_assert(offsetof(FWorldMapConfig, Name) == 0x000000, "Member 'FWorldMapConfig::Name' has a wrong offset!");
static_assert(offsetof(FWorldMapConfig, WorldMapDisplayType) == 0x000008, "Member 'FWorldMapConfig::WorldMapDisplayType' has a wrong offset!");
static_assert(offsetof(FWorldMapConfig, Image) == 0x000010, "Member 'FWorldMapConfig::Image' has a wrong offset!");
static_assert(offsetof(FWorldMapConfig, BottomRightCorner) == 0x000038, "Member 'FWorldMapConfig::BottomRightCorner' has a wrong offset!");
static_assert(offsetof(FWorldMapConfig, TopLeftCorner) == 0x000050, "Member 'FWorldMapConfig::TopLeftCorner' has a wrong offset!");
static_assert(offsetof(FWorldMapConfig, bPlayerMustBeWithinBounds) == 0x000068, "Member 'FWorldMapConfig::bPlayerMustBeWithinBounds' has a wrong offset!");
static_assert(offsetof(FWorldMapConfig, NumberMarkersRequired) == 0x00006C, "Member 'FWorldMapConfig::NumberMarkersRequired' has a wrong offset!");
static_assert(offsetof(FWorldMapConfig, WorldMapType) == 0x000070, "Member 'FWorldMapConfig::WorldMapType' has a wrong offset!");

// ScriptStruct Palia.FishMinigameSpawnConfig
// 0x0108 (0x0108 - 0x0000)
struct FFishMinigameSpawnConfig final
{
public:
	TSoftObjectPtr<class UFishMinigameConfig>     FishConfig;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLootRequirements                      Requirements;                                      // 0x0028(0x00D8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFishSpawnBuckets                             SpawnBucket;                                       // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_223F[0x7];                                     // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishMinigameSpawnConfig) == 0x000008, "Wrong alignment on FFishMinigameSpawnConfig");
static_assert(sizeof(FFishMinigameSpawnConfig) == 0x000108, "Wrong size on FFishMinigameSpawnConfig");
static_assert(offsetof(FFishMinigameSpawnConfig, FishConfig) == 0x000000, "Member 'FFishMinigameSpawnConfig::FishConfig' has a wrong offset!");
static_assert(offsetof(FFishMinigameSpawnConfig, Requirements) == 0x000028, "Member 'FFishMinigameSpawnConfig::Requirements' has a wrong offset!");
static_assert(offsetof(FFishMinigameSpawnConfig, SpawnBucket) == 0x000100, "Member 'FFishMinigameSpawnConfig::SpawnBucket' has a wrong offset!");

// ScriptStruct Palia.GardeningPlantHarvestConfig
// 0x000C (0x000C - 0x0000)
struct FGardeningPlantHarvestConfig final
{
public:
	int32                                         NumItems1x1;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumItems2x2;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumItems3x3;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardeningPlantHarvestConfig) == 0x000004, "Wrong alignment on FGardeningPlantHarvestConfig");
static_assert(sizeof(FGardeningPlantHarvestConfig) == 0x00000C, "Wrong size on FGardeningPlantHarvestConfig");
static_assert(offsetof(FGardeningPlantHarvestConfig, NumItems1x1) == 0x000000, "Member 'FGardeningPlantHarvestConfig::NumItems1x1' has a wrong offset!");
static_assert(offsetof(FGardeningPlantHarvestConfig, NumItems2x2) == 0x000004, "Member 'FGardeningPlantHarvestConfig::NumItems2x2' has a wrong offset!");
static_assert(offsetof(FGardeningPlantHarvestConfig, NumItems3x3) == 0x000008, "Member 'FGardeningPlantHarvestConfig::NumItems3x3' has a wrong offset!");

// ScriptStruct Palia.LootBundleConfig
// 0x0020 (0x0028 - 0x0008)
struct FLootBundleConfig final : public FTableRowBase
{
public:
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2240[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDataTableRowHandle>            LootBundle;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bAwardRecipesAsInspiration;                        // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2241[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InspirationOptionCount;                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLootBundleConfig) == 0x000008, "Wrong alignment on FLootBundleConfig");
static_assert(sizeof(FLootBundleConfig) == 0x000028, "Wrong size on FLootBundleConfig");
static_assert(offsetof(FLootBundleConfig, bEnabled) == 0x000008, "Member 'FLootBundleConfig::bEnabled' has a wrong offset!");
static_assert(offsetof(FLootBundleConfig, LootBundle) == 0x000010, "Member 'FLootBundleConfig::LootBundle' has a wrong offset!");
static_assert(offsetof(FLootBundleConfig, bAwardRecipesAsInspiration) == 0x000020, "Member 'FLootBundleConfig::bAwardRecipesAsInspiration' has a wrong offset!");
static_assert(offsetof(FLootBundleConfig, InspirationOptionCount) == 0x000024, "Member 'FLootBundleConfig::InspirationOptionCount' has a wrong offset!");

// ScriptStruct Palia.PropSpawnInfo
// 0x0038 (0x0038 - 0x0000)
struct FPropSpawnInfo final
{
public:
	TSoftClassPtr<class UClass>                   SpawnClass;                                        // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterAttachPoint                         AttachPoint;                                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2242[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachPointName;                                   // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2243[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropSpawnInfo) == 0x000008, "Wrong alignment on FPropSpawnInfo");
static_assert(sizeof(FPropSpawnInfo) == 0x000038, "Wrong size on FPropSpawnInfo");
static_assert(offsetof(FPropSpawnInfo, SpawnClass) == 0x000000, "Member 'FPropSpawnInfo::SpawnClass' has a wrong offset!");
static_assert(offsetof(FPropSpawnInfo, AttachPoint) == 0x000028, "Member 'FPropSpawnInfo::AttachPoint' has a wrong offset!");
static_assert(offsetof(FPropSpawnInfo, AttachPointName) == 0x00002C, "Member 'FPropSpawnInfo::AttachPointName' has a wrong offset!");

// ScriptStruct Palia.DayOfPeriodFilter
// 0x0008 (0x0008 - 0x0000)
struct FDayOfPeriodFilter final
{
public:
	int32                                         Day;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDaysInPeriod;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDayOfPeriodFilter) == 0x000004, "Wrong alignment on FDayOfPeriodFilter");
static_assert(sizeof(FDayOfPeriodFilter) == 0x000008, "Wrong size on FDayOfPeriodFilter");
static_assert(offsetof(FDayOfPeriodFilter, Day) == 0x000000, "Member 'FDayOfPeriodFilter::Day' has a wrong offset!");
static_assert(offsetof(FDayOfPeriodFilter, TotalDaysInPeriod) == 0x000004, "Member 'FDayOfPeriodFilter::TotalDaysInPeriod' has a wrong offset!");

// ScriptStruct Palia.VillagerQuestAvailability
// 0x0068 (0x0068 - 0x0000)
struct FVillagerQuestAvailability final
{
public:
	struct FTimeOfDayFilter                       TimeOfDay;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDayOfPeriodFilter                     DayOfPeriod;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVillagerRelationshipFilter            Friendship;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVillagerRelationshipFilter            Romance;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RecipeIdRequired;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2244[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDataTableRowHandle>            RequiredQuests;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVillagerQuestItemReqSubConfig> RequiredItems;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagFilter>           PlayerTagRequirements;                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerQuestAvailability) == 0x000008, "Wrong alignment on FVillagerQuestAvailability");
static_assert(sizeof(FVillagerQuestAvailability) == 0x000068, "Wrong size on FVillagerQuestAvailability");
static_assert(offsetof(FVillagerQuestAvailability, TimeOfDay) == 0x000000, "Member 'FVillagerQuestAvailability::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FVillagerQuestAvailability, DayOfPeriod) == 0x000018, "Member 'FVillagerQuestAvailability::DayOfPeriod' has a wrong offset!");
static_assert(offsetof(FVillagerQuestAvailability, Friendship) == 0x000020, "Member 'FVillagerQuestAvailability::Friendship' has a wrong offset!");
static_assert(offsetof(FVillagerQuestAvailability, Romance) == 0x000028, "Member 'FVillagerQuestAvailability::Romance' has a wrong offset!");
static_assert(offsetof(FVillagerQuestAvailability, RecipeIdRequired) == 0x000030, "Member 'FVillagerQuestAvailability::RecipeIdRequired' has a wrong offset!");
static_assert(offsetof(FVillagerQuestAvailability, RequiredQuests) == 0x000038, "Member 'FVillagerQuestAvailability::RequiredQuests' has a wrong offset!");
static_assert(offsetof(FVillagerQuestAvailability, RequiredItems) == 0x000048, "Member 'FVillagerQuestAvailability::RequiredItems' has a wrong offset!");
static_assert(offsetof(FVillagerQuestAvailability, PlayerTagRequirements) == 0x000058, "Member 'FVillagerQuestAvailability::PlayerTagRequirements' has a wrong offset!");

// ScriptStruct Palia.VillagerQuestConfig
// 0x0158 (0x0160 - 0x0008)
struct FVillagerQuestConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2245[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_QuestDef>           QuestDefReplacement;                               // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartVillager;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   QuestTitle;                                        // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   QuestDescription;                                  // 0x0058(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EQuestIconToUse                               QuestIconToUse;                                    // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2246[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             QuestCustomIcon;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_DialogueAsset>      DialogueAssetOnStart;                              // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVillagerQuestAvailability             Availability;                                      // 0x00A8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             StartRewards;                                      // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             Rewards;                                           // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRemoveItemRequirementsOnComplete;                 // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastsForever;                                     // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2247[0x2];                                     // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationSecs;                                      // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOnlyBeCompletedOnce;                           // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2248[0x3];                                     // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CooldownAfterCompletionSecs;                       // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuestCategory;                                     // 0x0140(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVillagerQuestStep>             Steps;                                             // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShouldAutoPinToTracker;                           // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2249[0x7];                                     // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVillagerQuestConfig) == 0x000008, "Wrong alignment on FVillagerQuestConfig");
static_assert(sizeof(FVillagerQuestConfig) == 0x000160, "Wrong size on FVillagerQuestConfig");
static_assert(offsetof(FVillagerQuestConfig, PersistId) == 0x000008, "Member 'FVillagerQuestConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, Enabled) == 0x00000C, "Member 'FVillagerQuestConfig::Enabled' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, QuestDefReplacement) == 0x000010, "Member 'FVillagerQuestConfig::QuestDefReplacement' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, StartVillager) == 0x000038, "Member 'FVillagerQuestConfig::StartVillager' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, QuestTitle) == 0x000040, "Member 'FVillagerQuestConfig::QuestTitle' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, QuestDescription) == 0x000058, "Member 'FVillagerQuestConfig::QuestDescription' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, QuestIconToUse) == 0x000070, "Member 'FVillagerQuestConfig::QuestIconToUse' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, QuestCustomIcon) == 0x000078, "Member 'FVillagerQuestConfig::QuestCustomIcon' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, DialogueAssetOnStart) == 0x000080, "Member 'FVillagerQuestConfig::DialogueAssetOnStart' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, Availability) == 0x0000A8, "Member 'FVillagerQuestConfig::Availability' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, StartRewards) == 0x000110, "Member 'FVillagerQuestConfig::StartRewards' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, Rewards) == 0x000120, "Member 'FVillagerQuestConfig::Rewards' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, bRemoveItemRequirementsOnComplete) == 0x000130, "Member 'FVillagerQuestConfig::bRemoveItemRequirementsOnComplete' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, bLastsForever) == 0x000131, "Member 'FVillagerQuestConfig::bLastsForever' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, DurationSecs) == 0x000134, "Member 'FVillagerQuestConfig::DurationSecs' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, bCanOnlyBeCompletedOnce) == 0x000138, "Member 'FVillagerQuestConfig::bCanOnlyBeCompletedOnce' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, CooldownAfterCompletionSecs) == 0x00013C, "Member 'FVillagerQuestConfig::CooldownAfterCompletionSecs' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, QuestCategory) == 0x000140, "Member 'FVillagerQuestConfig::QuestCategory' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, Steps) == 0x000148, "Member 'FVillagerQuestConfig::Steps' has a wrong offset!");
static_assert(offsetof(FVillagerQuestConfig, bShouldAutoPinToTracker) == 0x000158, "Member 'FVillagerQuestConfig::bShouldAutoPinToTracker' has a wrong offset!");

// ScriptStruct Palia.GardenPlot
// 0x0078 (0x0078 - 0x0000)
struct FGardenPlot final
{
public:
	int32                                         TileId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlantInstanceId;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TilledTimestampMs;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHiddenLoot;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowHiddenLoot;                                   // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlantOwner;                                     // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224A[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TilledEndTimestampMs;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeedType;                                          // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224B[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> AppliedFertilizerItemType;                         // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppliedFertilizerItemCount;                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224C[0x1C];                                    // 0x0054(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsFullyTilled;                                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_224D[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGardenPlot) == 0x000008, "Wrong alignment on FGardenPlot");
static_assert(sizeof(FGardenPlot) == 0x000078, "Wrong size on FGardenPlot");
static_assert(offsetof(FGardenPlot, TileId) == 0x000000, "Member 'FGardenPlot::TileId' has a wrong offset!");
static_assert(offsetof(FGardenPlot, PlantInstanceId) == 0x000004, "Member 'FGardenPlot::PlantInstanceId' has a wrong offset!");
static_assert(offsetof(FGardenPlot, TilledTimestampMs) == 0x000008, "Member 'FGardenPlot::TilledTimestampMs' has a wrong offset!");
static_assert(offsetof(FGardenPlot, bHasHiddenLoot) == 0x000010, "Member 'FGardenPlot::bHasHiddenLoot' has a wrong offset!");
static_assert(offsetof(FGardenPlot, bShowHiddenLoot) == 0x000011, "Member 'FGardenPlot::bShowHiddenLoot' has a wrong offset!");
static_assert(offsetof(FGardenPlot, bIsPlantOwner) == 0x000012, "Member 'FGardenPlot::bIsPlantOwner' has a wrong offset!");
static_assert(offsetof(FGardenPlot, TilledEndTimestampMs) == 0x000018, "Member 'FGardenPlot::TilledEndTimestampMs' has a wrong offset!");
static_assert(offsetof(FGardenPlot, WeedType) == 0x000020, "Member 'FGardenPlot::WeedType' has a wrong offset!");
static_assert(offsetof(FGardenPlot, AppliedFertilizerItemType) == 0x000028, "Member 'FGardenPlot::AppliedFertilizerItemType' has a wrong offset!");
static_assert(offsetof(FGardenPlot, AppliedFertilizerItemCount) == 0x000050, "Member 'FGardenPlot::AppliedFertilizerItemCount' has a wrong offset!");
static_assert(offsetof(FGardenPlot, IsFullyTilled) == 0x000070, "Member 'FGardenPlot::IsFullyTilled' has a wrong offset!");

// ScriptStruct Palia.HousingPlotWritRegion
// 0x0038 (0x0038 - 0x0000)
struct FHousingPlotWritRegion final
{
public:
	int32                                         PersistId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLevelerRequirement>            Costs;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         StartRow;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCol;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRows;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCols;                                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStartingPlotUnlock;                             // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224F[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetRegion;                                      // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2250[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHousingPlotWritRegion) == 0x000008, "Wrong alignment on FHousingPlotWritRegion");
static_assert(sizeof(FHousingPlotWritRegion) == 0x000038, "Wrong size on FHousingPlotWritRegion");
static_assert(offsetof(FHousingPlotWritRegion, PersistId) == 0x000000, "Member 'FHousingPlotWritRegion::PersistId' has a wrong offset!");
static_assert(offsetof(FHousingPlotWritRegion, Costs) == 0x000008, "Member 'FHousingPlotWritRegion::Costs' has a wrong offset!");
static_assert(offsetof(FHousingPlotWritRegion, StartRow) == 0x000018, "Member 'FHousingPlotWritRegion::StartRow' has a wrong offset!");
static_assert(offsetof(FHousingPlotWritRegion, StartCol) == 0x00001C, "Member 'FHousingPlotWritRegion::StartCol' has a wrong offset!");
static_assert(offsetof(FHousingPlotWritRegion, NumRows) == 0x000020, "Member 'FHousingPlotWritRegion::NumRows' has a wrong offset!");
static_assert(offsetof(FHousingPlotWritRegion, NumCols) == 0x000024, "Member 'FHousingPlotWritRegion::NumCols' has a wrong offset!");
static_assert(offsetof(FHousingPlotWritRegion, bIsStartingPlotUnlock) == 0x000028, "Member 'FHousingPlotWritRegion::bIsStartingPlotUnlock' has a wrong offset!");
static_assert(offsetof(FHousingPlotWritRegion, TargetRegion) == 0x00002C, "Member 'FHousingPlotWritRegion::TargetRegion' has a wrong offset!");

// ScriptStruct Palia.PlacementHoverInfo
// 0x0088 (0x0088 - 0x0000)
struct FPlacementHoverInfo final
{
public:
	EPlacementHoverType                           Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2251[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HoverWorldPosition;                                // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHousingPlotWritRegion                 HousingPlotWritRegion;                             // 0x0020(0x0038)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HoverActorOffset;                                  // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    Alteration;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlacementHoverInfo) == 0x000008, "Wrong alignment on FPlacementHoverInfo");
static_assert(sizeof(FPlacementHoverInfo) == 0x000088, "Wrong size on FPlacementHoverInfo");
static_assert(offsetof(FPlacementHoverInfo, Type) == 0x000000, "Member 'FPlacementHoverInfo::Type' has a wrong offset!");
static_assert(offsetof(FPlacementHoverInfo, HoverWorldPosition) == 0x000008, "Member 'FPlacementHoverInfo::HoverWorldPosition' has a wrong offset!");
static_assert(offsetof(FPlacementHoverInfo, HousingPlotWritRegion) == 0x000020, "Member 'FPlacementHoverInfo::HousingPlotWritRegion' has a wrong offset!");
static_assert(offsetof(FPlacementHoverInfo, Actor) == 0x000058, "Member 'FPlacementHoverInfo::Actor' has a wrong offset!");
static_assert(offsetof(FPlacementHoverInfo, HoverActorOffset) == 0x000060, "Member 'FPlacementHoverInfo::HoverActorOffset' has a wrong offset!");
static_assert(offsetof(FPlacementHoverInfo, Alteration) == 0x000078, "Member 'FPlacementHoverInfo::Alteration' has a wrong offset!");

// ScriptStruct Palia.TriggerVolumeEntry
// 0x0010 (0x0010 - 0x0000)
struct FTriggerVolumeEntry final
{
public:
	class AActor*                                 Character;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInVolume;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasTriggered;                                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2252[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTriggerVolumeEntry) == 0x000008, "Wrong alignment on FTriggerVolumeEntry");
static_assert(sizeof(FTriggerVolumeEntry) == 0x000010, "Wrong size on FTriggerVolumeEntry");
static_assert(offsetof(FTriggerVolumeEntry, Character) == 0x000000, "Member 'FTriggerVolumeEntry::Character' has a wrong offset!");
static_assert(offsetof(FTriggerVolumeEntry, TimeInVolume) == 0x000008, "Member 'FTriggerVolumeEntry::TimeInVolume' has a wrong offset!");
static_assert(offsetof(FTriggerVolumeEntry, HasTriggered) == 0x00000C, "Member 'FTriggerVolumeEntry::HasTriggered' has a wrong offset!");

// ScriptStruct Palia.StartFishingParams
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FStartFishingParams final
{
public:
	uint8                                         Pad_2253[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UFishMinigameConfig*                    FishToCatch;                                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2254[0x80];                                    // 0x0010(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStartFishingParams) == 0x000010, "Wrong alignment on FStartFishingParams");
static_assert(sizeof(FStartFishingParams) == 0x000090, "Wrong size on FStartFishingParams");
static_assert(offsetof(FStartFishingParams, FishToCatch) == 0x000008, "Member 'FStartFishingParams::FishToCatch' has a wrong offset!");

// ScriptStruct Palia.RegionlessComponentToPersistAnchor
// 0x0018 (0x0018 - 0x0000)
struct FRegionlessComponentToPersistAnchor final
{
public:
	class FName                                   PersistAnchorId;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshComponentTag;                                  // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RegionPlacementTag;                                // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRegionlessComponentToPersistAnchor) == 0x000004, "Wrong alignment on FRegionlessComponentToPersistAnchor");
static_assert(sizeof(FRegionlessComponentToPersistAnchor) == 0x000018, "Wrong size on FRegionlessComponentToPersistAnchor");
static_assert(offsetof(FRegionlessComponentToPersistAnchor, PersistAnchorId) == 0x000000, "Member 'FRegionlessComponentToPersistAnchor::PersistAnchorId' has a wrong offset!");
static_assert(offsetof(FRegionlessComponentToPersistAnchor, MeshComponentTag) == 0x000008, "Member 'FRegionlessComponentToPersistAnchor::MeshComponentTag' has a wrong offset!");
static_assert(offsetof(FRegionlessComponentToPersistAnchor, RegionPlacementTag) == 0x000010, "Member 'FRegionlessComponentToPersistAnchor::RegionPlacementTag' has a wrong offset!");

// ScriptStruct Palia.ShopConfig
// 0x0070 (0x0078 - 0x0008)
struct FShopConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimeOfDayFilter                       OpenHours;                                         // 0x000C(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2255[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FShopSelector>       Selectors;                                         // 0x0028(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShopConfig) == 0x000008, "Wrong alignment on FShopConfig");
static_assert(sizeof(FShopConfig) == 0x000078, "Wrong size on FShopConfig");
static_assert(offsetof(FShopConfig, PersistId) == 0x000008, "Member 'FShopConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FShopConfig, OpenHours) == 0x00000C, "Member 'FShopConfig::OpenHours' has a wrong offset!");
static_assert(offsetof(FShopConfig, Selectors) == 0x000028, "Member 'FShopConfig::Selectors' has a wrong offset!");

// ScriptStruct Palia.WarpStone
// 0x0020 (0x0020 - 0x0000)
struct FWarpStone final
{
public:
	struct FGuid                                  WarpStoneId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 FlowSpriteIds;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarpStone) == 0x000008, "Wrong alignment on FWarpStone");
static_assert(sizeof(FWarpStone) == 0x000020, "Wrong size on FWarpStone");
static_assert(offsetof(FWarpStone, WarpStoneId) == 0x000000, "Member 'FWarpStone::WarpStoneId' has a wrong offset!");
static_assert(offsetof(FWarpStone, FlowSpriteIds) == 0x000010, "Member 'FWarpStone::FlowSpriteIds' has a wrong offset!");

// ScriptStruct Palia.ScalingReward
// 0x0028 (0x0028 - 0x0000)
struct FScalingReward final
{
public:
	EScalingRewardType                            Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    Vital;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2256[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurrencyConfig*                        Currency;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartingLevel;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EveryHowManyLevels;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IgnoreLevelsDivisibleBy;                           // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UntilMaxLevel;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2257[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScalingReward) == 0x000008, "Wrong alignment on FScalingReward");
static_assert(sizeof(FScalingReward) == 0x000028, "Wrong size on FScalingReward");
static_assert(offsetof(FScalingReward, Type) == 0x000000, "Member 'FScalingReward::Type' has a wrong offset!");
static_assert(offsetof(FScalingReward, Vital) == 0x000001, "Member 'FScalingReward::Vital' has a wrong offset!");
static_assert(offsetof(FScalingReward, Currency) == 0x000008, "Member 'FScalingReward::Currency' has a wrong offset!");
static_assert(offsetof(FScalingReward, Amount) == 0x000010, "Member 'FScalingReward::Amount' has a wrong offset!");
static_assert(offsetof(FScalingReward, StartingLevel) == 0x000014, "Member 'FScalingReward::StartingLevel' has a wrong offset!");
static_assert(offsetof(FScalingReward, EveryHowManyLevels) == 0x000018, "Member 'FScalingReward::EveryHowManyLevels' has a wrong offset!");
static_assert(offsetof(FScalingReward, IgnoreLevelsDivisibleBy) == 0x00001C, "Member 'FScalingReward::IgnoreLevelsDivisibleBy' has a wrong offset!");
static_assert(offsetof(FScalingReward, UntilMaxLevel) == 0x000020, "Member 'FScalingReward::UntilMaxLevel' has a wrong offset!");

// ScriptStruct Palia.RewardsPerSkillLevel
// 0x0010 (0x0010 - 0x0000)
struct FRewardsPerSkillLevel final
{
public:
	TArray<struct FQuestRewardConfig>             Rewards;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardsPerSkillLevel) == 0x000008, "Wrong alignment on FRewardsPerSkillLevel");
static_assert(sizeof(FRewardsPerSkillLevel) == 0x000010, "Wrong size on FRewardsPerSkillLevel");
static_assert(offsetof(FRewardsPerSkillLevel, Rewards) == 0x000000, "Member 'FRewardsPerSkillLevel::Rewards' has a wrong offset!");

// ScriptStruct Palia.SkillLevelConfig
// 0x0080 (0x0088 - 0x0008)
struct FSkillLevelConfig final : public FTableRowBase
{
public:
	ESkillCategory                                Category;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillType                                    SkillType;                                         // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2258[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SkillDisplayName;                                  // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UCurveFloat*                            XpRequiredPerLevel;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUsedForMasterLevel;                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisibleInMenu;                                   // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2259[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxLevel;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriorityInMenu;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225A[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             XpIcon;                                            // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225B[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurrencyConfig*                        Currency;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelToDisplayCurrency;                            // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225C[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRewardsPerSkillLevel>          RewardsPerSkillLevel;                              // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FScalingReward>                 ScalingRewards;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SkillLevelTag;                                     // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillLevelConfig) == 0x000008, "Wrong alignment on FSkillLevelConfig");
static_assert(sizeof(FSkillLevelConfig) == 0x000088, "Wrong size on FSkillLevelConfig");
static_assert(offsetof(FSkillLevelConfig, Category) == 0x000008, "Member 'FSkillLevelConfig::Category' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, SkillType) == 0x000009, "Member 'FSkillLevelConfig::SkillType' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, SkillDisplayName) == 0x000010, "Member 'FSkillLevelConfig::SkillDisplayName' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, XpRequiredPerLevel) == 0x000028, "Member 'FSkillLevelConfig::XpRequiredPerLevel' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, IsUsedForMasterLevel) == 0x000030, "Member 'FSkillLevelConfig::IsUsedForMasterLevel' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, IsVisibleInMenu) == 0x000031, "Member 'FSkillLevelConfig::IsVisibleInMenu' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, MaxLevel) == 0x000034, "Member 'FSkillLevelConfig::MaxLevel' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, PriorityInMenu) == 0x000038, "Member 'FSkillLevelConfig::PriorityInMenu' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, XpIcon) == 0x000040, "Member 'FSkillLevelConfig::XpIcon' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, Color) == 0x000048, "Member 'FSkillLevelConfig::Color' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, Currency) == 0x000050, "Member 'FSkillLevelConfig::Currency' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, LevelToDisplayCurrency) == 0x000058, "Member 'FSkillLevelConfig::LevelToDisplayCurrency' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, RewardsPerSkillLevel) == 0x000060, "Member 'FSkillLevelConfig::RewardsPerSkillLevel' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, ScalingRewards) == 0x000070, "Member 'FSkillLevelConfig::ScalingRewards' has a wrong offset!");
static_assert(offsetof(FSkillLevelConfig, SkillLevelTag) == 0x000080, "Member 'FSkillLevelConfig::SkillLevelTag' has a wrong offset!");

// ScriptStruct Palia.UseEventResult
// 0x0010 (0x0010 - 0x0000)
struct FUseEventResult final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandled;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSendToServer;                                     // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumed;                                         // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225D[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUseEventResult) == 0x000008, "Wrong alignment on FUseEventResult");
static_assert(sizeof(FUseEventResult) == 0x000010, "Wrong size on FUseEventResult");
static_assert(offsetof(FUseEventResult, Target) == 0x000000, "Member 'FUseEventResult::Target' has a wrong offset!");
static_assert(offsetof(FUseEventResult, bHandled) == 0x000008, "Member 'FUseEventResult::bHandled' has a wrong offset!");
static_assert(offsetof(FUseEventResult, bSendToServer) == 0x000009, "Member 'FUseEventResult::bSendToServer' has a wrong offset!");
static_assert(offsetof(FUseEventResult, bConsumed) == 0x00000A, "Member 'FUseEventResult::bConsumed' has a wrong offset!");

// ScriptStruct Palia.VillagerConfig
// 0x0150 (0x0158 - 0x0008)
struct FVillagerConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    VillagerCoreConfig;                                // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVillagerMasterScheduleConfig> MasterScheduleConfig;                              // 0x0020(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDialogueTimeSecs;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225F[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   VillagerName;                                      // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOverrideGrammaticalGender;                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextGender                                   GrammaticalGender;                                 // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2260[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0070(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LetterSealIcon;                                    // 0x0098(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LetterStampIcon;                                   // 0x00C0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanAcceptGifts;                                    // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportChangeOfFocusDuringDialogue;               // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideOnMap;                                        // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowZOrder;                                        // 0x00EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterWidth;                                    // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterHeight;                                   // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiCharacterDialogueHeightIncrease;              // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   VillagerClass;                                     // 0x00F8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVillagerStoreConfig*                   Store;                                             // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_DialogueSpeakerAsset*              DialogueSpeaker;                                   // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_DialogueAsset>      FallbackDialogueAssetIfAlreadyReceivedThisWeek;    // 0x0130(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerConfig) == 0x000008, "Wrong alignment on FVillagerConfig");
static_assert(sizeof(FVillagerConfig) == 0x000158, "Wrong size on FVillagerConfig");
static_assert(offsetof(FVillagerConfig, PersistId) == 0x000008, "Member 'FVillagerConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, VillagerCoreConfig) == 0x000010, "Member 'FVillagerConfig::VillagerCoreConfig' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, MasterScheduleConfig) == 0x000020, "Member 'FVillagerConfig::MasterScheduleConfig' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, MaxDialogueTimeSecs) == 0x000048, "Member 'FVillagerConfig::MaxDialogueTimeSecs' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, VillagerName) == 0x000050, "Member 'FVillagerConfig::VillagerName' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, bOverrideGrammaticalGender) == 0x000068, "Member 'FVillagerConfig::bOverrideGrammaticalGender' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, GrammaticalGender) == 0x000069, "Member 'FVillagerConfig::GrammaticalGender' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, Icon) == 0x000070, "Member 'FVillagerConfig::Icon' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, LetterSealIcon) == 0x000098, "Member 'FVillagerConfig::LetterSealIcon' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, LetterStampIcon) == 0x0000C0, "Member 'FVillagerConfig::LetterStampIcon' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, CanAcceptGifts) == 0x0000E8, "Member 'FVillagerConfig::CanAcceptGifts' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, bSupportChangeOfFocusDuringDialogue) == 0x0000E9, "Member 'FVillagerConfig::bSupportChangeOfFocusDuringDialogue' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, bHideOnMap) == 0x0000EA, "Member 'FVillagerConfig::bHideOnMap' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, bLowZOrder) == 0x0000EB, "Member 'FVillagerConfig::bLowZOrder' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, CharacterWidth) == 0x0000EC, "Member 'FVillagerConfig::CharacterWidth' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, CharacterHeight) == 0x0000F0, "Member 'FVillagerConfig::CharacterHeight' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, MultiCharacterDialogueHeightIncrease) == 0x0000F4, "Member 'FVillagerConfig::MultiCharacterDialogueHeightIncrease' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, VillagerClass) == 0x0000F8, "Member 'FVillagerConfig::VillagerClass' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, Store) == 0x000120, "Member 'FVillagerConfig::Store' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, DialogueSpeaker) == 0x000128, "Member 'FVillagerConfig::DialogueSpeaker' has a wrong offset!");
static_assert(offsetof(FVillagerConfig, FallbackDialogueAssetIfAlreadyReceivedThisWeek) == 0x000130, "Member 'FVillagerConfig::FallbackDialogueAssetIfAlreadyReceivedThisWeek' has a wrong offset!");

// ScriptStruct Palia.VillagerCoreConfig
// 0x0F00 (0x0F08 - 0x0008)
struct FVillagerCoreConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2261[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    PrimaryVillagerConfig;                             // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsVisibleInUi;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2262[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   VillagerName;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ETextGender                                   GrammaticalGender;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFriendship;                                    // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRomance;                                       // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2263[0x1];                                     // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FriendshipLevelNecessaryForRomance;                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERelationshipDifficulty                       RelationshipDifficulty;                            // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanAcceptGifts;                                    // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2264[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuestRewardConfig                     GiftVillagerRewardsLove;                           // 0x0058(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     GiftVillagerRewardsLike;                           // 0x01D0(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     GiftVillagerRewardsNeutral;                        // 0x0348(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     GiftVillagerRewardsDislike;                        // 0x04C0(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     GiftVillagerRewardsHate;                           // 0x0638(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     RomanticGiftVillagerRewardsLove;                   // 0x07B0(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     RomanticGiftVillagerRewardsLike;                   // 0x0928(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     RomanticGiftVillagerRewardsNeutral;                // 0x0AA0(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     RomanticGiftVillagerRewardsDislike;                // 0x0C18(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     RomanticGiftVillagerRewardsHate;                   // 0x0D90(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerCoreConfig) == 0x000008, "Wrong alignment on FVillagerCoreConfig");
static_assert(sizeof(FVillagerCoreConfig) == 0x000F08, "Wrong size on FVillagerCoreConfig");
static_assert(offsetof(FVillagerCoreConfig, PersistId) == 0x000008, "Member 'FVillagerCoreConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, PrimaryVillagerConfig) == 0x000010, "Member 'FVillagerCoreConfig::PrimaryVillagerConfig' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, IsVisibleInUi) == 0x000020, "Member 'FVillagerCoreConfig::IsVisibleInUi' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, VillagerName) == 0x000028, "Member 'FVillagerCoreConfig::VillagerName' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, GrammaticalGender) == 0x000040, "Member 'FVillagerCoreConfig::GrammaticalGender' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, bHasFriendship) == 0x000041, "Member 'FVillagerCoreConfig::bHasFriendship' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, bHasRomance) == 0x000042, "Member 'FVillagerCoreConfig::bHasRomance' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, FriendshipLevelNecessaryForRomance) == 0x000044, "Member 'FVillagerCoreConfig::FriendshipLevelNecessaryForRomance' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, Icon) == 0x000048, "Member 'FVillagerCoreConfig::Icon' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, RelationshipDifficulty) == 0x000050, "Member 'FVillagerCoreConfig::RelationshipDifficulty' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, CanAcceptGifts) == 0x000051, "Member 'FVillagerCoreConfig::CanAcceptGifts' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, GiftVillagerRewardsLove) == 0x000058, "Member 'FVillagerCoreConfig::GiftVillagerRewardsLove' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, GiftVillagerRewardsLike) == 0x0001D0, "Member 'FVillagerCoreConfig::GiftVillagerRewardsLike' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, GiftVillagerRewardsNeutral) == 0x000348, "Member 'FVillagerCoreConfig::GiftVillagerRewardsNeutral' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, GiftVillagerRewardsDislike) == 0x0004C0, "Member 'FVillagerCoreConfig::GiftVillagerRewardsDislike' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, GiftVillagerRewardsHate) == 0x000638, "Member 'FVillagerCoreConfig::GiftVillagerRewardsHate' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, RomanticGiftVillagerRewardsLove) == 0x0007B0, "Member 'FVillagerCoreConfig::RomanticGiftVillagerRewardsLove' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, RomanticGiftVillagerRewardsLike) == 0x000928, "Member 'FVillagerCoreConfig::RomanticGiftVillagerRewardsLike' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, RomanticGiftVillagerRewardsNeutral) == 0x000AA0, "Member 'FVillagerCoreConfig::RomanticGiftVillagerRewardsNeutral' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, RomanticGiftVillagerRewardsDislike) == 0x000C18, "Member 'FVillagerCoreConfig::RomanticGiftVillagerRewardsDislike' has a wrong offset!");
static_assert(offsetof(FVillagerCoreConfig, RomanticGiftVillagerRewardsHate) == 0x000D90, "Member 'FVillagerCoreConfig::RomanticGiftVillagerRewardsHate' has a wrong offset!");

// ScriptStruct Palia.AnimationMappingConfig
// 0x0090 (0x0098 - 0x0008)
struct FAnimationMappingConfig final : public FTableRowBase
{
public:
	struct FGameplayTag                           AnimationTag;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AnimationMontage;                                  // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimationSequence;                                 // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AnimationBlendSpace;                               // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECharacterAttachPoint, TSoftClassPtr<class UClass>> AttachedPropMap;                                   // 0x0048(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimationMappingConfig) == 0x000008, "Wrong alignment on FAnimationMappingConfig");
static_assert(sizeof(FAnimationMappingConfig) == 0x000098, "Wrong size on FAnimationMappingConfig");
static_assert(offsetof(FAnimationMappingConfig, AnimationTag) == 0x000008, "Member 'FAnimationMappingConfig::AnimationTag' has a wrong offset!");
static_assert(offsetof(FAnimationMappingConfig, AnimationMontage) == 0x000010, "Member 'FAnimationMappingConfig::AnimationMontage' has a wrong offset!");
static_assert(offsetof(FAnimationMappingConfig, AnimationSequence) == 0x000038, "Member 'FAnimationMappingConfig::AnimationSequence' has a wrong offset!");
static_assert(offsetof(FAnimationMappingConfig, AnimationBlendSpace) == 0x000040, "Member 'FAnimationMappingConfig::AnimationBlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimationMappingConfig, AttachedPropMap) == 0x000048, "Member 'FAnimationMappingConfig::AttachedPropMap' has a wrong offset!");

// ScriptStruct Palia.GiftPreferenceFilter
// 0x0028 (0x0028 - 0x0000)
struct FGiftPreferenceFilter final
{
public:
	struct FDataTableRowHandle                    Villager;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    GiftPreference;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          PlayerMustBeUnaware;                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerMustBeAware;                                 // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2265[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGiftPreferenceFilter) == 0x000008, "Wrong alignment on FGiftPreferenceFilter");
static_assert(sizeof(FGiftPreferenceFilter) == 0x000028, "Wrong size on FGiftPreferenceFilter");
static_assert(offsetof(FGiftPreferenceFilter, Villager) == 0x000000, "Member 'FGiftPreferenceFilter::Villager' has a wrong offset!");
static_assert(offsetof(FGiftPreferenceFilter, GiftPreference) == 0x000010, "Member 'FGiftPreferenceFilter::GiftPreference' has a wrong offset!");
static_assert(offsetof(FGiftPreferenceFilter, PlayerMustBeUnaware) == 0x000020, "Member 'FGiftPreferenceFilter::PlayerMustBeUnaware' has a wrong offset!");
static_assert(offsetof(FGiftPreferenceFilter, PlayerMustBeAware) == 0x000021, "Member 'FGiftPreferenceFilter::PlayerMustBeAware' has a wrong offset!");

// ScriptStruct Palia.ChallengeStateEntry
// 0x0030 (0x0030 - 0x0000)
struct FChallengeStateEntry final
{
public:
	class UChallengeConfig*                       Config;                                            // 0x0000(0x0008)(ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0008(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 GoalsProgress;                                     // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2266[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeStateEntry) == 0x000008, "Wrong alignment on FChallengeStateEntry");
static_assert(sizeof(FChallengeStateEntry) == 0x000030, "Wrong size on FChallengeStateEntry");
static_assert(offsetof(FChallengeStateEntry, Config) == 0x000000, "Member 'FChallengeStateEntry::Config' has a wrong offset!");
static_assert(offsetof(FChallengeStateEntry, Guid) == 0x000008, "Member 'FChallengeStateEntry::Guid' has a wrong offset!");
static_assert(offsetof(FChallengeStateEntry, GoalsProgress) == 0x000018, "Member 'FChallengeStateEntry::GoalsProgress' has a wrong offset!");
static_assert(offsetof(FChallengeStateEntry, bCompleted) == 0x000028, "Member 'FChallengeStateEntry::bCompleted' has a wrong offset!");

// ScriptStruct Palia.ChallengeState
// 0x0068 (0x0068 - 0x0000)
struct FChallengeState final
{
public:
	TArray<struct FChallengeStateEntry>           Entries;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2267[0x58];                                    // 0x0010(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeState) == 0x000008, "Wrong alignment on FChallengeState");
static_assert(sizeof(FChallengeState) == 0x000068, "Wrong size on FChallengeState");
static_assert(offsetof(FChallengeState, Entries) == 0x000000, "Member 'FChallengeState::Entries' has a wrong offset!");

// ScriptStruct Palia.CreatureConfig
// 0x0040 (0x0048 - 0x0008)
struct FCreatureConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2268[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTagList                               Tags;                                              // 0x0028(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreatureConfig) == 0x000008, "Wrong alignment on FCreatureConfig");
static_assert(sizeof(FCreatureConfig) == 0x000048, "Wrong size on FCreatureConfig");
static_assert(offsetof(FCreatureConfig, PersistId) == 0x000008, "Member 'FCreatureConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FCreatureConfig, DisplayName) == 0x000010, "Member 'FCreatureConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FCreatureConfig, Tags) == 0x000028, "Member 'FCreatureConfig::Tags' has a wrong offset!");

// ScriptStruct Palia.BookEffects
// 0x0028 (0x0028 - 0x0000)
struct FBookEffects final
{
public:
	int32                                         PageToTriggerOn;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2269[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestRewardConfig>             RewardConfigs;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagWriteback>        PlayerTagWriteback;                                // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBookEffects) == 0x000008, "Wrong alignment on FBookEffects");
static_assert(sizeof(FBookEffects) == 0x000028, "Wrong size on FBookEffects");
static_assert(offsetof(FBookEffects, PageToTriggerOn) == 0x000000, "Member 'FBookEffects::PageToTriggerOn' has a wrong offset!");
static_assert(offsetof(FBookEffects, RewardConfigs) == 0x000008, "Member 'FBookEffects::RewardConfigs' has a wrong offset!");
static_assert(offsetof(FBookEffects, PlayerTagWriteback) == 0x000018, "Member 'FBookEffects::PlayerTagWriteback' has a wrong offset!");

// ScriptStruct Palia.TransitiveDecorProgressStep
// 0x0228 (0x0228 - 0x0000)
struct FTransitiveDecorProgressStep final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, AssetRegistrySearchable, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ItemIcon;                                          // 0x0030(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransitiveDecorStimulusType                  StimulusType;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226A[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StimulusAmount;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 SpawnedAsset;                                      // 0x0060(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSpawnedAssetCollision;                          // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226B[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0090(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     Reward;                                            // 0x00B0(0x0178)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransitiveDecorProgressStep) == 0x000008, "Wrong alignment on FTransitiveDecorProgressStep");
static_assert(sizeof(FTransitiveDecorProgressStep) == 0x000228, "Wrong size on FTransitiveDecorProgressStep");
static_assert(offsetof(FTransitiveDecorProgressStep, DisplayName) == 0x000000, "Member 'FTransitiveDecorProgressStep::DisplayName' has a wrong offset!");
static_assert(offsetof(FTransitiveDecorProgressStep, Description) == 0x000018, "Member 'FTransitiveDecorProgressStep::Description' has a wrong offset!");
static_assert(offsetof(FTransitiveDecorProgressStep, ItemIcon) == 0x000030, "Member 'FTransitiveDecorProgressStep::ItemIcon' has a wrong offset!");
static_assert(offsetof(FTransitiveDecorProgressStep, StimulusType) == 0x000058, "Member 'FTransitiveDecorProgressStep::StimulusType' has a wrong offset!");
static_assert(offsetof(FTransitiveDecorProgressStep, StimulusAmount) == 0x00005C, "Member 'FTransitiveDecorProgressStep::StimulusAmount' has a wrong offset!");
static_assert(offsetof(FTransitiveDecorProgressStep, SpawnedAsset) == 0x000060, "Member 'FTransitiveDecorProgressStep::SpawnedAsset' has a wrong offset!");
static_assert(offsetof(FTransitiveDecorProgressStep, UseSpawnedAssetCollision) == 0x000088, "Member 'FTransitiveDecorProgressStep::UseSpawnedAssetCollision' has a wrong offset!");
static_assert(offsetof(FTransitiveDecorProgressStep, Tags) == 0x000090, "Member 'FTransitiveDecorProgressStep::Tags' has a wrong offset!");
static_assert(offsetof(FTransitiveDecorProgressStep, Reward) == 0x0000B0, "Member 'FTransitiveDecorProgressStep::Reward' has a wrong offset!");

// ScriptStruct Palia.QuestRequirementConfig
// 0x0018 (0x0018 - 0x0000)
struct FQuestRequirementConfig final
{
public:
	EQuestRequirementType                         Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmountNeeded;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226D[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestRequirementConfig) == 0x000008, "Wrong alignment on FQuestRequirementConfig");
static_assert(sizeof(FQuestRequirementConfig) == 0x000018, "Wrong size on FQuestRequirementConfig");
static_assert(offsetof(FQuestRequirementConfig, Type) == 0x000000, "Member 'FQuestRequirementConfig::Type' has a wrong offset!");
static_assert(offsetof(FQuestRequirementConfig, ItemType) == 0x000008, "Member 'FQuestRequirementConfig::ItemType' has a wrong offset!");
static_assert(offsetof(FQuestRequirementConfig, ItemAmountNeeded) == 0x000010, "Member 'FQuestRequirementConfig::ItemAmountNeeded' has a wrong offset!");

// ScriptStruct Palia.QuestAvailability
// 0x0020 (0x0020 - 0x0000)
struct FQuestAvailability final
{
public:
	struct FTimeOfDayFilter                       TimeOfDay;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDayOfPeriodFilter                     DayOfPeriod;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestAvailability) == 0x000004, "Wrong alignment on FQuestAvailability");
static_assert(sizeof(FQuestAvailability) == 0x000020, "Wrong size on FQuestAvailability");
static_assert(offsetof(FQuestAvailability, TimeOfDay) == 0x000000, "Member 'FQuestAvailability::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FQuestAvailability, DayOfPeriod) == 0x000018, "Member 'FQuestAvailability::DayOfPeriod' has a wrong offset!");

// ScriptStruct Palia.QuestConfig
// 0x0058 (0x0060 - 0x0008)
struct FQuestConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestRequirementConfig>        Requirements;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             Rewards;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FQuestAvailability                     Availability;                                      // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	EQuestDurationType                            DurationType;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226F[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationMs;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WaitForFullDurationBeforeReset;                    // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2270[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestConfig) == 0x000008, "Wrong alignment on FQuestConfig");
static_assert(sizeof(FQuestConfig) == 0x000060, "Wrong size on FQuestConfig");
static_assert(offsetof(FQuestConfig, PersistId) == 0x000008, "Member 'FQuestConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FQuestConfig, Requirements) == 0x000010, "Member 'FQuestConfig::Requirements' has a wrong offset!");
static_assert(offsetof(FQuestConfig, Rewards) == 0x000020, "Member 'FQuestConfig::Rewards' has a wrong offset!");
static_assert(offsetof(FQuestConfig, Availability) == 0x000030, "Member 'FQuestConfig::Availability' has a wrong offset!");
static_assert(offsetof(FQuestConfig, DurationType) == 0x000050, "Member 'FQuestConfig::DurationType' has a wrong offset!");
static_assert(offsetof(FQuestConfig, DurationMs) == 0x000054, "Member 'FQuestConfig::DurationMs' has a wrong offset!");
static_assert(offsetof(FQuestConfig, WaitForFullDurationBeforeReset) == 0x000058, "Member 'FQuestConfig::WaitForFullDurationBeforeReset' has a wrong offset!");

// ScriptStruct Palia.VAL_DialogueCharacter
// 0x0030 (0x0030 - 0x0000)
struct FVAL_DialogueCharacter final
{
public:
	TScriptInterface<class IDialogueable>         Dialogueable;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AValeriaVillagerCharacter*              VillagerCharacter;                                 // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_DialogueSpeakerAsset*              DialogueSpeaker;                                   // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastPlayedDialogueMontage;                         // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastPlayedDialogueMontageSection;                  // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_DialogueCharacter) == 0x000008, "Wrong alignment on FVAL_DialogueCharacter");
static_assert(sizeof(FVAL_DialogueCharacter) == 0x000030, "Wrong size on FVAL_DialogueCharacter");
static_assert(offsetof(FVAL_DialogueCharacter, Dialogueable) == 0x000000, "Member 'FVAL_DialogueCharacter::Dialogueable' has a wrong offset!");
static_assert(offsetof(FVAL_DialogueCharacter, VillagerCharacter) == 0x000010, "Member 'FVAL_DialogueCharacter::VillagerCharacter' has a wrong offset!");
static_assert(offsetof(FVAL_DialogueCharacter, DialogueSpeaker) == 0x000018, "Member 'FVAL_DialogueCharacter::DialogueSpeaker' has a wrong offset!");
static_assert(offsetof(FVAL_DialogueCharacter, LastPlayedDialogueMontage) == 0x000020, "Member 'FVAL_DialogueCharacter::LastPlayedDialogueMontage' has a wrong offset!");
static_assert(offsetof(FVAL_DialogueCharacter, LastPlayedDialogueMontageSection) == 0x000028, "Member 'FVAL_DialogueCharacter::LastPlayedDialogueMontageSection' has a wrong offset!");

// ScriptStruct Palia.CharacterCreationHeadConfig
// 0x0008 (0x0010 - 0x0008)
struct FCharacterCreationHeadConfig final : public FTableRowBase
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterCreationHeadConfig) == 0x000008, "Wrong alignment on FCharacterCreationHeadConfig");
static_assert(sizeof(FCharacterCreationHeadConfig) == 0x000010, "Wrong size on FCharacterCreationHeadConfig");
static_assert(offsetof(FCharacterCreationHeadConfig, Mesh) == 0x000008, "Member 'FCharacterCreationHeadConfig::Mesh' has a wrong offset!");

// ScriptStruct Palia.StoreRecipeConfig
// 0x00F8 (0x00F8 - 0x0000)
struct FStoreRecipeConfig final
{
public:
	struct FDataTableRowHandle                    RecipeConfig;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FLootRequirements                      Requirements;                                      // 0x0010(0x00D8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             BuyRewards;                                        // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreRecipeConfig) == 0x000008, "Wrong alignment on FStoreRecipeConfig");
static_assert(sizeof(FStoreRecipeConfig) == 0x0000F8, "Wrong size on FStoreRecipeConfig");
static_assert(offsetof(FStoreRecipeConfig, RecipeConfig) == 0x000000, "Member 'FStoreRecipeConfig::RecipeConfig' has a wrong offset!");
static_assert(offsetof(FStoreRecipeConfig, Requirements) == 0x000010, "Member 'FStoreRecipeConfig::Requirements' has a wrong offset!");
static_assert(offsetof(FStoreRecipeConfig, BuyRewards) == 0x0000E8, "Member 'FStoreRecipeConfig::BuyRewards' has a wrong offset!");

// ScriptStruct Palia.ValeriaSpawnTransform
// 0x0090 (0x0090 - 0x0000)
struct FValeriaSpawnTransform final
{
public:
	bool                                          bUseTargetPoint;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2271[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AValeriaTargetPoint>     SpawnTargetPoint;                                  // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SpawnTransform;                                    // 0x0030(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaSpawnTransform) == 0x000010, "Wrong alignment on FValeriaSpawnTransform");
static_assert(sizeof(FValeriaSpawnTransform) == 0x000090, "Wrong size on FValeriaSpawnTransform");
static_assert(offsetof(FValeriaSpawnTransform, bUseTargetPoint) == 0x000000, "Member 'FValeriaSpawnTransform::bUseTargetPoint' has a wrong offset!");
static_assert(offsetof(FValeriaSpawnTransform, SpawnTargetPoint) == 0x000008, "Member 'FValeriaSpawnTransform::SpawnTargetPoint' has a wrong offset!");
static_assert(offsetof(FValeriaSpawnTransform, SpawnTransform) == 0x000030, "Member 'FValeriaSpawnTransform::SpawnTransform' has a wrong offset!");

// ScriptStruct Palia.WallpaperRegionObject
// 0x0020 (0x0020 - 0x0000)
struct FWallpaperRegionObject final
{
public:
	class UWallpaperComponent*                    WallpaperComponent;                                // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlacementRegionComponent*              PlacementRegionComponent;                          // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PersistAnchorId;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceId;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOtherSide;                                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2272[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWallpaperRegionObject) == 0x000008, "Wrong alignment on FWallpaperRegionObject");
static_assert(sizeof(FWallpaperRegionObject) == 0x000020, "Wrong size on FWallpaperRegionObject");
static_assert(offsetof(FWallpaperRegionObject, WallpaperComponent) == 0x000000, "Member 'FWallpaperRegionObject::WallpaperComponent' has a wrong offset!");
static_assert(offsetof(FWallpaperRegionObject, PlacementRegionComponent) == 0x000008, "Member 'FWallpaperRegionObject::PlacementRegionComponent' has a wrong offset!");
static_assert(offsetof(FWallpaperRegionObject, PersistAnchorId) == 0x000010, "Member 'FWallpaperRegionObject::PersistAnchorId' has a wrong offset!");
static_assert(offsetof(FWallpaperRegionObject, SurfaceId) == 0x000018, "Member 'FWallpaperRegionObject::SurfaceId' has a wrong offset!");
static_assert(offsetof(FWallpaperRegionObject, bIsOtherSide) == 0x00001C, "Member 'FWallpaperRegionObject::bIsOtherSide' has a wrong offset!");

// ScriptStruct Palia.FishingCoopBuffSettings
// 0x0018 (0x0018 - 0x0000)
struct FFishingCoopBuffSettings final
{
public:
	struct FDataTableRowHandle                    CoopFishingBuff;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CoopFishingBuffRadius;                             // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2273[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishingCoopBuffSettings) == 0x000008, "Wrong alignment on FFishingCoopBuffSettings");
static_assert(sizeof(FFishingCoopBuffSettings) == 0x000018, "Wrong size on FFishingCoopBuffSettings");
static_assert(offsetof(FFishingCoopBuffSettings, CoopFishingBuff) == 0x000000, "Member 'FFishingCoopBuffSettings::CoopFishingBuff' has a wrong offset!");
static_assert(offsetof(FFishingCoopBuffSettings, CoopFishingBuffRadius) == 0x000010, "Member 'FFishingCoopBuffSettings::CoopFishingBuffRadius' has a wrong offset!");

// ScriptStruct Palia.AchievementRewards
// 0x0038 (0x0038 - 0x0000)
struct FAchievementRewards final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2274[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0008(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAmount;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2275[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAchievementRewards) == 0x000008, "Wrong alignment on FAchievementRewards");
static_assert(sizeof(FAchievementRewards) == 0x000038, "Wrong size on FAchievementRewards");
static_assert(offsetof(FAchievementRewards, ItemId) == 0x000000, "Member 'FAchievementRewards::ItemId' has a wrong offset!");
static_assert(offsetof(FAchievementRewards, ItemType) == 0x000008, "Member 'FAchievementRewards::ItemType' has a wrong offset!");
static_assert(offsetof(FAchievementRewards, ItemAmount) == 0x000030, "Member 'FAchievementRewards::ItemAmount' has a wrong offset!");

// ScriptStruct Palia.DialogueRequirements
// 0x0128 (0x0128 - 0x0000)
struct FDialogueRequirements final
{
public:
	struct FTimeOfDayFilter                       TimeOfDay;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   RequiredActivityName;                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNearbyGatherableItemReqSubConfig      RequiredGatherableNearby;                          // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNearbyCreatureReqSubConfig            RequiredCreatureNearby;                            // 0x0030(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class ULimitedEventDataAsset*>         LimitedEventActive;                                // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPrivateSpaceVillagerVisitConfig*> RequiredActiveVisits;                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVillagerActionPrereq                  GeneralReqs;                                       // 0x0068(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVillagerRelationshipFilter            Friendship;                                        // 0x00E0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVillagerRelationshipFilter            Romance;                                           // 0x00E8(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPersistentTagFilter>           VillagerTagRequirements;                           // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGiftPreferenceFilter                  GiftPreferenceRequirements;                        // 0x0100(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueRequirements) == 0x000008, "Wrong alignment on FDialogueRequirements");
static_assert(sizeof(FDialogueRequirements) == 0x000128, "Wrong size on FDialogueRequirements");
static_assert(offsetof(FDialogueRequirements, TimeOfDay) == 0x000000, "Member 'FDialogueRequirements::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FDialogueRequirements, RequiredActivityName) == 0x000018, "Member 'FDialogueRequirements::RequiredActivityName' has a wrong offset!");
static_assert(offsetof(FDialogueRequirements, RequiredGatherableNearby) == 0x000020, "Member 'FDialogueRequirements::RequiredGatherableNearby' has a wrong offset!");
static_assert(offsetof(FDialogueRequirements, RequiredCreatureNearby) == 0x000030, "Member 'FDialogueRequirements::RequiredCreatureNearby' has a wrong offset!");
static_assert(offsetof(FDialogueRequirements, LimitedEventActive) == 0x000048, "Member 'FDialogueRequirements::LimitedEventActive' has a wrong offset!");
static_assert(offsetof(FDialogueRequirements, RequiredActiveVisits) == 0x000058, "Member 'FDialogueRequirements::RequiredActiveVisits' has a wrong offset!");
static_assert(offsetof(FDialogueRequirements, GeneralReqs) == 0x000068, "Member 'FDialogueRequirements::GeneralReqs' has a wrong offset!");
static_assert(offsetof(FDialogueRequirements, Friendship) == 0x0000E0, "Member 'FDialogueRequirements::Friendship' has a wrong offset!");
static_assert(offsetof(FDialogueRequirements, Romance) == 0x0000E8, "Member 'FDialogueRequirements::Romance' has a wrong offset!");
static_assert(offsetof(FDialogueRequirements, VillagerTagRequirements) == 0x0000F0, "Member 'FDialogueRequirements::VillagerTagRequirements' has a wrong offset!");
static_assert(offsetof(FDialogueRequirements, GiftPreferenceRequirements) == 0x000100, "Member 'FDialogueRequirements::GiftPreferenceRequirements' has a wrong offset!");

// ScriptStruct Palia.PropInfo
// 0x0030 (0x0030 - 0x0000)
struct FPropInfo final
{
public:
	TArray<struct FPropSpawnInfo>                 PropsSpawnInfo;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PropNotify;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Qualifier;                                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AEquipViewActor*>                SpawnedPropActors;                                 // 0x0020(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPropInfo) == 0x000008, "Wrong alignment on FPropInfo");
static_assert(sizeof(FPropInfo) == 0x000030, "Wrong size on FPropInfo");
static_assert(offsetof(FPropInfo, PropsSpawnInfo) == 0x000000, "Member 'FPropInfo::PropsSpawnInfo' has a wrong offset!");
static_assert(offsetof(FPropInfo, PropNotify) == 0x000010, "Member 'FPropInfo::PropNotify' has a wrong offset!");
static_assert(offsetof(FPropInfo, Qualifier) == 0x000018, "Member 'FPropInfo::Qualifier' has a wrong offset!");
static_assert(offsetof(FPropInfo, SpawnedPropActors) == 0x000020, "Member 'FPropInfo::SpawnedPropActors' has a wrong offset!");

// ScriptStruct Palia.VAL_DialogueContext
// 0x0010 (0x0010 - 0x0000)
struct FVAL_DialogueContext final
{
public:
	class AValeriaCharacter*                      PlayerCharacter;                                   // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_DialogueSpeakerAsset*              NPCSpeaker;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_DialogueContext) == 0x000008, "Wrong alignment on FVAL_DialogueContext");
static_assert(sizeof(FVAL_DialogueContext) == 0x000010, "Wrong size on FVAL_DialogueContext");
static_assert(offsetof(FVAL_DialogueContext, PlayerCharacter) == 0x000000, "Member 'FVAL_DialogueContext::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(FVAL_DialogueContext, NPCSpeaker) == 0x000008, "Member 'FVAL_DialogueContext::NPCSpeaker' has a wrong offset!");

// ScriptStruct Palia.VAL_NewsMessage
// 0x0068 (0x0068 - 0x0000)
struct FVAL_NewsMessage final
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SchemaVersion;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2276[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVAL_RewardItem>                Items;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableAt;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpiresAt;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              RedeemedAt;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVAL_NewsInboxMessageType                     NewsMessageType;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2277[0x27];                                    // 0x0041(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_NewsMessage) == 0x000008, "Wrong alignment on FVAL_NewsMessage");
static_assert(sizeof(FVAL_NewsMessage) == 0x000068, "Wrong size on FVAL_NewsMessage");
static_assert(offsetof(FVAL_NewsMessage, ID) == 0x000000, "Member 'FVAL_NewsMessage::ID' has a wrong offset!");
static_assert(offsetof(FVAL_NewsMessage, SchemaVersion) == 0x000010, "Member 'FVAL_NewsMessage::SchemaVersion' has a wrong offset!");
static_assert(offsetof(FVAL_NewsMessage, Items) == 0x000018, "Member 'FVAL_NewsMessage::Items' has a wrong offset!");
static_assert(offsetof(FVAL_NewsMessage, AvailableAt) == 0x000028, "Member 'FVAL_NewsMessage::AvailableAt' has a wrong offset!");
static_assert(offsetof(FVAL_NewsMessage, ExpiresAt) == 0x000030, "Member 'FVAL_NewsMessage::ExpiresAt' has a wrong offset!");
static_assert(offsetof(FVAL_NewsMessage, RedeemedAt) == 0x000038, "Member 'FVAL_NewsMessage::RedeemedAt' has a wrong offset!");
static_assert(offsetof(FVAL_NewsMessage, NewsMessageType) == 0x000040, "Member 'FVAL_NewsMessage::NewsMessageType' has a wrong offset!");

// ScriptStruct Palia.Vital
// 0x0018 (0x0018 - 0x0000)
struct FVital final
{
public:
	EVitalType                                    Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2278[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartAmount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAmount;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Partial;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AdditionalMaxAmount;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FVital) == 0x000004, "Wrong alignment on FVital");
static_assert(sizeof(FVital) == 0x000018, "Wrong size on FVital");
static_assert(offsetof(FVital, Type) == 0x000000, "Member 'FVital::Type' has a wrong offset!");
static_assert(offsetof(FVital, StartAmount) == 0x000004, "Member 'FVital::StartAmount' has a wrong offset!");
static_assert(offsetof(FVital, MaxAmount) == 0x000008, "Member 'FVital::MaxAmount' has a wrong offset!");
static_assert(offsetof(FVital, Partial) == 0x00000C, "Member 'FVital::Partial' has a wrong offset!");
static_assert(offsetof(FVital, Amount) == 0x000010, "Member 'FVital::Amount' has a wrong offset!");
static_assert(offsetof(FVital, AdditionalMaxAmount) == 0x000014, "Member 'FVital::AdditionalMaxAmount' has a wrong offset!");

// ScriptStruct Palia.JiraDescription
// 0x0028 (0x0028 - 0x0000)
struct FJiraDescription final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Version;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2279[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FJiraDescriptionContent>        Content;                                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJiraDescription) == 0x000008, "Wrong alignment on FJiraDescription");
static_assert(sizeof(FJiraDescription) == 0x000028, "Wrong size on FJiraDescription");
static_assert(offsetof(FJiraDescription, Type) == 0x000000, "Member 'FJiraDescription::Type' has a wrong offset!");
static_assert(offsetof(FJiraDescription, Version) == 0x000010, "Member 'FJiraDescription::Version' has a wrong offset!");
static_assert(offsetof(FJiraDescription, Content) == 0x000018, "Member 'FJiraDescription::Content' has a wrong offset!");

// ScriptStruct Palia.JiraIssueType
// 0x0010 (0x0010 - 0x0000)
struct FJiraIssueType final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJiraIssueType) == 0x000008, "Wrong alignment on FJiraIssueType");
static_assert(sizeof(FJiraIssueType) == 0x000010, "Wrong size on FJiraIssueType");
static_assert(offsetof(FJiraIssueType, ID) == 0x000000, "Member 'FJiraIssueType::ID' has a wrong offset!");

// ScriptStruct Palia.JiraFields
// 0x0068 (0x0068 - 0x0000)
struct FJiraFields final
{
public:
	class FString                                 Summary;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJiraDescription                       Description;                                       // 0x0010(0x0028)(NativeAccessSpecifierPublic)
	struct FJiraIssueType                         Issuetype;                                         // 0x0038(0x0010)(NativeAccessSpecifierPublic)
	struct FJiraProject                           Project;                                           // 0x0048(0x0010)(NativeAccessSpecifierPublic)
	struct FJiraReporter                          Reporter;                                          // 0x0058(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJiraFields) == 0x000008, "Wrong alignment on FJiraFields");
static_assert(sizeof(FJiraFields) == 0x000068, "Wrong size on FJiraFields");
static_assert(offsetof(FJiraFields, Summary) == 0x000000, "Member 'FJiraFields::Summary' has a wrong offset!");
static_assert(offsetof(FJiraFields, Description) == 0x000010, "Member 'FJiraFields::Description' has a wrong offset!");
static_assert(offsetof(FJiraFields, Issuetype) == 0x000038, "Member 'FJiraFields::Issuetype' has a wrong offset!");
static_assert(offsetof(FJiraFields, Project) == 0x000048, "Member 'FJiraFields::Project' has a wrong offset!");
static_assert(offsetof(FJiraFields, Reporter) == 0x000058, "Member 'FJiraFields::Reporter' has a wrong offset!");

// ScriptStruct Palia.TravelPayload
// 0x00C0 (0x00C0 - 0x0000)
struct FTravelPayload final
{
public:
	class AValeriaCharacter*                      TeleportingCharacter;                              // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerToVisit;                                     // 0x0008(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterToVisit;                                  // 0x0018(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SeamlessReferenceLocation;                         // 0x0028(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SeamlessReferenceRotation;                         // 0x0040(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UTeleportTravelConfigAsset*             TravelConfigAsset;                                 // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTeleportDestinationComponent*          TravelDestination;                                 // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpecificLocationOverride;                          // 0x0068(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpecificRotationOverride;                          // 0x0080(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGuid                                  PlotToVisit;                                       // 0x0098(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterPlotToVisit;                              // 0x00A8(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToPrivateSpace;                                   // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bViewOnlyPlot;                                     // 0x00B9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227A[0x6];                                     // 0x00BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTravelPayload) == 0x000008, "Wrong alignment on FTravelPayload");
static_assert(sizeof(FTravelPayload) == 0x0000C0, "Wrong size on FTravelPayload");
static_assert(offsetof(FTravelPayload, TeleportingCharacter) == 0x000000, "Member 'FTravelPayload::TeleportingCharacter' has a wrong offset!");
static_assert(offsetof(FTravelPayload, PlayerToVisit) == 0x000008, "Member 'FTravelPayload::PlayerToVisit' has a wrong offset!");
static_assert(offsetof(FTravelPayload, CharacterToVisit) == 0x000018, "Member 'FTravelPayload::CharacterToVisit' has a wrong offset!");
static_assert(offsetof(FTravelPayload, SeamlessReferenceLocation) == 0x000028, "Member 'FTravelPayload::SeamlessReferenceLocation' has a wrong offset!");
static_assert(offsetof(FTravelPayload, SeamlessReferenceRotation) == 0x000040, "Member 'FTravelPayload::SeamlessReferenceRotation' has a wrong offset!");
static_assert(offsetof(FTravelPayload, TravelConfigAsset) == 0x000058, "Member 'FTravelPayload::TravelConfigAsset' has a wrong offset!");
static_assert(offsetof(FTravelPayload, TravelDestination) == 0x000060, "Member 'FTravelPayload::TravelDestination' has a wrong offset!");
static_assert(offsetof(FTravelPayload, SpecificLocationOverride) == 0x000068, "Member 'FTravelPayload::SpecificLocationOverride' has a wrong offset!");
static_assert(offsetof(FTravelPayload, SpecificRotationOverride) == 0x000080, "Member 'FTravelPayload::SpecificRotationOverride' has a wrong offset!");
static_assert(offsetof(FTravelPayload, PlotToVisit) == 0x000098, "Member 'FTravelPayload::PlotToVisit' has a wrong offset!");
static_assert(offsetof(FTravelPayload, CharacterPlotToVisit) == 0x0000A8, "Member 'FTravelPayload::CharacterPlotToVisit' has a wrong offset!");
static_assert(offsetof(FTravelPayload, bToPrivateSpace) == 0x0000B8, "Member 'FTravelPayload::bToPrivateSpace' has a wrong offset!");
static_assert(offsetof(FTravelPayload, bViewOnlyPlot) == 0x0000B9, "Member 'FTravelPayload::bViewOnlyPlot' has a wrong offset!");

// ScriptStruct Palia.DebugSpawningActorDrawSettings
// 0x0028 (0x0028 - 0x0000)
struct FDebugSpawningActorDrawSettings final
{
public:
	float                                         TextDrawDistance;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawDistance;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValidityRaycastDistAboveSpawnPoint;                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValidityRaycastDistBelowSpawnPoint;                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextScaleMinMax;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawInWorldText;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawName;                                          // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawPosition;                                      // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227B[0x5];                                     // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugSpawningActorDrawSettings) == 0x000008, "Wrong alignment on FDebugSpawningActorDrawSettings");
static_assert(sizeof(FDebugSpawningActorDrawSettings) == 0x000028, "Wrong size on FDebugSpawningActorDrawSettings");
static_assert(offsetof(FDebugSpawningActorDrawSettings, TextDrawDistance) == 0x000000, "Member 'FDebugSpawningActorDrawSettings::TextDrawDistance' has a wrong offset!");
static_assert(offsetof(FDebugSpawningActorDrawSettings, DrawDistance) == 0x000004, "Member 'FDebugSpawningActorDrawSettings::DrawDistance' has a wrong offset!");
static_assert(offsetof(FDebugSpawningActorDrawSettings, ValidityRaycastDistAboveSpawnPoint) == 0x000008, "Member 'FDebugSpawningActorDrawSettings::ValidityRaycastDistAboveSpawnPoint' has a wrong offset!");
static_assert(offsetof(FDebugSpawningActorDrawSettings, ValidityRaycastDistBelowSpawnPoint) == 0x00000C, "Member 'FDebugSpawningActorDrawSettings::ValidityRaycastDistBelowSpawnPoint' has a wrong offset!");
static_assert(offsetof(FDebugSpawningActorDrawSettings, TextScaleMinMax) == 0x000010, "Member 'FDebugSpawningActorDrawSettings::TextScaleMinMax' has a wrong offset!");
static_assert(offsetof(FDebugSpawningActorDrawSettings, DrawInWorldText) == 0x000020, "Member 'FDebugSpawningActorDrawSettings::DrawInWorldText' has a wrong offset!");
static_assert(offsetof(FDebugSpawningActorDrawSettings, DrawName) == 0x000021, "Member 'FDebugSpawningActorDrawSettings::DrawName' has a wrong offset!");
static_assert(offsetof(FDebugSpawningActorDrawSettings, DrawPosition) == 0x000022, "Member 'FDebugSpawningActorDrawSettings::DrawPosition' has a wrong offset!");

// ScriptStruct Palia.WeatherDateTimeStateOverride
// 0x0018 (0x0018 - 0x0000)
struct FWeatherDateTimeStateOverride final
{
public:
	int64                                         StartTime;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         EndTime;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateOverrideName;                                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherDateTimeStateOverride) == 0x000008, "Wrong alignment on FWeatherDateTimeStateOverride");
static_assert(sizeof(FWeatherDateTimeStateOverride) == 0x000018, "Wrong size on FWeatherDateTimeStateOverride");
static_assert(offsetof(FWeatherDateTimeStateOverride, StartTime) == 0x000000, "Member 'FWeatherDateTimeStateOverride::StartTime' has a wrong offset!");
static_assert(offsetof(FWeatherDateTimeStateOverride, EndTime) == 0x000008, "Member 'FWeatherDateTimeStateOverride::EndTime' has a wrong offset!");
static_assert(offsetof(FWeatherDateTimeStateOverride, StateOverrideName) == 0x000010, "Member 'FWeatherDateTimeStateOverride::StateOverrideName' has a wrong offset!");

// ScriptStruct Palia.WeatherPatternConfig
// 0x0100 (0x0108 - 0x0008)
struct FWeatherPatternConfig final : public FTableRowBase
{
public:
	bool                                          bEnable;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumStatesInFullCycle;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeOffset;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateLookAheadMS;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227D[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   LevelEnvironmentManager;                           // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ManagerHeightFogOffset;                            // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227E[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelSequence>          Sequence;                                          // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRain;                                       // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCloud;                                      // 0x007A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227F[0x5];                                     // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CustomOverrideStateDurationTime;                   // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWeatherDateTimeStateOverride>  EventWeatherOverrideDates;                         // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FWeatherStateProperties>        States;                                            // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 TransitionProbabilityMatrix;                       // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 NormalizedProbablityMatrix;                        // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FTransistionPath>               StepsToStateZero;                                  // 0x00D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bInit;                                             // 0x00E0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2280[0x3];                                     // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InternalTimeOffset;                                // 0x00E4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 StateDurationPattern;                              // 0x00E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int64                                         TotalTimeOfStateDurationPattern;                   // 0x00F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScalar;                                        // 0x0100(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2281[0x4];                                     // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeatherPatternConfig) == 0x000008, "Wrong alignment on FWeatherPatternConfig");
static_assert(sizeof(FWeatherPatternConfig) == 0x000108, "Wrong size on FWeatherPatternConfig");
static_assert(offsetof(FWeatherPatternConfig, bEnable) == 0x000008, "Member 'FWeatherPatternConfig::bEnable' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, NumStatesInFullCycle) == 0x00000C, "Member 'FWeatherPatternConfig::NumStatesInFullCycle' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, TimeOffset) == 0x000010, "Member 'FWeatherPatternConfig::TimeOffset' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, RandomSeed) == 0x000014, "Member 'FWeatherPatternConfig::RandomSeed' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, StateLookAheadMS) == 0x000018, "Member 'FWeatherPatternConfig::StateLookAheadMS' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, LevelEnvironmentManager) == 0x000020, "Member 'FWeatherPatternConfig::LevelEnvironmentManager' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, ManagerHeightFogOffset) == 0x000048, "Member 'FWeatherPatternConfig::ManagerHeightFogOffset' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, Sequence) == 0x000050, "Member 'FWeatherPatternConfig::Sequence' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, bEnableRain) == 0x000078, "Member 'FWeatherPatternConfig::bEnableRain' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, bEnableWind) == 0x000079, "Member 'FWeatherPatternConfig::bEnableWind' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, bEnableCloud) == 0x00007A, "Member 'FWeatherPatternConfig::bEnableCloud' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, CustomOverrideStateDurationTime) == 0x000080, "Member 'FWeatherPatternConfig::CustomOverrideStateDurationTime' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, EventWeatherOverrideDates) == 0x000090, "Member 'FWeatherPatternConfig::EventWeatherOverrideDates' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, States) == 0x0000A0, "Member 'FWeatherPatternConfig::States' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, TransitionProbabilityMatrix) == 0x0000B0, "Member 'FWeatherPatternConfig::TransitionProbabilityMatrix' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, NormalizedProbablityMatrix) == 0x0000C0, "Member 'FWeatherPatternConfig::NormalizedProbablityMatrix' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, StepsToStateZero) == 0x0000D0, "Member 'FWeatherPatternConfig::StepsToStateZero' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, bInit) == 0x0000E0, "Member 'FWeatherPatternConfig::bInit' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, InternalTimeOffset) == 0x0000E4, "Member 'FWeatherPatternConfig::InternalTimeOffset' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, StateDurationPattern) == 0x0000E8, "Member 'FWeatherPatternConfig::StateDurationPattern' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, TotalTimeOfStateDurationPattern) == 0x0000F8, "Member 'FWeatherPatternConfig::TotalTimeOfStateDurationPattern' has a wrong offset!");
static_assert(offsetof(FWeatherPatternConfig, TimeScalar) == 0x000100, "Member 'FWeatherPatternConfig::TimeScalar' has a wrong offset!");

// ScriptStruct Palia.CharacterCreationHairConfig
// 0x0068 (0x0070 - 0x0008)
struct FCharacterCreationHairConfig final : public FTableRowBase
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BaseMaterial_SingleColor;                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BaseMaterial_TwoColor;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECharacterCreationHairColor, class UTexture2D*> HairColorToTextureMap;                             // 0x0020(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterCreationHairConfig) == 0x000008, "Wrong alignment on FCharacterCreationHairConfig");
static_assert(sizeof(FCharacterCreationHairConfig) == 0x000070, "Wrong size on FCharacterCreationHairConfig");
static_assert(offsetof(FCharacterCreationHairConfig, Mesh) == 0x000008, "Member 'FCharacterCreationHairConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FCharacterCreationHairConfig, BaseMaterial_SingleColor) == 0x000010, "Member 'FCharacterCreationHairConfig::BaseMaterial_SingleColor' has a wrong offset!");
static_assert(offsetof(FCharacterCreationHairConfig, BaseMaterial_TwoColor) == 0x000018, "Member 'FCharacterCreationHairConfig::BaseMaterial_TwoColor' has a wrong offset!");
static_assert(offsetof(FCharacterCreationHairConfig, HairColorToTextureMap) == 0x000020, "Member 'FCharacterCreationHairConfig::HairColorToTextureMap' has a wrong offset!");

// ScriptStruct Palia.CraftingGlobalConfig_InputActions_Engaged
// 0x00A0 (0x00A0 - 0x0000)
struct FCraftingGlobalConfig_InputActions_Engaged final
{
public:
	TMap<EInteractEventIndex, struct FInputMappingPriorityData> InputMappingPriorityDataForEventIndex;             // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInputAction>            InteractDisengage;                                 // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInputAction>            MinigameAction;                                    // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingGlobalConfig_InputActions_Engaged) == 0x000008, "Wrong alignment on FCraftingGlobalConfig_InputActions_Engaged");
static_assert(sizeof(FCraftingGlobalConfig_InputActions_Engaged) == 0x0000A0, "Wrong size on FCraftingGlobalConfig_InputActions_Engaged");
static_assert(offsetof(FCraftingGlobalConfig_InputActions_Engaged, InputMappingPriorityDataForEventIndex) == 0x000000, "Member 'FCraftingGlobalConfig_InputActions_Engaged::InputMappingPriorityDataForEventIndex' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_InputActions_Engaged, InteractDisengage) == 0x000050, "Member 'FCraftingGlobalConfig_InputActions_Engaged::InteractDisengage' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_InputActions_Engaged, MinigameAction) == 0x000078, "Member 'FCraftingGlobalConfig_InputActions_Engaged::MinigameAction' has a wrong offset!");

// ScriptStruct Palia.FishingGoalSettings
// 0x0030 (0x0030 - 0x0000)
struct FFishingGoalSettings final
{
public:
	float                                         MinDistanceMin;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceMax;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceStartScalar;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2282[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x0010(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndpointOffsetFromShore;                           // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweepSphereRadius;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingGoalSettings) == 0x000008, "Wrong alignment on FFishingGoalSettings");
static_assert(sizeof(FFishingGoalSettings) == 0x000030, "Wrong size on FFishingGoalSettings");
static_assert(offsetof(FFishingGoalSettings, MinDistanceMin) == 0x000000, "Member 'FFishingGoalSettings::MinDistanceMin' has a wrong offset!");
static_assert(offsetof(FFishingGoalSettings, MinDistanceMax) == 0x000004, "Member 'FFishingGoalSettings::MinDistanceMax' has a wrong offset!");
static_assert(offsetof(FFishingGoalSettings, MinDistanceStartScalar) == 0x000008, "Member 'FFishingGoalSettings::MinDistanceStartScalar' has a wrong offset!");
static_assert(offsetof(FFishingGoalSettings, Offset) == 0x000010, "Member 'FFishingGoalSettings::Offset' has a wrong offset!");
static_assert(offsetof(FFishingGoalSettings, EndpointOffsetFromShore) == 0x000028, "Member 'FFishingGoalSettings::EndpointOffsetFromShore' has a wrong offset!");
static_assert(offsetof(FFishingGoalSettings, SweepSphereRadius) == 0x00002C, "Member 'FFishingGoalSettings::SweepSphereRadius' has a wrong offset!");

// ScriptStruct Palia.VAL_MPCProfile
// 0x0120 (0x0120 - 0x0000)
struct FVAL_MPCProfile final
{
public:
	bool                                          bOverride_HorizonHeight;                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2283[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HorizonHeight;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_HorizonHardness;                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2284[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HorizonHardness;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ZenithHeight;                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2285[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZenithHeight;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ZenithHardness;                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2286[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZenithHardness;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_HorizonSkyColor;                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2287[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           HorizonSkyColor;                                   // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ZenithSkyColor;                          // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2288[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ZenithSkyColor;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ZenithSkyColor2;                         // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2289[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ZenithSkyColor2;                                   // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWindIntensity;                                    // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228A[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindRecalculationFrequency;                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRecalculationBlendThreshold;                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindIntensityMin;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindIntensityMax;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ScalarParameterValues;                   // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228B[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      ScalarParameterValues;                             // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bOverride_VectorParameterValues;                   // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228C[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLinearColor>        VectorParameterValues;                             // 0x00D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_MPCProfile) == 0x000008, "Wrong alignment on FVAL_MPCProfile");
static_assert(sizeof(FVAL_MPCProfile) == 0x000120, "Wrong size on FVAL_MPCProfile");
static_assert(offsetof(FVAL_MPCProfile, bOverride_HorizonHeight) == 0x000000, "Member 'FVAL_MPCProfile::bOverride_HorizonHeight' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, HorizonHeight) == 0x000004, "Member 'FVAL_MPCProfile::HorizonHeight' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, bOverride_HorizonHardness) == 0x000008, "Member 'FVAL_MPCProfile::bOverride_HorizonHardness' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, HorizonHardness) == 0x00000C, "Member 'FVAL_MPCProfile::HorizonHardness' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, bOverride_ZenithHeight) == 0x000010, "Member 'FVAL_MPCProfile::bOverride_ZenithHeight' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, ZenithHeight) == 0x000014, "Member 'FVAL_MPCProfile::ZenithHeight' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, bOverride_ZenithHardness) == 0x000018, "Member 'FVAL_MPCProfile::bOverride_ZenithHardness' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, ZenithHardness) == 0x00001C, "Member 'FVAL_MPCProfile::ZenithHardness' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, bOverride_HorizonSkyColor) == 0x000020, "Member 'FVAL_MPCProfile::bOverride_HorizonSkyColor' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, HorizonSkyColor) == 0x000024, "Member 'FVAL_MPCProfile::HorizonSkyColor' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, bOverride_ZenithSkyColor) == 0x000034, "Member 'FVAL_MPCProfile::bOverride_ZenithSkyColor' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, ZenithSkyColor) == 0x000038, "Member 'FVAL_MPCProfile::ZenithSkyColor' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, bOverride_ZenithSkyColor2) == 0x000048, "Member 'FVAL_MPCProfile::bOverride_ZenithSkyColor2' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, ZenithSkyColor2) == 0x00004C, "Member 'FVAL_MPCProfile::ZenithSkyColor2' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, bWindIntensity) == 0x00005C, "Member 'FVAL_MPCProfile::bWindIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, WindRecalculationFrequency) == 0x000060, "Member 'FVAL_MPCProfile::WindRecalculationFrequency' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, WindRecalculationBlendThreshold) == 0x000064, "Member 'FVAL_MPCProfile::WindRecalculationBlendThreshold' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, WindIntensityMin) == 0x000068, "Member 'FVAL_MPCProfile::WindIntensityMin' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, WindIntensityMax) == 0x00006C, "Member 'FVAL_MPCProfile::WindIntensityMax' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, bOverride_ScalarParameterValues) == 0x000070, "Member 'FVAL_MPCProfile::bOverride_ScalarParameterValues' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, ScalarParameterValues) == 0x000078, "Member 'FVAL_MPCProfile::ScalarParameterValues' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, bOverride_VectorParameterValues) == 0x0000C8, "Member 'FVAL_MPCProfile::bOverride_VectorParameterValues' has a wrong offset!");
static_assert(offsetof(FVAL_MPCProfile, VectorParameterValues) == 0x0000D0, "Member 'FVAL_MPCProfile::VectorParameterValues' has a wrong offset!");

// ScriptStruct Palia.VAL_OpenStorePayload
// 0x0028 (0x0028 - 0x0000)
struct FVAL_OpenStorePayload final
{
public:
	EVAL_OpenStoreContext                         Context;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVALUI_PremiumStoreState                      OpenState;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVAL_CharacterCustomizationModeConfig  Config;                                            // 0x0002(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_228D[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          CheckoutItemIds;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_OpenStorePayload) == 0x000008, "Wrong alignment on FVAL_OpenStorePayload");
static_assert(sizeof(FVAL_OpenStorePayload) == 0x000028, "Wrong size on FVAL_OpenStorePayload");
static_assert(offsetof(FVAL_OpenStorePayload, Context) == 0x000000, "Member 'FVAL_OpenStorePayload::Context' has a wrong offset!");
static_assert(offsetof(FVAL_OpenStorePayload, OpenState) == 0x000001, "Member 'FVAL_OpenStorePayload::OpenState' has a wrong offset!");
static_assert(offsetof(FVAL_OpenStorePayload, Config) == 0x000002, "Member 'FVAL_OpenStorePayload::Config' has a wrong offset!");
static_assert(offsetof(FVAL_OpenStorePayload, CheckoutItemIds) == 0x000018, "Member 'FVAL_OpenStorePayload::CheckoutItemIds' has a wrong offset!");

// ScriptStruct Palia.MontageActionContext
// 0x000C (0x000C - 0x0000)
struct FMontageActionContext final
{
public:
	ERpcAction                                    RpcAction;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERpcMontageAction                             Event;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AnimTag;                                           // 0x0004(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMontageActionContext) == 0x000004, "Wrong alignment on FMontageActionContext");
static_assert(sizeof(FMontageActionContext) == 0x00000C, "Wrong size on FMontageActionContext");
static_assert(offsetof(FMontageActionContext, RpcAction) == 0x000000, "Member 'FMontageActionContext::RpcAction' has a wrong offset!");
static_assert(offsetof(FMontageActionContext, Event) == 0x000001, "Member 'FMontageActionContext::Event' has a wrong offset!");
static_assert(offsetof(FMontageActionContext, AnimTag) == 0x000004, "Member 'FMontageActionContext::AnimTag' has a wrong offset!");

// ScriptStruct Palia.AchievementUnlockRule
// 0x0020 (0x0020 - 0x0000)
struct FAchievementUnlockRule final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatValue;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementUnlockRule) == 0x000008, "Wrong alignment on FAchievementUnlockRule");
static_assert(sizeof(FAchievementUnlockRule) == 0x000020, "Wrong size on FAchievementUnlockRule");
static_assert(offsetof(FAchievementUnlockRule, StatName) == 0x000000, "Member 'FAchievementUnlockRule::StatName' has a wrong offset!");
static_assert(offsetof(FAchievementUnlockRule, StatValue) == 0x000010, "Member 'FAchievementUnlockRule::StatValue' has a wrong offset!");

// ScriptStruct Palia.ActorSpawnPointList
// 0x0010 (0x0010 - 0x0000)
struct FActorSpawnPointList final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorSpawnPointList) == 0x000008, "Wrong alignment on FActorSpawnPointList");
static_assert(sizeof(FActorSpawnPointList) == 0x000010, "Wrong size on FActorSpawnPointList");
static_assert(offsetof(FActorSpawnPointList, Actors) == 0x000000, "Member 'FActorSpawnPointList::Actors' has a wrong offset!");

// ScriptStruct Palia.PlayerCompassTargetConfig
// 0x0068 (0x0068 - 0x0000)
struct FPlayerCompassTargetConfig final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             AttachedIcon;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Tooltip;                                           // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsTextOnly;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppearSmallOnMap;                                 // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAppearAsInWorldMarker;                         // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanUserTrack;                                     // 0x0043(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228F[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Alignment;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVisibleDistance;                                // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AreaRadius;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCompassMultipleSameTargetResolution    MultipleSameResolution;                            // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerMapLayer                               MapLayer;                                          // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2290[0x6];                                     // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerCompassTargetConfig) == 0x000008, "Wrong alignment on FPlayerCompassTargetConfig");
static_assert(sizeof(FPlayerCompassTargetConfig) == 0x000068, "Wrong size on FPlayerCompassTargetConfig");
static_assert(offsetof(FPlayerCompassTargetConfig, Icon) == 0x000000, "Member 'FPlayerCompassTargetConfig::Icon' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, AttachedIcon) == 0x000008, "Member 'FPlayerCompassTargetConfig::AttachedIcon' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, Tooltip) == 0x000010, "Member 'FPlayerCompassTargetConfig::Tooltip' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, DisplayText) == 0x000028, "Member 'FPlayerCompassTargetConfig::DisplayText' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, bIsTextOnly) == 0x000040, "Member 'FPlayerCompassTargetConfig::bIsTextOnly' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, bAppearSmallOnMap) == 0x000041, "Member 'FPlayerCompassTargetConfig::bAppearSmallOnMap' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, bCanAppearAsInWorldMarker) == 0x000042, "Member 'FPlayerCompassTargetConfig::bCanAppearAsInWorldMarker' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, bCanUserTrack) == 0x000043, "Member 'FPlayerCompassTargetConfig::bCanUserTrack' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, Alignment) == 0x000048, "Member 'FPlayerCompassTargetConfig::Alignment' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, MaxVisibleDistance) == 0x000058, "Member 'FPlayerCompassTargetConfig::MaxVisibleDistance' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, AreaRadius) == 0x00005C, "Member 'FPlayerCompassTargetConfig::AreaRadius' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, MultipleSameResolution) == 0x000060, "Member 'FPlayerCompassTargetConfig::MultipleSameResolution' has a wrong offset!");
static_assert(offsetof(FPlayerCompassTargetConfig, MapLayer) == 0x000061, "Member 'FPlayerCompassTargetConfig::MapLayer' has a wrong offset!");

// ScriptStruct Palia.AIBehaviourRanges
// 0x0040 (0x0040 - 0x0000)
struct FAIBehaviourRanges final
{
public:
	struct FFloatRange                            RunToPursue;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            WalkToPursue;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            BackAway;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            StrafeAndTaunt;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIBehaviourRanges) == 0x000004, "Wrong alignment on FAIBehaviourRanges");
static_assert(sizeof(FAIBehaviourRanges) == 0x000040, "Wrong size on FAIBehaviourRanges");
static_assert(offsetof(FAIBehaviourRanges, RunToPursue) == 0x000000, "Member 'FAIBehaviourRanges::RunToPursue' has a wrong offset!");
static_assert(offsetof(FAIBehaviourRanges, WalkToPursue) == 0x000010, "Member 'FAIBehaviourRanges::WalkToPursue' has a wrong offset!");
static_assert(offsetof(FAIBehaviourRanges, BackAway) == 0x000020, "Member 'FAIBehaviourRanges::BackAway' has a wrong offset!");
static_assert(offsetof(FAIBehaviourRanges, StrafeAndTaunt) == 0x000030, "Member 'FAIBehaviourRanges::StrafeAndTaunt' has a wrong offset!");

// ScriptStruct Palia.AIThreatList
// 0x0050 (0x0050 - 0x0000)
struct FAIThreatList final
{
public:
	TArray<struct FAIThreat>                      Threats;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TimeLastUpdated;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2291[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TmpActorList;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      AvailableTargetTypes;                              // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2292[0x8];                                     // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIThreatList) == 0x000008, "Wrong alignment on FAIThreatList");
static_assert(sizeof(FAIThreatList) == 0x000050, "Wrong size on FAIThreatList");
static_assert(offsetof(FAIThreatList, Threats) == 0x000000, "Member 'FAIThreatList::Threats' has a wrong offset!");
static_assert(offsetof(FAIThreatList, TimeLastUpdated) == 0x000010, "Member 'FAIThreatList::TimeLastUpdated' has a wrong offset!");
static_assert(offsetof(FAIThreatList, TmpActorList) == 0x000018, "Member 'FAIThreatList::TmpActorList' has a wrong offset!");
static_assert(offsetof(FAIThreatList, AvailableTargetTypes) == 0x000028, "Member 'FAIThreatList::AvailableTargetTypes' has a wrong offset!");
static_assert(offsetof(FAIThreatList, ActorsToIgnore) == 0x000038, "Member 'FAIThreatList::ActorsToIgnore' has a wrong offset!");

// ScriptStruct Palia.AIValeriaNoiseEvent
// 0x0040 (0x0040 - 0x0000)
struct FAIValeriaNoiseEvent final
{
public:
	uint8                                         Pad_2293[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NoiseLocation;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EValeriaNoiseEventVolume                      Volume;                                            // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2294[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StealthMask;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2295[0x8];                                     // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIValeriaNoiseEvent) == 0x000008, "Wrong alignment on FAIValeriaNoiseEvent");
static_assert(sizeof(FAIValeriaNoiseEvent) == 0x000040, "Wrong size on FAIValeriaNoiseEvent");
static_assert(offsetof(FAIValeriaNoiseEvent, NoiseLocation) == 0x000008, "Member 'FAIValeriaNoiseEvent::NoiseLocation' has a wrong offset!");
static_assert(offsetof(FAIValeriaNoiseEvent, Instigator) == 0x000020, "Member 'FAIValeriaNoiseEvent::Instigator' has a wrong offset!");
static_assert(offsetof(FAIValeriaNoiseEvent, Volume) == 0x000028, "Member 'FAIValeriaNoiseEvent::Volume' has a wrong offset!");
static_assert(offsetof(FAIValeriaNoiseEvent, StealthMask) == 0x00002C, "Member 'FAIValeriaNoiseEvent::StealthMask' has a wrong offset!");
static_assert(offsetof(FAIValeriaNoiseEvent, Tag) == 0x000030, "Member 'FAIValeriaNoiseEvent::Tag' has a wrong offset!");

// ScriptStruct Palia.TimeOfDayAudioSettings
// 0x0018 (0x0018 - 0x0000)
struct FTimeOfDayAudioSettings final
{
public:
	ETimeOfDayAudioBehavior                       Behavior;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2296[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDistance;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Direction;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseHousingPlotLocation;                            // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2297[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeOfDayAudioSettings) == 0x000004, "Wrong alignment on FTimeOfDayAudioSettings");
static_assert(sizeof(FTimeOfDayAudioSettings) == 0x000018, "Wrong size on FTimeOfDayAudioSettings");
static_assert(offsetof(FTimeOfDayAudioSettings, Behavior) == 0x000000, "Member 'FTimeOfDayAudioSettings::Behavior' has a wrong offset!");
static_assert(offsetof(FTimeOfDayAudioSettings, MinDistance) == 0x000004, "Member 'FTimeOfDayAudioSettings::MinDistance' has a wrong offset!");
static_assert(offsetof(FTimeOfDayAudioSettings, MaxDistance) == 0x000008, "Member 'FTimeOfDayAudioSettings::MaxDistance' has a wrong offset!");
static_assert(offsetof(FTimeOfDayAudioSettings, Direction) == 0x00000C, "Member 'FTimeOfDayAudioSettings::Direction' has a wrong offset!");
static_assert(offsetof(FTimeOfDayAudioSettings, Distance) == 0x000010, "Member 'FTimeOfDayAudioSettings::Distance' has a wrong offset!");
static_assert(offsetof(FTimeOfDayAudioSettings, UseHousingPlotLocation) == 0x000014, "Member 'FTimeOfDayAudioSettings::UseHousingPlotLocation' has a wrong offset!");

// ScriptStruct Palia.TimeOfDayAudio
// 0x0048 (0x0048 - 0x0000)
struct FTimeOfDayAudio final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimeOfDayPeriod                              WhenToPlay;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2298[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Hour;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimeOfDayAudioSettings                OffPlotSettings;                                   // 0x0014(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimeOfDayAudioSettings                OnPlotSettings;                                    // 0x002C(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2299[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeOfDayAudio) == 0x000008, "Wrong alignment on FTimeOfDayAudio");
static_assert(sizeof(FTimeOfDayAudio) == 0x000048, "Wrong size on FTimeOfDayAudio");
static_assert(offsetof(FTimeOfDayAudio, AkEvent) == 0x000000, "Member 'FTimeOfDayAudio::AkEvent' has a wrong offset!");
static_assert(offsetof(FTimeOfDayAudio, WhenToPlay) == 0x000008, "Member 'FTimeOfDayAudio::WhenToPlay' has a wrong offset!");
static_assert(offsetof(FTimeOfDayAudio, Hour) == 0x00000C, "Member 'FTimeOfDayAudio::Hour' has a wrong offset!");
static_assert(offsetof(FTimeOfDayAudio, Minute) == 0x000010, "Member 'FTimeOfDayAudio::Minute' has a wrong offset!");
static_assert(offsetof(FTimeOfDayAudio, OffPlotSettings) == 0x000014, "Member 'FTimeOfDayAudio::OffPlotSettings' has a wrong offset!");
static_assert(offsetof(FTimeOfDayAudio, OnPlotSettings) == 0x00002C, "Member 'FTimeOfDayAudio::OnPlotSettings' has a wrong offset!");

// ScriptStruct Palia.TrackedLoopEventIds
// 0x0010 (0x0010 - 0x0000)
struct FTrackedLoopEventIds final
{
public:
	TArray<int32>                                 Ids;                                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackedLoopEventIds) == 0x000008, "Wrong alignment on FTrackedLoopEventIds");
static_assert(sizeof(FTrackedLoopEventIds) == 0x000010, "Wrong size on FTrackedLoopEventIds");
static_assert(offsetof(FTrackedLoopEventIds, Ids) == 0x000000, "Member 'FTrackedLoopEventIds::Ids' has a wrong offset!");

// ScriptStruct Palia.AnimNode_BlendListByGameplayTag
// 0x0018 (0x0060 - 0x0048)
struct FAnimNode_BlendListByGameplayTag final : public FAnimNode_BlendListBase
{
public:
	TArray<struct FGameplayTag>                   GameplayTagMapping;                                // 0x0048(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActiveGameplayTag;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_BlendListByGameplayTag) == 0x000008, "Wrong alignment on FAnimNode_BlendListByGameplayTag");
static_assert(sizeof(FAnimNode_BlendListByGameplayTag) == 0x000060, "Wrong size on FAnimNode_BlendListByGameplayTag");
static_assert(offsetof(FAnimNode_BlendListByGameplayTag, GameplayTagMapping) == 0x000048, "Member 'FAnimNode_BlendListByGameplayTag::GameplayTagMapping' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListByGameplayTag, ActiveGameplayTag) == 0x000058, "Member 'FAnimNode_BlendListByGameplayTag::ActiveGameplayTag' has a wrong offset!");

// ScriptStruct Palia.VAL_RenderPreviewParametersBase
// 0x0900 (0x0900 - 0x0000)
struct FVAL_RenderPreviewParametersBase
{
public:
	struct FVAL_CharacterCustomizationLoadout     Loadout;                                           // 0x0000(0x0900)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_RenderPreviewParametersBase) == 0x000008, "Wrong alignment on FVAL_RenderPreviewParametersBase");
static_assert(sizeof(FVAL_RenderPreviewParametersBase) == 0x000900, "Wrong size on FVAL_RenderPreviewParametersBase");
static_assert(offsetof(FVAL_RenderPreviewParametersBase, Loadout) == 0x000000, "Member 'FVAL_RenderPreviewParametersBase::Loadout' has a wrong offset!");

// ScriptStruct Palia.VAL_RenderTorsoPreviewParameters
// 0x0000 (0x0900 - 0x0900)
struct FVAL_RenderTorsoPreviewParameters final : public FVAL_RenderPreviewParametersBase
{
};
static_assert(alignof(FVAL_RenderTorsoPreviewParameters) == 0x000008, "Wrong alignment on FVAL_RenderTorsoPreviewParameters");
static_assert(sizeof(FVAL_RenderTorsoPreviewParameters) == 0x000900, "Wrong size on FVAL_RenderTorsoPreviewParameters");

// ScriptStruct Palia.AnimNode_EvalBlendSpaceByMapping
// 0x0028 (0x00A0 - 0x0078)
struct FAnimNode_EvalBlendSpaceByMapping final : public FAnimNode_BlendSpaceEvaluator
{
public:
	class FName                                   MappingName;                                       // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimMappingCachePolicy                       NameCachePolicy;                                   // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229A[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaMoveablePawn*                   CachedPawn;                                        // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreviousMappingName;                               // 0x0090(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MappingQualifier;                                  // 0x0098(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_EvalBlendSpaceByMapping) == 0x000008, "Wrong alignment on FAnimNode_EvalBlendSpaceByMapping");
static_assert(sizeof(FAnimNode_EvalBlendSpaceByMapping) == 0x0000A0, "Wrong size on FAnimNode_EvalBlendSpaceByMapping");
static_assert(offsetof(FAnimNode_EvalBlendSpaceByMapping, MappingName) == 0x000078, "Member 'FAnimNode_EvalBlendSpaceByMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_EvalBlendSpaceByMapping, NameCachePolicy) == 0x000080, "Member 'FAnimNode_EvalBlendSpaceByMapping::NameCachePolicy' has a wrong offset!");
static_assert(offsetof(FAnimNode_EvalBlendSpaceByMapping, CachedPawn) == 0x000088, "Member 'FAnimNode_EvalBlendSpaceByMapping::CachedPawn' has a wrong offset!");
static_assert(offsetof(FAnimNode_EvalBlendSpaceByMapping, PreviousMappingName) == 0x000090, "Member 'FAnimNode_EvalBlendSpaceByMapping::PreviousMappingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_EvalBlendSpaceByMapping, MappingQualifier) == 0x000098, "Member 'FAnimNode_EvalBlendSpaceByMapping::MappingQualifier' has a wrong offset!");

// ScriptStruct Palia.AnimNode_EvalSequenceByMapping
// 0x0028 (0x0090 - 0x0068)
struct FAnimNode_EvalSequenceByMapping final : public FAnimNode_SequenceEvaluator_Standalone
{
public:
	class FName                                   MappingName;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimMappingCachePolicy                       NameCachePolicy;                                   // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229B[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaMoveablePawn*                   CachedPawn;                                        // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   PreviousMappingName;                               // 0x0080(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MappingQualifier;                                  // 0x0088(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_EvalSequenceByMapping) == 0x000008, "Wrong alignment on FAnimNode_EvalSequenceByMapping");
static_assert(sizeof(FAnimNode_EvalSequenceByMapping) == 0x000090, "Wrong size on FAnimNode_EvalSequenceByMapping");
static_assert(offsetof(FAnimNode_EvalSequenceByMapping, MappingName) == 0x000068, "Member 'FAnimNode_EvalSequenceByMapping::MappingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_EvalSequenceByMapping, NameCachePolicy) == 0x000070, "Member 'FAnimNode_EvalSequenceByMapping::NameCachePolicy' has a wrong offset!");
static_assert(offsetof(FAnimNode_EvalSequenceByMapping, CachedPawn) == 0x000078, "Member 'FAnimNode_EvalSequenceByMapping::CachedPawn' has a wrong offset!");
static_assert(offsetof(FAnimNode_EvalSequenceByMapping, PreviousMappingName) == 0x000080, "Member 'FAnimNode_EvalSequenceByMapping::PreviousMappingName' has a wrong offset!");
static_assert(offsetof(FAnimNode_EvalSequenceByMapping, MappingQualifier) == 0x000088, "Member 'FAnimNode_EvalSequenceByMapping::MappingQualifier' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_LoadoutSlotSettings
// 0x0058 (0x0058 - 0x0000)
struct FVAL_CharacterCustomization_LoadoutSlotSettings final
{
public:
	bool                                          bIsUnequippable;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludedInRandomizer;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229C[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TSubclassOf<class UVAL_CharacterCustomizationItemBase>> ItemTypes;                                         // 0x0008(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_LoadoutSlotSettings) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_LoadoutSlotSettings");
static_assert(sizeof(FVAL_CharacterCustomization_LoadoutSlotSettings) == 0x000058, "Wrong size on FVAL_CharacterCustomization_LoadoutSlotSettings");
static_assert(offsetof(FVAL_CharacterCustomization_LoadoutSlotSettings, bIsUnequippable) == 0x000000, "Member 'FVAL_CharacterCustomization_LoadoutSlotSettings::bIsUnequippable' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_LoadoutSlotSettings, bIncludedInRandomizer) == 0x000001, "Member 'FVAL_CharacterCustomization_LoadoutSlotSettings::bIncludedInRandomizer' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_LoadoutSlotSettings, ItemTypes) == 0x000008, "Member 'FVAL_CharacterCustomization_LoadoutSlotSettings::ItemTypes' has a wrong offset!");

// ScriptStruct Palia.AudioMappingConfig
// 0x0030 (0x0038 - 0x0008)
struct FAudioMappingConfig final : public FTableRowBase
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPoint;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachOffset;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               AttachOffsetRule;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptIntroVO;                                 // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229D[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioMappingConfig) == 0x000008, "Wrong alignment on FAudioMappingConfig");
static_assert(sizeof(FAudioMappingConfig) == 0x000038, "Wrong size on FAudioMappingConfig");
static_assert(offsetof(FAudioMappingConfig, AkAudioEvent) == 0x000008, "Member 'FAudioMappingConfig::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(FAudioMappingConfig, AttachPoint) == 0x000010, "Member 'FAudioMappingConfig::AttachPoint' has a wrong offset!");
static_assert(offsetof(FAudioMappingConfig, AttachOffset) == 0x000018, "Member 'FAudioMappingConfig::AttachOffset' has a wrong offset!");
static_assert(offsetof(FAudioMappingConfig, AttachOffsetRule) == 0x000030, "Member 'FAudioMappingConfig::AttachOffsetRule' has a wrong offset!");
static_assert(offsetof(FAudioMappingConfig, bInterruptIntroVO) == 0x000031, "Member 'FAudioMappingConfig::bInterruptIntroVO' has a wrong offset!");

// ScriptStruct Palia.QuestLocationInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FQuestLocationInfo final
{
public:
	uint8                                         Pad_229E[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestLocationInfo) == 0x000008, "Wrong alignment on FQuestLocationInfo");
static_assert(sizeof(FQuestLocationInfo) == 0x000010, "Wrong size on FQuestLocationInfo");

// ScriptStruct Palia.BookConfig
// 0x0058 (0x0060 - 0x0008)
struct FBookConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           Content;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Subtitle;                                          // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FBookEffects>                   BookEffects;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBookConfig) == 0x000008, "Wrong alignment on FBookConfig");
static_assert(sizeof(FBookConfig) == 0x000060, "Wrong size on FBookConfig");
static_assert(offsetof(FBookConfig, PersistId) == 0x000008, "Member 'FBookConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FBookConfig, Content) == 0x000010, "Member 'FBookConfig::Content' has a wrong offset!");
static_assert(offsetof(FBookConfig, Title) == 0x000020, "Member 'FBookConfig::Title' has a wrong offset!");
static_assert(offsetof(FBookConfig, Subtitle) == 0x000038, "Member 'FBookConfig::Subtitle' has a wrong offset!");
static_assert(offsetof(FBookConfig, BookEffects) == 0x000050, "Member 'FBookConfig::BookEffects' has a wrong offset!");

// ScriptStruct Palia.BuffActivation
// 0x0048 (0x0048 - 0x0000)
struct FBuffActivation final
{
public:
	struct FPersistGuid                           AppliedByPlayer;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffConfigId;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A0[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TimeStart;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TimeEnd;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Instance;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A1[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    GameplayEffectHandles;                             // 0x0030(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	int32                                         Stacks;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A2[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuffActivation) == 0x000008, "Wrong alignment on FBuffActivation");
static_assert(sizeof(FBuffActivation) == 0x000048, "Wrong size on FBuffActivation");
static_assert(offsetof(FBuffActivation, AppliedByPlayer) == 0x000000, "Member 'FBuffActivation::AppliedByPlayer' has a wrong offset!");
static_assert(offsetof(FBuffActivation, BuffConfigId) == 0x000010, "Member 'FBuffActivation::BuffConfigId' has a wrong offset!");
static_assert(offsetof(FBuffActivation, TimeStart) == 0x000018, "Member 'FBuffActivation::TimeStart' has a wrong offset!");
static_assert(offsetof(FBuffActivation, TimeEnd) == 0x000020, "Member 'FBuffActivation::TimeEnd' has a wrong offset!");
static_assert(offsetof(FBuffActivation, Instance) == 0x000028, "Member 'FBuffActivation::Instance' has a wrong offset!");
static_assert(offsetof(FBuffActivation, GameplayEffectHandles) == 0x000030, "Member 'FBuffActivation::GameplayEffectHandles' has a wrong offset!");
static_assert(offsetof(FBuffActivation, Stacks) == 0x000040, "Member 'FBuffActivation::Stacks' has a wrong offset!");

// ScriptStruct Palia.JiraUser
// 0x0010 (0x0010 - 0x0000)
struct FJiraUser final
{
public:
	class FString                                 AccountId;                                         // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJiraUser) == 0x000008, "Wrong alignment on FJiraUser");
static_assert(sizeof(FJiraUser) == 0x000010, "Wrong size on FJiraUser");
static_assert(offsetof(FJiraUser, AccountId) == 0x000000, "Member 'FJiraUser::AccountId' has a wrong offset!");

// ScriptStruct Palia.FenceSectionParams
// 0x0008 (0x0008 - 0x0000)
struct FFenceSectionParams final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasStartPost;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasEndPost;                                       // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A3[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFenceSectionParams) == 0x000004, "Wrong alignment on FFenceSectionParams");
static_assert(sizeof(FFenceSectionParams) == 0x000008, "Wrong size on FFenceSectionParams");
static_assert(offsetof(FFenceSectionParams, Length) == 0x000000, "Member 'FFenceSectionParams::Length' has a wrong offset!");
static_assert(offsetof(FFenceSectionParams, bHasStartPost) == 0x000004, "Member 'FFenceSectionParams::bHasStartPost' has a wrong offset!");
static_assert(offsetof(FFenceSectionParams, bHasEndPost) == 0x000005, "Member 'FFenceSectionParams::bHasEndPost' has a wrong offset!");

// ScriptStruct Palia.ItemToPlaceParams
// 0x00E0 (0x00E0 - 0x0000)
struct FItemToPlaceParams final
{
public:
	EItemToPlaceSource                            Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBagSlotLocation                       LocationToPlace;                                   // 0x0004(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HouseInventoryIndex;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StorageItem;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A5[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> StorageItemType;                                   // 0x0018(0x0028)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StorageTintPersistID;                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StorageQualityStars;                               // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A6[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomMeshID;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A7[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FValeriaItem                           ItemRemoved;                                       // 0x0050(0x0060)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	struct FHouseInventoryItem                    HouseRemoved;                                      // 0x00B0(0x0008)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSessionActorId                        ActorToMoveId;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurfaceId;                                         // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFenceSectionParams>            FenceSections;                                     // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FSessionActorId>                ExtraMassMoveActorIds;                             // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemToPlaceParams) == 0x000008, "Wrong alignment on FItemToPlaceParams");
static_assert(sizeof(FItemToPlaceParams) == 0x0000E0, "Wrong size on FItemToPlaceParams");
static_assert(offsetof(FItemToPlaceParams, Type) == 0x000000, "Member 'FItemToPlaceParams::Type' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, LocationToPlace) == 0x000004, "Member 'FItemToPlaceParams::LocationToPlace' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, HouseInventoryIndex) == 0x00000C, "Member 'FItemToPlaceParams::HouseInventoryIndex' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, StorageItem) == 0x000010, "Member 'FItemToPlaceParams::StorageItem' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, StorageItemType) == 0x000018, "Member 'FItemToPlaceParams::StorageItemType' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, StorageTintPersistID) == 0x000040, "Member 'FItemToPlaceParams::StorageTintPersistID' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, StorageQualityStars) == 0x000044, "Member 'FItemToPlaceParams::StorageQualityStars' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, RandomMeshID) == 0x000048, "Member 'FItemToPlaceParams::RandomMeshID' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, ItemRemoved) == 0x000050, "Member 'FItemToPlaceParams::ItemRemoved' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, HouseRemoved) == 0x0000B0, "Member 'FItemToPlaceParams::HouseRemoved' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, ActorToMoveId) == 0x0000B8, "Member 'FItemToPlaceParams::ActorToMoveId' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, SurfaceId) == 0x0000BC, "Member 'FItemToPlaceParams::SurfaceId' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, FenceSections) == 0x0000C0, "Member 'FItemToPlaceParams::FenceSections' has a wrong offset!");
static_assert(offsetof(FItemToPlaceParams, ExtraMassMoveActorIds) == 0x0000D0, "Member 'FItemToPlaceParams::ExtraMassMoveActorIds' has a wrong offset!");

// ScriptStruct Palia.ArcadeGameCommand
// 0x0040 (0x0040 - 0x0000)
struct FArcadeGameCommand final
{
public:
	EArcadeCommandType                            CommandType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AArcadeMachineActor*                    ArcadeMachine;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreToAdd;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfScoresToRetrieve;                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FArcadeReplayFrame                     ReplayFrame;                                       // 0x0018(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArcadeGameCommand) == 0x000008, "Wrong alignment on FArcadeGameCommand");
static_assert(sizeof(FArcadeGameCommand) == 0x000040, "Wrong size on FArcadeGameCommand");
static_assert(offsetof(FArcadeGameCommand, CommandType) == 0x000000, "Member 'FArcadeGameCommand::CommandType' has a wrong offset!");
static_assert(offsetof(FArcadeGameCommand, ArcadeMachine) == 0x000008, "Member 'FArcadeGameCommand::ArcadeMachine' has a wrong offset!");
static_assert(offsetof(FArcadeGameCommand, ScoreToAdd) == 0x000010, "Member 'FArcadeGameCommand::ScoreToAdd' has a wrong offset!");
static_assert(offsetof(FArcadeGameCommand, NumberOfScoresToRetrieve) == 0x000014, "Member 'FArcadeGameCommand::NumberOfScoresToRetrieve' has a wrong offset!");
static_assert(offsetof(FArcadeGameCommand, ReplayFrame) == 0x000018, "Member 'FArcadeGameCommand::ReplayFrame' has a wrong offset!");

// ScriptStruct Palia.JiraIssue
// 0x0068 (0x0068 - 0x0000)
struct FJiraIssue final
{
public:
	struct FJiraFields                            Fields;                                            // 0x0000(0x0068)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FJiraIssue) == 0x000008, "Wrong alignment on FJiraIssue");
static_assert(sizeof(FJiraIssue) == 0x000068, "Wrong size on FJiraIssue");
static_assert(offsetof(FJiraIssue, Fields) == 0x000000, "Member 'FJiraIssue::Fields' has a wrong offset!");

// ScriptStruct Palia.VAL_CooperativeEffectData
// 0x0058 (0x0058 - 0x0000)
struct FVAL_CooperativeEffectData final
{
public:
	TSet<class FName>                             CooperativeTagSet;                                 // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         ProcDistance;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A9[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_CooperativeEffectData) == 0x000008, "Wrong alignment on FVAL_CooperativeEffectData");
static_assert(sizeof(FVAL_CooperativeEffectData) == 0x000058, "Wrong size on FVAL_CooperativeEffectData");
static_assert(offsetof(FVAL_CooperativeEffectData, CooperativeTagSet) == 0x000000, "Member 'FVAL_CooperativeEffectData::CooperativeTagSet' has a wrong offset!");
static_assert(offsetof(FVAL_CooperativeEffectData, ProcDistance) == 0x000050, "Member 'FVAL_CooperativeEffectData::ProcDistance' has a wrong offset!");

// ScriptStruct Palia.SubBundleNavExplicitData
// 0x0010 (0x0010 - 0x0000)
struct FSubBundleNavExplicitData final
{
public:
	int32                                         LeftWidget;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RightWidget;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpWidget;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DownWidget;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubBundleNavExplicitData) == 0x000004, "Wrong alignment on FSubBundleNavExplicitData");
static_assert(sizeof(FSubBundleNavExplicitData) == 0x000010, "Wrong size on FSubBundleNavExplicitData");
static_assert(offsetof(FSubBundleNavExplicitData, LeftWidget) == 0x000000, "Member 'FSubBundleNavExplicitData::LeftWidget' has a wrong offset!");
static_assert(offsetof(FSubBundleNavExplicitData, RightWidget) == 0x000004, "Member 'FSubBundleNavExplicitData::RightWidget' has a wrong offset!");
static_assert(offsetof(FSubBundleNavExplicitData, UpWidget) == 0x000008, "Member 'FSubBundleNavExplicitData::UpWidget' has a wrong offset!");
static_assert(offsetof(FSubBundleNavExplicitData, DownWidget) == 0x00000C, "Member 'FSubBundleNavExplicitData::DownWidget' has a wrong offset!");

// ScriptStruct Palia.SubBundleShrineConfig
// 0x0040 (0x0040 - 0x0000)
struct FSubBundleShrineConfig final
{
public:
	int32                                         PersistId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BundleName;                                        // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FVillagerQuestItemReqSubConfig> RequiredItems;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             Rewards;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubBundleShrineConfig) == 0x000008, "Wrong alignment on FSubBundleShrineConfig");
static_assert(sizeof(FSubBundleShrineConfig) == 0x000040, "Wrong size on FSubBundleShrineConfig");
static_assert(offsetof(FSubBundleShrineConfig, PersistId) == 0x000000, "Member 'FSubBundleShrineConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FSubBundleShrineConfig, BundleName) == 0x000008, "Member 'FSubBundleShrineConfig::BundleName' has a wrong offset!");
static_assert(offsetof(FSubBundleShrineConfig, RequiredItems) == 0x000020, "Member 'FSubBundleShrineConfig::RequiredItems' has a wrong offset!");
static_assert(offsetof(FSubBundleShrineConfig, Rewards) == 0x000030, "Member 'FSubBundleShrineConfig::Rewards' has a wrong offset!");

// ScriptStruct Palia.CameraTarget
// 0x0030 (0x0030 - 0x0000)
struct FCameraTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AB[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          LocationSet;                                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22AC[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraTarget) == 0x000008, "Wrong alignment on FCameraTarget");
static_assert(sizeof(FCameraTarget) == 0x000030, "Wrong size on FCameraTarget");
static_assert(offsetof(FCameraTarget, Target) == 0x000000, "Member 'FCameraTarget::Target' has a wrong offset!");
static_assert(offsetof(FCameraTarget, Location) == 0x000010, "Member 'FCameraTarget::Location' has a wrong offset!");
static_assert(offsetof(FCameraTarget, LocationSet) == 0x000028, "Member 'FCameraTarget::LocationSet' has a wrong offset!");

// ScriptStruct Palia.ChallengeDisplayInfo
// 0x0060 (0x0060 - 0x0000)
struct FChallengeDisplayInfo final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayText;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FSingleQuestReward>             Rewards;                                           // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   Progress;                                          // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AD[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeDisplayInfo) == 0x000008, "Wrong alignment on FChallengeDisplayInfo");
static_assert(sizeof(FChallengeDisplayInfo) == 0x000060, "Wrong size on FChallengeDisplayInfo");
static_assert(offsetof(FChallengeDisplayInfo, DisplayName) == 0x000000, "Member 'FChallengeDisplayInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FChallengeDisplayInfo, DisplayText) == 0x000018, "Member 'FChallengeDisplayInfo::DisplayText' has a wrong offset!");
static_assert(offsetof(FChallengeDisplayInfo, Rewards) == 0x000030, "Member 'FChallengeDisplayInfo::Rewards' has a wrong offset!");
static_assert(offsetof(FChallengeDisplayInfo, Progress) == 0x000040, "Member 'FChallengeDisplayInfo::Progress' has a wrong offset!");
static_assert(offsetof(FChallengeDisplayInfo, bCompleted) == 0x000058, "Member 'FChallengeDisplayInfo::bCompleted' has a wrong offset!");

// ScriptStruct Palia.TelemetryInfoForSpawnedResource
// 0x0020 (0x0020 - 0x0000)
struct FTelemetryInfoForSpawnedResource final
{
public:
	int64                                         ResourceId;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SpawnerType;                                       // 0x0008(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SpawnerId;                                         // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTelemetryInfoForSpawnedResource) == 0x000008, "Wrong alignment on FTelemetryInfoForSpawnedResource");
static_assert(sizeof(FTelemetryInfoForSpawnedResource) == 0x000020, "Wrong size on FTelemetryInfoForSpawnedResource");
static_assert(offsetof(FTelemetryInfoForSpawnedResource, ResourceId) == 0x000000, "Member 'FTelemetryInfoForSpawnedResource::ResourceId' has a wrong offset!");
static_assert(offsetof(FTelemetryInfoForSpawnedResource, SpawnerType) == 0x000008, "Member 'FTelemetryInfoForSpawnedResource::SpawnerType' has a wrong offset!");
static_assert(offsetof(FTelemetryInfoForSpawnedResource, SpawnerId) == 0x000018, "Member 'FTelemetryInfoForSpawnedResource::SpawnerId' has a wrong offset!");

// ScriptStruct Palia.ChapaaChaseParticipant
// 0x0040 (0x0040 - 0x0000)
struct FChapaaChaseParticipant final
{
public:
	bool                                          bIsInPlayArea;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ACreatureCharacter>> CreaturesHeld;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         CaptureScore;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCaptured;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  CharacterId;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  AccountId;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChapaaChaseParticipant) == 0x000008, "Wrong alignment on FChapaaChaseParticipant");
static_assert(sizeof(FChapaaChaseParticipant) == 0x000040, "Wrong size on FChapaaChaseParticipant");
static_assert(offsetof(FChapaaChaseParticipant, bIsInPlayArea) == 0x000000, "Member 'FChapaaChaseParticipant::bIsInPlayArea' has a wrong offset!");
static_assert(offsetof(FChapaaChaseParticipant, CreaturesHeld) == 0x000008, "Member 'FChapaaChaseParticipant::CreaturesHeld' has a wrong offset!");
static_assert(offsetof(FChapaaChaseParticipant, CaptureScore) == 0x000018, "Member 'FChapaaChaseParticipant::CaptureScore' has a wrong offset!");
static_assert(offsetof(FChapaaChaseParticipant, NumCaptured) == 0x00001C, "Member 'FChapaaChaseParticipant::NumCaptured' has a wrong offset!");
static_assert(offsetof(FChapaaChaseParticipant, CharacterId) == 0x000020, "Member 'FChapaaChaseParticipant::CharacterId' has a wrong offset!");
static_assert(offsetof(FChapaaChaseParticipant, AccountId) == 0x000030, "Member 'FChapaaChaseParticipant::AccountId' has a wrong offset!");

// ScriptStruct Palia.CreatureSpawnEntry
// 0x0018 (0x0018 - 0x0000)
struct FCreatureSpawnEntry final
{
public:
	TSubclassOf<class ACreatureCharacter>         CreatureClass;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnWeight;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureValue;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBehaviorTree*                          BehaviorTreeToUse;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreatureSpawnEntry) == 0x000008, "Wrong alignment on FCreatureSpawnEntry");
static_assert(sizeof(FCreatureSpawnEntry) == 0x000018, "Wrong size on FCreatureSpawnEntry");
static_assert(offsetof(FCreatureSpawnEntry, CreatureClass) == 0x000000, "Member 'FCreatureSpawnEntry::CreatureClass' has a wrong offset!");
static_assert(offsetof(FCreatureSpawnEntry, SpawnWeight) == 0x000008, "Member 'FCreatureSpawnEntry::SpawnWeight' has a wrong offset!");
static_assert(offsetof(FCreatureSpawnEntry, CaptureValue) == 0x00000C, "Member 'FCreatureSpawnEntry::CaptureValue' has a wrong offset!");
static_assert(offsetof(FCreatureSpawnEntry, BehaviorTreeToUse) == 0x000010, "Member 'FCreatureSpawnEntry::BehaviorTreeToUse' has a wrong offset!");

// ScriptStruct Palia.ValeriaPerfProfileCommand
// 0x0018 (0x0018 - 0x0000)
struct FValeriaPerfProfileCommand final
{
public:
	class FString                                 ConsoleCommand;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelaySeconds;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AF[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaPerfProfileCommand) == 0x000008, "Wrong alignment on FValeriaPerfProfileCommand");
static_assert(sizeof(FValeriaPerfProfileCommand) == 0x000018, "Wrong size on FValeriaPerfProfileCommand");
static_assert(offsetof(FValeriaPerfProfileCommand, ConsoleCommand) == 0x000000, "Member 'FValeriaPerfProfileCommand::ConsoleCommand' has a wrong offset!");
static_assert(offsetof(FValeriaPerfProfileCommand, DelaySeconds) == 0x000010, "Member 'FValeriaPerfProfileCommand::DelaySeconds' has a wrong offset!");

// ScriptStruct Palia.ValeriaPerfProfileCommandList
// 0x0010 (0x0010 - 0x0000)
struct FValeriaPerfProfileCommandList final
{
public:
	TArray<struct FValeriaPerfProfileCommand>     Commands;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaPerfProfileCommandList) == 0x000008, "Wrong alignment on FValeriaPerfProfileCommandList");
static_assert(sizeof(FValeriaPerfProfileCommandList) == 0x000010, "Wrong size on FValeriaPerfProfileCommandList");
static_assert(offsetof(FValeriaPerfProfileCommandList, Commands) == 0x000000, "Member 'FValeriaPerfProfileCommandList::Commands' has a wrong offset!");

// ScriptStruct Palia.CharacterCreationSkinConfig
// 0x0010 (0x0018 - 0x0008)
struct FCharacterCreationSkinConfig final : public FTableRowBase
{
public:
	class UMaterialInterface*                     DynamicMaterial;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterCreationSkinConfig) == 0x000008, "Wrong alignment on FCharacterCreationSkinConfig");
static_assert(sizeof(FCharacterCreationSkinConfig) == 0x000018, "Wrong size on FCharacterCreationSkinConfig");
static_assert(offsetof(FCharacterCreationSkinConfig, DynamicMaterial) == 0x000008, "Member 'FCharacterCreationSkinConfig::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FCharacterCreationSkinConfig, Texture) == 0x000010, "Member 'FCharacterCreationSkinConfig::Texture' has a wrong offset!");

// ScriptStruct Palia.CharacterCreationEyesConfig
// 0x0010 (0x0018 - 0x0008)
struct FCharacterCreationEyesConfig final : public FTableRowBase
{
public:
	class UMaterialInterface*                     DynamicMaterial;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterCreationEyesConfig) == 0x000008, "Wrong alignment on FCharacterCreationEyesConfig");
static_assert(sizeof(FCharacterCreationEyesConfig) == 0x000018, "Wrong size on FCharacterCreationEyesConfig");
static_assert(offsetof(FCharacterCreationEyesConfig, DynamicMaterial) == 0x000008, "Member 'FCharacterCreationEyesConfig::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(FCharacterCreationEyesConfig, Texture) == 0x000010, "Member 'FCharacterCreationEyesConfig::Texture' has a wrong offset!");

// ScriptStruct Palia.InstigatedLocalActors
// 0x0010 (0x0010 - 0x0000)
struct FInstigatedLocalActors final
{
public:
	TArray<TWeakObjectPtr<class AActor>>          InstigatedLocalActors;                             // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstigatedLocalActors) == 0x000008, "Wrong alignment on FInstigatedLocalActors");
static_assert(sizeof(FInstigatedLocalActors) == 0x000010, "Wrong size on FInstigatedLocalActors");
static_assert(offsetof(FInstigatedLocalActors, InstigatedLocalActors) == 0x000000, "Member 'FInstigatedLocalActors::InstigatedLocalActors' has a wrong offset!");

// ScriptStruct Palia.CharacterCustomizationTorsoConfig
// 0x0020 (0x0028 - 0x0008)
struct FCharacterCustomizationTorsoConfig final : public FTableRowBase
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBasicItem;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B0[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Zone4Weight;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone5Weight;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B1[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterCustomizationTorsoConfig) == 0x000008, "Wrong alignment on FCharacterCustomizationTorsoConfig");
static_assert(sizeof(FCharacterCustomizationTorsoConfig) == 0x000028, "Wrong size on FCharacterCustomizationTorsoConfig");
static_assert(offsetof(FCharacterCustomizationTorsoConfig, Mesh) == 0x000008, "Member 'FCharacterCustomizationTorsoConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationTorsoConfig, Material) == 0x000010, "Member 'FCharacterCustomizationTorsoConfig::Material' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationTorsoConfig, IsBasicItem) == 0x000018, "Member 'FCharacterCustomizationTorsoConfig::IsBasicItem' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationTorsoConfig, Zone4Weight) == 0x00001C, "Member 'FCharacterCustomizationTorsoConfig::Zone4Weight' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationTorsoConfig, Zone5Weight) == 0x000020, "Member 'FCharacterCustomizationTorsoConfig::Zone5Weight' has a wrong offset!");

// ScriptStruct Palia.CharacterCustomizationFullBodyConfig
// 0x0030 (0x0038 - 0x0008)
struct FCharacterCustomizationFullBodyConfig final : public FTableRowBase
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBasicItem;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B2[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Zone0Weight;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone1Weight;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone2Weight;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone3Weight;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone4Weight;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Zone5Weight;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B3[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterCustomizationFullBodyConfig) == 0x000008, "Wrong alignment on FCharacterCustomizationFullBodyConfig");
static_assert(sizeof(FCharacterCustomizationFullBodyConfig) == 0x000038, "Wrong size on FCharacterCustomizationFullBodyConfig");
static_assert(offsetof(FCharacterCustomizationFullBodyConfig, Mesh) == 0x000008, "Member 'FCharacterCustomizationFullBodyConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationFullBodyConfig, Material) == 0x000010, "Member 'FCharacterCustomizationFullBodyConfig::Material' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationFullBodyConfig, IsBasicItem) == 0x000018, "Member 'FCharacterCustomizationFullBodyConfig::IsBasicItem' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationFullBodyConfig, Zone0Weight) == 0x00001C, "Member 'FCharacterCustomizationFullBodyConfig::Zone0Weight' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationFullBodyConfig, Zone1Weight) == 0x000020, "Member 'FCharacterCustomizationFullBodyConfig::Zone1Weight' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationFullBodyConfig, Zone2Weight) == 0x000024, "Member 'FCharacterCustomizationFullBodyConfig::Zone2Weight' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationFullBodyConfig, Zone3Weight) == 0x000028, "Member 'FCharacterCustomizationFullBodyConfig::Zone3Weight' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationFullBodyConfig, Zone4Weight) == 0x00002C, "Member 'FCharacterCustomizationFullBodyConfig::Zone4Weight' has a wrong offset!");
static_assert(offsetof(FCharacterCustomizationFullBodyConfig, Zone5Weight) == 0x000030, "Member 'FCharacterCustomizationFullBodyConfig::Zone5Weight' has a wrong offset!");

// ScriptStruct Palia.CinematicAudioOptions
// 0x0018 (0x0018 - 0x0000)
struct FCinematicAudioOptions final
{
public:
	class UAkStateValue*                          OnStartCinState;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkSwitchValue*                         OnEndCinReturnMus;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTimeOfDay;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B4[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCinematicAudioOptions) == 0x000008, "Wrong alignment on FCinematicAudioOptions");
static_assert(sizeof(FCinematicAudioOptions) == 0x000018, "Wrong size on FCinematicAudioOptions");
static_assert(offsetof(FCinematicAudioOptions, OnStartCinState) == 0x000000, "Member 'FCinematicAudioOptions::OnStartCinState' has a wrong offset!");
static_assert(offsetof(FCinematicAudioOptions, OnEndCinReturnMus) == 0x000008, "Member 'FCinematicAudioOptions::OnEndCinReturnMus' has a wrong offset!");
static_assert(offsetof(FCinematicAudioOptions, bIgnoreTimeOfDay) == 0x000010, "Member 'FCinematicAudioOptions::bIgnoreTimeOfDay' has a wrong offset!");

// ScriptStruct Palia.CinematicLevelData
// 0x0080 (0x0080 - 0x0000)
struct FCinematicLevelData final
{
public:
	TSoftObjectPtr<class UWorld>                  GameplayLevel;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseWorldStreamerActor;                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B5[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldStreamerActorPosition;                        // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  CinematicLevel;                                    // 0x0048(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCinematicOnHousingPlot;                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B6[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTeleportTravelConfigAsset*             TeleportTravelConfigAsset;                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCinematicLevelData) == 0x000008, "Wrong alignment on FCinematicLevelData");
static_assert(sizeof(FCinematicLevelData) == 0x000080, "Wrong size on FCinematicLevelData");
static_assert(offsetof(FCinematicLevelData, GameplayLevel) == 0x000000, "Member 'FCinematicLevelData::GameplayLevel' has a wrong offset!");
static_assert(offsetof(FCinematicLevelData, bShouldUseWorldStreamerActor) == 0x000028, "Member 'FCinematicLevelData::bShouldUseWorldStreamerActor' has a wrong offset!");
static_assert(offsetof(FCinematicLevelData, WorldStreamerActorPosition) == 0x000030, "Member 'FCinematicLevelData::WorldStreamerActorPosition' has a wrong offset!");
static_assert(offsetof(FCinematicLevelData, CinematicLevel) == 0x000048, "Member 'FCinematicLevelData::CinematicLevel' has a wrong offset!");
static_assert(offsetof(FCinematicLevelData, bIsCinematicOnHousingPlot) == 0x000070, "Member 'FCinematicLevelData::bIsCinematicOnHousingPlot' has a wrong offset!");
static_assert(offsetof(FCinematicLevelData, TeleportTravelConfigAsset) == 0x000078, "Member 'FCinematicLevelData::TeleportTravelConfigAsset' has a wrong offset!");

// ScriptStruct Palia.CinematicSubtitleData
// 0x0020 (0x0020 - 0x0000)
struct FCinematicSubtitleData final
{
public:
	float                                         StartTimeInSeconds;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimeInSeconds;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SubtitleText;                                      // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCinematicSubtitleData) == 0x000008, "Wrong alignment on FCinematicSubtitleData");
static_assert(sizeof(FCinematicSubtitleData) == 0x000020, "Wrong size on FCinematicSubtitleData");
static_assert(offsetof(FCinematicSubtitleData, StartTimeInSeconds) == 0x000000, "Member 'FCinematicSubtitleData::StartTimeInSeconds' has a wrong offset!");
static_assert(offsetof(FCinematicSubtitleData, EndTimeInSeconds) == 0x000004, "Member 'FCinematicSubtitleData::EndTimeInSeconds' has a wrong offset!");
static_assert(offsetof(FCinematicSubtitleData, SubtitleText) == 0x000008, "Member 'FCinematicSubtitleData::SubtitleText' has a wrong offset!");

// ScriptStruct Palia.TrackableDialogueCache
// 0x0010 (0x0010 - 0x0000)
struct FTrackableDialogueCache final
{
public:
	TArray<class UVAL_DialogueAsset*>             TrackableDialogues;                                // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackableDialogueCache) == 0x000008, "Wrong alignment on FTrackableDialogueCache");
static_assert(sizeof(FTrackableDialogueCache) == 0x000010, "Wrong size on FTrackableDialogueCache");
static_assert(offsetof(FTrackableDialogueCache, TrackableDialogues) == 0x000000, "Member 'FTrackableDialogueCache::TrackableDialogues' has a wrong offset!");

// ScriptStruct Palia.HousingLoadRequestParam
// 0x0048 (0x0048 - 0x0000)
struct FHousingLoadRequestParam final
{
public:
	struct FGuid                                  LoadHouseId;                                       // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerCharacter;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bViewOnlyLoad;                                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B7[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ReplacementHouseGuid;                              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AssignAsNewHouseForPlayer;                         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B8[0x13];                                    // 0x0035(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHousingLoadRequestParam) == 0x000008, "Wrong alignment on FHousingLoadRequestParam");
static_assert(sizeof(FHousingLoadRequestParam) == 0x000048, "Wrong size on FHousingLoadRequestParam");
static_assert(offsetof(FHousingLoadRequestParam, LoadHouseId) == 0x000000, "Member 'FHousingLoadRequestParam::LoadHouseId' has a wrong offset!");
static_assert(offsetof(FHousingLoadRequestParam, OwnerCharacter) == 0x000010, "Member 'FHousingLoadRequestParam::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(FHousingLoadRequestParam, bViewOnlyLoad) == 0x000020, "Member 'FHousingLoadRequestParam::bViewOnlyLoad' has a wrong offset!");
static_assert(offsetof(FHousingLoadRequestParam, ReplacementHouseGuid) == 0x000024, "Member 'FHousingLoadRequestParam::ReplacementHouseGuid' has a wrong offset!");
static_assert(offsetof(FHousingLoadRequestParam, AssignAsNewHouseForPlayer) == 0x000034, "Member 'FHousingLoadRequestParam::AssignAsNewHouseForPlayer' has a wrong offset!");

// ScriptStruct Palia.CraftingPlayerRewardEntry
// 0x0038 (0x0038 - 0x0000)
struct FCraftingPlayerRewardEntry final
{
public:
	int32                                         RecipeConfigId;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInspireNewRecipe;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillType                                    SkillType;                                         // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B9[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillAmount;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BA[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCurrencyReward>                Currencies;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FValeriaItem>                   AdditionalItems;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         GeneratedTimestamp;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingPlayerRewardEntry) == 0x000008, "Wrong alignment on FCraftingPlayerRewardEntry");
static_assert(sizeof(FCraftingPlayerRewardEntry) == 0x000038, "Wrong size on FCraftingPlayerRewardEntry");
static_assert(offsetof(FCraftingPlayerRewardEntry, RecipeConfigId) == 0x000000, "Member 'FCraftingPlayerRewardEntry::RecipeConfigId' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntry, bInspireNewRecipe) == 0x000004, "Member 'FCraftingPlayerRewardEntry::bInspireNewRecipe' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntry, SkillType) == 0x000005, "Member 'FCraftingPlayerRewardEntry::SkillType' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntry, SkillAmount) == 0x000008, "Member 'FCraftingPlayerRewardEntry::SkillAmount' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntry, Currencies) == 0x000010, "Member 'FCraftingPlayerRewardEntry::Currencies' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntry, AdditionalItems) == 0x000020, "Member 'FCraftingPlayerRewardEntry::AdditionalItems' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerRewardEntry, GeneratedTimestamp) == 0x000030, "Member 'FCraftingPlayerRewardEntry::GeneratedTimestamp' has a wrong offset!");

// ScriptStruct Palia.CraftingPlayerReward
// 0x0050 (0x0050 - 0x0000)
struct FCraftingPlayerReward final
{
public:
	struct FPersistGuid                           PlayerId;                                          // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCraftingPlayerRewardEntry             Reward;                                            // 0x0010(0x0038)(NativeAccessSpecifierPublic)
	bool                                          bFirstTimeRecipe;                                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultipleContributors;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BB[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxQualityGenerated;                               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingPlayerReward) == 0x000008, "Wrong alignment on FCraftingPlayerReward");
static_assert(sizeof(FCraftingPlayerReward) == 0x000050, "Wrong size on FCraftingPlayerReward");
static_assert(offsetof(FCraftingPlayerReward, PlayerId) == 0x000000, "Member 'FCraftingPlayerReward::PlayerId' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerReward, Reward) == 0x000010, "Member 'FCraftingPlayerReward::Reward' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerReward, bFirstTimeRecipe) == 0x000048, "Member 'FCraftingPlayerReward::bFirstTimeRecipe' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerReward, bMultipleContributors) == 0x000049, "Member 'FCraftingPlayerReward::bMultipleContributors' has a wrong offset!");
static_assert(offsetof(FCraftingPlayerReward, MaxQualityGenerated) == 0x00004C, "Member 'FCraftingPlayerReward::MaxQualityGenerated' has a wrong offset!");

// ScriptStruct Palia.CrafterRecipeState
// 0x0038 (0x0038 - 0x0000)
struct FCrafterRecipeState final
{
public:
	class UCrafterComponent*                      MasterCrafter;                                     // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        NumberOfTimesCraftedThisSession;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrafterState                                 CrafterState;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BC[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraftMultiplier;                                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BrowsedRecipeId;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecipeIdCrafting;                                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarQualityChance;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StarQualityWeight;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxQualityGenerated;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumeStarQualityIngredients;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsComplexMaster;                                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecipeHasCompleted;                               // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecipeHasFailed;                                  // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPickupOnCraftingEnd;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputWasBlocked;                                 // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BD[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrafterRecipeState) == 0x000008, "Wrong alignment on FCrafterRecipeState");
static_assert(sizeof(FCrafterRecipeState) == 0x000038, "Wrong size on FCrafterRecipeState");
static_assert(offsetof(FCrafterRecipeState, MasterCrafter) == 0x000000, "Member 'FCrafterRecipeState::MasterCrafter' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, NumberOfTimesCraftedThisSession) == 0x000008, "Member 'FCrafterRecipeState::NumberOfTimesCraftedThisSession' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, CrafterState) == 0x000010, "Member 'FCrafterRecipeState::CrafterState' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, CraftMultiplier) == 0x000014, "Member 'FCrafterRecipeState::CraftMultiplier' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, BrowsedRecipeId) == 0x000018, "Member 'FCrafterRecipeState::BrowsedRecipeId' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, RecipeIdCrafting) == 0x00001C, "Member 'FCrafterRecipeState::RecipeIdCrafting' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, StarQualityChance) == 0x000020, "Member 'FCrafterRecipeState::StarQualityChance' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, StarQualityWeight) == 0x000024, "Member 'FCrafterRecipeState::StarQualityWeight' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, MaxQualityGenerated) == 0x000028, "Member 'FCrafterRecipeState::MaxQualityGenerated' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, bConsumeStarQualityIngredients) == 0x00002C, "Member 'FCrafterRecipeState::bConsumeStarQualityIngredients' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, bIsComplexMaster) == 0x00002D, "Member 'FCrafterRecipeState::bIsComplexMaster' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, bRecipeHasCompleted) == 0x00002E, "Member 'FCrafterRecipeState::bRecipeHasCompleted' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, bRecipeHasFailed) == 0x00002F, "Member 'FCrafterRecipeState::bRecipeHasFailed' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, bPickupOnCraftingEnd) == 0x000030, "Member 'FCrafterRecipeState::bPickupOnCraftingEnd' has a wrong offset!");
static_assert(offsetof(FCrafterRecipeState, bOutputWasBlocked) == 0x000031, "Member 'FCrafterRecipeState::bOutputWasBlocked' has a wrong offset!");

// ScriptStruct Palia.CrafterIngredient
// 0x0038 (0x0038 - 0x0000)
struct FCrafterIngredient final
{
public:
	int32                                         StepIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStarter;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAsRequest;                                    // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BE[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountSatisfied;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRecipe_RequireItem                    Required;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FAddedIngredient>               Added;                                             // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrafterIngredient) == 0x000008, "Wrong alignment on FCrafterIngredient");
static_assert(sizeof(FCrafterIngredient) == 0x000038, "Wrong size on FCrafterIngredient");
static_assert(offsetof(FCrafterIngredient, StepIndex) == 0x000000, "Member 'FCrafterIngredient::StepIndex' has a wrong offset!");
static_assert(offsetof(FCrafterIngredient, bStarter) == 0x000004, "Member 'FCrafterIngredient::bStarter' has a wrong offset!");
static_assert(offsetof(FCrafterIngredient, bShowAsRequest) == 0x000005, "Member 'FCrafterIngredient::bShowAsRequest' has a wrong offset!");
static_assert(offsetof(FCrafterIngredient, Index) == 0x000008, "Member 'FCrafterIngredient::Index' has a wrong offset!");
static_assert(offsetof(FCrafterIngredient, AmountSatisfied) == 0x00000C, "Member 'FCrafterIngredient::AmountSatisfied' has a wrong offset!");
static_assert(offsetof(FCrafterIngredient, Required) == 0x000010, "Member 'FCrafterIngredient::Required' has a wrong offset!");
static_assert(offsetof(FCrafterIngredient, Added) == 0x000028, "Member 'FCrafterIngredient::Added' has a wrong offset!");

// ScriptStruct Palia.ValeriaPlotReplicationData
// 0x0018 (0x0018 - 0x0000)
struct FValeriaPlotReplicationData final
{
public:
	class AHousingPlotActor*                      HousingPlot;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BF[0x10];                                    // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaPlotReplicationData) == 0x000008, "Wrong alignment on FValeriaPlotReplicationData");
static_assert(sizeof(FValeriaPlotReplicationData) == 0x000018, "Wrong size on FValeriaPlotReplicationData");
static_assert(offsetof(FValeriaPlotReplicationData, HousingPlot) == 0x000000, "Member 'FValeriaPlotReplicationData::HousingPlot' has a wrong offset!");

// ScriptStruct Palia.CraftingGlobalConfig_ModificationBenchSettings
// 0x0020 (0x0020 - 0x0000)
struct FCraftingGlobalConfig_ModificationBenchSettings final
{
public:
	EModificationCostType                         ClearCostType;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    ClearCostVitalType;                                // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C0[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurrencyConfig*                        ClearCostCurrency;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           ClearCostItemType;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClearCostAmount;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C1[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCraftingGlobalConfig_ModificationBenchSettings) == 0x000008, "Wrong alignment on FCraftingGlobalConfig_ModificationBenchSettings");
static_assert(sizeof(FCraftingGlobalConfig_ModificationBenchSettings) == 0x000020, "Wrong size on FCraftingGlobalConfig_ModificationBenchSettings");
static_assert(offsetof(FCraftingGlobalConfig_ModificationBenchSettings, ClearCostType) == 0x000000, "Member 'FCraftingGlobalConfig_ModificationBenchSettings::ClearCostType' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_ModificationBenchSettings, ClearCostVitalType) == 0x000001, "Member 'FCraftingGlobalConfig_ModificationBenchSettings::ClearCostVitalType' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_ModificationBenchSettings, ClearCostCurrency) == 0x000008, "Member 'FCraftingGlobalConfig_ModificationBenchSettings::ClearCostCurrency' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_ModificationBenchSettings, ClearCostItemType) == 0x000010, "Member 'FCraftingGlobalConfig_ModificationBenchSettings::ClearCostItemType' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_ModificationBenchSettings, ClearCostAmount) == 0x000018, "Member 'FCraftingGlobalConfig_ModificationBenchSettings::ClearCostAmount' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig
// 0x01B0 (0x0218 - 0x0068)
struct FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	TSoftClassPtr<class UClass>                   GliderPropActorClass;                              // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVAL_CharacterCustomization_SkeletalMeshComponentConfig MeshConfig;                                        // 0x0090(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FName>                           GliderTrailSocketNames;                            // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          TEMP_GliderTrail;                                  // 0x01F0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig) == 0x000218, "Wrong size on FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig, GliderPropActorClass) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig::GliderPropActorClass' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig, MeshConfig) == 0x000090, "Member 'FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig::MeshConfig' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig, GliderTrailSocketNames) == 0x0001E0, "Member 'FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig::GliderTrailSocketNames' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig, TEMP_GliderTrail) == 0x0001F0, "Member 'FVAL_CharacterCustomizationItem_Glider_PerBodyTypeConfig::TEMP_GliderTrail' has a wrong offset!");

// ScriptStruct Palia.CraftingGlobalConfig_InputActions_Disengaged
// 0x00A0 (0x00A0 - 0x0000)
struct FCraftingGlobalConfig_InputActions_Disengaged final
{
public:
	TMap<EInteractEventIndex, struct FInputMappingPriorityData> InputMappingPriorityDataForEventIndex;             // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInputAction>            AddIngredient;                                     // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInputAction>            InteractEngage;                                    // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingGlobalConfig_InputActions_Disengaged) == 0x000008, "Wrong alignment on FCraftingGlobalConfig_InputActions_Disengaged");
static_assert(sizeof(FCraftingGlobalConfig_InputActions_Disengaged) == 0x0000A0, "Wrong size on FCraftingGlobalConfig_InputActions_Disengaged");
static_assert(offsetof(FCraftingGlobalConfig_InputActions_Disengaged, InputMappingPriorityDataForEventIndex) == 0x000000, "Member 'FCraftingGlobalConfig_InputActions_Disengaged::InputMappingPriorityDataForEventIndex' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_InputActions_Disengaged, AddIngredient) == 0x000050, "Member 'FCraftingGlobalConfig_InputActions_Disengaged::AddIngredient' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_InputActions_Disengaged, InteractEngage) == 0x000078, "Member 'FCraftingGlobalConfig_InputActions_Disengaged::InteractEngage' has a wrong offset!");

// ScriptStruct Palia.CraftingGlobalConfig_InputActions
// 0x0140 (0x0140 - 0x0000)
struct FCraftingGlobalConfig_InputActions final
{
public:
	struct FCraftingGlobalConfig_InputActions_Disengaged Disengaged;                                        // 0x0000(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCraftingGlobalConfig_InputActions_Engaged Engaged;                                           // 0x00A0(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCraftingGlobalConfig_InputActions) == 0x000008, "Wrong alignment on FCraftingGlobalConfig_InputActions");
static_assert(sizeof(FCraftingGlobalConfig_InputActions) == 0x000140, "Wrong size on FCraftingGlobalConfig_InputActions");
static_assert(offsetof(FCraftingGlobalConfig_InputActions, Disengaged) == 0x000000, "Member 'FCraftingGlobalConfig_InputActions::Disengaged' has a wrong offset!");
static_assert(offsetof(FCraftingGlobalConfig_InputActions, Engaged) == 0x0000A0, "Member 'FCraftingGlobalConfig_InputActions::Engaged' has a wrong offset!");

// ScriptStruct Palia.DebugSpawningSettings
// 0x0038 (0x0038 - 0x0000)
struct FDebugSpawningSettings final
{
public:
	struct FDebugSpawningActorDrawSettings        ActorSettings;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SelectedTextScale;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugEnabled;                                      // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugDrawSpawnManagers;                            // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugDrawManagersNames;                            // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugAllSpawnManagers;                             // 0x002F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DebugAllSpawnees;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawInWorldOverEverything;                         // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C2[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugSpawningSettings) == 0x000008, "Wrong alignment on FDebugSpawningSettings");
static_assert(sizeof(FDebugSpawningSettings) == 0x000038, "Wrong size on FDebugSpawningSettings");
static_assert(offsetof(FDebugSpawningSettings, ActorSettings) == 0x000000, "Member 'FDebugSpawningSettings::ActorSettings' has a wrong offset!");
static_assert(offsetof(FDebugSpawningSettings, SelectedTextScale) == 0x000028, "Member 'FDebugSpawningSettings::SelectedTextScale' has a wrong offset!");
static_assert(offsetof(FDebugSpawningSettings, DebugEnabled) == 0x00002C, "Member 'FDebugSpawningSettings::DebugEnabled' has a wrong offset!");
static_assert(offsetof(FDebugSpawningSettings, DebugDrawSpawnManagers) == 0x00002D, "Member 'FDebugSpawningSettings::DebugDrawSpawnManagers' has a wrong offset!");
static_assert(offsetof(FDebugSpawningSettings, DebugDrawManagersNames) == 0x00002E, "Member 'FDebugSpawningSettings::DebugDrawManagersNames' has a wrong offset!");
static_assert(offsetof(FDebugSpawningSettings, DebugAllSpawnManagers) == 0x00002F, "Member 'FDebugSpawningSettings::DebugAllSpawnManagers' has a wrong offset!");
static_assert(offsetof(FDebugSpawningSettings, DebugAllSpawnees) == 0x000030, "Member 'FDebugSpawningSettings::DebugAllSpawnees' has a wrong offset!");
static_assert(offsetof(FDebugSpawningSettings, DrawInWorldOverEverything) == 0x000031, "Member 'FDebugSpawningSettings::DrawInWorldOverEverything' has a wrong offset!");

// ScriptStruct Palia.VAL_VariantOption_UISettings
// 0x0068 (0x0068 - 0x0000)
struct FVAL_VariantOption_UISettings final
{
public:
	EVAL_VariantOption_UIDisplayType              DisplayType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PrimaryColorCurveParameterName;                    // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrimaryColorCurvePoint;                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondaryColorCurveParameterName;                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryColorCurvePoint;                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C4[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_VariantOption_UISettings) == 0x000008, "Wrong alignment on FVAL_VariantOption_UISettings");
static_assert(sizeof(FVAL_VariantOption_UISettings) == 0x000068, "Wrong size on FVAL_VariantOption_UISettings");
static_assert(offsetof(FVAL_VariantOption_UISettings, DisplayType) == 0x000000, "Member 'FVAL_VariantOption_UISettings::DisplayType' has a wrong offset!");
static_assert(offsetof(FVAL_VariantOption_UISettings, PrimaryColorCurveParameterName) == 0x000004, "Member 'FVAL_VariantOption_UISettings::PrimaryColorCurveParameterName' has a wrong offset!");
static_assert(offsetof(FVAL_VariantOption_UISettings, PrimaryColorCurvePoint) == 0x00000C, "Member 'FVAL_VariantOption_UISettings::PrimaryColorCurvePoint' has a wrong offset!");
static_assert(offsetof(FVAL_VariantOption_UISettings, SecondaryColorCurveParameterName) == 0x000010, "Member 'FVAL_VariantOption_UISettings::SecondaryColorCurveParameterName' has a wrong offset!");
static_assert(offsetof(FVAL_VariantOption_UISettings, SecondaryColorCurvePoint) == 0x000018, "Member 'FVAL_VariantOption_UISettings::SecondaryColorCurvePoint' has a wrong offset!");
static_assert(offsetof(FVAL_VariantOption_UISettings, Icon) == 0x000020, "Member 'FVAL_VariantOption_UISettings::Icon' has a wrong offset!");
static_assert(offsetof(FVAL_VariantOption_UISettings, PrimaryColor) == 0x000048, "Member 'FVAL_VariantOption_UISettings::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FVAL_VariantOption_UISettings, SecondaryColor) == 0x000058, "Member 'FVAL_VariantOption_UISettings::SecondaryColor' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOptionBase
// 0x0098 (0x0098 - 0x0000)
struct FVAL_CharacterCustomizationVariantOptionBase
{
public:
	uint8                                         Pad_22C5[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGuid                                  ID;                                                // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVAL_VariantOption_UISettings          UISettings;                                        // 0x0030(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOptionBase) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOptionBase");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOptionBase) == 0x000098, "Wrong size on FVAL_CharacterCustomizationVariantOptionBase");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOptionBase, DisplayName) == 0x000008, "Member 'FVAL_CharacterCustomizationVariantOptionBase::DisplayName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOptionBase, ID) == 0x000020, "Member 'FVAL_CharacterCustomizationVariantOptionBase::ID' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOptionBase, UISettings) == 0x000030, "Member 'FVAL_CharacterCustomizationVariantOptionBase::UISettings' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_PupilShape
// 0x00F8 (0x0190 - 0x0098)
struct FVAL_CharacterCustomizationVariantOption_PupilShape final : public FVAL_CharacterCustomizationVariantOptionBase
{
public:
	struct FVAL_CharacterCustomization_MaterialParamOverrides MaterialParamOverrides;                            // 0x0098(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_PupilShape) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_PupilShape");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_PupilShape) == 0x000190, "Wrong size on FVAL_CharacterCustomizationVariantOption_PupilShape");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOption_PupilShape, MaterialParamOverrides) == 0x000098, "Member 'FVAL_CharacterCustomizationVariantOption_PupilShape::MaterialParamOverrides' has a wrong offset!");

// ScriptStruct Palia.DebugSpawnManagerSpawnedStats
// 0x0020 (0x0020 - 0x0000)
struct FDebugSpawnManagerSpawnedStats final
{
public:
	class UClass*                                 Class;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tracking;                                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStarQualityUpgrade;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C6[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumActors;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   Rarity;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C7[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Weight;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeOfDay;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C8[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugSpawnManagerSpawnedStats) == 0x000008, "Wrong alignment on FDebugSpawnManagerSpawnedStats");
static_assert(sizeof(FDebugSpawnManagerSpawnedStats) == 0x000020, "Wrong size on FDebugSpawnManagerSpawnedStats");
static_assert(offsetof(FDebugSpawnManagerSpawnedStats, Class) == 0x000000, "Member 'FDebugSpawnManagerSpawnedStats::Class' has a wrong offset!");
static_assert(offsetof(FDebugSpawnManagerSpawnedStats, Tracking) == 0x000008, "Member 'FDebugSpawnManagerSpawnedStats::Tracking' has a wrong offset!");
static_assert(offsetof(FDebugSpawnManagerSpawnedStats, IsStarQualityUpgrade) == 0x000009, "Member 'FDebugSpawnManagerSpawnedStats::IsStarQualityUpgrade' has a wrong offset!");
static_assert(offsetof(FDebugSpawnManagerSpawnedStats, NumActors) == 0x00000C, "Member 'FDebugSpawnManagerSpawnedStats::NumActors' has a wrong offset!");
static_assert(offsetof(FDebugSpawnManagerSpawnedStats, Rarity) == 0x000010, "Member 'FDebugSpawnManagerSpawnedStats::Rarity' has a wrong offset!");
static_assert(offsetof(FDebugSpawnManagerSpawnedStats, Weight) == 0x000014, "Member 'FDebugSpawnManagerSpawnedStats::Weight' has a wrong offset!");
static_assert(offsetof(FDebugSpawnManagerSpawnedStats, TimeOfDay) == 0x000018, "Member 'FDebugSpawnManagerSpawnedStats::TimeOfDay' has a wrong offset!");

// ScriptStruct Palia.DebugSpawningStatusReplicatedData
// 0x0090 (0x0090 - 0x0000)
struct FDebugSpawningStatusReplicatedData final
{
public:
	TArray<struct FDebugSpawnManagerSpawnedStats> SpawnedStats;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnManager;                                      // 0x0010(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpawnerComponent*                      SpawnerComponent;                                  // 0x0018(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnerMode                                  SpawnMode;                                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C9[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        SpawnLocations;                                    // 0x0048(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	struct FVector                                TransferredSpawnLocation;                          // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TransferredSpawnIndex;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSpawnLocationsExpected;                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Fixed;                                             // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CA[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinActors;                                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxActors;                                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumActors;                                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextTimeToSpawn;                                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CB[0x3];                                     // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugSpawningStatusReplicatedData) == 0x000008, "Wrong alignment on FDebugSpawningStatusReplicatedData");
static_assert(sizeof(FDebugSpawningStatusReplicatedData) == 0x000090, "Wrong size on FDebugSpawningStatusReplicatedData");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, SpawnedStats) == 0x000000, "Member 'FDebugSpawningStatusReplicatedData::SpawnedStats' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, SpawnManager) == 0x000010, "Member 'FDebugSpawningStatusReplicatedData::SpawnManager' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, SpawnerComponent) == 0x000018, "Member 'FDebugSpawningStatusReplicatedData::SpawnerComponent' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, Name) == 0x000020, "Member 'FDebugSpawningStatusReplicatedData::Name' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, Position) == 0x000028, "Member 'FDebugSpawningStatusReplicatedData::Position' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, SpawnMode) == 0x000040, "Member 'FDebugSpawningStatusReplicatedData::SpawnMode' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, Radius) == 0x000044, "Member 'FDebugSpawningStatusReplicatedData::Radius' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, SpawnLocations) == 0x000048, "Member 'FDebugSpawningStatusReplicatedData::SpawnLocations' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, TransferredSpawnLocation) == 0x000058, "Member 'FDebugSpawningStatusReplicatedData::TransferredSpawnLocation' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, TransferredSpawnIndex) == 0x000070, "Member 'FDebugSpawningStatusReplicatedData::TransferredSpawnIndex' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, TotalSpawnLocationsExpected) == 0x000074, "Member 'FDebugSpawningStatusReplicatedData::TotalSpawnLocationsExpected' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, Fixed) == 0x000078, "Member 'FDebugSpawningStatusReplicatedData::Fixed' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, MinActors) == 0x00007C, "Member 'FDebugSpawningStatusReplicatedData::MinActors' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, MaxActors) == 0x000080, "Member 'FDebugSpawningStatusReplicatedData::MaxActors' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, NumActors) == 0x000084, "Member 'FDebugSpawningStatusReplicatedData::NumActors' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, NextTimeToSpawn) == 0x000088, "Member 'FDebugSpawningStatusReplicatedData::NextTimeToSpawn' has a wrong offset!");
static_assert(offsetof(FDebugSpawningStatusReplicatedData, IsSelected) == 0x00008C, "Member 'FDebugSpawningStatusReplicatedData::IsSelected' has a wrong offset!");

// ScriptStruct Palia.DebugSpawningReplicatedData
// 0x0030 (0x0030 - 0x0000)
struct FDebugSpawningReplicatedData final
{
public:
	TArray<class FName>                           SpawnManagerNames;                                 // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SpawneeClassNames;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDebugSpawningStatusReplicatedData> SpawnManagerData;                                  // 0x0020(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugSpawningReplicatedData) == 0x000008, "Wrong alignment on FDebugSpawningReplicatedData");
static_assert(sizeof(FDebugSpawningReplicatedData) == 0x000030, "Wrong size on FDebugSpawningReplicatedData");
static_assert(offsetof(FDebugSpawningReplicatedData, SpawnManagerNames) == 0x000000, "Member 'FDebugSpawningReplicatedData::SpawnManagerNames' has a wrong offset!");
static_assert(offsetof(FDebugSpawningReplicatedData, SpawneeClassNames) == 0x000010, "Member 'FDebugSpawningReplicatedData::SpawneeClassNames' has a wrong offset!");
static_assert(offsetof(FDebugSpawningReplicatedData, SpawnManagerData) == 0x000020, "Member 'FDebugSpawningReplicatedData::SpawnManagerData' has a wrong offset!");

// ScriptStruct Palia.LevelToDestination
// 0x0030 (0x0030 - 0x0000)
struct FLevelToDestination final
{
public:
	TSoftObjectPtr<class UWorld>                  Map;                                               // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTeleportTravelConfigAsset*             TeleportAsset;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelToDestination) == 0x000008, "Wrong alignment on FLevelToDestination");
static_assert(sizeof(FLevelToDestination) == 0x000030, "Wrong size on FLevelToDestination");
static_assert(offsetof(FLevelToDestination, Map) == 0x000000, "Member 'FLevelToDestination::Map' has a wrong offset!");
static_assert(offsetof(FLevelToDestination, TeleportAsset) == 0x000028, "Member 'FLevelToDestination::TeleportAsset' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_MatchingCharactersWrapper
// 0x0050 (0x0050 - 0x0000)
struct FVAL_CharacterCustomization_MatchingCharactersWrapper final
{
public:
	TSet<class AValeriaCharacter*>                MatchingCharacters;                                // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_MatchingCharactersWrapper) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_MatchingCharactersWrapper");
static_assert(sizeof(FVAL_CharacterCustomization_MatchingCharactersWrapper) == 0x000050, "Wrong size on FVAL_CharacterCustomization_MatchingCharactersWrapper");
static_assert(offsetof(FVAL_CharacterCustomization_MatchingCharactersWrapper, MatchingCharacters) == 0x000000, "Member 'FVAL_CharacterCustomization_MatchingCharactersWrapper::MatchingCharacters' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_EffectToMatchingCharactersMap
// 0x0050 (0x0050 - 0x0000)
struct FVAL_CharacterCustomization_EffectToMatchingCharactersMap final
{
public:
	TMap<class FName, struct FVAL_CharacterCustomization_MatchingCharactersWrapper> EffectToCharacterMap;                              // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_EffectToMatchingCharactersMap) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_EffectToMatchingCharactersMap");
static_assert(sizeof(FVAL_CharacterCustomization_EffectToMatchingCharactersMap) == 0x000050, "Wrong size on FVAL_CharacterCustomization_EffectToMatchingCharactersMap");
static_assert(offsetof(FVAL_CharacterCustomization_EffectToMatchingCharactersMap, EffectToCharacterMap) == 0x000000, "Member 'FVAL_CharacterCustomization_EffectToMatchingCharactersMap::EffectToCharacterMap' has a wrong offset!");

// ScriptStruct Palia.DialogueGroupingState
// 0x0010 (0x0010 - 0x0000)
struct FDialogueGroupingState final
{
public:
	class FName                                   GroupingName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         LastSeenTimestamp;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueGroupingState) == 0x000008, "Wrong alignment on FDialogueGroupingState");
static_assert(sizeof(FDialogueGroupingState) == 0x000010, "Wrong size on FDialogueGroupingState");
static_assert(offsetof(FDialogueGroupingState, GroupingName) == 0x000000, "Member 'FDialogueGroupingState::GroupingName' has a wrong offset!");
static_assert(offsetof(FDialogueGroupingState, LastSeenTimestamp) == 0x000008, "Member 'FDialogueGroupingState::LastSeenTimestamp' has a wrong offset!");

// ScriptStruct Palia.DialogueChainEntry
// 0x0010 (0x0010 - 0x0000)
struct FDialogueChainEntry final
{
public:
	class UVAL_DialogueAsset*                     DialogueAsset;                                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_QuestDef*                          TurnInQuestDef;                                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueChainEntry) == 0x000008, "Wrong alignment on FDialogueChainEntry");
static_assert(sizeof(FDialogueChainEntry) == 0x000010, "Wrong size on FDialogueChainEntry");
static_assert(offsetof(FDialogueChainEntry, DialogueAsset) == 0x000000, "Member 'FDialogueChainEntry::DialogueAsset' has a wrong offset!");
static_assert(offsetof(FDialogueChainEntry, TurnInQuestDef) == 0x000008, "Member 'FDialogueChainEntry::TurnInQuestDef' has a wrong offset!");

// ScriptStruct Palia.SpeakerDialogueHistoryUpdate
// 0x0028 (0x0028 - 0x0000)
struct FSpeakerDialogueHistoryUpdate final
{
public:
	int32                                         SpeakerPersistId;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSlimDialogueHistoryEntry>      DialogueHistoryUpdates;                            // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSpeakerGroupingUpdate>         GroupingUpdates;                                   // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpeakerDialogueHistoryUpdate) == 0x000008, "Wrong alignment on FSpeakerDialogueHistoryUpdate");
static_assert(sizeof(FSpeakerDialogueHistoryUpdate) == 0x000028, "Wrong size on FSpeakerDialogueHistoryUpdate");
static_assert(offsetof(FSpeakerDialogueHistoryUpdate, SpeakerPersistId) == 0x000000, "Member 'FSpeakerDialogueHistoryUpdate::SpeakerPersistId' has a wrong offset!");
static_assert(offsetof(FSpeakerDialogueHistoryUpdate, DialogueHistoryUpdates) == 0x000008, "Member 'FSpeakerDialogueHistoryUpdate::DialogueHistoryUpdates' has a wrong offset!");
static_assert(offsetof(FSpeakerDialogueHistoryUpdate, GroupingUpdates) == 0x000018, "Member 'FSpeakerDialogueHistoryUpdate::GroupingUpdates' has a wrong offset!");

// ScriptStruct Palia.VillagerDynamicPreferenceData
// 0x0018 (0x0018 - 0x0000)
struct FVillagerDynamicPreferenceData final
{
public:
	int32                                         VillagerCoreId;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CurrentGiftPreferences;                            // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerDynamicPreferenceData) == 0x000008, "Wrong alignment on FVillagerDynamicPreferenceData");
static_assert(sizeof(FVillagerDynamicPreferenceData) == 0x000018, "Wrong size on FVillagerDynamicPreferenceData");
static_assert(offsetof(FVillagerDynamicPreferenceData, VillagerCoreId) == 0x000000, "Member 'FVillagerDynamicPreferenceData::VillagerCoreId' has a wrong offset!");
static_assert(offsetof(FVillagerDynamicPreferenceData, CurrentGiftPreferences) == 0x000008, "Member 'FVillagerDynamicPreferenceData::CurrentGiftPreferences' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_Makeup
// 0x00F8 (0x0190 - 0x0098)
struct FVAL_CharacterCustomizationVariantOption_Makeup final : public FVAL_CharacterCustomizationVariantOptionBase
{
public:
	struct FVAL_CharacterCustomization_MaterialParamOverrides MaterialParamOverrides;                            // 0x0098(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_Makeup) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_Makeup");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_Makeup) == 0x000190, "Wrong size on FVAL_CharacterCustomizationVariantOption_Makeup");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOption_Makeup, MaterialParamOverrides) == 0x000098, "Member 'FVAL_CharacterCustomizationVariantOption_Makeup::MaterialParamOverrides' has a wrong offset!");

// ScriptStruct Palia.ExperienceEventData
// 0x0030 (0x0030 - 0x0000)
struct FExperienceEventData final
{
public:
	TSoftObjectPtr<class ULimitedEventDataAsset>  EventAsset;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             EventSpawnConfig;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExperienceEventData) == 0x000008, "Wrong alignment on FExperienceEventData");
static_assert(sizeof(FExperienceEventData) == 0x000030, "Wrong size on FExperienceEventData");
static_assert(offsetof(FExperienceEventData, EventAsset) == 0x000000, "Member 'FExperienceEventData::EventAsset' has a wrong offset!");
static_assert(offsetof(FExperienceEventData, EventSpawnConfig) == 0x000028, "Member 'FExperienceEventData::EventSpawnConfig' has a wrong offset!");

// ScriptStruct Palia.FactionRelationship
// 0x0008 (0x0008 - 0x0000)
struct FFactionRelationship final
{
public:
	int32                                         FactionId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFactionRelationshipType                      Type;                                              // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CE[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFactionRelationship) == 0x000004, "Wrong alignment on FFactionRelationship");
static_assert(sizeof(FFactionRelationship) == 0x000008, "Wrong size on FFactionRelationship");
static_assert(offsetof(FFactionRelationship, FactionId) == 0x000000, "Member 'FFactionRelationship::FactionId' has a wrong offset!");
static_assert(offsetof(FFactionRelationship, Type) == 0x000004, "Member 'FFactionRelationship::Type' has a wrong offset!");

// ScriptStruct Palia.FactionConfig
// 0x0030 (0x0038 - 0x0008)
struct FFactionConfig final : public FTableRowBase
{
public:
	int32                                         FactionId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22CF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FFactionRelationship>           Relationships;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFactionConfig) == 0x000008, "Wrong alignment on FFactionConfig");
static_assert(sizeof(FFactionConfig) == 0x000038, "Wrong size on FFactionConfig");
static_assert(offsetof(FFactionConfig, FactionId) == 0x000008, "Member 'FFactionConfig::FactionId' has a wrong offset!");
static_assert(offsetof(FFactionConfig, DisplayName) == 0x000010, "Member 'FFactionConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FFactionConfig, Relationships) == 0x000028, "Member 'FFactionConfig::Relationships' has a wrong offset!");

// ScriptStruct Palia.VAL_InteractableInteractorLock
// 0x0020 (0x0020 - 0x0000)
struct FVAL_InteractableInteractorLock final
{
public:
	struct FPersistGuid                           EngagedPlayerId;                                   // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInteractorComponent*                   EngagedInteractor;                                 // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          Client_HasBeenSetup;                               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22D0[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_InteractableInteractorLock) == 0x000008, "Wrong alignment on FVAL_InteractableInteractorLock");
static_assert(sizeof(FVAL_InteractableInteractorLock) == 0x000020, "Wrong size on FVAL_InteractableInteractorLock");
static_assert(offsetof(FVAL_InteractableInteractorLock, EngagedPlayerId) == 0x000000, "Member 'FVAL_InteractableInteractorLock::EngagedPlayerId' has a wrong offset!");
static_assert(offsetof(FVAL_InteractableInteractorLock, EngagedInteractor) == 0x000010, "Member 'FVAL_InteractableInteractorLock::EngagedInteractor' has a wrong offset!");
static_assert(offsetof(FVAL_InteractableInteractorLock, Client_HasBeenSetup) == 0x000018, "Member 'FVAL_InteractableInteractorLock::Client_HasBeenSetup' has a wrong offset!");

// ScriptStruct Palia.FenceSpanMeshConfig
// 0x0010 (0x0010 - 0x0000)
struct FFenceSpanMeshConfig final
{
public:
	int32                                         Length;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFenceSpanMeshConfig) == 0x000008, "Wrong alignment on FFenceSpanMeshConfig");
static_assert(sizeof(FFenceSpanMeshConfig) == 0x000010, "Wrong size on FFenceSpanMeshConfig");
static_assert(offsetof(FFenceSpanMeshConfig, Length) == 0x000000, "Member 'FFenceSpanMeshConfig::Length' has a wrong offset!");
static_assert(offsetof(FFenceSpanMeshConfig, Mesh) == 0x000008, "Member 'FFenceSpanMeshConfig::Mesh' has a wrong offset!");

// ScriptStruct Palia.FenceConfig
// 0x0020 (0x0020 - 0x0000)
struct FFenceConfig final
{
public:
	class UStaticMesh*                            PostMesh;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostLength;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFenceSpanMeshConfig>           SpanMeshes;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFenceConfig) == 0x000008, "Wrong alignment on FFenceConfig");
static_assert(sizeof(FFenceConfig) == 0x000020, "Wrong size on FFenceConfig");
static_assert(offsetof(FFenceConfig, PostMesh) == 0x000000, "Member 'FFenceConfig::PostMesh' has a wrong offset!");
static_assert(offsetof(FFenceConfig, PostLength) == 0x000008, "Member 'FFenceConfig::PostLength' has a wrong offset!");
static_assert(offsetof(FFenceConfig, SpanMeshes) == 0x000010, "Member 'FFenceConfig::SpanMeshes' has a wrong offset!");

// ScriptStruct Palia.FenceState
// 0x0018 (0x0018 - 0x0000)
struct FFenceState final
{
public:
	struct FFenceSpanMeshConfig                   Span;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasStartPost;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasEndPost;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D3[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFenceState) == 0x000008, "Wrong alignment on FFenceState");
static_assert(sizeof(FFenceState) == 0x000018, "Wrong size on FFenceState");
static_assert(offsetof(FFenceState, Span) == 0x000000, "Member 'FFenceState::Span' has a wrong offset!");
static_assert(offsetof(FFenceState, bHasStartPost) == 0x000010, "Member 'FFenceState::bHasStartPost' has a wrong offset!");
static_assert(offsetof(FFenceState, bHasEndPost) == 0x000011, "Member 'FFenceState::bHasEndPost' has a wrong offset!");

// ScriptStruct Palia.FishMinigameBehaviorChoice
// 0x0030 (0x0030 - 0x0000)
struct FFishMinigameBehaviorChoice final
{
public:
	TSoftObjectPtr<class UFishMinigameBehaviorActionsConfig> ActionsConfig;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D4[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishMinigameBehaviorChoice) == 0x000008, "Wrong alignment on FFishMinigameBehaviorChoice");
static_assert(sizeof(FFishMinigameBehaviorChoice) == 0x000030, "Wrong size on FFishMinigameBehaviorChoice");
static_assert(offsetof(FFishMinigameBehaviorChoice, ActionsConfig) == 0x000000, "Member 'FFishMinigameBehaviorChoice::ActionsConfig' has a wrong offset!");
static_assert(offsetof(FFishMinigameBehaviorChoice, Weight) == 0x000028, "Member 'FFishMinigameBehaviorChoice::Weight' has a wrong offset!");

// ScriptStruct Palia.FishingRPCSelectLootParams
// 0x0048 (0x0048 - 0x0000)
struct FFishingRPCSelectLootParams final
{
public:
	struct FSoftObjectPath                        WaterBodyConfigPath;                               // 0x0000(0x0020)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        BaitItemTypePath;                                  // 0x0020(0x0020)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WaterType_Deprecated;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingRPCSelectLootParams) == 0x000008, "Wrong alignment on FFishingRPCSelectLootParams");
static_assert(sizeof(FFishingRPCSelectLootParams) == 0x000048, "Wrong size on FFishingRPCSelectLootParams");
static_assert(offsetof(FFishingRPCSelectLootParams, WaterBodyConfigPath) == 0x000000, "Member 'FFishingRPCSelectLootParams::WaterBodyConfigPath' has a wrong offset!");
static_assert(offsetof(FFishingRPCSelectLootParams, BaitItemTypePath) == 0x000020, "Member 'FFishingRPCSelectLootParams::BaitItemTypePath' has a wrong offset!");
static_assert(offsetof(FFishingRPCSelectLootParams, WaterType_Deprecated) == 0x000040, "Member 'FFishingRPCSelectLootParams::WaterType_Deprecated' has a wrong offset!");

// ScriptStruct Palia.FishingEndContext
// 0x0028 (0x0028 - 0x0000)
struct FFishingEndContext final
{
public:
	EFishingMiniGameResult                        Result;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Perfect;                                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D5[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurabilityReduction;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UValeriaWaterBodyComponent*             SourceWaterBody;                                   // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsedMultiplayerHelp;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D6[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartRodHealth;                                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndRodHealth;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFishHealth;                                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndFishHealth;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D7[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishingEndContext) == 0x000008, "Wrong alignment on FFishingEndContext");
static_assert(sizeof(FFishingEndContext) == 0x000028, "Wrong size on FFishingEndContext");
static_assert(offsetof(FFishingEndContext, Result) == 0x000000, "Member 'FFishingEndContext::Result' has a wrong offset!");
static_assert(offsetof(FFishingEndContext, Perfect) == 0x000001, "Member 'FFishingEndContext::Perfect' has a wrong offset!");
static_assert(offsetof(FFishingEndContext, DurabilityReduction) == 0x000004, "Member 'FFishingEndContext::DurabilityReduction' has a wrong offset!");
static_assert(offsetof(FFishingEndContext, SourceWaterBody) == 0x000008, "Member 'FFishingEndContext::SourceWaterBody' has a wrong offset!");
static_assert(offsetof(FFishingEndContext, bUsedMultiplayerHelp) == 0x000010, "Member 'FFishingEndContext::bUsedMultiplayerHelp' has a wrong offset!");
static_assert(offsetof(FFishingEndContext, StartRodHealth) == 0x000014, "Member 'FFishingEndContext::StartRodHealth' has a wrong offset!");
static_assert(offsetof(FFishingEndContext, EndRodHealth) == 0x000018, "Member 'FFishingEndContext::EndRodHealth' has a wrong offset!");
static_assert(offsetof(FFishingEndContext, StartFishHealth) == 0x00001C, "Member 'FFishingEndContext::StartFishHealth' has a wrong offset!");
static_assert(offsetof(FFishingEndContext, EndFishHealth) == 0x000020, "Member 'FFishingEndContext::EndFishHealth' has a wrong offset!");

// ScriptStruct Palia.PlayerNotification
// 0x0020 (0x0020 - 0x0000)
struct FPlayerNotification final
{
public:
	ENotificationType                             Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Content;                                           // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SentDateTime;                                      // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ExpireDateTime;                                    // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerNotification) == 0x000008, "Wrong alignment on FPlayerNotification");
static_assert(sizeof(FPlayerNotification) == 0x000020, "Wrong size on FPlayerNotification");
static_assert(offsetof(FPlayerNotification, Type) == 0x000000, "Member 'FPlayerNotification::Type' has a wrong offset!");
static_assert(offsetof(FPlayerNotification, Content) == 0x000008, "Member 'FPlayerNotification::Content' has a wrong offset!");
static_assert(offsetof(FPlayerNotification, SentDateTime) == 0x000010, "Member 'FPlayerNotification::SentDateTime' has a wrong offset!");
static_assert(offsetof(FPlayerNotification, ExpireDateTime) == 0x000018, "Member 'FPlayerNotification::ExpireDateTime' has a wrong offset!");

// ScriptStruct Palia.FishingSpawnSettings
// 0x0050 (0x0050 - 0x0000)
struct FFishingSpawnSettings final
{
public:
	TMap<EFishSpawnBuckets, int32>                SpawnWeights;                                      // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingSpawnSettings) == 0x000008, "Wrong alignment on FFishingSpawnSettings");
static_assert(sizeof(FFishingSpawnSettings) == 0x000050, "Wrong size on FFishingSpawnSettings");
static_assert(offsetof(FFishingSpawnSettings, SpawnWeights) == 0x000000, "Member 'FFishingSpawnSettings::SpawnWeights' has a wrong offset!");

// ScriptStruct Palia.VAL_VariantOptions_ColorCurveNameBackups
// 0x0020 (0x0020 - 0x0000)
struct FVAL_VariantOptions_ColorCurveNameBackups final
{
public:
	TArray<class FName>                           PrimaryColorCurveParameterNameBackups;             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           SecondaryColorCurveParameterNameBackups;           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_VariantOptions_ColorCurveNameBackups) == 0x000008, "Wrong alignment on FVAL_VariantOptions_ColorCurveNameBackups");
static_assert(sizeof(FVAL_VariantOptions_ColorCurveNameBackups) == 0x000020, "Wrong size on FVAL_VariantOptions_ColorCurveNameBackups");
static_assert(offsetof(FVAL_VariantOptions_ColorCurveNameBackups, PrimaryColorCurveParameterNameBackups) == 0x000000, "Member 'FVAL_VariantOptions_ColorCurveNameBackups::PrimaryColorCurveParameterNameBackups' has a wrong offset!");
static_assert(offsetof(FVAL_VariantOptions_ColorCurveNameBackups, SecondaryColorCurveParameterNameBackups) == 0x000010, "Member 'FVAL_VariantOptions_ColorCurveNameBackups::SecondaryColorCurveParameterNameBackups' has a wrong offset!");

// ScriptStruct Palia.QuestRequirement
// 0x0038 (0x0038 - 0x0000)
struct FQuestRequirement final
{
public:
	EQuestRequirementType                         Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22D9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountAdded;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountRequired;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestRequirement) == 0x000008, "Wrong alignment on FQuestRequirement");
static_assert(sizeof(FQuestRequirement) == 0x000038, "Wrong size on FQuestRequirement");
static_assert(offsetof(FQuestRequirement, Type) == 0x000000, "Member 'FQuestRequirement::Type' has a wrong offset!");
static_assert(offsetof(FQuestRequirement, ItemType) == 0x000008, "Member 'FQuestRequirement::ItemType' has a wrong offset!");
static_assert(offsetof(FQuestRequirement, AmountAdded) == 0x000030, "Member 'FQuestRequirement::AmountAdded' has a wrong offset!");
static_assert(offsetof(FQuestRequirement, AmountRequired) == 0x000034, "Member 'FQuestRequirement::AmountRequired' has a wrong offset!");

// ScriptStruct Palia.FishingInputMouseSettings
// 0x0004 (0x0004 - 0x0000)
struct FFishingInputMouseSettings final
{
public:
	float                                         RodMoveSensitivity;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingInputMouseSettings) == 0x000004, "Wrong alignment on FFishingInputMouseSettings");
static_assert(sizeof(FFishingInputMouseSettings) == 0x000004, "Wrong size on FFishingInputMouseSettings");
static_assert(offsetof(FFishingInputMouseSettings, RodMoveSensitivity) == 0x000000, "Member 'FFishingInputMouseSettings::RodMoveSensitivity' has a wrong offset!");

// ScriptStruct Palia.FishingInputSettings
// 0x0040 (0x0040 - 0x0000)
struct FFishingInputSettings final
{
public:
	struct FFishingInputControllerSettings        Controller;                                        // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FFishingInputMouseSettings             Mouse;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DA[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishingInputSettings) == 0x000008, "Wrong alignment on FFishingInputSettings");
static_assert(sizeof(FFishingInputSettings) == 0x000040, "Wrong size on FFishingInputSettings");
static_assert(offsetof(FFishingInputSettings, Controller) == 0x000000, "Member 'FFishingInputSettings::Controller' has a wrong offset!");
static_assert(offsetof(FFishingInputSettings, Mouse) == 0x000038, "Member 'FFishingInputSettings::Mouse' has a wrong offset!");

// ScriptStruct Palia.PlaceableVisibilityMeshConfig
// 0x0050 (0x0050 - 0x0000)
struct FPlaceableVisibilityMeshConfig final
{
public:
	struct FGameplayTagContainer                  PlugItemTag;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             Mesh;                                              // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredLevelMinOfPlug;                            // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredLevelMaxOfPlug;                            // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableVisibilityMeshConfig) == 0x000008, "Wrong alignment on FPlaceableVisibilityMeshConfig");
static_assert(sizeof(FPlaceableVisibilityMeshConfig) == 0x000050, "Wrong size on FPlaceableVisibilityMeshConfig");
static_assert(offsetof(FPlaceableVisibilityMeshConfig, PlugItemTag) == 0x000000, "Member 'FPlaceableVisibilityMeshConfig::PlugItemTag' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityMeshConfig, Mesh) == 0x000020, "Member 'FPlaceableVisibilityMeshConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityMeshConfig, RequiredLevelMinOfPlug) == 0x000048, "Member 'FPlaceableVisibilityMeshConfig::RequiredLevelMinOfPlug' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityMeshConfig, RequiredLevelMaxOfPlug) == 0x00004C, "Member 'FPlaceableVisibilityMeshConfig::RequiredLevelMaxOfPlug' has a wrong offset!");

// ScriptStruct Palia.FishingNotifications
// 0x0090 (0x0090 - 0x0000)
struct FFishingNotifications final
{
public:
	struct FNotification                          GetCloserToWater;                                  // 0x0000(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNotification                          NoFish;                                            // 0x0030(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNotification                          NotFishable;                                       // 0x0060(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingNotifications) == 0x000008, "Wrong alignment on FFishingNotifications");
static_assert(sizeof(FFishingNotifications) == 0x000090, "Wrong size on FFishingNotifications");
static_assert(offsetof(FFishingNotifications, GetCloserToWater) == 0x000000, "Member 'FFishingNotifications::GetCloserToWater' has a wrong offset!");
static_assert(offsetof(FFishingNotifications, NoFish) == 0x000030, "Member 'FFishingNotifications::NoFish' has a wrong offset!");
static_assert(offsetof(FFishingNotifications, NotFishable) == 0x000060, "Member 'FFishingNotifications::NotFishable' has a wrong offset!");

// ScriptStruct Palia.EndFishingSettings
// 0x0010 (0x0010 - 0x0000)
struct FEndFishingSettings final
{
public:
	float                                         MaxTimeOfEndFishingEmptyHanded;                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeOfEndFishingFailure;                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeOfEndFishingCelebrate;                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeOfEndFishingDefault;                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndFishingSettings) == 0x000004, "Wrong alignment on FEndFishingSettings");
static_assert(sizeof(FEndFishingSettings) == 0x000010, "Wrong size on FEndFishingSettings");
static_assert(offsetof(FEndFishingSettings, MaxTimeOfEndFishingEmptyHanded) == 0x000000, "Member 'FEndFishingSettings::MaxTimeOfEndFishingEmptyHanded' has a wrong offset!");
static_assert(offsetof(FEndFishingSettings, MaxTimeOfEndFishingFailure) == 0x000004, "Member 'FEndFishingSettings::MaxTimeOfEndFishingFailure' has a wrong offset!");
static_assert(offsetof(FEndFishingSettings, MaxTimeOfEndFishingCelebrate) == 0x000008, "Member 'FEndFishingSettings::MaxTimeOfEndFishingCelebrate' has a wrong offset!");
static_assert(offsetof(FEndFishingSettings, MaxTimeOfEndFishingDefault) == 0x00000C, "Member 'FEndFishingSettings::MaxTimeOfEndFishingDefault' has a wrong offset!");

// ScriptStruct Palia.FishingLevelNibbleChoice
// 0x0018 (0x0018 - 0x0000)
struct FFishingLevelNibbleChoice final
{
public:
	EFishingNibbleLevel                           NibbleLevel;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatRange                            WaitTimePostBite;                                  // 0x0004(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BiteChance;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingLevelNibbleChoice) == 0x000004, "Wrong alignment on FFishingLevelNibbleChoice");
static_assert(sizeof(FFishingLevelNibbleChoice) == 0x000018, "Wrong size on FFishingLevelNibbleChoice");
static_assert(offsetof(FFishingLevelNibbleChoice, NibbleLevel) == 0x000000, "Member 'FFishingLevelNibbleChoice::NibbleLevel' has a wrong offset!");
static_assert(offsetof(FFishingLevelNibbleChoice, WaitTimePostBite) == 0x000004, "Member 'FFishingLevelNibbleChoice::WaitTimePostBite' has a wrong offset!");
static_assert(offsetof(FFishingLevelNibbleChoice, BiteChance) == 0x000014, "Member 'FFishingLevelNibbleChoice::BiteChance' has a wrong offset!");

// ScriptStruct Palia.FishingLevelNibbleConfig
// 0x0010 (0x0018 - 0x0008)
struct FFishingLevelNibbleConfig final : public FTableRowBase
{
public:
	TArray<struct FFishingLevelNibbleChoice>      Nibbles;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingLevelNibbleConfig) == 0x000008, "Wrong alignment on FFishingLevelNibbleConfig");
static_assert(sizeof(FFishingLevelNibbleConfig) == 0x000018, "Wrong size on FFishingLevelNibbleConfig");
static_assert(offsetof(FFishingLevelNibbleConfig, Nibbles) == 0x000008, "Member 'FFishingLevelNibbleConfig::Nibbles' has a wrong offset!");

// ScriptStruct Palia.FishingLootConfig
// 0x0038 (0x0040 - 0x0008)
struct FFishingLootConfig final : public FTableRowBase
{
public:
	struct FTagList                               BaitTags;                                          // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   WaterType;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFishChanceTable>               ChanceTable;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFishingLootConfig) == 0x000008, "Wrong alignment on FFishingLootConfig");
static_assert(sizeof(FFishingLootConfig) == 0x000040, "Wrong size on FFishingLootConfig");
static_assert(offsetof(FFishingLootConfig, BaitTags) == 0x000008, "Member 'FFishingLootConfig::BaitTags' has a wrong offset!");
static_assert(offsetof(FFishingLootConfig, WaterType) == 0x000028, "Member 'FFishingLootConfig::WaterType' has a wrong offset!");
static_assert(offsetof(FFishingLootConfig, ChanceTable) == 0x000030, "Member 'FFishingLootConfig::ChanceTable' has a wrong offset!");

// ScriptStruct Palia.VAL_QuestGoalDef
// 0x0050 (0x0050 - 0x0000)
struct FVAL_QuestGoalDef final
{
public:
	class UVAL_GameplayConditionDef*              Condition;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CustomDescription;                                 // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EVAL_QuestShowGoalCount                       ShowCount;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHide;                                             // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DC[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UInWorldLocationDef>     Location;                                          // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_QuestGoalDef) == 0x000008, "Wrong alignment on FVAL_QuestGoalDef");
static_assert(sizeof(FVAL_QuestGoalDef) == 0x000050, "Wrong size on FVAL_QuestGoalDef");
static_assert(offsetof(FVAL_QuestGoalDef, Condition) == 0x000000, "Member 'FVAL_QuestGoalDef::Condition' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalDef, CustomDescription) == 0x000008, "Member 'FVAL_QuestGoalDef::CustomDescription' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalDef, ShowCount) == 0x000020, "Member 'FVAL_QuestGoalDef::ShowCount' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalDef, bHide) == 0x000021, "Member 'FVAL_QuestGoalDef::bHide' has a wrong offset!");
static_assert(offsetof(FVAL_QuestGoalDef, Location) == 0x000028, "Member 'FVAL_QuestGoalDef::Location' has a wrong offset!");

// ScriptStruct Palia.FishingNibbleActorData
// 0x00E0 (0x00E0 - 0x0000)
struct FFishingNibbleActorData final
{
public:
	class AActor*                                 FishActor;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DD[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             StartTransform;                                    // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpawnTime;                                         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DE[0xC];                                     // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFishingNibbleActorData) == 0x000010, "Wrong alignment on FFishingNibbleActorData");
static_assert(sizeof(FFishingNibbleActorData) == 0x0000E0, "Wrong size on FFishingNibbleActorData");
static_assert(offsetof(FFishingNibbleActorData, FishActor) == 0x000000, "Member 'FFishingNibbleActorData::FishActor' has a wrong offset!");
static_assert(offsetof(FFishingNibbleActorData, SpawnTransform) == 0x000010, "Member 'FFishingNibbleActorData::SpawnTransform' has a wrong offset!");
static_assert(offsetof(FFishingNibbleActorData, StartTransform) == 0x000070, "Member 'FFishingNibbleActorData::StartTransform' has a wrong offset!");
static_assert(offsetof(FFishingNibbleActorData, SpawnTime) == 0x0000D0, "Member 'FFishingNibbleActorData::SpawnTime' has a wrong offset!");

// ScriptStruct Palia.FoliageRustleState
// 0x0018 (0x0018 - 0x0000)
struct FFoliageRustleState final
{
public:
	TArray<class UPrimitiveComponent*>            OverlappingComponents;                             // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         CurrentlyPlayingAkId;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22DF[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageRustleState) == 0x000008, "Wrong alignment on FFoliageRustleState");
static_assert(sizeof(FFoliageRustleState) == 0x000018, "Wrong size on FFoliageRustleState");
static_assert(offsetof(FFoliageRustleState, OverlappingComponents) == 0x000000, "Member 'FFoliageRustleState::OverlappingComponents' has a wrong offset!");
static_assert(offsetof(FFoliageRustleState, CurrentlyPlayingAkId) == 0x000010, "Member 'FFoliageRustleState::CurrentlyPlayingAkId' has a wrong offset!");

// ScriptStruct Palia.FriendList
// 0x0010 (0x0010 - 0x0000)
struct FFriendList final
{
public:
	TArray<struct FFriend>                        List;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendList) == 0x000008, "Wrong alignment on FFriendList");
static_assert(sizeof(FFriendList) == 0x000010, "Wrong size on FFriendList");
static_assert(offsetof(FFriendList, List) == 0x000000, "Member 'FFriendList::List' has a wrong offset!");

// ScriptStruct Palia.SoftTableList
// 0x0010 (0x0010 - 0x0000)
struct FSoftTableList final
{
public:
	TArray<TSoftObjectPtr<class UDataTable>>      SoftTables;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoftTableList) == 0x000008, "Wrong alignment on FSoftTableList");
static_assert(sizeof(FSoftTableList) == 0x000010, "Wrong size on FSoftTableList");
static_assert(offsetof(FSoftTableList, SoftTables) == 0x000000, "Member 'FSoftTableList::SoftTables' has a wrong offset!");

// ScriptStruct Palia.BlockList
// 0x0010 (0x0010 - 0x0000)
struct FBlockList final
{
public:
	TArray<struct FUniqueNetIdRepl>               List;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlockList) == 0x000008, "Wrong alignment on FBlockList");
static_assert(sizeof(FBlockList) == 0x000010, "Wrong size on FBlockList");
static_assert(offsetof(FBlockList, List) == 0x000000, "Member 'FBlockList::List' has a wrong offset!");

// ScriptStruct Palia.SimpleDecorPlaceable
// 0x00BC (0x00C8 - 0x000C)
struct FSimpleDecorPlaceable final : public FFastArraySerializerItem
{
public:
	int32                                         ItemPersistId;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TintPersistID;                                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E0[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSessionActorId                        SessionId;                                         // 0x0014(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlacementRegionId                     Anchor;                                            // 0x0018(0x0038)(NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSimpleDecorExtraField>         ExtraFields;                                       // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSimpleDecorExtraField>         TempExtraFields;                                   // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SlotId;                                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPersistActorId                        PersistId;                                         // 0x00A4(0x0024)(RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSimpleDecorPlaceable) == 0x000008, "Wrong alignment on FSimpleDecorPlaceable");
static_assert(sizeof(FSimpleDecorPlaceable) == 0x0000C8, "Wrong size on FSimpleDecorPlaceable");
static_assert(offsetof(FSimpleDecorPlaceable, ItemPersistId) == 0x00000C, "Member 'FSimpleDecorPlaceable::ItemPersistId' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceable, TintPersistID) == 0x000010, "Member 'FSimpleDecorPlaceable::TintPersistID' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceable, SessionId) == 0x000014, "Member 'FSimpleDecorPlaceable::SessionId' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceable, Anchor) == 0x000018, "Member 'FSimpleDecorPlaceable::Anchor' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceable, Position) == 0x000050, "Member 'FSimpleDecorPlaceable::Position' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceable, Rotation) == 0x000068, "Member 'FSimpleDecorPlaceable::Rotation' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceable, ExtraFields) == 0x000080, "Member 'FSimpleDecorPlaceable::ExtraFields' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceable, TempExtraFields) == 0x000090, "Member 'FSimpleDecorPlaceable::TempExtraFields' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceable, SlotId) == 0x0000A0, "Member 'FSimpleDecorPlaceable::SlotId' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceable, PersistId) == 0x0000A4, "Member 'FSimpleDecorPlaceable::PersistId' has a wrong offset!");

// ScriptStruct Palia.CreatureOptimizations
// 0x0008 (0x0008 - 0x0000)
struct FCreatureOptimizations final
{
public:
	float                                         GridSize;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerGridRange;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreatureOptimizations) == 0x000004, "Wrong alignment on FCreatureOptimizations");
static_assert(sizeof(FCreatureOptimizations) == 0x000008, "Wrong size on FCreatureOptimizations");
static_assert(offsetof(FCreatureOptimizations, GridSize) == 0x000000, "Member 'FCreatureOptimizations::GridSize' has a wrong offset!");
static_assert(offsetof(FCreatureOptimizations, PlayerGridRange) == 0x000004, "Member 'FCreatureOptimizations::PlayerGridRange' has a wrong offset!");

// ScriptStruct Palia.GardenConfig
// 0x0010 (0x0018 - 0x0008)
struct FGardenConfig final : public FTableRowBase
{
public:
	TArray<struct FGardenConfigPlotSize>          PlotSize;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardenConfig) == 0x000008, "Wrong alignment on FGardenConfig");
static_assert(sizeof(FGardenConfig) == 0x000018, "Wrong size on FGardenConfig");
static_assert(offsetof(FGardenConfig, PlotSize) == 0x000008, "Member 'FGardenConfig::PlotSize' has a wrong offset!");

// ScriptStruct Palia.PlantSerializer
// 0x0018 (0x0120 - 0x0108)
struct FPlantSerializer final : public FFastArraySerializer
{
public:
	TArray<struct FPlantSerializeItem>            Plants;                                            // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E1[0x8];                                     // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlantSerializer) == 0x000008, "Wrong alignment on FPlantSerializer");
static_assert(sizeof(FPlantSerializer) == 0x000120, "Wrong size on FPlantSerializer");
static_assert(offsetof(FPlantSerializer, Plants) == 0x000108, "Member 'FPlantSerializer::Plants' has a wrong offset!");

// ScriptStruct Palia.GardeningDebugConfig
// 0x0008 (0x0008 - 0x0000)
struct FGardeningDebugConfig final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           GardenPatchItemType;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardeningDebugConfig) == 0x000008, "Wrong alignment on FGardeningDebugConfig");
static_assert(sizeof(FGardeningDebugConfig) == 0x000008, "Wrong size on FGardeningDebugConfig");
static_assert(offsetof(FGardeningDebugConfig, GardenPatchItemType) == 0x000000, "Member 'FGardeningDebugConfig::GardenPatchItemType' has a wrong offset!");

// ScriptStruct Palia.QuestDialogueArray
// 0x0010 (0x0010 - 0x0000)
struct FQuestDialogueArray final
{
public:
	TArray<class UVAL_DialogueAsset*>             DialogueArray;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestDialogueArray) == 0x000008, "Wrong alignment on FQuestDialogueArray");
static_assert(sizeof(FQuestDialogueArray) == 0x000010, "Wrong size on FQuestDialogueArray");
static_assert(offsetof(FQuestDialogueArray, DialogueArray) == 0x000000, "Member 'FQuestDialogueArray::DialogueArray' has a wrong offset!");

// ScriptStruct Palia.GardeningFertilizingGlobalConfig
// 0x0038 (0x0038 - 0x0000)
struct FGardeningFertilizingGlobalConfig final
{
public:
	struct FNotification                          NotAllowedOnPlot;                                  // 0x0000(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         SpeedGrowApplicationsRequiredForFasterGrowth;      // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E2[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGardeningFertilizingGlobalConfig) == 0x000008, "Wrong alignment on FGardeningFertilizingGlobalConfig");
static_assert(sizeof(FGardeningFertilizingGlobalConfig) == 0x000038, "Wrong size on FGardeningFertilizingGlobalConfig");
static_assert(offsetof(FGardeningFertilizingGlobalConfig, NotAllowedOnPlot) == 0x000000, "Member 'FGardeningFertilizingGlobalConfig::NotAllowedOnPlot' has a wrong offset!");
static_assert(offsetof(FGardeningFertilizingGlobalConfig, SpeedGrowApplicationsRequiredForFasterGrowth) == 0x000030, "Member 'FGardeningFertilizingGlobalConfig::SpeedGrowApplicationsRequiredForFasterGrowth' has a wrong offset!");

// ScriptStruct Palia.GardeningTillingGlobalConfig
// 0x01F8 (0x01F8 - 0x0000)
struct FGardeningTillingGlobalConfig final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      TillingSplatBrush;                                 // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuestRewardConfig                     TillingReward;                                     // 0x0028(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNotification                          TillCompleteNotification;                          // 0x01A0(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TillReversionLengthMinimumSec;                     // 0x01D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TillReversionLengthMaximumSec;                     // 0x01D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TillingPercentMinToCompletion;                     // 0x01D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TillingMaskWidth;                                  // 0x01DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TillingMaskHeight;                                 // 0x01E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HiddenLootDropChance;                              // 0x01E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHoeQualityGlobalConfig>        HoeQualities;                                      // 0x01E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardeningTillingGlobalConfig) == 0x000008, "Wrong alignment on FGardeningTillingGlobalConfig");
static_assert(sizeof(FGardeningTillingGlobalConfig) == 0x0001F8, "Wrong size on FGardeningTillingGlobalConfig");
static_assert(offsetof(FGardeningTillingGlobalConfig, TillingSplatBrush) == 0x000000, "Member 'FGardeningTillingGlobalConfig::TillingSplatBrush' has a wrong offset!");
static_assert(offsetof(FGardeningTillingGlobalConfig, TillingReward) == 0x000028, "Member 'FGardeningTillingGlobalConfig::TillingReward' has a wrong offset!");
static_assert(offsetof(FGardeningTillingGlobalConfig, TillCompleteNotification) == 0x0001A0, "Member 'FGardeningTillingGlobalConfig::TillCompleteNotification' has a wrong offset!");
static_assert(offsetof(FGardeningTillingGlobalConfig, TillReversionLengthMinimumSec) == 0x0001D0, "Member 'FGardeningTillingGlobalConfig::TillReversionLengthMinimumSec' has a wrong offset!");
static_assert(offsetof(FGardeningTillingGlobalConfig, TillReversionLengthMaximumSec) == 0x0001D4, "Member 'FGardeningTillingGlobalConfig::TillReversionLengthMaximumSec' has a wrong offset!");
static_assert(offsetof(FGardeningTillingGlobalConfig, TillingPercentMinToCompletion) == 0x0001D8, "Member 'FGardeningTillingGlobalConfig::TillingPercentMinToCompletion' has a wrong offset!");
static_assert(offsetof(FGardeningTillingGlobalConfig, TillingMaskWidth) == 0x0001DC, "Member 'FGardeningTillingGlobalConfig::TillingMaskWidth' has a wrong offset!");
static_assert(offsetof(FGardeningTillingGlobalConfig, TillingMaskHeight) == 0x0001E0, "Member 'FGardeningTillingGlobalConfig::TillingMaskHeight' has a wrong offset!");
static_assert(offsetof(FGardeningTillingGlobalConfig, HiddenLootDropChance) == 0x0001E4, "Member 'FGardeningTillingGlobalConfig::HiddenLootDropChance' has a wrong offset!");
static_assert(offsetof(FGardeningTillingGlobalConfig, HoeQualities) == 0x0001E8, "Member 'FGardeningTillingGlobalConfig::HoeQualities' has a wrong offset!");

// ScriptStruct Palia.GardeningSeedingGlobalConfig
// 0x0060 (0x0060 - 0x0000)
struct FGardeningSeedingGlobalConfig final
{
public:
	struct FDataTableRowHandle                    AbilityConfig;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilitySeeedTags;                                  // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNotification                          NotAllowedOnPlot;                                  // 0x0030(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardeningSeedingGlobalConfig) == 0x000008, "Wrong alignment on FGardeningSeedingGlobalConfig");
static_assert(sizeof(FGardeningSeedingGlobalConfig) == 0x000060, "Wrong size on FGardeningSeedingGlobalConfig");
static_assert(offsetof(FGardeningSeedingGlobalConfig, AbilityConfig) == 0x000000, "Member 'FGardeningSeedingGlobalConfig::AbilityConfig' has a wrong offset!");
static_assert(offsetof(FGardeningSeedingGlobalConfig, AbilitySeeedTags) == 0x000010, "Member 'FGardeningSeedingGlobalConfig::AbilitySeeedTags' has a wrong offset!");
static_assert(offsetof(FGardeningSeedingGlobalConfig, NotAllowedOnPlot) == 0x000030, "Member 'FGardeningSeedingGlobalConfig::NotAllowedOnPlot' has a wrong offset!");

// ScriptStruct Palia.GardeningWeedingGlobalConfig
// 0x01E8 (0x01E8 - 0x0000)
struct FGardeningWeedingGlobalConfig final
{
public:
	struct FQuestRewardConfig                     Reward;                                            // 0x0000(0x0178)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGardeningWeedingMinigameGlobalConfig  MinigameConfig;                                    // 0x0178(0x0060)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinWeedsPerGameDayPerTile;                         // 0x01D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWeedsPerGameDayPerTile;                         // 0x01DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTotalWeedsPerTile;                              // 0x01E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E3[0x4];                                     // 0x01E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGardeningWeedingGlobalConfig) == 0x000008, "Wrong alignment on FGardeningWeedingGlobalConfig");
static_assert(sizeof(FGardeningWeedingGlobalConfig) == 0x0001E8, "Wrong size on FGardeningWeedingGlobalConfig");
static_assert(offsetof(FGardeningWeedingGlobalConfig, Reward) == 0x000000, "Member 'FGardeningWeedingGlobalConfig::Reward' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingGlobalConfig, MinigameConfig) == 0x000178, "Member 'FGardeningWeedingGlobalConfig::MinigameConfig' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingGlobalConfig, MinWeedsPerGameDayPerTile) == 0x0001D8, "Member 'FGardeningWeedingGlobalConfig::MinWeedsPerGameDayPerTile' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingGlobalConfig, MaxWeedsPerGameDayPerTile) == 0x0001DC, "Member 'FGardeningWeedingGlobalConfig::MaxWeedsPerGameDayPerTile' has a wrong offset!");
static_assert(offsetof(FGardeningWeedingGlobalConfig, MaxTotalWeedsPerTile) == 0x0001E0, "Member 'FGardeningWeedingGlobalConfig::MaxTotalWeedsPerTile' has a wrong offset!");

// ScriptStruct Palia.GardeningHarvestConfig
// 0x0038 (0x0038 - 0x0000)
struct FGardeningHarvestConfig final
{
public:
	struct FGardeningPlantHarvestConfig           BaseHarvestAmounts;                                // 0x0000(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGardeningPlantHarvestConfig           FertilizeBonusHarvestAmounts;                      // 0x000C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGardeningPlantHarvestConfig           QualitySeedBonusHarvestAmounts;                    // 0x0018(0x000C)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeOfDayHarvestStartsAt;                          // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseQualityChance;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QualityChanceBonusPerLevel;                        // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QualityChanceBonusForQualitySeed;                  // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxQualityChanceBonusForFertilizer;                // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardeningHarvestConfig) == 0x000004, "Wrong alignment on FGardeningHarvestConfig");
static_assert(sizeof(FGardeningHarvestConfig) == 0x000038, "Wrong size on FGardeningHarvestConfig");
static_assert(offsetof(FGardeningHarvestConfig, BaseHarvestAmounts) == 0x000000, "Member 'FGardeningHarvestConfig::BaseHarvestAmounts' has a wrong offset!");
static_assert(offsetof(FGardeningHarvestConfig, FertilizeBonusHarvestAmounts) == 0x00000C, "Member 'FGardeningHarvestConfig::FertilizeBonusHarvestAmounts' has a wrong offset!");
static_assert(offsetof(FGardeningHarvestConfig, QualitySeedBonusHarvestAmounts) == 0x000018, "Member 'FGardeningHarvestConfig::QualitySeedBonusHarvestAmounts' has a wrong offset!");
static_assert(offsetof(FGardeningHarvestConfig, TimeOfDayHarvestStartsAt) == 0x000024, "Member 'FGardeningHarvestConfig::TimeOfDayHarvestStartsAt' has a wrong offset!");
static_assert(offsetof(FGardeningHarvestConfig, BaseQualityChance) == 0x000028, "Member 'FGardeningHarvestConfig::BaseQualityChance' has a wrong offset!");
static_assert(offsetof(FGardeningHarvestConfig, QualityChanceBonusPerLevel) == 0x00002C, "Member 'FGardeningHarvestConfig::QualityChanceBonusPerLevel' has a wrong offset!");
static_assert(offsetof(FGardeningHarvestConfig, QualityChanceBonusForQualitySeed) == 0x000030, "Member 'FGardeningHarvestConfig::QualityChanceBonusForQualitySeed' has a wrong offset!");
static_assert(offsetof(FGardeningHarvestConfig, MaxQualityChanceBonusForFertilizer) == 0x000034, "Member 'FGardeningHarvestConfig::MaxQualityChanceBonusForFertilizer' has a wrong offset!");

// ScriptStruct Palia.ArcadeReplicatedReplayFrame
// 0x002C (0x0038 - 0x000C)
struct FArcadeReplicatedReplayFrame final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_22E4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArcadeReplayFrame                     Frame;                                             // 0x0010(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FArcadeReplicatedReplayFrame) == 0x000008, "Wrong alignment on FArcadeReplicatedReplayFrame");
static_assert(sizeof(FArcadeReplicatedReplayFrame) == 0x000038, "Wrong size on FArcadeReplicatedReplayFrame");
static_assert(offsetof(FArcadeReplicatedReplayFrame, Frame) == 0x000010, "Member 'FArcadeReplicatedReplayFrame::Frame' has a wrong offset!");

// ScriptStruct Palia.WateringCanConfig
// 0x0014 (0x0014 - 0x0000)
struct FWateringCanConfig final
{
public:
	EItemQuality                                  Quality;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaterAmountPerSecond;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWateringTilePattern                          WateringTilePattern;                               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E6[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdjacentTileMultiplier;                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterCapacity;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWateringCanConfig) == 0x000004, "Wrong alignment on FWateringCanConfig");
static_assert(sizeof(FWateringCanConfig) == 0x000014, "Wrong size on FWateringCanConfig");
static_assert(offsetof(FWateringCanConfig, Quality) == 0x000000, "Member 'FWateringCanConfig::Quality' has a wrong offset!");
static_assert(offsetof(FWateringCanConfig, WaterAmountPerSecond) == 0x000004, "Member 'FWateringCanConfig::WaterAmountPerSecond' has a wrong offset!");
static_assert(offsetof(FWateringCanConfig, WateringTilePattern) == 0x000008, "Member 'FWateringCanConfig::WateringTilePattern' has a wrong offset!");
static_assert(offsetof(FWateringCanConfig, AdjacentTileMultiplier) == 0x00000C, "Member 'FWateringCanConfig::AdjacentTileMultiplier' has a wrong offset!");
static_assert(offsetof(FWateringCanConfig, WaterCapacity) == 0x000010, "Member 'FWateringCanConfig::WaterCapacity' has a wrong offset!");

// ScriptStruct Palia.GardeningWateringConfig
// 0x0010 (0x0010 - 0x0000)
struct FGardeningWateringConfig final
{
public:
	TArray<struct FWateringCanConfig>             WaterCanQualities;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardeningWateringConfig) == 0x000008, "Wrong alignment on FGardeningWateringConfig");
static_assert(sizeof(FGardeningWateringConfig) == 0x000010, "Wrong size on FGardeningWateringConfig");
static_assert(offsetof(FGardeningWateringConfig, WaterCanQualities) == 0x000000, "Member 'FGardeningWateringConfig::WaterCanQualities' has a wrong offset!");

// ScriptStruct Palia.ActiveVillagerVisit
// 0x0050 (0x0050 - 0x0000)
struct FActiveVillagerVisit final
{
public:
	struct FSavedVillagerVisit                    SavedVillagerVisit;                                // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bScheduledVisit;                                   // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerArrivedAfterStart;                          // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E7[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrivateSpaceVillagerVisitConfig*       PrivateSpaceVillagerVisitConfig;                   // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AValeriaVillagerCharacter*>      VisitingVillagers;                                 // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bPrivateSpaceVisit;                                // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E8[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrivateSpaceConfig*                    AssociatedPrivateSpaceConfig;                      // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveVillagerVisit) == 0x000008, "Wrong alignment on FActiveVillagerVisit");
static_assert(sizeof(FActiveVillagerVisit) == 0x000050, "Wrong size on FActiveVillagerVisit");
static_assert(offsetof(FActiveVillagerVisit, SavedVillagerVisit) == 0x000000, "Member 'FActiveVillagerVisit::SavedVillagerVisit' has a wrong offset!");
static_assert(offsetof(FActiveVillagerVisit, bScheduledVisit) == 0x000020, "Member 'FActiveVillagerVisit::bScheduledVisit' has a wrong offset!");
static_assert(offsetof(FActiveVillagerVisit, bPlayerArrivedAfterStart) == 0x000021, "Member 'FActiveVillagerVisit::bPlayerArrivedAfterStart' has a wrong offset!");
static_assert(offsetof(FActiveVillagerVisit, PrivateSpaceVillagerVisitConfig) == 0x000028, "Member 'FActiveVillagerVisit::PrivateSpaceVillagerVisitConfig' has a wrong offset!");
static_assert(offsetof(FActiveVillagerVisit, VisitingVillagers) == 0x000030, "Member 'FActiveVillagerVisit::VisitingVillagers' has a wrong offset!");
static_assert(offsetof(FActiveVillagerVisit, bPrivateSpaceVisit) == 0x000040, "Member 'FActiveVillagerVisit::bPrivateSpaceVisit' has a wrong offset!");
static_assert(offsetof(FActiveVillagerVisit, AssociatedPrivateSpaceConfig) == 0x000048, "Member 'FActiveVillagerVisit::AssociatedPrivateSpaceConfig' has a wrong offset!");

// ScriptStruct Palia.HousingWritToBuildingUnlockLimit
// 0x0008 (0x0008 - 0x0000)
struct FHousingWritToBuildingUnlockLimit final
{
public:
	int32                                         NumUnlockedWrits;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AdditionalPlaceableBuildings;                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHousingWritToBuildingUnlockLimit) == 0x000004, "Wrong alignment on FHousingWritToBuildingUnlockLimit");
static_assert(sizeof(FHousingWritToBuildingUnlockLimit) == 0x000008, "Wrong size on FHousingWritToBuildingUnlockLimit");
static_assert(offsetof(FHousingWritToBuildingUnlockLimit, NumUnlockedWrits) == 0x000000, "Member 'FHousingWritToBuildingUnlockLimit::NumUnlockedWrits' has a wrong offset!");
static_assert(offsetof(FHousingWritToBuildingUnlockLimit, AdditionalPlaceableBuildings) == 0x000004, "Member 'FHousingWritToBuildingUnlockLimit::AdditionalPlaceableBuildings' has a wrong offset!");

// ScriptStruct Palia.VillagerSpawnConfig
// 0x0088 (0x0090 - 0x0008)
struct FVillagerSpawnConfig final : public FTableRowBase
{
public:
	struct FDataTableRowHandle                    VillagerConfig;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVillagerSpawnParams                   VillagerSpawnParams;                               // 0x0018(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBehaviorTree>           DefaultBehaviorTree;                               // 0x0040(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVillagerScheduleConfig> OverrideVillagerSchedule;                          // 0x0068(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerSpawnConfig) == 0x000008, "Wrong alignment on FVillagerSpawnConfig");
static_assert(sizeof(FVillagerSpawnConfig) == 0x000090, "Wrong size on FVillagerSpawnConfig");
static_assert(offsetof(FVillagerSpawnConfig, VillagerConfig) == 0x000008, "Member 'FVillagerSpawnConfig::VillagerConfig' has a wrong offset!");
static_assert(offsetof(FVillagerSpawnConfig, VillagerSpawnParams) == 0x000018, "Member 'FVillagerSpawnConfig::VillagerSpawnParams' has a wrong offset!");
static_assert(offsetof(FVillagerSpawnConfig, DefaultBehaviorTree) == 0x000040, "Member 'FVillagerSpawnConfig::DefaultBehaviorTree' has a wrong offset!");
static_assert(offsetof(FVillagerSpawnConfig, OverrideVillagerSchedule) == 0x000068, "Member 'FVillagerSpawnConfig::OverrideVillagerSchedule' has a wrong offset!");

// ScriptStruct Palia.GardenPlotActorInternal
// 0x0014 (0x0014 - 0x0000)
struct FGardenPlotActorInternal final
{
public:
	uint8                                         Pad_22E9[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CachedGardenIdx;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGardenPlotActorInternal) == 0x000004, "Wrong alignment on FGardenPlotActorInternal");
static_assert(sizeof(FGardenPlotActorInternal) == 0x000014, "Wrong size on FGardenPlotActorInternal");
static_assert(offsetof(FGardenPlotActorInternal, CachedGardenIdx) == 0x000010, "Member 'FGardenPlotActorInternal::CachedGardenIdx' has a wrong offset!");

// ScriptStruct Palia.TagAndIndexPair
// 0x000C (0x000C - 0x0000)
struct FTagAndIndexPair final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Index;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTagAndIndexPair) == 0x000004, "Wrong alignment on FTagAndIndexPair");
static_assert(sizeof(FTagAndIndexPair) == 0x00000C, "Wrong size on FTagAndIndexPair");
static_assert(offsetof(FTagAndIndexPair, Tag) == 0x000000, "Member 'FTagAndIndexPair::Tag' has a wrong offset!");
static_assert(offsetof(FTagAndIndexPair, Index) == 0x000008, "Member 'FTagAndIndexPair::Index' has a wrong offset!");

// ScriptStruct Palia.GardenTileBuffInfo
// 0x0040 (0x0040 - 0x0000)
struct FGardenTileBuffInfo final
{
public:
	TArray<struct FGardenTileBuffLine>            Lines;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   TempCombinedLines;                                 // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           FertilizerColor;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasFertilizer;                                     // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGardenBuffEffectType                         FertilizerBuffType;                                // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EA[0x6];                                     // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGardenTileBuffInfo) == 0x000008, "Wrong alignment on FGardenTileBuffInfo");
static_assert(sizeof(FGardenTileBuffInfo) == 0x000040, "Wrong size on FGardenTileBuffInfo");
static_assert(offsetof(FGardenTileBuffInfo, Lines) == 0x000000, "Member 'FGardenTileBuffInfo::Lines' has a wrong offset!");
static_assert(offsetof(FGardenTileBuffInfo, TempCombinedLines) == 0x000010, "Member 'FGardenTileBuffInfo::TempCombinedLines' has a wrong offset!");
static_assert(offsetof(FGardenTileBuffInfo, FertilizerColor) == 0x000028, "Member 'FGardenTileBuffInfo::FertilizerColor' has a wrong offset!");
static_assert(offsetof(FGardenTileBuffInfo, HasFertilizer) == 0x000038, "Member 'FGardenTileBuffInfo::HasFertilizer' has a wrong offset!");
static_assert(offsetof(FGardenTileBuffInfo, FertilizerBuffType) == 0x000039, "Member 'FGardenTileBuffInfo::FertilizerBuffType' has a wrong offset!");

// ScriptStruct Palia.GardenTileBuffsCache
// 0x0028 (0x0028 - 0x0000)
struct FGardenTileBuffsCache final
{
public:
	TArray<class UGardenBuffConfig*>              CompanionBuffs;                                    // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UGardenBuffConfig*>              FertilizerBuffs;                                   // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PlantId;                                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EB[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGardenTileBuffsCache) == 0x000008, "Wrong alignment on FGardenTileBuffsCache");
static_assert(sizeof(FGardenTileBuffsCache) == 0x000028, "Wrong size on FGardenTileBuffsCache");
static_assert(offsetof(FGardenTileBuffsCache, CompanionBuffs) == 0x000000, "Member 'FGardenTileBuffsCache::CompanionBuffs' has a wrong offset!");
static_assert(offsetof(FGardenTileBuffsCache, FertilizerBuffs) == 0x000010, "Member 'FGardenTileBuffsCache::FertilizerBuffs' has a wrong offset!");
static_assert(offsetof(FGardenTileBuffsCache, PlantId) == 0x000020, "Member 'FGardenTileBuffsCache::PlantId' has a wrong offset!");

// ScriptStruct Palia.AdditionalGatherable
// 0x0018 (0x0018 - 0x0000)
struct FAdditionalGatherable final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PercentChance;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EC[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdditionalGatherable) == 0x000008, "Wrong alignment on FAdditionalGatherable");
static_assert(sizeof(FAdditionalGatherable) == 0x000018, "Wrong size on FAdditionalGatherable");
static_assert(offsetof(FAdditionalGatherable, ItemType) == 0x000000, "Member 'FAdditionalGatherable::ItemType' has a wrong offset!");
static_assert(offsetof(FAdditionalGatherable, Amount) == 0x000008, "Member 'FAdditionalGatherable::Amount' has a wrong offset!");
static_assert(offsetof(FAdditionalGatherable, QualityStars) == 0x00000C, "Member 'FAdditionalGatherable::QualityStars' has a wrong offset!");
static_assert(offsetof(FAdditionalGatherable, PercentChance) == 0x000010, "Member 'FAdditionalGatherable::PercentChance' has a wrong offset!");

// ScriptStruct Palia.AdditionalReward
// 0x0018 (0x0018 - 0x0000)
struct FAdditionalReward final
{
public:
	int32                                         PercentChance;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22ED[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestRewardConfig>             Rewards;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdditionalReward) == 0x000008, "Wrong alignment on FAdditionalReward");
static_assert(sizeof(FAdditionalReward) == 0x000018, "Wrong size on FAdditionalReward");
static_assert(offsetof(FAdditionalReward, PercentChance) == 0x000000, "Member 'FAdditionalReward::PercentChance' has a wrong offset!");
static_assert(offsetof(FAdditionalReward, Rewards) == 0x000008, "Member 'FAdditionalReward::Rewards' has a wrong offset!");

// ScriptStruct Palia.VAL_PostDialogueChainGiftInfo
// 0x0018 (0x0018 - 0x0000)
struct FVAL_PostDialogueChainGiftInfo final
{
public:
	class AValeriaCharacter*                      PlayerCharacter;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVillagerGiftReceiverComponent*         GiftReceiver;                                      // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBagSlotLocation                       BagSlotLocation;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PostDialogueChainGiftInfo) == 0x000008, "Wrong alignment on FVAL_PostDialogueChainGiftInfo");
static_assert(sizeof(FVAL_PostDialogueChainGiftInfo) == 0x000018, "Wrong size on FVAL_PostDialogueChainGiftInfo");
static_assert(offsetof(FVAL_PostDialogueChainGiftInfo, PlayerCharacter) == 0x000000, "Member 'FVAL_PostDialogueChainGiftInfo::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(FVAL_PostDialogueChainGiftInfo, GiftReceiver) == 0x000008, "Member 'FVAL_PostDialogueChainGiftInfo::GiftReceiver' has a wrong offset!");
static_assert(offsetof(FVAL_PostDialogueChainGiftInfo, BagSlotLocation) == 0x000010, "Member 'FVAL_PostDialogueChainGiftInfo::BagSlotLocation' has a wrong offset!");

// ScriptStruct Palia.PlayerGatherCount
// 0x0020 (0x0020 - 0x0000)
struct FPlayerGatherCount final
{
public:
	TArray<struct FGuid>                          PlayerIds;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 GatherCounts;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerGatherCount) == 0x000008, "Wrong alignment on FPlayerGatherCount");
static_assert(sizeof(FPlayerGatherCount) == 0x000020, "Wrong size on FPlayerGatherCount");
static_assert(offsetof(FPlayerGatherCount, PlayerIds) == 0x000000, "Member 'FPlayerGatherCount::PlayerIds' has a wrong offset!");
static_assert(offsetof(FPlayerGatherCount, GatherCounts) == 0x000010, "Member 'FPlayerGatherCount::GatherCounts' has a wrong offset!");

// ScriptStruct Palia.GearTransientData
// 0x0028 (0x0028 - 0x0000)
struct FGearTransientData final
{
public:
	TArray<struct FGearTransientDataEntry>        Items;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGearSlotMetadata>              UnequippedGearSlots;                               // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EE[0x8];                                     // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGearTransientData) == 0x000008, "Wrong alignment on FGearTransientData");
static_assert(sizeof(FGearTransientData) == 0x000028, "Wrong size on FGearTransientData");
static_assert(offsetof(FGearTransientData, Items) == 0x000000, "Member 'FGearTransientData::Items' has a wrong offset!");
static_assert(offsetof(FGearTransientData, UnequippedGearSlots) == 0x000010, "Member 'FGearTransientData::UnequippedGearSlots' has a wrong offset!");

// ScriptStruct Palia.VAL_UnstuckStackMap
// 0x0068 (0x0068 - 0x0000)
struct FVAL_UnstuckStackMap final
{
public:
	uint8                                         Pad_22EF[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FVector>                   SavedUnstuckLocations;                             // 0x0008(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_22F0[0x10];                                    // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_UnstuckStackMap) == 0x000008, "Wrong alignment on FVAL_UnstuckStackMap");
static_assert(sizeof(FVAL_UnstuckStackMap) == 0x000068, "Wrong size on FVAL_UnstuckStackMap");
static_assert(offsetof(FVAL_UnstuckStackMap, SavedUnstuckLocations) == 0x000008, "Member 'FVAL_UnstuckStackMap::SavedUnstuckLocations' has a wrong offset!");

// ScriptStruct Palia.RomancePinResetTime
// 0x000C (0x000C - 0x0000)
struct FRomancePinResetTime final
{
public:
	ES6DayOfWeek                                  DayOfWeek;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Hour;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRomancePinResetTime) == 0x000004, "Wrong alignment on FRomancePinResetTime");
static_assert(sizeof(FRomancePinResetTime) == 0x00000C, "Wrong size on FRomancePinResetTime");
static_assert(offsetof(FRomancePinResetTime, DayOfWeek) == 0x000000, "Member 'FRomancePinResetTime::DayOfWeek' has a wrong offset!");
static_assert(offsetof(FRomancePinResetTime, Hour) == 0x000004, "Member 'FRomancePinResetTime::Hour' has a wrong offset!");
static_assert(offsetof(FRomancePinResetTime, Minute) == 0x000008, "Member 'FRomancePinResetTime::Minute' has a wrong offset!");

// ScriptStruct Palia.VitalAmount
// 0x0008 (0x0008 - 0x0000)
struct FVitalAmount final
{
public:
	EVitalType                                    Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVitalAmount) == 0x000004, "Wrong alignment on FVitalAmount");
static_assert(sizeof(FVitalAmount) == 0x000008, "Wrong size on FVitalAmount");
static_assert(offsetof(FVitalAmount, Type) == 0x000000, "Member 'FVitalAmount::Type' has a wrong offset!");
static_assert(offsetof(FVitalAmount, Amount) == 0x000004, "Member 'FVitalAmount::Amount' has a wrong offset!");

// ScriptStruct Palia.TitleAndRowsInfo
// 0x0020 (0x0020 - 0x0000)
struct FTitleAndRowsInfo final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Rows;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTitleAndRowsInfo) == 0x000008, "Wrong alignment on FTitleAndRowsInfo");
static_assert(sizeof(FTitleAndRowsInfo) == 0x000020, "Wrong size on FTitleAndRowsInfo");
static_assert(offsetof(FTitleAndRowsInfo, Title) == 0x000000, "Member 'FTitleAndRowsInfo::Title' has a wrong offset!");
static_assert(offsetof(FTitleAndRowsInfo, Rows) == 0x000010, "Member 'FTitleAndRowsInfo::Rows' has a wrong offset!");

// ScriptStruct Palia.UseEventParams
// 0x0028 (0x0028 - 0x0000)
struct FUseEventParams final
{
public:
	EUseEventType                                 Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        Targets;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UInputAction>            InputAction;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandled;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F4[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUseEventParams) == 0x000008, "Wrong alignment on FUseEventParams");
static_assert(sizeof(FUseEventParams) == 0x000028, "Wrong size on FUseEventParams");
static_assert(offsetof(FUseEventParams, Type) == 0x000000, "Member 'FUseEventParams::Type' has a wrong offset!");
static_assert(offsetof(FUseEventParams, Targets) == 0x000008, "Member 'FUseEventParams::Targets' has a wrong offset!");
static_assert(offsetof(FUseEventParams, InputAction) == 0x000018, "Member 'FUseEventParams::InputAction' has a wrong offset!");
static_assert(offsetof(FUseEventParams, bHandled) == 0x000020, "Member 'FUseEventParams::bHandled' has a wrong offset!");

// ScriptStruct Palia.VAL_PendingClaimInventoryRequestDelegates
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FVAL_PendingClaimInventoryRequestDelegates final
{
public:
	uint8                                         Pad_22F5[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_PendingClaimInventoryRequestDelegates) == 0x000008, "Wrong alignment on FVAL_PendingClaimInventoryRequestDelegates");
static_assert(sizeof(FVAL_PendingClaimInventoryRequestDelegates) == 0x000020, "Wrong size on FVAL_PendingClaimInventoryRequestDelegates");

// ScriptStruct Palia.ServerUseEventParams
// 0x0010 (0x0010 - 0x0000)
struct FServerUseEventParams final
{
public:
	struct FBagSlotLocation                       SlotUsed;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                Target;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerUseEventParams) == 0x000008, "Wrong alignment on FServerUseEventParams");
static_assert(sizeof(FServerUseEventParams) == 0x000010, "Wrong size on FServerUseEventParams");
static_assert(offsetof(FServerUseEventParams, SlotUsed) == 0x000000, "Member 'FServerUseEventParams::SlotUsed' has a wrong offset!");
static_assert(offsetof(FServerUseEventParams, Target) == 0x000008, "Member 'FServerUseEventParams::Target' has a wrong offset!");

// ScriptStruct Palia.SelfUseEventResult
// 0x0002 (0x0002 - 0x0000)
struct FSelfUseEventResult final
{
public:
	bool                                          bHandled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumed;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSelfUseEventResult) == 0x000001, "Wrong alignment on FSelfUseEventResult");
static_assert(sizeof(FSelfUseEventResult) == 0x000002, "Wrong size on FSelfUseEventResult");
static_assert(offsetof(FSelfUseEventResult, bHandled) == 0x000000, "Member 'FSelfUseEventResult::bHandled' has a wrong offset!");
static_assert(offsetof(FSelfUseEventResult, bConsumed) == 0x000001, "Member 'FSelfUseEventResult::bConsumed' has a wrong offset!");

// ScriptStruct Palia.UseEventResults
// 0x0018 (0x0018 - 0x0000)
struct FUseEventResults final
{
public:
	TArray<class UObject*>                        Targets;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHandled;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSentToServer;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumed;                                         // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F6[0x5];                                     // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUseEventResults) == 0x000008, "Wrong alignment on FUseEventResults");
static_assert(sizeof(FUseEventResults) == 0x000018, "Wrong size on FUseEventResults");
static_assert(offsetof(FUseEventResults, Targets) == 0x000000, "Member 'FUseEventResults::Targets' has a wrong offset!");
static_assert(offsetof(FUseEventResults, bHandled) == 0x000010, "Member 'FUseEventResults::bHandled' has a wrong offset!");
static_assert(offsetof(FUseEventResults, bSentToServer) == 0x000011, "Member 'FUseEventResults::bSentToServer' has a wrong offset!");
static_assert(offsetof(FUseEventResults, bConsumed) == 0x000012, "Member 'FUseEventResults::bConsumed' has a wrong offset!");

// ScriptStruct Palia.BlobIdSerializeItem
// 0x0004 (0x0010 - 0x000C)
struct FBlobIdSerializeItem final : public FFastArraySerializerItem
{
public:
	struct FSessionActorId                        ID;                                                // 0x000C(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlobIdSerializeItem) == 0x000004, "Wrong alignment on FBlobIdSerializeItem");
static_assert(sizeof(FBlobIdSerializeItem) == 0x000010, "Wrong size on FBlobIdSerializeItem");
static_assert(offsetof(FBlobIdSerializeItem, ID) == 0x00000C, "Member 'FBlobIdSerializeItem::ID' has a wrong offset!");

// ScriptStruct Palia.BlobIdSerializer
// 0x0010 (0x0118 - 0x0108)
struct FBlobIdSerializer final : public FFastArraySerializer
{
public:
	TArray<struct FBlobIdSerializeItem>           Ids;                                               // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlobIdSerializer) == 0x000008, "Wrong alignment on FBlobIdSerializer");
static_assert(sizeof(FBlobIdSerializer) == 0x000118, "Wrong size on FBlobIdSerializer");
static_assert(offsetof(FBlobIdSerializer, Ids) == 0x000108, "Member 'FBlobIdSerializer::Ids' has a wrong offset!");

// ScriptStruct Palia.InteractEventParams
// 0x0018 (0x0018 - 0x0000)
struct FInteractEventParams final
{
public:
	TArray<class UObject*>                        Targets;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EInteractEventType                            Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractEventIndex                           Index;                                             // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputType                                    InputType;                                         // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Handled;                                           // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F7[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractEventParams) == 0x000008, "Wrong alignment on FInteractEventParams");
static_assert(sizeof(FInteractEventParams) == 0x000018, "Wrong size on FInteractEventParams");
static_assert(offsetof(FInteractEventParams, Targets) == 0x000000, "Member 'FInteractEventParams::Targets' has a wrong offset!");
static_assert(offsetof(FInteractEventParams, Type) == 0x000010, "Member 'FInteractEventParams::Type' has a wrong offset!");
static_assert(offsetof(FInteractEventParams, Index) == 0x000011, "Member 'FInteractEventParams::Index' has a wrong offset!");
static_assert(offsetof(FInteractEventParams, InputType) == 0x000012, "Member 'FInteractEventParams::InputType' has a wrong offset!");
static_assert(offsetof(FInteractEventParams, Handled) == 0x000013, "Member 'FInteractEventParams::Handled' has a wrong offset!");

// ScriptStruct Palia.PersistVector
// 0x000C (0x000C - 0x0000)
struct FPersistVector final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersistVector) == 0x000004, "Wrong alignment on FPersistVector");
static_assert(sizeof(FPersistVector) == 0x00000C, "Wrong size on FPersistVector");
static_assert(offsetof(FPersistVector, X) == 0x000000, "Member 'FPersistVector::X' has a wrong offset!");
static_assert(offsetof(FPersistVector, Y) == 0x000004, "Member 'FPersistVector::Y' has a wrong offset!");
static_assert(offsetof(FPersistVector, Z) == 0x000008, "Member 'FPersistVector::Z' has a wrong offset!");

// ScriptStruct Palia.RequirementConfig
// 0x0090 (0x0090 - 0x0000)
struct FRequirementConfig final
{
public:
	struct FTagFilter                             ItemTags;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTagFilter                             ItemTagsExclude;                                   // 0x0028(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTagFilter                             PlayerActionTags;                                  // 0x0050(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERequirementType                              ItemUseType;                                       // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F8[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemAmount;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    VitalRequired;                                     // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F9[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VitalAmountRequired;                               // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequirementConfig) == 0x000008, "Wrong alignment on FRequirementConfig");
static_assert(sizeof(FRequirementConfig) == 0x000090, "Wrong size on FRequirementConfig");
static_assert(offsetof(FRequirementConfig, ItemTags) == 0x000000, "Member 'FRequirementConfig::ItemTags' has a wrong offset!");
static_assert(offsetof(FRequirementConfig, ItemTagsExclude) == 0x000028, "Member 'FRequirementConfig::ItemTagsExclude' has a wrong offset!");
static_assert(offsetof(FRequirementConfig, PlayerActionTags) == 0x000050, "Member 'FRequirementConfig::PlayerActionTags' has a wrong offset!");
static_assert(offsetof(FRequirementConfig, ItemType) == 0x000078, "Member 'FRequirementConfig::ItemType' has a wrong offset!");
static_assert(offsetof(FRequirementConfig, ItemUseType) == 0x000080, "Member 'FRequirementConfig::ItemUseType' has a wrong offset!");
static_assert(offsetof(FRequirementConfig, ItemAmount) == 0x000084, "Member 'FRequirementConfig::ItemAmount' has a wrong offset!");
static_assert(offsetof(FRequirementConfig, VitalRequired) == 0x000088, "Member 'FRequirementConfig::VitalRequired' has a wrong offset!");
static_assert(offsetof(FRequirementConfig, VitalAmountRequired) == 0x00008C, "Member 'FRequirementConfig::VitalAmountRequired' has a wrong offset!");

// ScriptStruct Palia.Requirement
// 0x00B0 (0x00B0 - 0x0000)
struct FRequirement final
{
public:
	struct FTagFilter                             ItemTags;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTagFilter                             ItemTagsExclude;                                   // 0x0028(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTagFilter                             PlayerActionTags;                                  // 0x0050(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERequirementType                              ItemUseType;                                       // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FA[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemAmount;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    VitalRequired;                                     // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FB[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VitalAmountRequired;                               // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequirement) == 0x000008, "Wrong alignment on FRequirement");
static_assert(sizeof(FRequirement) == 0x0000B0, "Wrong size on FRequirement");
static_assert(offsetof(FRequirement, ItemTags) == 0x000000, "Member 'FRequirement::ItemTags' has a wrong offset!");
static_assert(offsetof(FRequirement, ItemTagsExclude) == 0x000028, "Member 'FRequirement::ItemTagsExclude' has a wrong offset!");
static_assert(offsetof(FRequirement, PlayerActionTags) == 0x000050, "Member 'FRequirement::PlayerActionTags' has a wrong offset!");
static_assert(offsetof(FRequirement, ItemType) == 0x000078, "Member 'FRequirement::ItemType' has a wrong offset!");
static_assert(offsetof(FRequirement, ItemUseType) == 0x0000A0, "Member 'FRequirement::ItemUseType' has a wrong offset!");
static_assert(offsetof(FRequirement, ItemAmount) == 0x0000A4, "Member 'FRequirement::ItemAmount' has a wrong offset!");
static_assert(offsetof(FRequirement, VitalRequired) == 0x0000A8, "Member 'FRequirement::VitalRequired' has a wrong offset!");
static_assert(offsetof(FRequirement, VitalAmountRequired) == 0x0000AC, "Member 'FRequirement::VitalAmountRequired' has a wrong offset!");

// ScriptStruct Palia.SlidingPuzzleMove
// 0x0038 (0x0038 - 0x0000)
struct FSlidingPuzzleMove final
{
public:
	class ASlidingPuzzlePiece*                    MovingPiece;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovingPieceOrigin;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovingPieceTarget;                                 // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlidingPuzzleMove) == 0x000008, "Wrong alignment on FSlidingPuzzleMove");
static_assert(sizeof(FSlidingPuzzleMove) == 0x000038, "Wrong size on FSlidingPuzzleMove");
static_assert(offsetof(FSlidingPuzzleMove, MovingPiece) == 0x000000, "Member 'FSlidingPuzzleMove::MovingPiece' has a wrong offset!");
static_assert(offsetof(FSlidingPuzzleMove, MovingPieceOrigin) == 0x000008, "Member 'FSlidingPuzzleMove::MovingPieceOrigin' has a wrong offset!");
static_assert(offsetof(FSlidingPuzzleMove, MovingPieceTarget) == 0x000020, "Member 'FSlidingPuzzleMove::MovingPieceTarget' has a wrong offset!");

// ScriptStruct Palia.Requirements
// 0x0010 (0x0010 - 0x0000)
struct FRequirements final
{
public:
	TArray<struct FRequirement>                   Requirements;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRequirements) == 0x000008, "Wrong alignment on FRequirements");
static_assert(sizeof(FRequirements) == 0x000010, "Wrong size on FRequirements");
static_assert(offsetof(FRequirements, Requirements) == 0x000000, "Member 'FRequirements::Requirements' has a wrong offset!");

// ScriptStruct Palia.PlacementLimitByGameplayTag
// 0x0048 (0x0048 - 0x0000)
struct FPlacementLimitByGameplayTag final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         LimitAmount;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HousingSlotLimitAmount;                            // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ErrorMessage;                                      // 0x0028(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SlotLimitErrorMessage;                             // 0x0038(0x0010)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlacementLimitByGameplayTag) == 0x000008, "Wrong alignment on FPlacementLimitByGameplayTag");
static_assert(sizeof(FPlacementLimitByGameplayTag) == 0x000048, "Wrong size on FPlacementLimitByGameplayTag");
static_assert(offsetof(FPlacementLimitByGameplayTag, Tags) == 0x000000, "Member 'FPlacementLimitByGameplayTag::Tags' has a wrong offset!");
static_assert(offsetof(FPlacementLimitByGameplayTag, LimitAmount) == 0x000020, "Member 'FPlacementLimitByGameplayTag::LimitAmount' has a wrong offset!");
static_assert(offsetof(FPlacementLimitByGameplayTag, HousingSlotLimitAmount) == 0x000024, "Member 'FPlacementLimitByGameplayTag::HousingSlotLimitAmount' has a wrong offset!");
static_assert(offsetof(FPlacementLimitByGameplayTag, ErrorMessage) == 0x000028, "Member 'FPlacementLimitByGameplayTag::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FPlacementLimitByGameplayTag, SlotLimitErrorMessage) == 0x000038, "Member 'FPlacementLimitByGameplayTag::SlotLimitErrorMessage' has a wrong offset!");

// ScriptStruct Palia.GatherableGlobalConfig_Text
// 0x01E0 (0x01E0 - 0x0000)
struct FGatherableGlobalConfig_Text final
{
public:
	class FText                                   AlreadyLearnedRecipe;                              // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CharacterInventoryOrVitalsNull;                    // 0x0018(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CharacterNull;                                     // 0x0030(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CheckGatherFailed;                                 // 0x0048(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CouldntGatherItem;                                 // 0x0060(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DisconnectSocketsFirst;                            // 0x0078(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   EquipRightToolToCollect;                           // 0x0090(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   GardeningCouldntGatherItem;                        // 0x00A8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   GatherChildrenBeforeParent;                        // 0x00C0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   GatherItemXFirst;                                  // 0x00D8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   GatherItemNull;                                    // 0x00F0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   InventoryFull;                                     // 0x0108(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LimitedStock;                                      // 0x0120(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   NotHighEnoughLevelToUse;                           // 0x0138(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   NotEnoughRequiredItem;                             // 0x0150(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   NotEnoughX;                                        // 0x0168(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   PlayerLimitedStock;                                // 0x0180(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   LevelerTimerActive;                                // 0x0198(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   FocusTooFullToUse;                                 // 0x01B0(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   NotAllowedToHarvest;                               // 0x01C8(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGatherableGlobalConfig_Text) == 0x000008, "Wrong alignment on FGatherableGlobalConfig_Text");
static_assert(sizeof(FGatherableGlobalConfig_Text) == 0x0001E0, "Wrong size on FGatherableGlobalConfig_Text");
static_assert(offsetof(FGatherableGlobalConfig_Text, AlreadyLearnedRecipe) == 0x000000, "Member 'FGatherableGlobalConfig_Text::AlreadyLearnedRecipe' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, CharacterInventoryOrVitalsNull) == 0x000018, "Member 'FGatherableGlobalConfig_Text::CharacterInventoryOrVitalsNull' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, CharacterNull) == 0x000030, "Member 'FGatherableGlobalConfig_Text::CharacterNull' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, CheckGatherFailed) == 0x000048, "Member 'FGatherableGlobalConfig_Text::CheckGatherFailed' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, CouldntGatherItem) == 0x000060, "Member 'FGatherableGlobalConfig_Text::CouldntGatherItem' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, DisconnectSocketsFirst) == 0x000078, "Member 'FGatherableGlobalConfig_Text::DisconnectSocketsFirst' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, EquipRightToolToCollect) == 0x000090, "Member 'FGatherableGlobalConfig_Text::EquipRightToolToCollect' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, GardeningCouldntGatherItem) == 0x0000A8, "Member 'FGatherableGlobalConfig_Text::GardeningCouldntGatherItem' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, GatherChildrenBeforeParent) == 0x0000C0, "Member 'FGatherableGlobalConfig_Text::GatherChildrenBeforeParent' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, GatherItemXFirst) == 0x0000D8, "Member 'FGatherableGlobalConfig_Text::GatherItemXFirst' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, GatherItemNull) == 0x0000F0, "Member 'FGatherableGlobalConfig_Text::GatherItemNull' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, InventoryFull) == 0x000108, "Member 'FGatherableGlobalConfig_Text::InventoryFull' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, LimitedStock) == 0x000120, "Member 'FGatherableGlobalConfig_Text::LimitedStock' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, NotHighEnoughLevelToUse) == 0x000138, "Member 'FGatherableGlobalConfig_Text::NotHighEnoughLevelToUse' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, NotEnoughRequiredItem) == 0x000150, "Member 'FGatherableGlobalConfig_Text::NotEnoughRequiredItem' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, NotEnoughX) == 0x000168, "Member 'FGatherableGlobalConfig_Text::NotEnoughX' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, PlayerLimitedStock) == 0x000180, "Member 'FGatherableGlobalConfig_Text::PlayerLimitedStock' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, LevelerTimerActive) == 0x000198, "Member 'FGatherableGlobalConfig_Text::LevelerTimerActive' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, FocusTooFullToUse) == 0x0001B0, "Member 'FGatherableGlobalConfig_Text::FocusTooFullToUse' has a wrong offset!");
static_assert(offsetof(FGatherableGlobalConfig_Text, NotAllowedToHarvest) == 0x0001C8, "Member 'FGatherableGlobalConfig_Text::NotAllowedToHarvest' has a wrong offset!");

// ScriptStruct Palia.GeneratedHeatmapPoint
// 0x0020 (0x0020 - 0x0000)
struct FGeneratedHeatmapPoint final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneratedHeatmapPoint) == 0x000008, "Wrong alignment on FGeneratedHeatmapPoint");
static_assert(sizeof(FGeneratedHeatmapPoint) == 0x000020, "Wrong size on FGeneratedHeatmapPoint");
static_assert(offsetof(FGeneratedHeatmapPoint, Time) == 0x000000, "Member 'FGeneratedHeatmapPoint::Time' has a wrong offset!");
static_assert(offsetof(FGeneratedHeatmapPoint, Location) == 0x000008, "Member 'FGeneratedHeatmapPoint::Location' has a wrong offset!");

// ScriptStruct Palia.GameplayAbilitySpecEventData
// 0x01A8 (0x01A8 - 0x0000)
struct FGameplayAbilitySpecEventData final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x00F8)(NativeAccessSpecifierPublic)
	struct FGameplayEventData                     EventData;                                         // 0x00F8(0x00B0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayAbilitySpecEventData) == 0x000008, "Wrong alignment on FGameplayAbilitySpecEventData");
static_assert(sizeof(FGameplayAbilitySpecEventData) == 0x0001A8, "Wrong size on FGameplayAbilitySpecEventData");
static_assert(offsetof(FGameplayAbilitySpecEventData, Spec) == 0x000000, "Member 'FGameplayAbilitySpecEventData::Spec' has a wrong offset!");
static_assert(offsetof(FGameplayAbilitySpecEventData, EventData) == 0x0000F8, "Member 'FGameplayAbilitySpecEventData::EventData' has a wrong offset!");

// ScriptStruct Palia.TileAdjacencyRule
// 0x000C (0x000C - 0x0000)
struct FTileAdjacencyRule final
{
public:
	EHotPotNavigationDirection                    Direction;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePrevious;                                      // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FD[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHotPotTileRepresentation> AdjacentTile;                                      // 0x0004(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileAdjacencyRule) == 0x000004, "Wrong alignment on FTileAdjacencyRule");
static_assert(sizeof(FTileAdjacencyRule) == 0x00000C, "Wrong size on FTileAdjacencyRule");
static_assert(offsetof(FTileAdjacencyRule, Direction) == 0x000000, "Member 'FTileAdjacencyRule::Direction' has a wrong offset!");
static_assert(offsetof(FTileAdjacencyRule, bUsePrevious) == 0x000001, "Member 'FTileAdjacencyRule::bUsePrevious' has a wrong offset!");
static_assert(offsetof(FTileAdjacencyRule, AdjacentTile) == 0x000004, "Member 'FTileAdjacencyRule::AdjacentTile' has a wrong offset!");

// ScriptStruct Palia.HousingPlayerDataSerializer
// 0x0018 (0x0120 - 0x0108)
struct FHousingPlayerDataSerializer final : public FFastArraySerializer
{
public:
	TArray<struct FHousingPlayerDataSerializeItem> HousingPlayerData;                                 // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AValeriaGameState>       CachedGameState;                                   // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHousingPlayerDataSerializer) == 0x000008, "Wrong alignment on FHousingPlayerDataSerializer");
static_assert(sizeof(FHousingPlayerDataSerializer) == 0x000120, "Wrong size on FHousingPlayerDataSerializer");
static_assert(offsetof(FHousingPlayerDataSerializer, HousingPlayerData) == 0x000108, "Member 'FHousingPlayerDataSerializer::HousingPlayerData' has a wrong offset!");
static_assert(offsetof(FHousingPlayerDataSerializer, CachedGameState) == 0x000118, "Member 'FHousingPlayerDataSerializer::CachedGameState' has a wrong offset!");

// ScriptStruct Palia.HouseSlotPurchaseCost
// 0x0010 (0x0010 - 0x0000)
struct FHouseSlotPurchaseCost final
{
public:
	TArray<struct FLevelerRequirement>            Options;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHouseSlotPurchaseCost) == 0x000008, "Wrong alignment on FHouseSlotPurchaseCost");
static_assert(sizeof(FHouseSlotPurchaseCost) == 0x000010, "Wrong size on FHouseSlotPurchaseCost");
static_assert(offsetof(FHouseSlotPurchaseCost, Options) == 0x000000, "Member 'FHouseSlotPurchaseCost::Options' has a wrong offset!");

// ScriptStruct Palia.Inventory_RemoveContext
// 0x0018 (0x0018 - 0x0000)
struct FInventory_RemoveContext final
{
public:
	class AValeriaCharacter*                      ChangedBy;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBagSlotLocation                       OldLocation;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         AmountToRemove;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FE[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventory_RemoveContext) == 0x000008, "Wrong alignment on FInventory_RemoveContext");
static_assert(sizeof(FInventory_RemoveContext) == 0x000018, "Wrong size on FInventory_RemoveContext");
static_assert(offsetof(FInventory_RemoveContext, ChangedBy) == 0x000000, "Member 'FInventory_RemoveContext::ChangedBy' has a wrong offset!");
static_assert(offsetof(FInventory_RemoveContext, OldLocation) == 0x000008, "Member 'FInventory_RemoveContext::OldLocation' has a wrong offset!");
static_assert(offsetof(FInventory_RemoveContext, AmountToRemove) == 0x000010, "Member 'FInventory_RemoveContext::AmountToRemove' has a wrong offset!");

// ScriptStruct Palia.HousingBuildingLimits
// 0x000C (0x000C - 0x0000)
struct FHousingBuildingLimits final
{
public:
	int32                                         CurrentHousingLimit;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalHousingLimit;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberPlacedBuildings;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHousingBuildingLimits) == 0x000004, "Wrong alignment on FHousingBuildingLimits");
static_assert(sizeof(FHousingBuildingLimits) == 0x00000C, "Wrong size on FHousingBuildingLimits");
static_assert(offsetof(FHousingBuildingLimits, CurrentHousingLimit) == 0x000000, "Member 'FHousingBuildingLimits::CurrentHousingLimit' has a wrong offset!");
static_assert(offsetof(FHousingBuildingLimits, TotalHousingLimit) == 0x000004, "Member 'FHousingBuildingLimits::TotalHousingLimit' has a wrong offset!");
static_assert(offsetof(FHousingBuildingLimits, NumberPlacedBuildings) == 0x000008, "Member 'FHousingBuildingLimits::NumberPlacedBuildings' has a wrong offset!");

// ScriptStruct Palia.VAL_AnimNode_TrackedRigidBody
// 0x0010 (0x0960 - 0x0950)
struct FVAL_AnimNode_TrackedRigidBody final : public FAnimNode_RigidBody
{
public:
	EVAL_CharacterCustomization_MeshType          MeshEnactedUpon;                                   // 0x0950(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22FF[0xF];                                     // 0x0951(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_AnimNode_TrackedRigidBody) == 0x000010, "Wrong alignment on FVAL_AnimNode_TrackedRigidBody");
static_assert(sizeof(FVAL_AnimNode_TrackedRigidBody) == 0x000960, "Wrong size on FVAL_AnimNode_TrackedRigidBody");
static_assert(offsetof(FVAL_AnimNode_TrackedRigidBody, MeshEnactedUpon) == 0x000950, "Member 'FVAL_AnimNode_TrackedRigidBody::MeshEnactedUpon' has a wrong offset!");

// ScriptStruct Palia.MultiplayerDecorLocking
// 0x0058 (0x0058 - 0x0000)
struct FMultiplayerDecorLocking final
{
public:
	class AValeriaCharacter*                      Character;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSessionActorId                        SessionId;                                         // 0x0008(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2300[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bObtainedLock;                                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoClientVisuals;                                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2301[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Client_VisualRepresentation;                       // 0x0048(0x0008)(ZeroConstructor, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Server_LockStartTime;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerDecorLocking) == 0x000008, "Wrong alignment on FMultiplayerDecorLocking");
static_assert(sizeof(FMultiplayerDecorLocking) == 0x000058, "Wrong size on FMultiplayerDecorLocking");
static_assert(offsetof(FMultiplayerDecorLocking, Character) == 0x000000, "Member 'FMultiplayerDecorLocking::Character' has a wrong offset!");
static_assert(offsetof(FMultiplayerDecorLocking, SessionId) == 0x000008, "Member 'FMultiplayerDecorLocking::SessionId' has a wrong offset!");
static_assert(offsetof(FMultiplayerDecorLocking, Position) == 0x000010, "Member 'FMultiplayerDecorLocking::Position' has a wrong offset!");
static_assert(offsetof(FMultiplayerDecorLocking, Rotation) == 0x000028, "Member 'FMultiplayerDecorLocking::Rotation' has a wrong offset!");
static_assert(offsetof(FMultiplayerDecorLocking, bObtainedLock) == 0x000040, "Member 'FMultiplayerDecorLocking::bObtainedLock' has a wrong offset!");
static_assert(offsetof(FMultiplayerDecorLocking, bNoClientVisuals) == 0x000041, "Member 'FMultiplayerDecorLocking::bNoClientVisuals' has a wrong offset!");
static_assert(offsetof(FMultiplayerDecorLocking, Client_VisualRepresentation) == 0x000048, "Member 'FMultiplayerDecorLocking::Client_VisualRepresentation' has a wrong offset!");
static_assert(offsetof(FMultiplayerDecorLocking, Server_LockStartTime) == 0x000050, "Member 'FMultiplayerDecorLocking::Server_LockStartTime' has a wrong offset!");

// ScriptStruct Palia.SimpleDecorClientInfo
// 0x0010 (0x0010 - 0x0000)
struct FSimpleDecorClientInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHadChildren;                                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2302[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimpleDecorClientInfo) == 0x000008, "Wrong alignment on FSimpleDecorClientInfo");
static_assert(sizeof(FSimpleDecorClientInfo) == 0x000010, "Wrong size on FSimpleDecorClientInfo");
static_assert(offsetof(FSimpleDecorClientInfo, Actor) == 0x000000, "Member 'FSimpleDecorClientInfo::Actor' has a wrong offset!");
static_assert(offsetof(FSimpleDecorClientInfo, bHasHadChildren) == 0x000008, "Member 'FSimpleDecorClientInfo::bHasHadChildren' has a wrong offset!");

// ScriptStruct Palia.SimpleDecorPlaceablesArray
// 0x0020 (0x0128 - 0x0108)
struct FSimpleDecorPlaceablesArray final : public FFastArraySerializer
{
public:
	TArray<struct FSimpleDecorPlaceable>          SimpleDecors;                                      // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UHousingPlaceablesComponent> Parent;                                            // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AHousingChunkingDecorReplicationActor> ChunkingParent;                                    // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleDecorPlaceablesArray) == 0x000008, "Wrong alignment on FSimpleDecorPlaceablesArray");
static_assert(sizeof(FSimpleDecorPlaceablesArray) == 0x000128, "Wrong size on FSimpleDecorPlaceablesArray");
static_assert(offsetof(FSimpleDecorPlaceablesArray, SimpleDecors) == 0x000108, "Member 'FSimpleDecorPlaceablesArray::SimpleDecors' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceablesArray, Parent) == 0x000118, "Member 'FSimpleDecorPlaceablesArray::Parent' has a wrong offset!");
static_assert(offsetof(FSimpleDecorPlaceablesArray, ChunkingParent) == 0x000120, "Member 'FSimpleDecorPlaceablesArray::ChunkingParent' has a wrong offset!");

// ScriptStruct Palia.RecipeIdToOtherRecipeIds
// 0x0020 (0x0020 - 0x0000)
struct FRecipeIdToOtherRecipeIds final
{
public:
	int32                                         OriginId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2303[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OtherIds;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPopulatedOther;                                   // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2304[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipeIdToOtherRecipeIds) == 0x000008, "Wrong alignment on FRecipeIdToOtherRecipeIds");
static_assert(sizeof(FRecipeIdToOtherRecipeIds) == 0x000020, "Wrong size on FRecipeIdToOtherRecipeIds");
static_assert(offsetof(FRecipeIdToOtherRecipeIds, OriginId) == 0x000000, "Member 'FRecipeIdToOtherRecipeIds::OriginId' has a wrong offset!");
static_assert(offsetof(FRecipeIdToOtherRecipeIds, OtherIds) == 0x000008, "Member 'FRecipeIdToOtherRecipeIds::OtherIds' has a wrong offset!");
static_assert(offsetof(FRecipeIdToOtherRecipeIds, bPopulatedOther) == 0x000018, "Member 'FRecipeIdToOtherRecipeIds::bPopulatedOther' has a wrong offset!");

// ScriptStruct Palia.HousingPlotSpawningItem
// 0x0058 (0x0058 - 0x0000)
struct FHousingPlotSpawningItem final
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemTypeToSpawn;                                   // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHousingPlotSpawningItem) == 0x000008, "Wrong alignment on FHousingPlotSpawningItem");
static_assert(sizeof(FHousingPlotSpawningItem) == 0x000058, "Wrong size on FHousingPlotSpawningItem");
static_assert(offsetof(FHousingPlotSpawningItem, ItemTypeToSpawn) == 0x000000, "Member 'FHousingPlotSpawningItem::ItemTypeToSpawn' has a wrong offset!");
static_assert(offsetof(FHousingPlotSpawningItem, Position) == 0x000028, "Member 'FHousingPlotSpawningItem::Position' has a wrong offset!");
static_assert(offsetof(FHousingPlotSpawningItem, Rotation) == 0x000040, "Member 'FHousingPlotSpawningItem::Rotation' has a wrong offset!");

// ScriptStruct Palia.ConditionalHousingPlotSpawnItemList
// 0x0020 (0x0020 - 0x0000)
struct FConditionalHousingPlotSpawnItemList final
{
public:
	TArray<struct FPersistentTagFilter>           SpawnRequirements;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FHousingPlotSpawningItem>       SpawnItems;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConditionalHousingPlotSpawnItemList) == 0x000008, "Wrong alignment on FConditionalHousingPlotSpawnItemList");
static_assert(sizeof(FConditionalHousingPlotSpawnItemList) == 0x000020, "Wrong size on FConditionalHousingPlotSpawnItemList");
static_assert(offsetof(FConditionalHousingPlotSpawnItemList, SpawnRequirements) == 0x000000, "Member 'FConditionalHousingPlotSpawnItemList::SpawnRequirements' has a wrong offset!");
static_assert(offsetof(FConditionalHousingPlotSpawnItemList, SpawnItems) == 0x000010, "Member 'FConditionalHousingPlotSpawnItemList::SpawnItems' has a wrong offset!");

// ScriptStruct Palia.HousingPlotUnlock
// 0x0004 (0x0004 - 0x0000)
struct FHousingPlotUnlock final
{
public:
	int32                                         PersistId;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHousingPlotUnlock) == 0x000004, "Wrong alignment on FHousingPlotUnlock");
static_assert(sizeof(FHousingPlotUnlock) == 0x000004, "Wrong size on FHousingPlotUnlock");
static_assert(offsetof(FHousingPlotUnlock, PersistId) == 0x000000, "Member 'FHousingPlotUnlock::PersistId' has a wrong offset!");

// ScriptStruct Palia.HousingPlotUnlocksData
// 0x0010 (0x0010 - 0x0000)
struct FHousingPlotUnlocksData final
{
public:
	TArray<struct FHousingPlotUnlock>             PlotsUnlocked;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHousingPlotUnlocksData) == 0x000008, "Wrong alignment on FHousingPlotUnlocksData");
static_assert(sizeof(FHousingPlotUnlocksData) == 0x000010, "Wrong size on FHousingPlotUnlocksData");
static_assert(offsetof(FHousingPlotUnlocksData, PlotsUnlocked) == 0x000000, "Member 'FHousingPlotUnlocksData::PlotsUnlocked' has a wrong offset!");

// ScriptStruct Palia.IngredientTagConfig
// 0x0038 (0x0040 - 0x0008)
struct FIngredientTagConfig final : public FTableRowBase
{
public:
	class UTexture2D*                             Icon;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   NumberedDisplayName;                               // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIngredientTagConfig) == 0x000008, "Wrong alignment on FIngredientTagConfig");
static_assert(sizeof(FIngredientTagConfig) == 0x000040, "Wrong size on FIngredientTagConfig");
static_assert(offsetof(FIngredientTagConfig, Icon) == 0x000008, "Member 'FIngredientTagConfig::Icon' has a wrong offset!");
static_assert(offsetof(FIngredientTagConfig, DisplayName) == 0x000010, "Member 'FIngredientTagConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FIngredientTagConfig, NumberedDisplayName) == 0x000028, "Member 'FIngredientTagConfig::NumberedDisplayName' has a wrong offset!");

// ScriptStruct Palia.InstrumentPitch
// 0x0008 (0x0008 - 0x0000)
struct FInstrumentPitch final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstrumentPitch) == 0x000008, "Wrong alignment on FInstrumentPitch");
static_assert(sizeof(FInstrumentPitch) == 0x000008, "Wrong size on FInstrumentPitch");
static_assert(offsetof(FInstrumentPitch, Icon) == 0x000000, "Member 'FInstrumentPitch::Icon' has a wrong offset!");

// ScriptStruct Palia.GetTextParams
// 0x0050 (0x0050 - 0x0000)
struct FGetTextParams final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    VitalType;                                         // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2305[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VitalAmount;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    Vital2Type;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2306[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Vital2Amount;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2307[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FShopItemAdditionalCost>        AdditionalCost;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ShowIcon;                                          // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowKey;                                           // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowDisabled;                                      // 0x004A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTextOverridden;                                  // 0x004B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2308[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetTextParams) == 0x000008, "Wrong alignment on FGetTextParams");
static_assert(sizeof(FGetTextParams) == 0x000050, "Wrong size on FGetTextParams");
static_assert(offsetof(FGetTextParams, Icon) == 0x000000, "Member 'FGetTextParams::Icon' has a wrong offset!");
static_assert(offsetof(FGetTextParams, Text) == 0x000008, "Member 'FGetTextParams::Text' has a wrong offset!");
static_assert(offsetof(FGetTextParams, Amount) == 0x000020, "Member 'FGetTextParams::Amount' has a wrong offset!");
static_assert(offsetof(FGetTextParams, VitalType) == 0x000024, "Member 'FGetTextParams::VitalType' has a wrong offset!");
static_assert(offsetof(FGetTextParams, VitalAmount) == 0x000028, "Member 'FGetTextParams::VitalAmount' has a wrong offset!");
static_assert(offsetof(FGetTextParams, Vital2Type) == 0x00002C, "Member 'FGetTextParams::Vital2Type' has a wrong offset!");
static_assert(offsetof(FGetTextParams, Vital2Amount) == 0x000030, "Member 'FGetTextParams::Vital2Amount' has a wrong offset!");
static_assert(offsetof(FGetTextParams, AdditionalCost) == 0x000038, "Member 'FGetTextParams::AdditionalCost' has a wrong offset!");
static_assert(offsetof(FGetTextParams, ShowIcon) == 0x000048, "Member 'FGetTextParams::ShowIcon' has a wrong offset!");
static_assert(offsetof(FGetTextParams, ShowKey) == 0x000049, "Member 'FGetTextParams::ShowKey' has a wrong offset!");
static_assert(offsetof(FGetTextParams, ShowDisabled) == 0x00004A, "Member 'FGetTextParams::ShowDisabled' has a wrong offset!");
static_assert(offsetof(FGetTextParams, IsTextOverridden) == 0x00004B, "Member 'FGetTextParams::IsTextOverridden' has a wrong offset!");

// ScriptStruct Palia.InteractablePlatePayload
// 0x0002 (0x0002 - 0x0000)
struct FInteractablePlatePayload final
{
public:
	EInteractablePlateVerticalOffsetDirection     PlateDirection;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldShowQuantityWhenViable;                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractablePlatePayload) == 0x000001, "Wrong alignment on FInteractablePlatePayload");
static_assert(sizeof(FInteractablePlatePayload) == 0x000002, "Wrong size on FInteractablePlatePayload");
static_assert(offsetof(FInteractablePlatePayload, PlateDirection) == 0x000000, "Member 'FInteractablePlatePayload::PlateDirection' has a wrong offset!");
static_assert(offsetof(FInteractablePlatePayload, ShouldShowQuantityWhenViable) == 0x000001, "Member 'FInteractablePlatePayload::ShouldShowQuantityWhenViable' has a wrong offset!");

// ScriptStruct Palia.VAL_InteractorInteractableLock
// 0x0030 (0x0030 - 0x0000)
struct FVAL_InteractorInteractableLock final
{
public:
	struct FVAL_InteractorLockParams              Params;                                            // 0x0000(0x0028)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2309[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_InteractorInteractableLock) == 0x000008, "Wrong alignment on FVAL_InteractorInteractableLock");
static_assert(sizeof(FVAL_InteractorInteractableLock) == 0x000030, "Wrong size on FVAL_InteractorInteractableLock");
static_assert(offsetof(FVAL_InteractorInteractableLock, Params) == 0x000000, "Member 'FVAL_InteractorInteractableLock::Params' has a wrong offset!");
static_assert(offsetof(FVAL_InteractorInteractableLock, bLocked) == 0x000028, "Member 'FVAL_InteractorInteractableLock::bLocked' has a wrong offset!");

// ScriptStruct Palia.InventorySlot
// 0x0060 (0x0060 - 0x0000)
struct FInventorySlot final
{
public:
	struct FValeriaItem                           Item;                                              // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventorySlot) == 0x000008, "Wrong alignment on FInventorySlot");
static_assert(sizeof(FInventorySlot) == 0x000060, "Wrong size on FInventorySlot");
static_assert(offsetof(FInventorySlot, Item) == 0x000000, "Member 'FInventorySlot::Item' has a wrong offset!");

// ScriptStruct Palia.InventoryBag
// 0x0018 (0x0018 - 0x0000)
struct FInventoryBag final
{
public:
	TArray<struct FInventorySlot>                 Slots;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InventoryBagConfigId;                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230A[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryBag) == 0x000008, "Wrong alignment on FInventoryBag");
static_assert(sizeof(FInventoryBag) == 0x000018, "Wrong size on FInventoryBag");
static_assert(offsetof(FInventoryBag, Slots) == 0x000000, "Member 'FInventoryBag::Slots' has a wrong offset!");
static_assert(offsetof(FInventoryBag, InventoryBagConfigId) == 0x000010, "Member 'FInventoryBag::InventoryBagConfigId' has a wrong offset!");

// ScriptStruct Palia.Inventory_RemovalPossibility
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FInventory_RemovalPossibility final
{
public:
	uint8                                         Pad_230B[0xC];                                     // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventory_RemovalPossibility) == 0x000004, "Wrong alignment on FInventory_RemovalPossibility");
static_assert(sizeof(FInventory_RemovalPossibility) == 0x00000C, "Wrong size on FInventory_RemovalPossibility");

// ScriptStruct Palia.ActionBarInfo
// 0x000C (0x000C - 0x0000)
struct FActionBarInfo final
{
public:
	int32                                         CurrentRow;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCol;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColsPerRow;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionBarInfo) == 0x000004, "Wrong alignment on FActionBarInfo");
static_assert(sizeof(FActionBarInfo) == 0x00000C, "Wrong size on FActionBarInfo");
static_assert(offsetof(FActionBarInfo, CurrentRow) == 0x000000, "Member 'FActionBarInfo::CurrentRow' has a wrong offset!");
static_assert(offsetof(FActionBarInfo, CurrentCol) == 0x000004, "Member 'FActionBarInfo::CurrentCol' has a wrong offset!");
static_assert(offsetof(FActionBarInfo, ColsPerRow) == 0x000008, "Member 'FActionBarInfo::ColsPerRow' has a wrong offset!");

// ScriptStruct Palia.VAL_PendingFulfillInventoryRequestDelegates
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FVAL_PendingFulfillInventoryRequestDelegates final
{
public:
	uint8                                         Pad_230C[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_PendingFulfillInventoryRequestDelegates) == 0x000008, "Wrong alignment on FVAL_PendingFulfillInventoryRequestDelegates");
static_assert(sizeof(FVAL_PendingFulfillInventoryRequestDelegates) == 0x000020, "Wrong size on FVAL_PendingFulfillInventoryRequestDelegates");

// ScriptStruct Palia.InventoryRequestPlayerIdList
// 0x0010 (0x0010 - 0x0000)
struct FInventoryRequestPlayerIdList final
{
public:
	TArray<class FString>                         PlayerIds;                                         // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryRequestPlayerIdList) == 0x000008, "Wrong alignment on FInventoryRequestPlayerIdList");
static_assert(sizeof(FInventoryRequestPlayerIdList) == 0x000010, "Wrong size on FInventoryRequestPlayerIdList");
static_assert(offsetof(FInventoryRequestPlayerIdList, PlayerIds) == 0x000000, "Member 'FInventoryRequestPlayerIdList::PlayerIds' has a wrong offset!");

// ScriptStruct Palia.InventoryRequestData
// 0x0058 (0x0058 - 0x0000)
struct FInventoryRequestData final
{
public:
	class FString                                 RequesterId;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230D[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0018(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230E[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ExpiresAt;                                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryRequestStatus                       Status;                                            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230F[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInventoryRequestData) == 0x000008, "Wrong alignment on FInventoryRequestData");
static_assert(sizeof(FInventoryRequestData) == 0x000058, "Wrong size on FInventoryRequestData");
static_assert(offsetof(FInventoryRequestData, RequesterId) == 0x000000, "Member 'FInventoryRequestData::RequesterId' has a wrong offset!");
static_assert(offsetof(FInventoryRequestData, ItemId) == 0x000010, "Member 'FInventoryRequestData::ItemId' has a wrong offset!");
static_assert(offsetof(FInventoryRequestData, ItemType) == 0x000018, "Member 'FInventoryRequestData::ItemType' has a wrong offset!");
static_assert(offsetof(FInventoryRequestData, ItemCount) == 0x000040, "Member 'FInventoryRequestData::ItemCount' has a wrong offset!");
static_assert(offsetof(FInventoryRequestData, ExpiresAt) == 0x000048, "Member 'FInventoryRequestData::ExpiresAt' has a wrong offset!");
static_assert(offsetof(FInventoryRequestData, Status) == 0x000050, "Member 'FInventoryRequestData::Status' has a wrong offset!");

// ScriptStruct Palia.InventoryRequestErrorResponse
// 0x0018 (0x0018 - 0x0000)
struct FInventoryRequestErrorResponse final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2310[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInventoryRequestErrorResponse) == 0x000008, "Wrong alignment on FInventoryRequestErrorResponse");
static_assert(sizeof(FInventoryRequestErrorResponse) == 0x000018, "Wrong size on FInventoryRequestErrorResponse");
static_assert(offsetof(FInventoryRequestErrorResponse, Code) == 0x000000, "Member 'FInventoryRequestErrorResponse::Code' has a wrong offset!");
static_assert(offsetof(FInventoryRequestErrorResponse, ErrorMessage) == 0x000008, "Member 'FInventoryRequestErrorResponse::ErrorMessage' has a wrong offset!");

// ScriptStruct Palia.CreateInventoryRequest
// 0x0040 (0x0040 - 0x0000)
struct FCreateInventoryRequest final
{
public:
	struct FUniqueNetIdRepl                       RequesterId;                                       // 0x0000(0x0030)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStarQualityConstraint                 StarQualityConstraint;                             // 0x0038(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCreateInventoryRequest) == 0x000008, "Wrong alignment on FCreateInventoryRequest");
static_assert(sizeof(FCreateInventoryRequest) == 0x000040, "Wrong size on FCreateInventoryRequest");
static_assert(offsetof(FCreateInventoryRequest, RequesterId) == 0x000000, "Member 'FCreateInventoryRequest::RequesterId' has a wrong offset!");
static_assert(offsetof(FCreateInventoryRequest, ItemId) == 0x000030, "Member 'FCreateInventoryRequest::ItemId' has a wrong offset!");
static_assert(offsetof(FCreateInventoryRequest, ItemCount) == 0x000034, "Member 'FCreateInventoryRequest::ItemCount' has a wrong offset!");
static_assert(offsetof(FCreateInventoryRequest, StarQualityConstraint) == 0x000038, "Member 'FCreateInventoryRequest::StarQualityConstraint' has a wrong offset!");

// ScriptStruct Palia.ItemAudioConfig
// 0x0030 (0x0038 - 0x0008)
struct FItemAudioConfig final : public FTableRowBase
{
public:
	class UAkAudioEvent*                          Pickup;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Placement;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          UseConsume;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          Equip;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          InventoryDrag;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          InventoryDrop;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemAudioConfig) == 0x000008, "Wrong alignment on FItemAudioConfig");
static_assert(sizeof(FItemAudioConfig) == 0x000038, "Wrong size on FItemAudioConfig");
static_assert(offsetof(FItemAudioConfig, Pickup) == 0x000008, "Member 'FItemAudioConfig::Pickup' has a wrong offset!");
static_assert(offsetof(FItemAudioConfig, Placement) == 0x000010, "Member 'FItemAudioConfig::Placement' has a wrong offset!");
static_assert(offsetof(FItemAudioConfig, UseConsume) == 0x000018, "Member 'FItemAudioConfig::UseConsume' has a wrong offset!");
static_assert(offsetof(FItemAudioConfig, Equip) == 0x000020, "Member 'FItemAudioConfig::Equip' has a wrong offset!");
static_assert(offsetof(FItemAudioConfig, InventoryDrag) == 0x000028, "Member 'FItemAudioConfig::InventoryDrag' has a wrong offset!");
static_assert(offsetof(FItemAudioConfig, InventoryDrop) == 0x000030, "Member 'FItemAudioConfig::InventoryDrop' has a wrong offset!");

// ScriptStruct Palia.RecipeSellValueConfig
// 0x0048 (0x0050 - 0x0008)
struct FRecipeSellValueConfig final : public FTableRowBase
{
public:
	EVitalType                                    CostType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2311[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CostAmount;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuyCurrency;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyCurrencyAmount;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2312[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> BuyItemType;                                       // 0x0020(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyItemAmount;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2313[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecipeSellValueConfig) == 0x000008, "Wrong alignment on FRecipeSellValueConfig");
static_assert(sizeof(FRecipeSellValueConfig) == 0x000050, "Wrong size on FRecipeSellValueConfig");
static_assert(offsetof(FRecipeSellValueConfig, CostType) == 0x000008, "Member 'FRecipeSellValueConfig::CostType' has a wrong offset!");
static_assert(offsetof(FRecipeSellValueConfig, CostAmount) == 0x00000C, "Member 'FRecipeSellValueConfig::CostAmount' has a wrong offset!");
static_assert(offsetof(FRecipeSellValueConfig, BuyCurrency) == 0x000010, "Member 'FRecipeSellValueConfig::BuyCurrency' has a wrong offset!");
static_assert(offsetof(FRecipeSellValueConfig, BuyCurrencyAmount) == 0x000018, "Member 'FRecipeSellValueConfig::BuyCurrencyAmount' has a wrong offset!");
static_assert(offsetof(FRecipeSellValueConfig, BuyItemType) == 0x000020, "Member 'FRecipeSellValueConfig::BuyItemType' has a wrong offset!");
static_assert(offsetof(FRecipeSellValueConfig, BuyItemAmount) == 0x000048, "Member 'FRecipeSellValueConfig::BuyItemAmount' has a wrong offset!");

// ScriptStruct Palia.ItemStorageConfig
// 0x0018 (0x0020 - 0x0008)
struct FItemStorageConfig final : public FTableRowBase
{
public:
	TArray<EItemCategory>                         ItemCategories;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EItemStorageCategory                          StorageCategory;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2314[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemStorageConfig) == 0x000008, "Wrong alignment on FItemStorageConfig");
static_assert(sizeof(FItemStorageConfig) == 0x000020, "Wrong size on FItemStorageConfig");
static_assert(offsetof(FItemStorageConfig, ItemCategories) == 0x000008, "Member 'FItemStorageConfig::ItemCategories' has a wrong offset!");
static_assert(offsetof(FItemStorageConfig, StorageCategory) == 0x000018, "Member 'FItemStorageConfig::StorageCategory' has a wrong offset!");

// ScriptStruct Palia.LevelConfig
// 0x0080 (0x0088 - 0x0008)
struct FLevelConfig final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             VillagerSpawnConfigDataTable;                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class ULimitedEventDataAsset*, class UDataTable*> EventVillagerSpawnConfigs;                         // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelConfig) == 0x000008, "Wrong alignment on FLevelConfig");
static_assert(sizeof(FLevelConfig) == 0x000088, "Wrong size on FLevelConfig");
static_assert(offsetof(FLevelConfig, Level) == 0x000008, "Member 'FLevelConfig::Level' has a wrong offset!");
static_assert(offsetof(FLevelConfig, VillagerSpawnConfigDataTable) == 0x000030, "Member 'FLevelConfig::VillagerSpawnConfigDataTable' has a wrong offset!");
static_assert(offsetof(FLevelConfig, EventVillagerSpawnConfigs) == 0x000038, "Member 'FLevelConfig::EventVillagerSpawnConfigs' has a wrong offset!");

// ScriptStruct Palia.LevelerProgress
// 0x0028 (0x0028 - 0x0000)
struct FLevelerProgress final
{
public:
	TArray<struct FValeriaItem>                   ItemsGiven;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         ProgressStartTime;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLevelerRewardsGranted>         RewardsGranted;                                    // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelerProgress) == 0x000008, "Wrong alignment on FLevelerProgress");
static_assert(sizeof(FLevelerProgress) == 0x000028, "Wrong size on FLevelerProgress");
static_assert(offsetof(FLevelerProgress, ItemsGiven) == 0x000000, "Member 'FLevelerProgress::ItemsGiven' has a wrong offset!");
static_assert(offsetof(FLevelerProgress, ProgressStartTime) == 0x000010, "Member 'FLevelerProgress::ProgressStartTime' has a wrong offset!");
static_assert(offsetof(FLevelerProgress, RewardsGranted) == 0x000018, "Member 'FLevelerProgress::RewardsGranted' has a wrong offset!");

// ScriptStruct Palia.EventDataLayerConfig
// 0x0030 (0x0030 - 0x0000)
struct FEventDataLayerConfig final
{
public:
	TSoftObjectPtr<class UDataLayerAsset>         DataLayer;                                         // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowWhenActive;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2315[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEventDataLayerConfig) == 0x000008, "Wrong alignment on FEventDataLayerConfig");
static_assert(sizeof(FEventDataLayerConfig) == 0x000030, "Wrong size on FEventDataLayerConfig");
static_assert(offsetof(FEventDataLayerConfig, DataLayer) == 0x000000, "Member 'FEventDataLayerConfig::DataLayer' has a wrong offset!");
static_assert(offsetof(FEventDataLayerConfig, bShowWhenActive) == 0x000028, "Member 'FEventDataLayerConfig::bShowWhenActive' has a wrong offset!");

// ScriptStruct Palia.TransformationSubStep
// 0x0048 (0x0048 - 0x0000)
struct FTransformationSubStep final
{
public:
	EMapAreaTransformationType                    TransformationType;                                // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2316[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     ClassToConvert;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActorConversionType                          ConversionType;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2317[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ValidSpawnTags;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           ValidSpawnEntryTags;                               // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bRaycastToSpawnOnTerrain;                          // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRaycastToSpawnOnWater;                            // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysOrientUpAxisToZAxis;                        // 0x003A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2318[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalDistanceOffsetOfTerrain;                 // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCoopSpawnBehavior;                             // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2319[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CoopSpawningDestroyTimeAfterFirstGatherSecs;       // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransformationSubStep) == 0x000008, "Wrong alignment on FTransformationSubStep");
static_assert(sizeof(FTransformationSubStep) == 0x000048, "Wrong size on FTransformationSubStep");
static_assert(offsetof(FTransformationSubStep, TransformationType) == 0x000000, "Member 'FTransformationSubStep::TransformationType' has a wrong offset!");
static_assert(offsetof(FTransformationSubStep, ClassToConvert) == 0x000008, "Member 'FTransformationSubStep::ClassToConvert' has a wrong offset!");
static_assert(offsetof(FTransformationSubStep, ConversionType) == 0x000010, "Member 'FTransformationSubStep::ConversionType' has a wrong offset!");
static_assert(offsetof(FTransformationSubStep, ValidSpawnTags) == 0x000018, "Member 'FTransformationSubStep::ValidSpawnTags' has a wrong offset!");
static_assert(offsetof(FTransformationSubStep, ValidSpawnEntryTags) == 0x000028, "Member 'FTransformationSubStep::ValidSpawnEntryTags' has a wrong offset!");
static_assert(offsetof(FTransformationSubStep, bRaycastToSpawnOnTerrain) == 0x000038, "Member 'FTransformationSubStep::bRaycastToSpawnOnTerrain' has a wrong offset!");
static_assert(offsetof(FTransformationSubStep, bRaycastToSpawnOnWater) == 0x000039, "Member 'FTransformationSubStep::bRaycastToSpawnOnWater' has a wrong offset!");
static_assert(offsetof(FTransformationSubStep, bAlwaysOrientUpAxisToZAxis) == 0x00003A, "Member 'FTransformationSubStep::bAlwaysOrientUpAxisToZAxis' has a wrong offset!");
static_assert(offsetof(FTransformationSubStep, AdditionalDistanceOffsetOfTerrain) == 0x00003C, "Member 'FTransformationSubStep::AdditionalDistanceOffsetOfTerrain' has a wrong offset!");
static_assert(offsetof(FTransformationSubStep, bUseCoopSpawnBehavior) == 0x000040, "Member 'FTransformationSubStep::bUseCoopSpawnBehavior' has a wrong offset!");
static_assert(offsetof(FTransformationSubStep, CoopSpawningDestroyTimeAfterFirstGatherSecs) == 0x000044, "Member 'FTransformationSubStep::CoopSpawningDestroyTimeAfterFirstGatherSecs' has a wrong offset!");

// ScriptStruct Palia.TransformationStep
// 0x0018 (0x0018 - 0x0000)
struct FTransformationStep final
{
public:
	int32                                         MaxActorsToAffect;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransformationSubStep>         SubSteps;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransformationStep) == 0x000008, "Wrong alignment on FTransformationStep");
static_assert(sizeof(FTransformationStep) == 0x000018, "Wrong size on FTransformationStep");
static_assert(offsetof(FTransformationStep, MaxActorsToAffect) == 0x000000, "Member 'FTransformationStep::MaxActorsToAffect' has a wrong offset!");
static_assert(offsetof(FTransformationStep, SubSteps) == 0x000008, "Member 'FTransformationStep::SubSteps' has a wrong offset!");

// ScriptStruct Palia.MetaCharacterConfig
// 0x0048 (0x0050 - 0x0008)
struct FMetaCharacterConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Gender;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        Anim;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 AnimBPC;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             AnimMappings;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetaCharacterConfig) == 0x000008, "Wrong alignment on FMetaCharacterConfig");
static_assert(sizeof(FMetaCharacterConfig) == 0x000050, "Wrong size on FMetaCharacterConfig");
static_assert(offsetof(FMetaCharacterConfig, PersistId) == 0x000008, "Member 'FMetaCharacterConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FMetaCharacterConfig, Gender) == 0x000010, "Member 'FMetaCharacterConfig::Gender' has a wrong offset!");
static_assert(offsetof(FMetaCharacterConfig, Mesh) == 0x000020, "Member 'FMetaCharacterConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FMetaCharacterConfig, Anim) == 0x000028, "Member 'FMetaCharacterConfig::Anim' has a wrong offset!");
static_assert(offsetof(FMetaCharacterConfig, AnimBPC) == 0x000030, "Member 'FMetaCharacterConfig::AnimBPC' has a wrong offset!");
static_assert(offsetof(FMetaCharacterConfig, AnimMappings) == 0x000038, "Member 'FMetaCharacterConfig::AnimMappings' has a wrong offset!");
static_assert(offsetof(FMetaCharacterConfig, Materials) == 0x000040, "Member 'FMetaCharacterConfig::Materials' has a wrong offset!");

// ScriptStruct Palia.MinigameConfig
// 0x00B8 (0x00B8 - 0x0000)
struct FMinigameConfig final
{
public:
	struct FRuntimeFloatCurve                     PlayerMarkerMovementCurve;                         // 0x0000(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EMinigameQTEStyle                             Style;                                             // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231C[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputPeriod;                                       // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredSuccessCount;                              // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLimit;                                         // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstInputTime;                                    // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMarkerPositionMinAlpha;                      // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   PlayerMarkerMovementEasingFunc;                    // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231D[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerMarkerMovementEasingFuncBlendExp;            // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCyclesPerAnimation;                             // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MistakeTriggersPenalty;                            // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231E[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinigameConfig) == 0x000008, "Wrong alignment on FMinigameConfig");
static_assert(sizeof(FMinigameConfig) == 0x0000B8, "Wrong size on FMinigameConfig");
static_assert(offsetof(FMinigameConfig, PlayerMarkerMovementCurve) == 0x000000, "Member 'FMinigameConfig::PlayerMarkerMovementCurve' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, Style) == 0x000088, "Member 'FMinigameConfig::Style' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, InputPeriod) == 0x00008C, "Member 'FMinigameConfig::InputPeriod' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, RequiredSuccessCount) == 0x000090, "Member 'FMinigameConfig::RequiredSuccessCount' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, TimeLimit) == 0x000094, "Member 'FMinigameConfig::TimeLimit' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, Tolerance) == 0x000098, "Member 'FMinigameConfig::Tolerance' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, FirstInputTime) == 0x00009C, "Member 'FMinigameConfig::FirstInputTime' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, TargetMarkerPositionMinAlpha) == 0x0000A0, "Member 'FMinigameConfig::TargetMarkerPositionMinAlpha' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, PlayerMarkerMovementEasingFunc) == 0x0000A4, "Member 'FMinigameConfig::PlayerMarkerMovementEasingFunc' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, PlayerMarkerMovementEasingFuncBlendExp) == 0x0000A8, "Member 'FMinigameConfig::PlayerMarkerMovementEasingFuncBlendExp' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, NumCyclesPerAnimation) == 0x0000AC, "Member 'FMinigameConfig::NumCyclesPerAnimation' has a wrong offset!");
static_assert(offsetof(FMinigameConfig, MistakeTriggersPenalty) == 0x0000B0, "Member 'FMinigameConfig::MistakeTriggersPenalty' has a wrong offset!");

// ScriptStruct Palia.SplinePointInfo
// 0x0001 (0x0001 - 0x0000)
struct FSplinePointInfo final
{
public:
	uint8                                         Pad_231F[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSplinePointInfo) == 0x000001, "Wrong alignment on FSplinePointInfo");
static_assert(sizeof(FSplinePointInfo) == 0x000001, "Wrong size on FSplinePointInfo");

// ScriptStruct Palia.PaliaLoadingScreenTip
// 0x0030 (0x0030 - 0x0000)
struct FPaliaLoadingScreenTip final
{
public:
	class FText                                   TipTitle;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TipBody;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPaliaLoadingScreenTip) == 0x000008, "Wrong alignment on FPaliaLoadingScreenTip");
static_assert(sizeof(FPaliaLoadingScreenTip) == 0x000030, "Wrong size on FPaliaLoadingScreenTip");
static_assert(offsetof(FPaliaLoadingScreenTip, TipTitle) == 0x000000, "Member 'FPaliaLoadingScreenTip::TipTitle' has a wrong offset!");
static_assert(offsetof(FPaliaLoadingScreenTip, TipBody) == 0x000018, "Member 'FPaliaLoadingScreenTip::TipBody' has a wrong offset!");

// ScriptStruct Palia.S6LightBlendSettings
// 0x0018 (0x0018 - 0x0000)
struct FS6LightBlendSettings final
{
public:
	class ULightingBaseState*                     LightingBaseState;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendPercentage;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingTime;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2320[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS6LightBlendSettings) == 0x000008, "Wrong alignment on FS6LightBlendSettings");
static_assert(sizeof(FS6LightBlendSettings) == 0x000018, "Wrong size on FS6LightBlendSettings");
static_assert(offsetof(FS6LightBlendSettings, LightingBaseState) == 0x000000, "Member 'FS6LightBlendSettings::LightingBaseState' has a wrong offset!");
static_assert(offsetof(FS6LightBlendSettings, Duration) == 0x000008, "Member 'FS6LightBlendSettings::Duration' has a wrong offset!");
static_assert(offsetof(FS6LightBlendSettings, BlendPercentage) == 0x00000C, "Member 'FS6LightBlendSettings::BlendPercentage' has a wrong offset!");
static_assert(offsetof(FS6LightBlendSettings, StartingTime) == 0x000010, "Member 'FS6LightBlendSettings::StartingTime' has a wrong offset!");

// ScriptStruct Palia.DialogueSpeakerOwnership
// 0x0010 (0x0010 - 0x0000)
struct FDialogueSpeakerOwnership final
{
public:
	class UVAL_DialogueSpeakerAsset*              DialogueSpeaker;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDialogueOwner;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2321[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogueSpeakerOwnership) == 0x000008, "Wrong alignment on FDialogueSpeakerOwnership");
static_assert(sizeof(FDialogueSpeakerOwnership) == 0x000010, "Wrong size on FDialogueSpeakerOwnership");
static_assert(offsetof(FDialogueSpeakerOwnership, DialogueSpeaker) == 0x000000, "Member 'FDialogueSpeakerOwnership::DialogueSpeaker' has a wrong offset!");
static_assert(offsetof(FDialogueSpeakerOwnership, bDialogueOwner) == 0x000008, "Member 'FDialogueSpeakerOwnership::bDialogueOwner' has a wrong offset!");

// ScriptStruct Palia.VAL_VisibilityModifierSource
// 0x0010 (0x0010 - 0x0000)
struct FVAL_VisibilityModifierSource final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SourceObject;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_VisibilityModifierSource) == 0x000008, "Wrong alignment on FVAL_VisibilityModifierSource");
static_assert(sizeof(FVAL_VisibilityModifierSource) == 0x000010, "Wrong size on FVAL_VisibilityModifierSource");
static_assert(offsetof(FVAL_VisibilityModifierSource, Key) == 0x000000, "Member 'FVAL_VisibilityModifierSource::Key' has a wrong offset!");
static_assert(offsetof(FVAL_VisibilityModifierSource, SourceObject) == 0x000008, "Member 'FVAL_VisibilityModifierSource::SourceObject' has a wrong offset!");

// ScriptStruct Palia.VAL_PostFadeParams
// 0x0018 (0x0018 - 0x0000)
struct FVAL_PostFadeParams final
{
public:
	EVAL_PostFadeType                             PostFadeType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2322[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVAL_VisibilityModifierSource          VisibilityModifierSource;                          // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PostFadeParams) == 0x000008, "Wrong alignment on FVAL_PostFadeParams");
static_assert(sizeof(FVAL_PostFadeParams) == 0x000018, "Wrong size on FVAL_PostFadeParams");
static_assert(offsetof(FVAL_PostFadeParams, PostFadeType) == 0x000000, "Member 'FVAL_PostFadeParams::PostFadeType' has a wrong offset!");
static_assert(offsetof(FVAL_PostFadeParams, VisibilityModifierSource) == 0x000008, "Member 'FVAL_PostFadeParams::VisibilityModifierSource' has a wrong offset!");

// ScriptStruct Palia.PersistComponentChildArray
// 0x0018 (0x0120 - 0x0108)
struct FPersistComponentChildArray final : public FFastArraySerializer
{
public:
	TArray<struct FSessionActorIdSerializeItem>   Children;                                          // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2323[0x8];                                     // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersistComponentChildArray) == 0x000008, "Wrong alignment on FPersistComponentChildArray");
static_assert(sizeof(FPersistComponentChildArray) == 0x000120, "Wrong size on FPersistComponentChildArray");
static_assert(offsetof(FPersistComponentChildArray, Children) == 0x000108, "Member 'FPersistComponentChildArray::Children' has a wrong offset!");

// ScriptStruct Palia.PlaceableAlterationUIPresetConfig
// 0x0020 (0x0028 - 0x0008)
struct FPlaceableAlterationUIPresetConfig final : public FTableRowBase
{
public:
	struct FVector                                UiHoverRelativePosition;                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UiHoverRadius;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2324[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaceableAlterationUIPresetConfig) == 0x000008, "Wrong alignment on FPlaceableAlterationUIPresetConfig");
static_assert(sizeof(FPlaceableAlterationUIPresetConfig) == 0x000028, "Wrong size on FPlaceableAlterationUIPresetConfig");
static_assert(offsetof(FPlaceableAlterationUIPresetConfig, UiHoverRelativePosition) == 0x000008, "Member 'FPlaceableAlterationUIPresetConfig::UiHoverRelativePosition' has a wrong offset!");
static_assert(offsetof(FPlaceableAlterationUIPresetConfig, UiHoverRadius) == 0x000020, "Member 'FPlaceableAlterationUIPresetConfig::UiHoverRadius' has a wrong offset!");

// ScriptStruct Palia.PlaceableAlterationConfig
// 0x0088 (0x0090 - 0x0008)
struct FPlaceableAlterationConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Group;                                             // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2325[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    UILocation;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsDefault;                                        // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2326[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IsDefaultWhenSocketIsActive;                       // 0x0050(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExcludePlugIsInAnySocketTag;                       // 0x0070(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableAlterationConfig) == 0x000008, "Wrong alignment on FPlaceableAlterationConfig");
static_assert(sizeof(FPlaceableAlterationConfig) == 0x000090, "Wrong size on FPlaceableAlterationConfig");
static_assert(offsetof(FPlaceableAlterationConfig, PersistId) == 0x000008, "Member 'FPlaceableAlterationConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FPlaceableAlterationConfig, Group) == 0x00000C, "Member 'FPlaceableAlterationConfig::Group' has a wrong offset!");
static_assert(offsetof(FPlaceableAlterationConfig, DisplayName) == 0x000018, "Member 'FPlaceableAlterationConfig::DisplayName' has a wrong offset!");
static_assert(offsetof(FPlaceableAlterationConfig, Icon) == 0x000030, "Member 'FPlaceableAlterationConfig::Icon' has a wrong offset!");
static_assert(offsetof(FPlaceableAlterationConfig, UILocation) == 0x000038, "Member 'FPlaceableAlterationConfig::UILocation' has a wrong offset!");
static_assert(offsetof(FPlaceableAlterationConfig, bIsDefault) == 0x000048, "Member 'FPlaceableAlterationConfig::bIsDefault' has a wrong offset!");
static_assert(offsetof(FPlaceableAlterationConfig, IsDefaultWhenSocketIsActive) == 0x000050, "Member 'FPlaceableAlterationConfig::IsDefaultWhenSocketIsActive' has a wrong offset!");
static_assert(offsetof(FPlaceableAlterationConfig, ExcludePlugIsInAnySocketTag) == 0x000070, "Member 'FPlaceableAlterationConfig::ExcludePlugIsInAnySocketTag' has a wrong offset!");

// ScriptStruct Palia.PlaceableAlterationsPersistData
// 0x0010 (0x0010 - 0x0000)
struct FPlaceableAlterationsPersistData final
{
public:
	TArray<int32>                                 SelectedAlterations;                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableAlterationsPersistData) == 0x000008, "Wrong alignment on FPlaceableAlterationsPersistData");
static_assert(sizeof(FPlaceableAlterationsPersistData) == 0x000010, "Wrong size on FPlaceableAlterationsPersistData");
static_assert(offsetof(FPlaceableAlterationsPersistData, SelectedAlterations) == 0x000000, "Member 'FPlaceableAlterationsPersistData::SelectedAlterations' has a wrong offset!");

// ScriptStruct Palia.PlaceableSocketReference
// 0x0010 (0x0010 - 0x0000)
struct FPlaceableSocketReference final
{
public:
	class AActor*                                 Placeable;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SocketPersistId;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2327[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlaceableSocketReference) == 0x000008, "Wrong alignment on FPlaceableSocketReference");
static_assert(sizeof(FPlaceableSocketReference) == 0x000010, "Wrong size on FPlaceableSocketReference");
static_assert(offsetof(FPlaceableSocketReference, Placeable) == 0x000000, "Member 'FPlaceableSocketReference::Placeable' has a wrong offset!");
static_assert(offsetof(FPlaceableSocketReference, SocketPersistId) == 0x000008, "Member 'FPlaceableSocketReference::SocketPersistId' has a wrong offset!");

// ScriptStruct Palia.PlaceablePlugPersistData
// 0x0028 (0x0028 - 0x0000)
struct FPlaceablePlugPersistData final
{
public:
	struct FPersistActorId                        ActorId;                                           // 0x0000(0x0024)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SocketPersistId;                                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceablePlugPersistData) == 0x000004, "Wrong alignment on FPlaceablePlugPersistData");
static_assert(sizeof(FPlaceablePlugPersistData) == 0x000028, "Wrong size on FPlaceablePlugPersistData");
static_assert(offsetof(FPlaceablePlugPersistData, ActorId) == 0x000000, "Member 'FPlaceablePlugPersistData::ActorId' has a wrong offset!");
static_assert(offsetof(FPlaceablePlugPersistData, SocketPersistId) == 0x000024, "Member 'FPlaceablePlugPersistData::SocketPersistId' has a wrong offset!");

// ScriptStruct Palia.PlaceablePlugStatus
// 0x0050 (0x0050 - 0x0000)
struct FPlaceablePlugStatus final
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> SocketItemType;                                    // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SocketPersistId;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPersistActorId                        SocketActorId;                                     // 0x002C(0x0024)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceablePlugStatus) == 0x000008, "Wrong alignment on FPlaceablePlugStatus");
static_assert(sizeof(FPlaceablePlugStatus) == 0x000050, "Wrong size on FPlaceablePlugStatus");
static_assert(offsetof(FPlaceablePlugStatus, SocketItemType) == 0x000000, "Member 'FPlaceablePlugStatus::SocketItemType' has a wrong offset!");
static_assert(offsetof(FPlaceablePlugStatus, SocketPersistId) == 0x000028, "Member 'FPlaceablePlugStatus::SocketPersistId' has a wrong offset!");
static_assert(offsetof(FPlaceablePlugStatus, SocketActorId) == 0x00002C, "Member 'FPlaceablePlugStatus::SocketActorId' has a wrong offset!");

// ScriptStruct Palia.PlaceablePlugAndSocketStatuses
// 0x0060 (0x0060 - 0x0000)
struct FPlaceablePlugAndSocketStatuses final
{
public:
	struct FPlaceablePlugStatus                   Plug;                                              // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableSocketStatus>         Sockets;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceablePlugAndSocketStatuses) == 0x000008, "Wrong alignment on FPlaceablePlugAndSocketStatuses");
static_assert(sizeof(FPlaceablePlugAndSocketStatuses) == 0x000060, "Wrong size on FPlaceablePlugAndSocketStatuses");
static_assert(offsetof(FPlaceablePlugAndSocketStatuses, Plug) == 0x000000, "Member 'FPlaceablePlugAndSocketStatuses::Plug' has a wrong offset!");
static_assert(offsetof(FPlaceablePlugAndSocketStatuses, Sockets) == 0x000050, "Member 'FPlaceablePlugAndSocketStatuses::Sockets' has a wrong offset!");

// ScriptStruct Palia.PlaceableVisibilityMaterialConfig
// 0x0030 (0x0030 - 0x0000)
struct FPlaceableVisibilityMaterialConfig final
{
public:
	int32                                         MaterialIndex;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2328[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableVisibilityMaterialConfig) == 0x000008, "Wrong alignment on FPlaceableVisibilityMaterialConfig");
static_assert(sizeof(FPlaceableVisibilityMaterialConfig) == 0x000030, "Wrong size on FPlaceableVisibilityMaterialConfig");
static_assert(offsetof(FPlaceableVisibilityMaterialConfig, MaterialIndex) == 0x000000, "Member 'FPlaceableVisibilityMaterialConfig::MaterialIndex' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityMaterialConfig, Material) == 0x000008, "Member 'FPlaceableVisibilityMaterialConfig::Material' has a wrong offset!");

// ScriptStruct Palia.PlaceableVisibilityConfig
// 0x00E8 (0x00F0 - 0x0008)
struct FPlaceableVisibilityConfig final : public FTableRowBase
{
public:
	class FName                                   ComponentTag;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriorityOrder;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2329[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequiresAllSocketTags;                             // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiresAnySocketTag;                              // 0x0038(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiresPlugIsInAnySocketTag;                      // 0x0058(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         RequiredLevelMin;                                  // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredLevelMax;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    RequiresAlteration;                                // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RequiredLevelMinOfSocketed;                        // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredLevelMaxOfSocketed;                        // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             IsCollisionEnabled;                                // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232A[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             UpdateMeshTo;                                      // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotate180;                                        // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232B[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlaceableVisibilityMeshConfig> AdditionalMesh;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPlaceableVisibilityMaterialConfig> UpdateMaterialsTo;                                 // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlaceableVisibilityConfig) == 0x000008, "Wrong alignment on FPlaceableVisibilityConfig");
static_assert(sizeof(FPlaceableVisibilityConfig) == 0x0000F0, "Wrong size on FPlaceableVisibilityConfig");
static_assert(offsetof(FPlaceableVisibilityConfig, ComponentTag) == 0x000008, "Member 'FPlaceableVisibilityConfig::ComponentTag' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, PriorityOrder) == 0x000010, "Member 'FPlaceableVisibilityConfig::PriorityOrder' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, RequiresAllSocketTags) == 0x000018, "Member 'FPlaceableVisibilityConfig::RequiresAllSocketTags' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, RequiresAnySocketTag) == 0x000038, "Member 'FPlaceableVisibilityConfig::RequiresAnySocketTag' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, RequiresPlugIsInAnySocketTag) == 0x000058, "Member 'FPlaceableVisibilityConfig::RequiresPlugIsInAnySocketTag' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, RequiredLevelMin) == 0x000078, "Member 'FPlaceableVisibilityConfig::RequiredLevelMin' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, RequiredLevelMax) == 0x00007C, "Member 'FPlaceableVisibilityConfig::RequiredLevelMax' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, RequiresAlteration) == 0x000080, "Member 'FPlaceableVisibilityConfig::RequiresAlteration' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, RequiredLevelMinOfSocketed) == 0x000090, "Member 'FPlaceableVisibilityConfig::RequiredLevelMinOfSocketed' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, RequiredLevelMaxOfSocketed) == 0x000094, "Member 'FPlaceableVisibilityConfig::RequiredLevelMaxOfSocketed' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, bIsVisible) == 0x000098, "Member 'FPlaceableVisibilityConfig::bIsVisible' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, IsCollisionEnabled) == 0x000099, "Member 'FPlaceableVisibilityConfig::IsCollisionEnabled' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, UpdateMeshTo) == 0x0000A0, "Member 'FPlaceableVisibilityConfig::UpdateMeshTo' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, bRotate180) == 0x0000C8, "Member 'FPlaceableVisibilityConfig::bRotate180' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, AdditionalMesh) == 0x0000D0, "Member 'FPlaceableVisibilityConfig::AdditionalMesh' has a wrong offset!");
static_assert(offsetof(FPlaceableVisibilityConfig, UpdateMaterialsTo) == 0x0000E0, "Member 'FPlaceableVisibilityConfig::UpdateMaterialsTo' has a wrong offset!");

// ScriptStruct Palia.PlacementSocketConfig
// 0x0058 (0x0060 - 0x0008)
struct FPlacementSocketConfig final : public FTableRowBase
{
public:
	bool                                          bIsEnabled;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AllowedPlugTags;                                   // 0x0010(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         LevelAvailable;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232D[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Offset;                                            // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersistId;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SocketTag;                                         // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232E[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlacementSocketConfig) == 0x000008, "Wrong alignment on FPlacementSocketConfig");
static_assert(sizeof(FPlacementSocketConfig) == 0x000060, "Wrong size on FPlacementSocketConfig");
static_assert(offsetof(FPlacementSocketConfig, bIsEnabled) == 0x000008, "Member 'FPlacementSocketConfig::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FPlacementSocketConfig, AllowedPlugTags) == 0x000010, "Member 'FPlacementSocketConfig::AllowedPlugTags' has a wrong offset!");
static_assert(offsetof(FPlacementSocketConfig, LevelAvailable) == 0x000030, "Member 'FPlacementSocketConfig::LevelAvailable' has a wrong offset!");
static_assert(offsetof(FPlacementSocketConfig, Offset) == 0x000038, "Member 'FPlacementSocketConfig::Offset' has a wrong offset!");
static_assert(offsetof(FPlacementSocketConfig, PersistId) == 0x000050, "Member 'FPlacementSocketConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FPlacementSocketConfig, SocketTag) == 0x000054, "Member 'FPlacementSocketConfig::SocketTag' has a wrong offset!");

// ScriptStruct Palia.CurrencyBag
// 0x0010 (0x0010 - 0x0000)
struct FCurrencyBag final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurrencyConfig*                        Config;                                            // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyBag) == 0x000008, "Wrong alignment on FCurrencyBag");
static_assert(sizeof(FCurrencyBag) == 0x000010, "Wrong size on FCurrencyBag");
static_assert(offsetof(FCurrencyBag, Amount) == 0x000000, "Member 'FCurrencyBag::Amount' has a wrong offset!");
static_assert(offsetof(FCurrencyBag, Config) == 0x000008, "Member 'FCurrencyBag::Config' has a wrong offset!");

// ScriptStruct Palia.SublevelAndTransform
// 0x0070 (0x0070 - 0x0000)
struct FSublevelAndTransform final
{
public:
	class ULevelStreamingDynamic*                 Level;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2330[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SublevelTransform;                                 // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSublevelAndTransform) == 0x000010, "Wrong alignment on FSublevelAndTransform");
static_assert(sizeof(FSublevelAndTransform) == 0x000070, "Wrong size on FSublevelAndTransform");
static_assert(offsetof(FSublevelAndTransform, Level) == 0x000000, "Member 'FSublevelAndTransform::Level' has a wrong offset!");
static_assert(offsetof(FSublevelAndTransform, SublevelTransform) == 0x000010, "Member 'FSublevelAndTransform::SublevelTransform' has a wrong offset!");

// ScriptStruct Palia.PrivateSpaceScheduledVillagerSpawnInfo
// 0x0038 (0x0038 - 0x0000)
struct FPrivateSpaceScheduledVillagerSpawnInfo final
{
public:
	int32                                         VillagerId;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2331[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrivateSpaceConfig*                    PrivateSpace;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVillagerSpawnParams                   SpawnParams;                                       // 0x0010(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrivateSpaceScheduledVillagerSpawnInfo) == 0x000008, "Wrong alignment on FPrivateSpaceScheduledVillagerSpawnInfo");
static_assert(sizeof(FPrivateSpaceScheduledVillagerSpawnInfo) == 0x000038, "Wrong size on FPrivateSpaceScheduledVillagerSpawnInfo");
static_assert(offsetof(FPrivateSpaceScheduledVillagerSpawnInfo, VillagerId) == 0x000000, "Member 'FPrivateSpaceScheduledVillagerSpawnInfo::VillagerId' has a wrong offset!");
static_assert(offsetof(FPrivateSpaceScheduledVillagerSpawnInfo, PrivateSpace) == 0x000008, "Member 'FPrivateSpaceScheduledVillagerSpawnInfo::PrivateSpace' has a wrong offset!");
static_assert(offsetof(FPrivateSpaceScheduledVillagerSpawnInfo, SpawnParams) == 0x000010, "Member 'FPrivateSpaceScheduledVillagerSpawnInfo::SpawnParams' has a wrong offset!");

// ScriptStruct Palia.VAL_PrizeWheelCostDef
// 0x0030 (0x0030 - 0x0000)
struct FVAL_PrizeWheelCostDef final
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> RequiredItem;                                      // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredItemAmount;                                // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2332[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_PrizeWheelCostDef) == 0x000008, "Wrong alignment on FVAL_PrizeWheelCostDef");
static_assert(sizeof(FVAL_PrizeWheelCostDef) == 0x000030, "Wrong size on FVAL_PrizeWheelCostDef");
static_assert(offsetof(FVAL_PrizeWheelCostDef, RequiredItem) == 0x000000, "Member 'FVAL_PrizeWheelCostDef::RequiredItem' has a wrong offset!");
static_assert(offsetof(FVAL_PrizeWheelCostDef, RequiredItemAmount) == 0x000028, "Member 'FVAL_PrizeWheelCostDef::RequiredItemAmount' has a wrong offset!");

// ScriptStruct Palia.FiredProjectileData
// 0x0018 (0x0018 - 0x0000)
struct FFiredProjectileData final
{
public:
	int32                                         ProjectileId;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2333[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaProjectile*                     ProjectileActor;                                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasHit;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2334[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFiredProjectileData) == 0x000008, "Wrong alignment on FFiredProjectileData");
static_assert(sizeof(FFiredProjectileData) == 0x000018, "Wrong size on FFiredProjectileData");
static_assert(offsetof(FFiredProjectileData, ProjectileId) == 0x000000, "Member 'FFiredProjectileData::ProjectileId' has a wrong offset!");
static_assert(offsetof(FFiredProjectileData, ProjectileActor) == 0x000008, "Member 'FFiredProjectileData::ProjectileActor' has a wrong offset!");
static_assert(offsetof(FFiredProjectileData, HasHit) == 0x000010, "Member 'FFiredProjectileData::HasHit' has a wrong offset!");

// ScriptStruct Palia.PreemptiveHitData
// 0x0030 (0x0030 - 0x0000)
struct FPreemptiveHitData final
{
public:
	uint8                                         Pad_2335[0x8];                                     // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2336[0x20];                                    // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPreemptiveHitData) == 0x000008, "Wrong alignment on FPreemptiveHitData");
static_assert(sizeof(FPreemptiveHitData) == 0x000030, "Wrong size on FPreemptiveHitData");
static_assert(offsetof(FPreemptiveHitData, HitActor) == 0x000008, "Member 'FPreemptiveHitData::HitActor' has a wrong offset!");

// ScriptStruct Palia.VAL_Prototype_BubbleSpawnRoundInstance
// 0x0078 (0x0078 - 0x0000)
struct FVAL_Prototype_BubbleSpawnRoundInstance final
{
public:
	float                                         BeginAtTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2337[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVAL_Prototype_BubbleSpawnRound        RoundDefinition;                                   // 0x0008(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_Prototype_BubbleSpawnRoundInstance) == 0x000008, "Wrong alignment on FVAL_Prototype_BubbleSpawnRoundInstance");
static_assert(sizeof(FVAL_Prototype_BubbleSpawnRoundInstance) == 0x000078, "Wrong size on FVAL_Prototype_BubbleSpawnRoundInstance");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnRoundInstance, BeginAtTime) == 0x000000, "Member 'FVAL_Prototype_BubbleSpawnRoundInstance::BeginAtTime' has a wrong offset!");
static_assert(offsetof(FVAL_Prototype_BubbleSpawnRoundInstance, RoundDefinition) == 0x000008, "Member 'FVAL_Prototype_BubbleSpawnRoundInstance::RoundDefinition' has a wrong offset!");

// ScriptStruct Palia.VAL_QuestBranchingGoalDef
// 0x00C0 (0x00C0 - 0x0000)
struct FVAL_QuestBranchingGoalDef final
{
public:
	struct FVAL_QuestGoalDef                      BranchGoal;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             BranchRewards;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             BranchHiddenRewards;                               // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UVAL_DialogueAsset>      BranchOverrideTurnInDialogueAsset;                 // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInWorldLocationDef>     BranchOverrideTurnInLocation;                      // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_QuestBranchingGoalDef) == 0x000008, "Wrong alignment on FVAL_QuestBranchingGoalDef");
static_assert(sizeof(FVAL_QuestBranchingGoalDef) == 0x0000C0, "Wrong size on FVAL_QuestBranchingGoalDef");
static_assert(offsetof(FVAL_QuestBranchingGoalDef, BranchGoal) == 0x000000, "Member 'FVAL_QuestBranchingGoalDef::BranchGoal' has a wrong offset!");
static_assert(offsetof(FVAL_QuestBranchingGoalDef, BranchRewards) == 0x000050, "Member 'FVAL_QuestBranchingGoalDef::BranchRewards' has a wrong offset!");
static_assert(offsetof(FVAL_QuestBranchingGoalDef, BranchHiddenRewards) == 0x000060, "Member 'FVAL_QuestBranchingGoalDef::BranchHiddenRewards' has a wrong offset!");
static_assert(offsetof(FVAL_QuestBranchingGoalDef, BranchOverrideTurnInDialogueAsset) == 0x000070, "Member 'FVAL_QuestBranchingGoalDef::BranchOverrideTurnInDialogueAsset' has a wrong offset!");
static_assert(offsetof(FVAL_QuestBranchingGoalDef, BranchOverrideTurnInLocation) == 0x000098, "Member 'FVAL_QuestBranchingGoalDef::BranchOverrideTurnInLocation' has a wrong offset!");

// ScriptStruct Palia.VAL_QuestStepDef
// 0x0108 (0x0108 - 0x0000)
struct FVAL_QuestStepDef final
{
public:
	bool                                          bOverrideTitle;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2338[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OverrideQuestTitle;                                // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bOverrideDescription;                              // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2339[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OverrideQuestDescription;                          // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EVAL_QuestCategory                            OverrideQuestCategory;                             // 0x0040(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideReturnText;                               // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowStepCompleteNotification;                     // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233A[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OverrideQuestReturnText;                           // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FVAL_QuestGoalDef>              Goals;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bHasBranchingGoals;                                // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233B[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumBranchingGoalsRequired;                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumBranchingGoalsAllowed;                      // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233C[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVAL_QuestBranchingGoalDef>     BranchingGoals;                                    // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             Rewards;                                           // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             HiddenRewards;                                     // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bShouldAutoCompleteStep;                           // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233D[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UVAL_DialogueAsset>      TurnInDialogueAsset;                               // 0x00B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInWorldLocationDef>     TurnInLocation;                                    // 0x00E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_QuestStepDef) == 0x000008, "Wrong alignment on FVAL_QuestStepDef");
static_assert(sizeof(FVAL_QuestStepDef) == 0x000108, "Wrong size on FVAL_QuestStepDef");
static_assert(offsetof(FVAL_QuestStepDef, bOverrideTitle) == 0x000000, "Member 'FVAL_QuestStepDef::bOverrideTitle' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, OverrideQuestTitle) == 0x000008, "Member 'FVAL_QuestStepDef::OverrideQuestTitle' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, bOverrideDescription) == 0x000020, "Member 'FVAL_QuestStepDef::bOverrideDescription' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, OverrideQuestDescription) == 0x000028, "Member 'FVAL_QuestStepDef::OverrideQuestDescription' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, OverrideQuestCategory) == 0x000040, "Member 'FVAL_QuestStepDef::OverrideQuestCategory' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, bOverrideReturnText) == 0x000041, "Member 'FVAL_QuestStepDef::bOverrideReturnText' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, bShowStepCompleteNotification) == 0x000042, "Member 'FVAL_QuestStepDef::bShowStepCompleteNotification' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, OverrideQuestReturnText) == 0x000048, "Member 'FVAL_QuestStepDef::OverrideQuestReturnText' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, Goals) == 0x000060, "Member 'FVAL_QuestStepDef::Goals' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, bHasBranchingGoals) == 0x000070, "Member 'FVAL_QuestStepDef::bHasBranchingGoals' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, MinimumBranchingGoalsRequired) == 0x000074, "Member 'FVAL_QuestStepDef::MinimumBranchingGoalsRequired' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, MaximumBranchingGoalsAllowed) == 0x000078, "Member 'FVAL_QuestStepDef::MaximumBranchingGoalsAllowed' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, BranchingGoals) == 0x000080, "Member 'FVAL_QuestStepDef::BranchingGoals' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, Rewards) == 0x000090, "Member 'FVAL_QuestStepDef::Rewards' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, HiddenRewards) == 0x0000A0, "Member 'FVAL_QuestStepDef::HiddenRewards' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, bShouldAutoCompleteStep) == 0x0000B0, "Member 'FVAL_QuestStepDef::bShouldAutoCompleteStep' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, TurnInDialogueAsset) == 0x0000B8, "Member 'FVAL_QuestStepDef::TurnInDialogueAsset' has a wrong offset!");
static_assert(offsetof(FVAL_QuestStepDef, TurnInLocation) == 0x0000E0, "Member 'FVAL_QuestStepDef::TurnInLocation' has a wrong offset!");

// ScriptStruct Palia.QuestCompassConfig
// 0x0048 (0x0048 - 0x0000)
struct FQuestCompassConfig final
{
public:
	class UPlayerCompassTargetConfigAsset*        Dialogue;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerCompassTargetConfigAsset*        DynamicEvent;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerCompassTargetConfigAsset*        QuestAvailable;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerCompassTargetConfigAsset*        QuestTurnIn;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerCompassTargetConfigAsset*        QuestComplete;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerCompassTargetConfigAsset*        QuestHint;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerCompassTargetConfigAsset*        QuestFindActor;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerCompassTargetConfigAsset*        QuestSearchArea;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuestIconConfig*                       QuestIconConfig;                                   // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestCompassConfig) == 0x000008, "Wrong alignment on FQuestCompassConfig");
static_assert(sizeof(FQuestCompassConfig) == 0x000048, "Wrong size on FQuestCompassConfig");
static_assert(offsetof(FQuestCompassConfig, Dialogue) == 0x000000, "Member 'FQuestCompassConfig::Dialogue' has a wrong offset!");
static_assert(offsetof(FQuestCompassConfig, DynamicEvent) == 0x000008, "Member 'FQuestCompassConfig::DynamicEvent' has a wrong offset!");
static_assert(offsetof(FQuestCompassConfig, QuestAvailable) == 0x000010, "Member 'FQuestCompassConfig::QuestAvailable' has a wrong offset!");
static_assert(offsetof(FQuestCompassConfig, QuestTurnIn) == 0x000018, "Member 'FQuestCompassConfig::QuestTurnIn' has a wrong offset!");
static_assert(offsetof(FQuestCompassConfig, QuestComplete) == 0x000020, "Member 'FQuestCompassConfig::QuestComplete' has a wrong offset!");
static_assert(offsetof(FQuestCompassConfig, QuestHint) == 0x000028, "Member 'FQuestCompassConfig::QuestHint' has a wrong offset!");
static_assert(offsetof(FQuestCompassConfig, QuestFindActor) == 0x000030, "Member 'FQuestCompassConfig::QuestFindActor' has a wrong offset!");
static_assert(offsetof(FQuestCompassConfig, QuestSearchArea) == 0x000038, "Member 'FQuestCompassConfig::QuestSearchArea' has a wrong offset!");
static_assert(offsetof(FQuestCompassConfig, QuestIconConfig) == 0x000040, "Member 'FQuestCompassConfig::QuestIconConfig' has a wrong offset!");

// ScriptStruct Palia.Quest
// 0x0028 (0x0028 - 0x0000)
struct FQuest final
{
public:
	int32                                         QuestConfigId;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestRequirement>              Requirements;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuestReward>                   Rewards;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuest) == 0x000008, "Wrong alignment on FQuest");
static_assert(sizeof(FQuest) == 0x000028, "Wrong size on FQuest");
static_assert(offsetof(FQuest, QuestConfigId) == 0x000000, "Member 'FQuest::QuestConfigId' has a wrong offset!");
static_assert(offsetof(FQuest, Requirements) == 0x000008, "Member 'FQuest::Requirements' has a wrong offset!");
static_assert(offsetof(FQuest, Rewards) == 0x000018, "Member 'FQuest::Rewards' has a wrong offset!");

// ScriptStruct Palia.RecipeLearnedFrom
// 0x0018 (0x0018 - 0x0000)
struct FRecipeLearnedFrom final
{
public:
	ERecipeLearnedFromType                        Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestRewardSourceType                        QuestRewardSourceType;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233F[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VillagerStoreName;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecipeLearnedFrom) == 0x000008, "Wrong alignment on FRecipeLearnedFrom");
static_assert(sizeof(FRecipeLearnedFrom) == 0x000018, "Wrong size on FRecipeLearnedFrom");
static_assert(offsetof(FRecipeLearnedFrom, Type) == 0x000000, "Member 'FRecipeLearnedFrom::Type' has a wrong offset!");
static_assert(offsetof(FRecipeLearnedFrom, QuestRewardSourceType) == 0x000001, "Member 'FRecipeLearnedFrom::QuestRewardSourceType' has a wrong offset!");
static_assert(offsetof(FRecipeLearnedFrom, VillagerStoreName) == 0x000008, "Member 'FRecipeLearnedFrom::VillagerStoreName' has a wrong offset!");

// ScriptStruct Palia.ResourceTrackerTypeConfig
// 0x0030 (0x0030 - 0x0000)
struct FResourceTrackerTypeConfig final
{
public:
	float                                         DistanceToTrack;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAmountToTrack;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CompassIconToShow;                                 // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FResourceTrackerTypeConfig) == 0x000008, "Wrong alignment on FResourceTrackerTypeConfig");
static_assert(sizeof(FResourceTrackerTypeConfig) == 0x000030, "Wrong size on FResourceTrackerTypeConfig");
static_assert(offsetof(FResourceTrackerTypeConfig, DistanceToTrack) == 0x000000, "Member 'FResourceTrackerTypeConfig::DistanceToTrack' has a wrong offset!");
static_assert(offsetof(FResourceTrackerTypeConfig, MaxAmountToTrack) == 0x000004, "Member 'FResourceTrackerTypeConfig::MaxAmountToTrack' has a wrong offset!");
static_assert(offsetof(FResourceTrackerTypeConfig, CompassIconToShow) == 0x000008, "Member 'FResourceTrackerTypeConfig::CompassIconToShow' has a wrong offset!");

// ScriptStruct Palia.ShaderBasedAnimEvent
// 0x0010 (0x0010 - 0x0000)
struct FShaderBasedAnimEvent final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShaderBasedAnimEvent) == 0x000004, "Wrong alignment on FShaderBasedAnimEvent");
static_assert(sizeof(FShaderBasedAnimEvent) == 0x000010, "Wrong size on FShaderBasedAnimEvent");
static_assert(offsetof(FShaderBasedAnimEvent, StartTime) == 0x000000, "Member 'FShaderBasedAnimEvent::StartTime' has a wrong offset!");
static_assert(offsetof(FShaderBasedAnimEvent, Duration) == 0x000004, "Member 'FShaderBasedAnimEvent::Duration' has a wrong offset!");
static_assert(offsetof(FShaderBasedAnimEvent, EventName) == 0x000008, "Member 'FShaderBasedAnimEvent::EventName' has a wrong offset!");

// ScriptStruct Palia.ShaderBasedAnimationPlayback
// 0x0018 (0x0018 - 0x0000)
struct FShaderBasedAnimationPlayback final
{
public:
	class UShaderBasedAnimation*                  AnimationToPlay;                                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTimeSecs;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackSpeed;                                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShaderBasedAnimPlaybackCycle                 PlaybackCycle;                                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2340[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShaderBasedAnimationPlayback) == 0x000008, "Wrong alignment on FShaderBasedAnimationPlayback");
static_assert(sizeof(FShaderBasedAnimationPlayback) == 0x000018, "Wrong size on FShaderBasedAnimationPlayback");
static_assert(offsetof(FShaderBasedAnimationPlayback, AnimationToPlay) == 0x000000, "Member 'FShaderBasedAnimationPlayback::AnimationToPlay' has a wrong offset!");
static_assert(offsetof(FShaderBasedAnimationPlayback, CurrentTimeSecs) == 0x000008, "Member 'FShaderBasedAnimationPlayback::CurrentTimeSecs' has a wrong offset!");
static_assert(offsetof(FShaderBasedAnimationPlayback, PlaybackSpeed) == 0x00000C, "Member 'FShaderBasedAnimationPlayback::PlaybackSpeed' has a wrong offset!");
static_assert(offsetof(FShaderBasedAnimationPlayback, PlaybackCycle) == 0x000010, "Member 'FShaderBasedAnimationPlayback::PlaybackCycle' has a wrong offset!");

// ScriptStruct Palia.ItemSoldRecord
// 0x0040 (0x0040 - 0x0000)
struct FItemSoldRecord final
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantitySold;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VitalAmountMade;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVitalType                                    VitalTypeMade;                                     // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2341[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TintPersistID;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2342[0x4];                                     // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemSoldRecord) == 0x000008, "Wrong alignment on FItemSoldRecord");
static_assert(sizeof(FItemSoldRecord) == 0x000040, "Wrong size on FItemSoldRecord");
static_assert(offsetof(FItemSoldRecord, ItemType) == 0x000000, "Member 'FItemSoldRecord::ItemType' has a wrong offset!");
static_assert(offsetof(FItemSoldRecord, QualityStars) == 0x000028, "Member 'FItemSoldRecord::QualityStars' has a wrong offset!");
static_assert(offsetof(FItemSoldRecord, QuantitySold) == 0x00002C, "Member 'FItemSoldRecord::QuantitySold' has a wrong offset!");
static_assert(offsetof(FItemSoldRecord, VitalAmountMade) == 0x000030, "Member 'FItemSoldRecord::VitalAmountMade' has a wrong offset!");
static_assert(offsetof(FItemSoldRecord, VitalTypeMade) == 0x000034, "Member 'FItemSoldRecord::VitalTypeMade' has a wrong offset!");
static_assert(offsetof(FItemSoldRecord, TintPersistID) == 0x000038, "Member 'FItemSoldRecord::TintPersistID' has a wrong offset!");

// ScriptStruct Palia.SkillXpAggregation
// 0x0008 (0x0008 - 0x0000)
struct FSkillXpAggregation final
{
public:
	int32                                         XpAmount;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExternalBonusXpAmount;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillXpAggregation) == 0x000004, "Wrong alignment on FSkillXpAggregation");
static_assert(sizeof(FSkillXpAggregation) == 0x000008, "Wrong size on FSkillXpAggregation");
static_assert(offsetof(FSkillXpAggregation, XpAmount) == 0x000000, "Member 'FSkillXpAggregation::XpAmount' has a wrong offset!");
static_assert(offsetof(FSkillXpAggregation, ExternalBonusXpAmount) == 0x000004, "Member 'FSkillXpAggregation::ExternalBonusXpAmount' has a wrong offset!");

// ScriptStruct Palia.SkillXpAggregationGroup
// 0x0050 (0x0050 - 0x0000)
struct FSkillXpAggregationGroup final
{
public:
	TMap<ESkillType, struct FSkillXpAggregation>  AggSet;                                            // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillXpAggregationGroup) == 0x000008, "Wrong alignment on FSkillXpAggregationGroup");
static_assert(sizeof(FSkillXpAggregationGroup) == 0x000050, "Wrong size on FSkillXpAggregationGroup");
static_assert(offsetof(FSkillXpAggregationGroup, AggSet) == 0x000000, "Member 'FSkillXpAggregationGroup::AggSet' has a wrong offset!");

// ScriptStruct Palia.SkillXpEarningsConfig
// 0x0008 (0x0010 - 0x0008)
struct FSkillXpEarningsConfig final : public FTableRowBase
{
public:
	ESkillType                                    SkillType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2343[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkillAmount;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillXpEarningsConfig) == 0x000008, "Wrong alignment on FSkillXpEarningsConfig");
static_assert(sizeof(FSkillXpEarningsConfig) == 0x000010, "Wrong size on FSkillXpEarningsConfig");
static_assert(offsetof(FSkillXpEarningsConfig, SkillType) == 0x000008, "Member 'FSkillXpEarningsConfig::SkillType' has a wrong offset!");
static_assert(offsetof(FSkillXpEarningsConfig, SkillAmount) == 0x00000C, "Member 'FSkillXpEarningsConfig::SkillAmount' has a wrong offset!");

// ScriptStruct Palia.LimitedTimeFilterToCheck
// 0x0038 (0x0038 - 0x0000)
struct FLimitedTimeFilterToCheck final
{
public:
	struct FTimeOfDayFilter                       TimeOfDay;                                         // 0x0000(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredWeatherGameStates;                         // 0x0018(0x0020)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLimitedTimeFilterToCheck) == 0x000008, "Wrong alignment on FLimitedTimeFilterToCheck");
static_assert(sizeof(FLimitedTimeFilterToCheck) == 0x000038, "Wrong size on FLimitedTimeFilterToCheck");
static_assert(offsetof(FLimitedTimeFilterToCheck, TimeOfDay) == 0x000000, "Member 'FLimitedTimeFilterToCheck::TimeOfDay' has a wrong offset!");
static_assert(offsetof(FLimitedTimeFilterToCheck, RequiredWeatherGameStates) == 0x000018, "Member 'FLimitedTimeFilterToCheck::RequiredWeatherGameStates' has a wrong offset!");

// ScriptStruct Palia.SpawnRarityConfig
// 0x0060 (0x0068 - 0x0008)
struct FSpawnRarityConfig final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   BaseActor;                                         // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   BaseRarity;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2344[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   StarQualityVariant;                                // 0x0038(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarQualityChance;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2345[0x4];                                     // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpawnRarityConfig) == 0x000008, "Wrong alignment on FSpawnRarityConfig");
static_assert(sizeof(FSpawnRarityConfig) == 0x000068, "Wrong size on FSpawnRarityConfig");
static_assert(offsetof(FSpawnRarityConfig, BaseActor) == 0x000008, "Member 'FSpawnRarityConfig::BaseActor' has a wrong offset!");
static_assert(offsetof(FSpawnRarityConfig, BaseRarity) == 0x000030, "Member 'FSpawnRarityConfig::BaseRarity' has a wrong offset!");
static_assert(offsetof(FSpawnRarityConfig, StarQualityVariant) == 0x000038, "Member 'FSpawnRarityConfig::StarQualityVariant' has a wrong offset!");
static_assert(offsetof(FSpawnRarityConfig, StarQualityChance) == 0x000060, "Member 'FSpawnRarityConfig::StarQualityChance' has a wrong offset!");

// ScriptStruct Palia.TeleportDestinationConfig
// 0x0010 (0x0010 - 0x0000)
struct FTeleportDestinationConfig final
{
public:
	class UTeleportTravelConfigAsset*             DestinationConfig;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoldCost;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2346[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeleportDestinationConfig) == 0x000008, "Wrong alignment on FTeleportDestinationConfig");
static_assert(sizeof(FTeleportDestinationConfig) == 0x000010, "Wrong size on FTeleportDestinationConfig");
static_assert(offsetof(FTeleportDestinationConfig, DestinationConfig) == 0x000000, "Member 'FTeleportDestinationConfig::DestinationConfig' has a wrong offset!");
static_assert(offsetof(FTeleportDestinationConfig, GoldCost) == 0x000008, "Member 'FTeleportDestinationConfig::GoldCost' has a wrong offset!");

// ScriptStruct Palia.StoragePool
// 0x0068 (0x0068 - 0x0000)
struct FStoragePool final
{
public:
	EStoragePoolType                              PoolType;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2347[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemCapacity;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemMax;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCountUnlimited;                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2348[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStorageComponent*                      OwnerStorageComponent;                             // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2349[0x48];                                    // 0x0020(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoragePool) == 0x000008, "Wrong alignment on FStoragePool");
static_assert(sizeof(FStoragePool) == 0x000068, "Wrong size on FStoragePool");
static_assert(offsetof(FStoragePool, PoolType) == 0x000000, "Member 'FStoragePool::PoolType' has a wrong offset!");
static_assert(offsetof(FStoragePool, ItemCapacity) == 0x000004, "Member 'FStoragePool::ItemCapacity' has a wrong offset!");
static_assert(offsetof(FStoragePool, ItemMax) == 0x000008, "Member 'FStoragePool::ItemMax' has a wrong offset!");
static_assert(offsetof(FStoragePool, ItemCount) == 0x00000C, "Member 'FStoragePool::ItemCount' has a wrong offset!");
static_assert(offsetof(FStoragePool, ItemCountUnlimited) == 0x000010, "Member 'FStoragePool::ItemCountUnlimited' has a wrong offset!");
static_assert(offsetof(FStoragePool, OwnerStorageComponent) == 0x000018, "Member 'FStoragePool::OwnerStorageComponent' has a wrong offset!");

// ScriptStruct Palia.ArcadeReplicatedReplayFrameArray
// 0x0020 (0x0128 - 0x0108)
struct FArcadeReplicatedReplayFrameArray final : public FFastArraySerializer
{
public:
	TArray<struct FArcadeReplicatedReplayFrame>   Frames;                                            // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_234A[0x10];                                    // 0x0118(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArcadeReplicatedReplayFrameArray) == 0x000008, "Wrong alignment on FArcadeReplicatedReplayFrameArray");
static_assert(sizeof(FArcadeReplicatedReplayFrameArray) == 0x000128, "Wrong size on FArcadeReplicatedReplayFrameArray");
static_assert(offsetof(FArcadeReplicatedReplayFrameArray, Frames) == 0x000108, "Member 'FArcadeReplicatedReplayFrameArray::Frames' has a wrong offset!");

// ScriptStruct Palia.TrackedVillagerInfoSerializer
// 0x0018 (0x0120 - 0x0108)
struct FTrackedVillagerInfoSerializer final : public FFastArraySerializer
{
public:
	TArray<struct FTrackedVillagerInfo>           Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UTrackingComponent*                     TrackingComponent;                                 // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackedVillagerInfoSerializer) == 0x000008, "Wrong alignment on FTrackedVillagerInfoSerializer");
static_assert(sizeof(FTrackedVillagerInfoSerializer) == 0x000120, "Wrong size on FTrackedVillagerInfoSerializer");
static_assert(offsetof(FTrackedVillagerInfoSerializer, Items) == 0x000108, "Member 'FTrackedVillagerInfoSerializer::Items' has a wrong offset!");
static_assert(offsetof(FTrackedVillagerInfoSerializer, TrackingComponent) == 0x000118, "Member 'FTrackedVillagerInfoSerializer::TrackingComponent' has a wrong offset!");

// ScriptStruct Palia.TrackedItemSerializer
// 0x0018 (0x0120 - 0x0108)
struct FTrackedItemSerializer final : public FFastArraySerializer
{
public:
	TArray<struct FTrackedItemInfo>               Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UTrackingComponent*                     TrackingComponent;                                 // 0x0118(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackedItemSerializer) == 0x000008, "Wrong alignment on FTrackedItemSerializer");
static_assert(sizeof(FTrackedItemSerializer) == 0x000120, "Wrong size on FTrackedItemSerializer");
static_assert(offsetof(FTrackedItemSerializer, Items) == 0x000108, "Member 'FTrackedItemSerializer::Items' has a wrong offset!");
static_assert(offsetof(FTrackedItemSerializer, TrackingComponent) == 0x000118, "Member 'FTrackedItemSerializer::TrackingComponent' has a wrong offset!");

// ScriptStruct Palia.SessionInfoData
// 0x0020 (0x0020 - 0x0000)
struct FSessionInfoData final
{
public:
	class FString                                 InstanceAddressAndPort;                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionInfoData) == 0x000008, "Wrong alignment on FSessionInfoData");
static_assert(sizeof(FSessionInfoData) == 0x000020, "Wrong size on FSessionInfoData");
static_assert(offsetof(FSessionInfoData, InstanceAddressAndPort) == 0x000000, "Member 'FSessionInfoData::InstanceAddressAndPort' has a wrong offset!");
static_assert(offsetof(FSessionInfoData, ServerName) == 0x000010, "Member 'FSessionInfoData::ServerName' has a wrong offset!");

// ScriptStruct Palia.AbsorptionAuxBusSetting
// 0x0010 (0x0010 - 0x0000)
struct FAbsorptionAuxBusSetting final
{
public:
	float                                         AbsorptionThreshold;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAuxBus*                              AuxBus;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbsorptionAuxBusSetting) == 0x000008, "Wrong alignment on FAbsorptionAuxBusSetting");
static_assert(sizeof(FAbsorptionAuxBusSetting) == 0x000010, "Wrong size on FAbsorptionAuxBusSetting");
static_assert(offsetof(FAbsorptionAuxBusSetting, AbsorptionThreshold) == 0x000000, "Member 'FAbsorptionAuxBusSetting::AbsorptionThreshold' has a wrong offset!");
static_assert(offsetof(FAbsorptionAuxBusSetting, AuxBus) == 0x000008, "Member 'FAbsorptionAuxBusSetting::AuxBus' has a wrong offset!");

// ScriptStruct Palia.WeightedAnimSet
// 0x0050 (0x0050 - 0x0000)
struct FWeightedAnimSet final
{
public:
	TMap<class UAnimSequenceBase*, float>         WeightedAnims;                                     // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeightedAnimSet) == 0x000008, "Wrong alignment on FWeightedAnimSet");
static_assert(sizeof(FWeightedAnimSet) == 0x000050, "Wrong size on FWeightedAnimSet");
static_assert(offsetof(FWeightedAnimSet, WeightedAnims) == 0x000000, "Member 'FWeightedAnimSet::WeightedAnims' has a wrong offset!");

// ScriptStruct Palia.FloorInfo
// 0x00F0 (0x00F0 - 0x0000)
struct FFloorInfo final
{
public:
	uint8                                         bBlockingHit : 1;                                  // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWalkableFloor : 1;                                // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLineTrace : 1;                                    // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_234C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloorDist;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x00E8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloorInfo) == 0x000008, "Wrong alignment on FFloorInfo");
static_assert(sizeof(FFloorInfo) == 0x0000F0, "Wrong size on FFloorInfo");
static_assert(offsetof(FFloorInfo, FloorDist) == 0x000004, "Member 'FFloorInfo::FloorDist' has a wrong offset!");
static_assert(offsetof(FFloorInfo, HitResult) == 0x000008, "Member 'FFloorInfo::HitResult' has a wrong offset!");

// ScriptStruct Palia.ValeriaBaseMovementComponentPreTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FValeriaBaseMovementComponentPreTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_234D[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaBaseMovementComponentPreTickFunction) == 0x000008, "Wrong alignment on FValeriaBaseMovementComponentPreTickFunction");
static_assert(sizeof(FValeriaBaseMovementComponentPreTickFunction) == 0x000030, "Wrong size on FValeriaBaseMovementComponentPreTickFunction");

// ScriptStruct Palia.ValeriaBaseMovementComponentPostPhysicsTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FValeriaBaseMovementComponentPostPhysicsTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_234E[0x8];                                     // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaBaseMovementComponentPostPhysicsTickFunction) == 0x000008, "Wrong alignment on FValeriaBaseMovementComponentPostPhysicsTickFunction");
static_assert(sizeof(FValeriaBaseMovementComponentPostPhysicsTickFunction) == 0x000030, "Wrong size on FValeriaBaseMovementComponentPostPhysicsTickFunction");

// ScriptStruct Palia.SimMoveThrottleMappings
// 0x0060 (0x0060 - 0x0000)
struct FSimMoveThrottleMappings final
{
public:
	TSoftObjectPtr<class USimMoveThrottleMapping> NormalMapping;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USimMoveThrottleMapping> ConstrainedPlatformMapping;                        // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USimMoveThrottleMapping*                NormalMappingCache;                                // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USimMoveThrottleMapping*                ConstrainedPlatformMappingCache;                   // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimMoveThrottleMappings) == 0x000008, "Wrong alignment on FSimMoveThrottleMappings");
static_assert(sizeof(FSimMoveThrottleMappings) == 0x000060, "Wrong size on FSimMoveThrottleMappings");
static_assert(offsetof(FSimMoveThrottleMappings, NormalMapping) == 0x000000, "Member 'FSimMoveThrottleMappings::NormalMapping' has a wrong offset!");
static_assert(offsetof(FSimMoveThrottleMappings, ConstrainedPlatformMapping) == 0x000028, "Member 'FSimMoveThrottleMappings::ConstrainedPlatformMapping' has a wrong offset!");
static_assert(offsetof(FSimMoveThrottleMappings, NormalMappingCache) == 0x000050, "Member 'FSimMoveThrottleMappings::NormalMappingCache' has a wrong offset!");
static_assert(offsetof(FSimMoveThrottleMappings, ConstrainedPlatformMappingCache) == 0x000058, "Member 'FSimMoveThrottleMappings::ConstrainedPlatformMappingCache' has a wrong offset!");

// ScriptStruct Palia.ValeriaEnforcedPositionInfo
// 0x0038 (0x0038 - 0x0000)
struct FValeriaEnforcedPositionInfo final
{
public:
	bool                                          bHold;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               Facing;                                            // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FValeriaEnforcedPositionInfo) == 0x000008, "Wrong alignment on FValeriaEnforcedPositionInfo");
static_assert(sizeof(FValeriaEnforcedPositionInfo) == 0x000038, "Wrong size on FValeriaEnforcedPositionInfo");
static_assert(offsetof(FValeriaEnforcedPositionInfo, bHold) == 0x000000, "Member 'FValeriaEnforcedPositionInfo::bHold' has a wrong offset!");
static_assert(offsetof(FValeriaEnforcedPositionInfo, Location) == 0x000008, "Member 'FValeriaEnforcedPositionInfo::Location' has a wrong offset!");
static_assert(offsetof(FValeriaEnforcedPositionInfo, Facing) == 0x000020, "Member 'FValeriaEnforcedPositionInfo::Facing' has a wrong offset!");

// ScriptStruct Palia.ValeriaClientToServerMoveInfo
// 0x0050 (0x0050 - 0x0000)
struct FValeriaClientToServerMoveInfo final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetVelocity;                                    // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetFacing;                                      // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         MoveSimType;                                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DesiredMovementMode;                               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DesiredCustomSubMode;                              // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ExtraFlags;                                        // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2350[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FValeriaClientToServerMoveInfo) == 0x000008, "Wrong alignment on FValeriaClientToServerMoveInfo");
static_assert(sizeof(FValeriaClientToServerMoveInfo) == 0x000050, "Wrong size on FValeriaClientToServerMoveInfo");
static_assert(offsetof(FValeriaClientToServerMoveInfo, TargetLocation) == 0x000000, "Member 'FValeriaClientToServerMoveInfo::TargetLocation' has a wrong offset!");
static_assert(offsetof(FValeriaClientToServerMoveInfo, TargetVelocity) == 0x000018, "Member 'FValeriaClientToServerMoveInfo::TargetVelocity' has a wrong offset!");
static_assert(offsetof(FValeriaClientToServerMoveInfo, TargetFacing) == 0x000030, "Member 'FValeriaClientToServerMoveInfo::TargetFacing' has a wrong offset!");
static_assert(offsetof(FValeriaClientToServerMoveInfo, MoveSimType) == 0x000048, "Member 'FValeriaClientToServerMoveInfo::MoveSimType' has a wrong offset!");
static_assert(offsetof(FValeriaClientToServerMoveInfo, DesiredMovementMode) == 0x000049, "Member 'FValeriaClientToServerMoveInfo::DesiredMovementMode' has a wrong offset!");
static_assert(offsetof(FValeriaClientToServerMoveInfo, DesiredCustomSubMode) == 0x00004A, "Member 'FValeriaClientToServerMoveInfo::DesiredCustomSubMode' has a wrong offset!");
static_assert(offsetof(FValeriaClientToServerMoveInfo, ExtraFlags) == 0x00004B, "Member 'FValeriaClientToServerMoveInfo::ExtraFlags' has a wrong offset!");

// ScriptStruct Palia.PlayEmoteOptionalParams
// 0x0008 (0x0008 - 0x0000)
struct FPlayEmoteOptionalParams final
{
public:
	class AActor*                                 ActorToEmoteAt;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayEmoteOptionalParams) == 0x000008, "Wrong alignment on FPlayEmoteOptionalParams");
static_assert(sizeof(FPlayEmoteOptionalParams) == 0x000008, "Wrong size on FPlayEmoteOptionalParams");
static_assert(offsetof(FPlayEmoteOptionalParams, ActorToEmoteAt) == 0x000000, "Member 'FPlayEmoteOptionalParams::ActorToEmoteAt' has a wrong offset!");

// ScriptStruct Palia.ActiveEmotePlaybackLog
// 0x0010 (0x0010 - 0x0000)
struct FActiveEmotePlaybackLog final
{
public:
	float                                         ExpirationTimestamp;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2351[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEmoteDataAsset*                        EmotePlayData;                                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveEmotePlaybackLog) == 0x000008, "Wrong alignment on FActiveEmotePlaybackLog");
static_assert(sizeof(FActiveEmotePlaybackLog) == 0x000010, "Wrong size on FActiveEmotePlaybackLog");
static_assert(offsetof(FActiveEmotePlaybackLog, ExpirationTimestamp) == 0x000000, "Member 'FActiveEmotePlaybackLog::ExpirationTimestamp' has a wrong offset!");
static_assert(offsetof(FActiveEmotePlaybackLog, EmotePlayData) == 0x000008, "Member 'FActiveEmotePlaybackLog::EmotePlayData' has a wrong offset!");

// ScriptStruct Palia.HousingOwnershipQueryRequestParam
// 0x0030 (0x0030 - 0x0000)
struct FHousingOwnershipQueryRequestParam final
{
public:
	struct FGuid                                  LoadHouseId;                                       // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerCharacter;                                    // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2352[0x10];                                    // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHousingOwnershipQueryRequestParam) == 0x000008, "Wrong alignment on FHousingOwnershipQueryRequestParam");
static_assert(sizeof(FHousingOwnershipQueryRequestParam) == 0x000030, "Wrong size on FHousingOwnershipQueryRequestParam");
static_assert(offsetof(FHousingOwnershipQueryRequestParam, LoadHouseId) == 0x000000, "Member 'FHousingOwnershipQueryRequestParam::LoadHouseId' has a wrong offset!");
static_assert(offsetof(FHousingOwnershipQueryRequestParam, OwnerCharacter) == 0x000010, "Member 'FHousingOwnershipQueryRequestParam::OwnerCharacter' has a wrong offset!");

// ScriptStruct Palia.HousingLoadingData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FHousingLoadingData final
{
public:
	bool                                          bContainerDataLoaded;                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2353[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HouseGuid;                                         // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2354[0x14];                                    // 0x0014(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHousingLoadingData) == 0x000008, "Wrong alignment on FHousingLoadingData");
static_assert(sizeof(FHousingLoadingData) == 0x000028, "Wrong size on FHousingLoadingData");
static_assert(offsetof(FHousingLoadingData, bContainerDataLoaded) == 0x000000, "Member 'FHousingLoadingData::bContainerDataLoaded' has a wrong offset!");
static_assert(offsetof(FHousingLoadingData, HouseGuid) == 0x000004, "Member 'FHousingLoadingData::HouseGuid' has a wrong offset!");

// ScriptStruct Palia.CharacterPrimaryBlockLoadingData
// 0x0168 (0x0168 - 0x0000)
struct alignas(0x08) FCharacterPrimaryBlockLoadingData final
{
public:
	bool                                          bDataLoaded;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2355[0x167];                                   // 0x0001(0x0167)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterPrimaryBlockLoadingData) == 0x000008, "Wrong alignment on FCharacterPrimaryBlockLoadingData");
static_assert(sizeof(FCharacterPrimaryBlockLoadingData) == 0x000168, "Wrong size on FCharacterPrimaryBlockLoadingData");
static_assert(offsetof(FCharacterPrimaryBlockLoadingData, bDataLoaded) == 0x000000, "Member 'FCharacterPrimaryBlockLoadingData::bDataLoaded' has a wrong offset!");

// ScriptStruct Palia.HousingPrimaryBlockLoadingData
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x08) FHousingPrimaryBlockLoadingData final
{
public:
	bool                                          bDataLoaded;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2356[0xA7];                                    // 0x0001(0x00A7)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHousingPrimaryBlockLoadingData) == 0x000008, "Wrong alignment on FHousingPrimaryBlockLoadingData");
static_assert(sizeof(FHousingPrimaryBlockLoadingData) == 0x0000A8, "Wrong size on FHousingPrimaryBlockLoadingData");
static_assert(offsetof(FHousingPrimaryBlockLoadingData, bDataLoaded) == 0x000000, "Member 'FHousingPrimaryBlockLoadingData::bDataLoaded' has a wrong offset!");

// ScriptStruct Palia.TrackedVillagerItem
// 0x0034 (0x0040 - 0x000C)
struct FTrackedVillagerItem final : public FFastArraySerializerItem
{
public:
	TWeakObjectPtr<class AValeriaVillagerCharacter> TrackedVillager;                                   // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VillagerId;                                        // 0x0014(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2357[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackedVillagerItem) == 0x000008, "Wrong alignment on FTrackedVillagerItem");
static_assert(sizeof(FTrackedVillagerItem) == 0x000040, "Wrong size on FTrackedVillagerItem");
static_assert(offsetof(FTrackedVillagerItem, TrackedVillager) == 0x00000C, "Member 'FTrackedVillagerItem::TrackedVillager' has a wrong offset!");
static_assert(offsetof(FTrackedVillagerItem, VillagerId) == 0x000014, "Member 'FTrackedVillagerItem::VillagerId' has a wrong offset!");
static_assert(offsetof(FTrackedVillagerItem, Location) == 0x000028, "Member 'FTrackedVillagerItem::Location' has a wrong offset!");

// ScriptStruct Palia.TrackedVillagerSerializer
// 0x0018 (0x0120 - 0x0108)
struct FTrackedVillagerSerializer final : public FFastArraySerializer
{
public:
	TArray<struct FTrackedVillagerItem>           Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class AValeriaGameState*                      Owner;                                             // 0x0118(0x0008)(ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackedVillagerSerializer) == 0x000008, "Wrong alignment on FTrackedVillagerSerializer");
static_assert(sizeof(FTrackedVillagerSerializer) == 0x000120, "Wrong size on FTrackedVillagerSerializer");
static_assert(offsetof(FTrackedVillagerSerializer, Items) == 0x000108, "Member 'FTrackedVillagerSerializer::Items' has a wrong offset!");
static_assert(offsetof(FTrackedVillagerSerializer, Owner) == 0x000118, "Member 'FTrackedVillagerSerializer::Owner' has a wrong offset!");

// ScriptStruct Palia.ValeriaPrivacySettings
// 0x0002 (0x0002 - 0x0000)
struct FValeriaPrivacySettings final
{
public:
	bool                                          bHideSocialInformation;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultChannelsToOff;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaPrivacySettings) == 0x000001, "Wrong alignment on FValeriaPrivacySettings");
static_assert(sizeof(FValeriaPrivacySettings) == 0x000002, "Wrong size on FValeriaPrivacySettings");
static_assert(offsetof(FValeriaPrivacySettings, bHideSocialInformation) == 0x000000, "Member 'FValeriaPrivacySettings::bHideSocialInformation' has a wrong offset!");
static_assert(offsetof(FValeriaPrivacySettings, bDefaultChannelsToOff) == 0x000001, "Member 'FValeriaPrivacySettings::bDefaultChannelsToOff' has a wrong offset!");

// ScriptStruct Palia.ValeriaLoginSettings
// 0x0010 (0x0010 - 0x0000)
struct FValeriaLoginSettings final
{
public:
	class FString                                 LastLoginName;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaLoginSettings) == 0x000008, "Wrong alignment on FValeriaLoginSettings");
static_assert(sizeof(FValeriaLoginSettings) == 0x000010, "Wrong size on FValeriaLoginSettings");
static_assert(offsetof(FValeriaLoginSettings, LastLoginName) == 0x000000, "Member 'FValeriaLoginSettings::LastLoginName' has a wrong offset!");

// ScriptStruct Palia.VAL_PostDialogueChainSupplementaryInfo
// 0x0010 (0x0010 - 0x0000)
struct FVAL_PostDialogueChainSupplementaryInfo final
{
public:
	TArray<struct FVAL_PostDialogueChainGiftInfo> PostDialogueChainGiftInfos;                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PostDialogueChainSupplementaryInfo) == 0x000008, "Wrong alignment on FVAL_PostDialogueChainSupplementaryInfo");
static_assert(sizeof(FVAL_PostDialogueChainSupplementaryInfo) == 0x000010, "Wrong size on FVAL_PostDialogueChainSupplementaryInfo");
static_assert(offsetof(FVAL_PostDialogueChainSupplementaryInfo, PostDialogueChainGiftInfos) == 0x000000, "Member 'FVAL_PostDialogueChainSupplementaryInfo::PostDialogueChainGiftInfos' has a wrong offset!");

// ScriptStruct Palia.InputLock
// 0x0018 (0x0018 - 0x0000)
struct FInputLock final
{
public:
	class UObject*                                ObjectRequestingLock;                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2358[0x10];                                    // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputLock) == 0x000008, "Wrong alignment on FInputLock");
static_assert(sizeof(FInputLock) == 0x000018, "Wrong size on FInputLock");
static_assert(offsetof(FInputLock, ObjectRequestingLock) == 0x000000, "Member 'FInputLock::ObjectRequestingLock' has a wrong offset!");

// ScriptStruct Palia.TelemetryClientDataForSnapshotRpc
// 0x0078 (0x0078 - 0x0000)
struct FTelemetryClientDataForSnapshotRpc final
{
public:
	float                                         FrameTime;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameThreadTime;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RenderThreadTime;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GpuFrameTime;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RhiThreadTime;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputLatencyTime;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameTimeMin;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameThreadTimeMin;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RenderThreadTimeMin;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GpuFrameTimeMin;                                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RhiThreadTimeMin;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputLatencyTimeMin;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameTimeMax;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameThreadTimeMax;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RenderThreadTimeMax;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GpuFrameTimeMax;                                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RhiThreadTimeMax;                                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputLatencyTimeMax;                               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameTimeAverage;                                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameThreadTimeAverage;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RenderThreadTimeAverage;                           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GpuFrameTimeAverage;                               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RhiThreadTimeAverage;                              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputLatencyTimeAverage;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fps;                                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2359[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Ping;                                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTimingInfo;                                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235A[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTelemetryClientDataForSnapshotRpc) == 0x000008, "Wrong alignment on FTelemetryClientDataForSnapshotRpc");
static_assert(sizeof(FTelemetryClientDataForSnapshotRpc) == 0x000078, "Wrong size on FTelemetryClientDataForSnapshotRpc");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, FrameTime) == 0x000000, "Member 'FTelemetryClientDataForSnapshotRpc::FrameTime' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, GameThreadTime) == 0x000004, "Member 'FTelemetryClientDataForSnapshotRpc::GameThreadTime' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, RenderThreadTime) == 0x000008, "Member 'FTelemetryClientDataForSnapshotRpc::RenderThreadTime' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, GpuFrameTime) == 0x00000C, "Member 'FTelemetryClientDataForSnapshotRpc::GpuFrameTime' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, RhiThreadTime) == 0x000010, "Member 'FTelemetryClientDataForSnapshotRpc::RhiThreadTime' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, InputLatencyTime) == 0x000014, "Member 'FTelemetryClientDataForSnapshotRpc::InputLatencyTime' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, FrameTimeMin) == 0x000018, "Member 'FTelemetryClientDataForSnapshotRpc::FrameTimeMin' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, GameThreadTimeMin) == 0x00001C, "Member 'FTelemetryClientDataForSnapshotRpc::GameThreadTimeMin' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, RenderThreadTimeMin) == 0x000020, "Member 'FTelemetryClientDataForSnapshotRpc::RenderThreadTimeMin' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, GpuFrameTimeMin) == 0x000024, "Member 'FTelemetryClientDataForSnapshotRpc::GpuFrameTimeMin' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, RhiThreadTimeMin) == 0x000028, "Member 'FTelemetryClientDataForSnapshotRpc::RhiThreadTimeMin' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, InputLatencyTimeMin) == 0x00002C, "Member 'FTelemetryClientDataForSnapshotRpc::InputLatencyTimeMin' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, FrameTimeMax) == 0x000030, "Member 'FTelemetryClientDataForSnapshotRpc::FrameTimeMax' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, GameThreadTimeMax) == 0x000034, "Member 'FTelemetryClientDataForSnapshotRpc::GameThreadTimeMax' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, RenderThreadTimeMax) == 0x000038, "Member 'FTelemetryClientDataForSnapshotRpc::RenderThreadTimeMax' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, GpuFrameTimeMax) == 0x00003C, "Member 'FTelemetryClientDataForSnapshotRpc::GpuFrameTimeMax' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, RhiThreadTimeMax) == 0x000040, "Member 'FTelemetryClientDataForSnapshotRpc::RhiThreadTimeMax' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, InputLatencyTimeMax) == 0x000044, "Member 'FTelemetryClientDataForSnapshotRpc::InputLatencyTimeMax' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, FrameTimeAverage) == 0x000048, "Member 'FTelemetryClientDataForSnapshotRpc::FrameTimeAverage' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, GameThreadTimeAverage) == 0x00004C, "Member 'FTelemetryClientDataForSnapshotRpc::GameThreadTimeAverage' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, RenderThreadTimeAverage) == 0x000050, "Member 'FTelemetryClientDataForSnapshotRpc::RenderThreadTimeAverage' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, GpuFrameTimeAverage) == 0x000054, "Member 'FTelemetryClientDataForSnapshotRpc::GpuFrameTimeAverage' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, RhiThreadTimeAverage) == 0x000058, "Member 'FTelemetryClientDataForSnapshotRpc::RhiThreadTimeAverage' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, InputLatencyTimeAverage) == 0x00005C, "Member 'FTelemetryClientDataForSnapshotRpc::InputLatencyTimeAverage' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, Fps) == 0x000060, "Member 'FTelemetryClientDataForSnapshotRpc::Fps' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, Ping) == 0x000068, "Member 'FTelemetryClientDataForSnapshotRpc::Ping' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForSnapshotRpc, bHasTimingInfo) == 0x000070, "Member 'FTelemetryClientDataForSnapshotRpc::bHasTimingInfo' has a wrong offset!");

// ScriptStruct Palia.TelemetryClientDataForGraphicSettingsRpc
// 0x0038 (0x0038 - 0x0000)
struct FTelemetryClientDataForGraphicSettingsRpc final
{
public:
	bool                                          bWasChangedByPlayer;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QualityPreset;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResolutionScalePercent;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewDistance;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Shadows;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AntiAliasing;                                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Textures;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Effects;                                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Postprocessing;                                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Foliage;                                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindowResolutionWidth;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindowResolutionHeight;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRateLimit;                                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVsyncEnabled;                                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDynamicResolutionEnabled;                         // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHdrEnabled;                                       // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235C[0x1];                                     // 0x0037(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTelemetryClientDataForGraphicSettingsRpc) == 0x000004, "Wrong alignment on FTelemetryClientDataForGraphicSettingsRpc");
static_assert(sizeof(FTelemetryClientDataForGraphicSettingsRpc) == 0x000038, "Wrong size on FTelemetryClientDataForGraphicSettingsRpc");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, bWasChangedByPlayer) == 0x000000, "Member 'FTelemetryClientDataForGraphicSettingsRpc::bWasChangedByPlayer' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, QualityPreset) == 0x000004, "Member 'FTelemetryClientDataForGraphicSettingsRpc::QualityPreset' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, ResolutionScalePercent) == 0x000008, "Member 'FTelemetryClientDataForGraphicSettingsRpc::ResolutionScalePercent' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, ViewDistance) == 0x00000C, "Member 'FTelemetryClientDataForGraphicSettingsRpc::ViewDistance' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, Shadows) == 0x000010, "Member 'FTelemetryClientDataForGraphicSettingsRpc::Shadows' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, AntiAliasing) == 0x000014, "Member 'FTelemetryClientDataForGraphicSettingsRpc::AntiAliasing' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, Textures) == 0x000018, "Member 'FTelemetryClientDataForGraphicSettingsRpc::Textures' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, Effects) == 0x00001C, "Member 'FTelemetryClientDataForGraphicSettingsRpc::Effects' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, Postprocessing) == 0x000020, "Member 'FTelemetryClientDataForGraphicSettingsRpc::Postprocessing' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, Foliage) == 0x000024, "Member 'FTelemetryClientDataForGraphicSettingsRpc::Foliage' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, WindowResolutionWidth) == 0x000028, "Member 'FTelemetryClientDataForGraphicSettingsRpc::WindowResolutionWidth' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, WindowResolutionHeight) == 0x00002C, "Member 'FTelemetryClientDataForGraphicSettingsRpc::WindowResolutionHeight' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, FrameRateLimit) == 0x000030, "Member 'FTelemetryClientDataForGraphicSettingsRpc::FrameRateLimit' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, bVsyncEnabled) == 0x000034, "Member 'FTelemetryClientDataForGraphicSettingsRpc::bVsyncEnabled' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, bDynamicResolutionEnabled) == 0x000035, "Member 'FTelemetryClientDataForGraphicSettingsRpc::bDynamicResolutionEnabled' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGraphicSettingsRpc, bHdrEnabled) == 0x000036, "Member 'FTelemetryClientDataForGraphicSettingsRpc::bHdrEnabled' has a wrong offset!");

// ScriptStruct Palia.TelemetryClientDataForGameSettingsRpc
// 0x0058 (0x0058 - 0x0000)
struct FTelemetryClientDataForGameSettingsRpc final
{
public:
	bool                                          AddToolsToActionBar;                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BagRowsInActionBar;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideChatTimestamp;                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Language;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFirstTimeHints;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CenterScreenReticle;                               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WorldMapGrid;                                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XAxisInversion;                                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          YAxisInversion;                                    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235F[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseSensitivity;                                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseAimSensitivityMultiplier;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ControllerXAxisInversion;                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ControllerYAxisInversion;                          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2360[0x2];                                     // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ControllerXAxisSensitivity;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerYAxisSensitivity;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerAimSensitivityMultiplier;                // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnableControllerForceFeedback;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CameraShakeOff;                                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2361[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SprintType;                                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEatingWhenFull;                               // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowCookingCameraDesktop;                          // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowCookingCameraConsole;                          // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowServerPing;                                    // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableActionBarWrapping;                           // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2362[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FishingCastSpeed;                                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTelemetryClientDataForGameSettingsRpc) == 0x000008, "Wrong alignment on FTelemetryClientDataForGameSettingsRpc");
static_assert(sizeof(FTelemetryClientDataForGameSettingsRpc) == 0x000058, "Wrong size on FTelemetryClientDataForGameSettingsRpc");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, AddToolsToActionBar) == 0x000000, "Member 'FTelemetryClientDataForGameSettingsRpc::AddToolsToActionBar' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, BagRowsInActionBar) == 0x000004, "Member 'FTelemetryClientDataForGameSettingsRpc::BagRowsInActionBar' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, HideChatTimestamp) == 0x000008, "Member 'FTelemetryClientDataForGameSettingsRpc::HideChatTimestamp' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, Language) == 0x000010, "Member 'FTelemetryClientDataForGameSettingsRpc::Language' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, EnableFirstTimeHints) == 0x000020, "Member 'FTelemetryClientDataForGameSettingsRpc::EnableFirstTimeHints' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, CenterScreenReticle) == 0x000021, "Member 'FTelemetryClientDataForGameSettingsRpc::CenterScreenReticle' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, WorldMapGrid) == 0x000022, "Member 'FTelemetryClientDataForGameSettingsRpc::WorldMapGrid' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, XAxisInversion) == 0x000023, "Member 'FTelemetryClientDataForGameSettingsRpc::XAxisInversion' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, YAxisInversion) == 0x000024, "Member 'FTelemetryClientDataForGameSettingsRpc::YAxisInversion' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, MouseSensitivity) == 0x000028, "Member 'FTelemetryClientDataForGameSettingsRpc::MouseSensitivity' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, MouseAimSensitivityMultiplier) == 0x00002C, "Member 'FTelemetryClientDataForGameSettingsRpc::MouseAimSensitivityMultiplier' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, ControllerXAxisInversion) == 0x000030, "Member 'FTelemetryClientDataForGameSettingsRpc::ControllerXAxisInversion' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, ControllerYAxisInversion) == 0x000031, "Member 'FTelemetryClientDataForGameSettingsRpc::ControllerYAxisInversion' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, ControllerXAxisSensitivity) == 0x000034, "Member 'FTelemetryClientDataForGameSettingsRpc::ControllerXAxisSensitivity' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, ControllerYAxisSensitivity) == 0x000038, "Member 'FTelemetryClientDataForGameSettingsRpc::ControllerYAxisSensitivity' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, ControllerAimSensitivityMultiplier) == 0x00003C, "Member 'FTelemetryClientDataForGameSettingsRpc::ControllerAimSensitivityMultiplier' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, EnableControllerForceFeedback) == 0x000040, "Member 'FTelemetryClientDataForGameSettingsRpc::EnableControllerForceFeedback' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, CameraShakeOff) == 0x000044, "Member 'FTelemetryClientDataForGameSettingsRpc::CameraShakeOff' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, SprintType) == 0x000048, "Member 'FTelemetryClientDataForGameSettingsRpc::SprintType' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, AllowEatingWhenFull) == 0x00004C, "Member 'FTelemetryClientDataForGameSettingsRpc::AllowEatingWhenFull' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, ShowCookingCameraDesktop) == 0x00004D, "Member 'FTelemetryClientDataForGameSettingsRpc::ShowCookingCameraDesktop' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, ShowCookingCameraConsole) == 0x00004E, "Member 'FTelemetryClientDataForGameSettingsRpc::ShowCookingCameraConsole' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, ShowServerPing) == 0x00004F, "Member 'FTelemetryClientDataForGameSettingsRpc::ShowServerPing' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, EnableActionBarWrapping) == 0x000050, "Member 'FTelemetryClientDataForGameSettingsRpc::EnableActionBarWrapping' has a wrong offset!");
static_assert(offsetof(FTelemetryClientDataForGameSettingsRpc, FishingCastSpeed) == 0x000054, "Member 'FTelemetryClientDataForGameSettingsRpc::FishingCastSpeed' has a wrong offset!");

// ScriptStruct Palia.EngagedPlayer
// 0x0014 (0x0014 - 0x0000)
struct FEngagedPlayer final
{
public:
	struct FPersistGuid                           PlayerId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRemaining;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEngagedPlayer) == 0x000004, "Wrong alignment on FEngagedPlayer");
static_assert(sizeof(FEngagedPlayer) == 0x000014, "Wrong size on FEngagedPlayer");
static_assert(offsetof(FEngagedPlayer, PlayerId) == 0x000000, "Member 'FEngagedPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(FEngagedPlayer, TimeRemaining) == 0x000010, "Member 'FEngagedPlayer::TimeRemaining' has a wrong offset!");

// ScriptStruct Palia.ValeriaZoneData
// 0x0028 (0x0028 - 0x0000)
struct FValeriaZoneData final
{
public:
	bool                                          bHasLoaded;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2363[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TimeWarpSecs;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FValeriaPausedTime                     TimePausedAt;                                      // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OverrideSecondsInADayInValeria;                    // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeatherState;                                      // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaZoneData) == 0x000008, "Wrong alignment on FValeriaZoneData");
static_assert(sizeof(FValeriaZoneData) == 0x000028, "Wrong size on FValeriaZoneData");
static_assert(offsetof(FValeriaZoneData, bHasLoaded) == 0x000000, "Member 'FValeriaZoneData::bHasLoaded' has a wrong offset!");
static_assert(offsetof(FValeriaZoneData, TimeWarpSecs) == 0x000008, "Member 'FValeriaZoneData::TimeWarpSecs' has a wrong offset!");
static_assert(offsetof(FValeriaZoneData, TimePausedAt) == 0x000010, "Member 'FValeriaZoneData::TimePausedAt' has a wrong offset!");
static_assert(offsetof(FValeriaZoneData, OverrideSecondsInADayInValeria) == 0x000020, "Member 'FValeriaZoneData::OverrideSecondsInADayInValeria' has a wrong offset!");
static_assert(offsetof(FValeriaZoneData, WeatherState) == 0x000024, "Member 'FValeriaZoneData::WeatherState' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig
// 0x00A0 (0x0108 - 0x0068)
struct FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	TSoftObjectPtr<class UTexture2D>              UIPreviewTexture;                                  // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimInstanceType;                                  // 0x0090(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   HeadAnimInstanceType;                              // 0x00B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              AnimationMappings;                                 // 0x00E0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig) == 0x000108, "Wrong size on FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig, UIPreviewTexture) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig::UIPreviewTexture' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig, AnimInstanceType) == 0x000090, "Member 'FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig::AnimInstanceType' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig, HeadAnimInstanceType) == 0x0000B8, "Member 'FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig::HeadAnimInstanceType' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig, AnimationMappings) == 0x0000E0, "Member 'FVAL_CharacterCustomizationItem_AnimSet_PerBodyTypeConfig::AnimationMappings' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_IrisShape
// 0x00F8 (0x0190 - 0x0098)
struct FVAL_CharacterCustomizationVariantOption_IrisShape final : public FVAL_CharacterCustomizationVariantOptionBase
{
public:
	struct FVAL_CharacterCustomization_MaterialParamOverrides MaterialParamOverrides;                            // 0x0098(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_IrisShape) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_IrisShape");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_IrisShape) == 0x000190, "Wrong size on FVAL_CharacterCustomizationVariantOption_IrisShape");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOption_IrisShape, MaterialParamOverrides) == 0x000098, "Member 'FVAL_CharacterCustomizationVariantOption_IrisShape::MaterialParamOverrides' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig
// 0x0040 (0x00A8 - 0x0068)
struct FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	class FName                                   MaterialSlotNameForEyes;                           // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           UIPreviewColor;                                    // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      EyeMaterial;                                       // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig) == 0x0000A8, "Wrong size on FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig, MaterialSlotNameForEyes) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig::MaterialSlotNameForEyes' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig, UIPreviewColor) == 0x000070, "Member 'FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig::UIPreviewColor' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig, EyeMaterial) == 0x000080, "Member 'FVAL_CharacterCustomizationItem_Eyes_PerBodyTypeConfig::EyeMaterial' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_FaceMask_PerBodyTypeConfig
// 0x0158 (0x01C0 - 0x0068)
struct FVAL_CharacterCustomizationItem_FaceMask_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	struct FVAL_CharacterCustomization_SkeletalMeshComponentConfig MeshConfig;                                        // 0x0068(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   BaseFaceMaskColorMaterialSlotName;                 // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_FaceMask_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_FaceMask_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_FaceMask_PerBodyTypeConfig) == 0x0001C0, "Wrong size on FVAL_CharacterCustomizationItem_FaceMask_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_FaceMask_PerBodyTypeConfig, MeshConfig) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_FaceMask_PerBodyTypeConfig::MeshConfig' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_FaceMask_PerBodyTypeConfig, BaseFaceMaskColorMaterialSlotName) == 0x0001B8, "Member 'FVAL_CharacterCustomizationItem_FaceMask_PerBodyTypeConfig::BaseFaceMaskColorMaterialSlotName' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig
// 0x0170 (0x01D8 - 0x0068)
struct FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	struct FVAL_CharacterCustomization_SkeletalMeshComponentConfig MeshConfig;                                        // 0x0068(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   DiffuseColorizingMaterialSlotName;                 // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HairBaseDiffuseColorMaterialParameterName;         // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseFaceCoverColorMaterialSlotName;                // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_CharacterCustomization_FacialHairTypePreset* FacialHairTypePreset;                              // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig) == 0x0001D8, "Wrong size on FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig, MeshConfig) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig::MeshConfig' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig, DiffuseColorizingMaterialSlotName) == 0x0001B8, "Member 'FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig::DiffuseColorizingMaterialSlotName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig, HairBaseDiffuseColorMaterialParameterName) == 0x0001C0, "Member 'FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig::HairBaseDiffuseColorMaterialParameterName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig, BaseFaceCoverColorMaterialSlotName) == 0x0001C8, "Member 'FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig::BaseFaceCoverColorMaterialSlotName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig, FacialHairTypePreset) == 0x0001D0, "Member 'FVAL_CharacterCustomizationItem_FacialHairStyle_PerBodyTypeConfig::FacialHairTypePreset' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig
// 0x0050 (0x00B8 - 0x0068)
struct FVAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	TSoftObjectPtr<class UNiagaraSystem>          NiagaraParticleSystem;                             // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           TrailLoopAudio;                                    // 0x0090(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig) == 0x0000B8, "Wrong size on FVAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig, NiagaraParticleSystem) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig::NiagaraParticleSystem' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig, TrailLoopAudio) == 0x000090, "Member 'FVAL_CharacterCustomizationItem_GliderTrail_PerBodyTypeConfig::TrailLoopAudio' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_DynamicColor
// 0x0018 (0x00B0 - 0x0098)
struct FVAL_CharacterCustomizationVariantOption_DynamicColor : public FVAL_CharacterCustomizationVariantOptionBase
{
public:
	struct FLinearColor                           DiffuseColor;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2364[0x8];                                     // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_DynamicColor) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_DynamicColor");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_DynamicColor) == 0x0000B0, "Wrong size on FVAL_CharacterCustomizationVariantOption_DynamicColor");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOption_DynamicColor, DiffuseColor) == 0x000098, "Member 'FVAL_CharacterCustomizationVariantOption_DynamicColor::DiffuseColor' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_HairColor
// 0x0000 (0x00B0 - 0x00B0)
struct FVAL_CharacterCustomizationVariantOption_HairColor final : public FVAL_CharacterCustomizationVariantOption_DynamicColor
{
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_HairColor) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_HairColor");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_HairColor) == 0x0000B0, "Wrong size on FVAL_CharacterCustomizationVariantOption_HairColor");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig
// 0x0178 (0x01E0 - 0x0068)
struct FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	struct FVAL_CharacterCustomization_SkeletalMeshComponentConfig MeshConfig;                                        // 0x0068(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UVAL_CharacterCustomization_HatTypePreset* HatTypePreset;                                     // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseHatColorMaterialSlotName;                      // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DiffuseColorizingMaterialSlotName;                 // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HairBaseDiffuseColorMaterialParameterName;         // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HairTipDiffuseColorMaterialParameterName;          // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig) == 0x0001E0, "Wrong size on FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig, MeshConfig) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig::MeshConfig' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig, HatTypePreset) == 0x0001B8, "Member 'FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig::HatTypePreset' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig, BaseHatColorMaterialSlotName) == 0x0001C0, "Member 'FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig::BaseHatColorMaterialSlotName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig, DiffuseColorizingMaterialSlotName) == 0x0001C8, "Member 'FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig::DiffuseColorizingMaterialSlotName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig, HairBaseDiffuseColorMaterialParameterName) == 0x0001D0, "Member 'FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig::HairBaseDiffuseColorMaterialParameterName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig, HairTipDiffuseColorMaterialParameterName) == 0x0001D8, "Member 'FVAL_CharacterCustomizationItem_Hat_PerBodyTypeConfig::HairTipDiffuseColorMaterialParameterName' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_Head_PerBodyTypeConfig
// 0x0268 (0x02D0 - 0x0068)
struct FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	struct FVAL_CharacterCustomization_SkeletalMeshComponentConfig MeshConfig;                                        // 0x0068(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   MaterialSlotNameForSkin;                           // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyebrowColorizingMaterialSlotName;                 // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EyebrowDiffuseColorMaterialParameterName;          // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVAL_CharacterCustomization_MaterialParamOverrides SkinMaterialParamOverrides;                        // 0x01D0(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UVAL_CharacterCustomization_HeadTypePreset* HeadTypePreset;                                    // 0x02C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig) == 0x0002D0, "Wrong size on FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig, MeshConfig) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig::MeshConfig' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig, MaterialSlotNameForSkin) == 0x0001B8, "Member 'FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig::MaterialSlotNameForSkin' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig, EyebrowColorizingMaterialSlotName) == 0x0001C0, "Member 'FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig::EyebrowColorizingMaterialSlotName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig, EyebrowDiffuseColorMaterialParameterName) == 0x0001C8, "Member 'FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig::EyebrowDiffuseColorMaterialParameterName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig, SkinMaterialParamOverrides) == 0x0001D0, "Member 'FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig::SkinMaterialParamOverrides' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig, HeadTypePreset) == 0x0002C8, "Member 'FVAL_CharacterCustomizationItem_Head_PerBodyTypeConfig::HeadTypePreset' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig
// 0x0160 (0x01C8 - 0x0068)
struct FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	struct FVAL_CharacterCustomization_SkeletalMeshComponentConfig MeshConfig;                                        // 0x0068(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   MaterialSlotNameForSkin;                           // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseLegsColorMaterialSlotName;                     // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig) == 0x0001C8, "Wrong size on FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig, MeshConfig) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig::MeshConfig' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig, MaterialSlotNameForSkin) == 0x0001B8, "Member 'FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig::MaterialSlotNameForSkin' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig, BaseLegsColorMaterialSlotName) == 0x0001C0, "Member 'FVAL_CharacterCustomizationItem_Legs_PerBodyTypeConfig::BaseLegsColorMaterialSlotName' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_Makeup_PerBodyTypeConfig
// 0x0000 (0x0068 - 0x0068)
struct FVAL_CharacterCustomizationItem_Makeup_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
};
static_assert(alignof(FVAL_CharacterCustomizationItem_Makeup_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_Makeup_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_Makeup_PerBodyTypeConfig) == 0x000068, "Wrong size on FVAL_CharacterCustomizationItem_Makeup_PerBodyTypeConfig");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_FaceComplexion
// 0x00F8 (0x0190 - 0x0098)
struct FVAL_CharacterCustomizationVariantOption_FaceComplexion final : public FVAL_CharacterCustomizationVariantOptionBase
{
public:
	struct FVAL_CharacterCustomization_MaterialParamOverrides MaterialParamOverrides;                            // 0x0098(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_FaceComplexion) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_FaceComplexion");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_FaceComplexion) == 0x000190, "Wrong size on FVAL_CharacterCustomizationVariantOption_FaceComplexion");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOption_FaceComplexion, MaterialParamOverrides) == 0x000098, "Member 'FVAL_CharacterCustomizationVariantOption_FaceComplexion::MaterialParamOverrides' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_BodyComplexion
// 0x00F8 (0x0190 - 0x0098)
struct FVAL_CharacterCustomizationVariantOption_BodyComplexion final : public FVAL_CharacterCustomizationVariantOptionBase
{
public:
	struct FVAL_CharacterCustomization_MaterialParamOverrides MaterialParamOverrides;                            // 0x0098(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_BodyComplexion) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_BodyComplexion");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_BodyComplexion) == 0x000190, "Wrong size on FVAL_CharacterCustomizationVariantOption_BodyComplexion");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOption_BodyComplexion, MaterialParamOverrides) == 0x000098, "Member 'FVAL_CharacterCustomizationVariantOption_BodyComplexion::MaterialParamOverrides' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_TattooColor
// 0x0010 (0x00A8 - 0x0098)
struct FVAL_CharacterCustomizationVariantOption_TattooColor final : public FVAL_CharacterCustomizationVariantOptionBase
{
public:
	struct FLinearColor                           DiffuseColor;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_TattooColor) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_TattooColor");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_TattooColor) == 0x0000A8, "Wrong size on FVAL_CharacterCustomizationVariantOption_TattooColor");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOption_TattooColor, DiffuseColor) == 0x000098, "Member 'FVAL_CharacterCustomizationVariantOption_TattooColor::DiffuseColor' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_DynamicTattooColor
// 0x0000 (0x00B0 - 0x00B0)
struct FVAL_CharacterCustomizationVariantOption_DynamicTattooColor final : public FVAL_CharacterCustomizationVariantOption_DynamicColor
{
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_DynamicTattooColor) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_DynamicTattooColor");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_DynamicTattooColor) == 0x0000B0, "Wrong size on FVAL_CharacterCustomizationVariantOption_DynamicTattooColor");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_FaceTattoo_PerBodyTypeConfig
// 0x0100 (0x0168 - 0x0068)
struct FVAL_CharacterCustomizationItem_FaceTattoo_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	struct FVAL_CharacterCustomization_MaterialParamOverrides HeadMaterialParamOverrides;                        // 0x0068(0x00F8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   TattooBaseColorMaterialParameterName;              // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_FaceTattoo_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_FaceTattoo_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_FaceTattoo_PerBodyTypeConfig) == 0x000168, "Wrong size on FVAL_CharacterCustomizationItem_FaceTattoo_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_FaceTattoo_PerBodyTypeConfig, HeadMaterialParamOverrides) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_FaceTattoo_PerBodyTypeConfig::HeadMaterialParamOverrides' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_FaceTattoo_PerBodyTypeConfig, TattooBaseColorMaterialParameterName) == 0x000160, "Member 'FVAL_CharacterCustomizationItem_FaceTattoo_PerBodyTypeConfig::TattooBaseColorMaterialParameterName' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_MeshMaterialParamOverrides
// 0x0018 (0x0018 - 0x0000)
struct FVAL_CharacterCustomization_MeshMaterialParamOverrides final
{
public:
	EVAL_CharacterCustomization_MeshType          MeshType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2365[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVAL_CharacterCustomization_MaterialParamOverrides> ParamOverrides;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_MeshMaterialParamOverrides) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_MeshMaterialParamOverrides");
static_assert(sizeof(FVAL_CharacterCustomization_MeshMaterialParamOverrides) == 0x000018, "Wrong size on FVAL_CharacterCustomization_MeshMaterialParamOverrides");
static_assert(offsetof(FVAL_CharacterCustomization_MeshMaterialParamOverrides, MeshType) == 0x000000, "Member 'FVAL_CharacterCustomization_MeshMaterialParamOverrides::MeshType' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_MeshMaterialParamOverrides, ParamOverrides) == 0x000008, "Member 'FVAL_CharacterCustomization_MeshMaterialParamOverrides::ParamOverrides' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig
// 0x0178 (0x01E0 - 0x0068)
struct FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	struct FVAL_CharacterCustomization_SkeletalMeshComponentConfig MeshConfig;                                        // 0x0068(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   MaterialSlotNameForSkin;                           // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BaseTorsoColorMaterialSlotName;                    // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVAL_CharacterCustomization_MeshMaterialParamOverrides> MeshMaterialParamOverrides;                        // 0x01C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UVAL_CharacterCustomization_TorsoTypePreset* TorsoTypePreset;                                   // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig) == 0x0001E0, "Wrong size on FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig, MeshConfig) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig::MeshConfig' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig, MaterialSlotNameForSkin) == 0x0001B8, "Member 'FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig::MaterialSlotNameForSkin' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig, BaseTorsoColorMaterialSlotName) == 0x0001C0, "Member 'FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig::BaseTorsoColorMaterialSlotName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig, MeshMaterialParamOverrides) == 0x0001C8, "Member 'FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig::MeshMaterialParamOverrides' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig, TorsoTypePreset) == 0x0001D8, "Member 'FVAL_CharacterCustomizationItem_Torso_PerBodyTypeConfig::TorsoTypePreset' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItem_Voice_PerBodyTypeConfig
// 0x0028 (0x0090 - 0x0068)
struct FVAL_CharacterCustomizationItem_Voice_PerBodyTypeConfig final : public FVAL_CharacterCustomization_PerBodyTypeConfig_Base
{
public:
	TSoftObjectPtr<class UVAL_VoiceSet>           VoiceSetData;                                      // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationItem_Voice_PerBodyTypeConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItem_Voice_PerBodyTypeConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItem_Voice_PerBodyTypeConfig) == 0x000090, "Wrong size on FVAL_CharacterCustomizationItem_Voice_PerBodyTypeConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItem_Voice_PerBodyTypeConfig, VoiceSetData) == 0x000068, "Member 'FVAL_CharacterCustomizationItem_Voice_PerBodyTypeConfig::VoiceSetData' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItemEnableConfigWithId
// 0x001C (0x001C - 0x0000)
struct FVAL_CharacterCustomizationItemEnableConfigWithId final
{
public:
	struct FGuid                                  AssetGuid;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AssetName;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledInWardrobe;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidToEquip;                                     // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2366[0x2];                                     // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_CharacterCustomizationItemEnableConfigWithId) == 0x000004, "Wrong alignment on FVAL_CharacterCustomizationItemEnableConfigWithId");
static_assert(sizeof(FVAL_CharacterCustomizationItemEnableConfigWithId) == 0x00001C, "Wrong size on FVAL_CharacterCustomizationItemEnableConfigWithId");
static_assert(offsetof(FVAL_CharacterCustomizationItemEnableConfigWithId, AssetGuid) == 0x000000, "Member 'FVAL_CharacterCustomizationItemEnableConfigWithId::AssetGuid' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItemEnableConfigWithId, AssetName) == 0x000010, "Member 'FVAL_CharacterCustomizationItemEnableConfigWithId::AssetName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItemEnableConfigWithId, EnabledInWardrobe) == 0x000018, "Member 'FVAL_CharacterCustomizationItemEnableConfigWithId::EnabledInWardrobe' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItemEnableConfigWithId, bValidToEquip) == 0x000019, "Member 'FVAL_CharacterCustomizationItemEnableConfigWithId::bValidToEquip' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationItemEnableConfig
// 0x0010 (0x0018 - 0x0008)
struct FVAL_CharacterCustomizationItemEnableConfig final : public FTableRowBase
{
public:
	class FName                                   AssetName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnabledInWardrobe;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidToEquip;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2367[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_CharacterCustomizationItemEnableConfig) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationItemEnableConfig");
static_assert(sizeof(FVAL_CharacterCustomizationItemEnableConfig) == 0x000018, "Wrong size on FVAL_CharacterCustomizationItemEnableConfig");
static_assert(offsetof(FVAL_CharacterCustomizationItemEnableConfig, AssetName) == 0x000008, "Member 'FVAL_CharacterCustomizationItemEnableConfig::AssetName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItemEnableConfig, EnabledInWardrobe) == 0x000010, "Member 'FVAL_CharacterCustomizationItemEnableConfig::EnabledInWardrobe' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationItemEnableConfig, bValidToEquip) == 0x000011, "Member 'FVAL_CharacterCustomizationItemEnableConfig::bValidToEquip' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_PetPurchaseBonus
// 0x0148 (0x0148 - 0x0000)
struct FVAL_CharacterCustomization_PetPurchaseBonus final
{
public:
	int32                                         PremiumPrice;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2368[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FGuid>                            BasicPetIds;                                       // 0x0008(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Pet>> BasicPetItems;                                     // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<struct FGuid>                            PremiumPetIds;                                     // 0x00A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<TSoftObjectPtr<class UVAL_CharacterCustomizationItem_Pet>> PremiumPetBonus;                                   // 0x00F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_PetPurchaseBonus) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_PetPurchaseBonus");
static_assert(sizeof(FVAL_CharacterCustomization_PetPurchaseBonus) == 0x000148, "Wrong size on FVAL_CharacterCustomization_PetPurchaseBonus");
static_assert(offsetof(FVAL_CharacterCustomization_PetPurchaseBonus, PremiumPrice) == 0x000000, "Member 'FVAL_CharacterCustomization_PetPurchaseBonus::PremiumPrice' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_PetPurchaseBonus, BasicPetIds) == 0x000008, "Member 'FVAL_CharacterCustomization_PetPurchaseBonus::BasicPetIds' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_PetPurchaseBonus, BasicPetItems) == 0x000058, "Member 'FVAL_CharacterCustomization_PetPurchaseBonus::BasicPetItems' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_PetPurchaseBonus, PremiumPetIds) == 0x0000A8, "Member 'FVAL_CharacterCustomization_PetPurchaseBonus::PremiumPetIds' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_PetPurchaseBonus, PremiumPetBonus) == 0x0000F8, "Member 'FVAL_CharacterCustomization_PetPurchaseBonus::PremiumPetBonus' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_Color
// 0x0038 (0x0038 - 0x0000)
struct FVAL_CharacterCustomization_Color final
{
public:
	struct FLinearColor                           DiffuseColor;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGuid                                  ID;                                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_Color) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_Color");
static_assert(sizeof(FVAL_CharacterCustomization_Color) == 0x000038, "Wrong size on FVAL_CharacterCustomization_Color");
static_assert(offsetof(FVAL_CharacterCustomization_Color, DiffuseColor) == 0x000000, "Member 'FVAL_CharacterCustomization_Color::DiffuseColor' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_Color, DisplayName) == 0x000010, "Member 'FVAL_CharacterCustomization_Color::DisplayName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_Color, ID) == 0x000028, "Member 'FVAL_CharacterCustomization_Color::ID' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_ColorList
// 0x0010 (0x0010 - 0x0000)
struct FVAL_CharacterCustomization_ColorList final
{
public:
	TArray<struct FVAL_CharacterCustomization_Color> List;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_ColorList) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_ColorList");
static_assert(sizeof(FVAL_CharacterCustomization_ColorList) == 0x000010, "Wrong size on FVAL_CharacterCustomization_ColorList");
static_assert(offsetof(FVAL_CharacterCustomization_ColorList, List) == 0x000000, "Member 'FVAL_CharacterCustomization_ColorList::List' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_TooltipDataRow
// 0x0008 (0x0010 - 0x0008)
struct FVAL_CharacterCustomization_TooltipDataRow final : public FTableRowBase
{
public:
	class UVAL_CharacterCustomizationItem_TooltipData* TooltipData;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_TooltipDataRow) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_TooltipDataRow");
static_assert(sizeof(FVAL_CharacterCustomization_TooltipDataRow) == 0x000010, "Wrong size on FVAL_CharacterCustomization_TooltipDataRow");
static_assert(offsetof(FVAL_CharacterCustomization_TooltipDataRow, TooltipData) == 0x000008, "Member 'FVAL_CharacterCustomization_TooltipDataRow::TooltipData' has a wrong offset!");

// ScriptStruct Palia.VAL_CharCustomization_AssetData
// 0x0128 (0x0128 - 0x0000)
struct FVAL_CharCustomization_AssetData final
{
public:
	TSoftObjectPtr<class UVAL_CharacterCustomizationItemBase> Asset;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAssetData                             AssetData;                                         // 0x0028(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0090(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemId;                                            // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVAL_CharacterCustomization_CosmeticTagFilterStruct> CosmeticTags;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	EVAL_CharacterCustomizationItemType           ItemType;                                          // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2369[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVAL_CharacterBodyType, TSoftObjectPtr<class UTexture2D>> PrerenderedThumbnailTable;                         // 0x00D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   TooltipDataRowName;                                // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharCustomization_AssetData) == 0x000008, "Wrong alignment on FVAL_CharCustomization_AssetData");
static_assert(sizeof(FVAL_CharCustomization_AssetData) == 0x000128, "Wrong size on FVAL_CharCustomization_AssetData");
static_assert(offsetof(FVAL_CharCustomization_AssetData, Asset) == 0x000000, "Member 'FVAL_CharCustomization_AssetData::Asset' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_AssetData, AssetData) == 0x000028, "Member 'FVAL_CharCustomization_AssetData::AssetData' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_AssetData, DisplayName) == 0x000090, "Member 'FVAL_CharCustomization_AssetData::DisplayName' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_AssetData, ItemId) == 0x0000A8, "Member 'FVAL_CharCustomization_AssetData::ItemId' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_AssetData, CosmeticTags) == 0x0000B8, "Member 'FVAL_CharCustomization_AssetData::CosmeticTags' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_AssetData, ItemType) == 0x0000C8, "Member 'FVAL_CharCustomization_AssetData::ItemType' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_AssetData, PrerenderedThumbnailTable) == 0x0000D0, "Member 'FVAL_CharCustomization_AssetData::PrerenderedThumbnailTable' has a wrong offset!");
static_assert(offsetof(FVAL_CharCustomization_AssetData, TooltipDataRowName) == 0x000120, "Member 'FVAL_CharCustomization_AssetData::TooltipDataRowName' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_CosmeticTagSelector
// 0x0010 (0x0010 - 0x0000)
struct FVAL_CharacterCustomization_CosmeticTagSelector final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_CosmeticTagSelector) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_CosmeticTagSelector");
static_assert(sizeof(FVAL_CharacterCustomization_CosmeticTagSelector) == 0x000010, "Wrong size on FVAL_CharacterCustomization_CosmeticTagSelector");
static_assert(offsetof(FVAL_CharacterCustomization_CosmeticTagSelector, TagName) == 0x000000, "Member 'FVAL_CharacterCustomization_CosmeticTagSelector::TagName' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomization_DropdownMenuData
// 0x0028 (0x0028 - 0x0000)
struct FVAL_CharacterCustomization_DropdownMenuData final
{
public:
	class FText                                   OptionDisplayName;                                 // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FVAL_CharacterCustomization_CosmeticTagFilterStruct> Options;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomization_DropdownMenuData) == 0x000008, "Wrong alignment on FVAL_CharacterCustomization_DropdownMenuData");
static_assert(sizeof(FVAL_CharacterCustomization_DropdownMenuData) == 0x000028, "Wrong size on FVAL_CharacterCustomization_DropdownMenuData");
static_assert(offsetof(FVAL_CharacterCustomization_DropdownMenuData, OptionDisplayName) == 0x000000, "Member 'FVAL_CharacterCustomization_DropdownMenuData::OptionDisplayName' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomization_DropdownMenuData, Options) == 0x000018, "Member 'FVAL_CharacterCustomization_DropdownMenuData::Options' has a wrong offset!");

// ScriptStruct Palia.VAL_MaterialSlotOverride
// 0x0030 (0x0030 - 0x0000)
struct FVAL_MaterialSlotOverride final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      Material;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_MaterialSlotOverride) == 0x000008, "Wrong alignment on FVAL_MaterialSlotOverride");
static_assert(sizeof(FVAL_MaterialSlotOverride) == 0x000030, "Wrong size on FVAL_MaterialSlotOverride");
static_assert(offsetof(FVAL_MaterialSlotOverride, Material) == 0x000000, "Member 'FVAL_MaterialSlotOverride::Material' has a wrong offset!");
static_assert(offsetof(FVAL_MaterialSlotOverride, SlotName) == 0x000028, "Member 'FVAL_MaterialSlotOverride::SlotName' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_BaseWearableColor
// 0x0020 (0x00B8 - 0x0098)
struct FVAL_CharacterCustomizationVariantOption_BaseWearableColor final : public FVAL_CharacterCustomizationVariantOptionBase
{
public:
	TArray<struct FVAL_MaterialSlotOverride>      MaterialOverrides;                                 // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVAL_CharacterCustomization_MeshMaterialParamOverrides> MeshMaterialParamOverrides;                        // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_BaseWearableColor) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_BaseWearableColor");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_BaseWearableColor) == 0x0000B8, "Wrong size on FVAL_CharacterCustomizationVariantOption_BaseWearableColor");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOption_BaseWearableColor, MaterialOverrides) == 0x000098, "Member 'FVAL_CharacterCustomizationVariantOption_BaseWearableColor::MaterialOverrides' has a wrong offset!");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOption_BaseWearableColor, MeshMaterialParamOverrides) == 0x0000A8, "Member 'FVAL_CharacterCustomizationVariantOption_BaseWearableColor::MeshMaterialParamOverrides' has a wrong offset!");

// ScriptStruct Palia.VAL_CharacterCustomizationVariantOption_MeshMaterialParamOverride
// 0x0010 (0x00A8 - 0x0098)
struct FVAL_CharacterCustomizationVariantOption_MeshMaterialParamOverride final : public FVAL_CharacterCustomizationVariantOptionBase
{
public:
	TArray<struct FVAL_CharacterCustomization_MeshMaterialParamOverrides> MeshMaterialParamOverrides;                        // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_CharacterCustomizationVariantOption_MeshMaterialParamOverride) == 0x000008, "Wrong alignment on FVAL_CharacterCustomizationVariantOption_MeshMaterialParamOverride");
static_assert(sizeof(FVAL_CharacterCustomizationVariantOption_MeshMaterialParamOverride) == 0x0000A8, "Wrong size on FVAL_CharacterCustomizationVariantOption_MeshMaterialParamOverride");
static_assert(offsetof(FVAL_CharacterCustomizationVariantOption_MeshMaterialParamOverride, MeshMaterialParamOverrides) == 0x000098, "Member 'FVAL_CharacterCustomizationVariantOption_MeshMaterialParamOverride::MeshMaterialParamOverrides' has a wrong offset!");

// ScriptStruct Palia.VAL_RenderPreviewCameraSettings
// 0x0018 (0x0018 - 0x0000)
struct FVAL_RenderPreviewCameraSettings final
{
public:
	struct FVector                                CameraLocOffset;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_RenderPreviewCameraSettings) == 0x000008, "Wrong alignment on FVAL_RenderPreviewCameraSettings");
static_assert(sizeof(FVAL_RenderPreviewCameraSettings) == 0x000018, "Wrong size on FVAL_RenderPreviewCameraSettings");
static_assert(offsetof(FVAL_RenderPreviewCameraSettings, CameraLocOffset) == 0x000000, "Member 'FVAL_RenderPreviewCameraSettings::CameraLocOffset' has a wrong offset!");

// ScriptStruct Palia.VAL_RenderHeadPreviewParameters
// 0x0000 (0x0900 - 0x0900)
struct FVAL_RenderHeadPreviewParameters final : public FVAL_RenderPreviewParametersBase
{
};
static_assert(alignof(FVAL_RenderHeadPreviewParameters) == 0x000008, "Wrong alignment on FVAL_RenderHeadPreviewParameters");
static_assert(sizeof(FVAL_RenderHeadPreviewParameters) == 0x000900, "Wrong size on FVAL_RenderHeadPreviewParameters");

// ScriptStruct Palia.VAL_RenderLegsPreviewParameters
// 0x0000 (0x0900 - 0x0900)
struct FVAL_RenderLegsPreviewParameters final : public FVAL_RenderPreviewParametersBase
{
};
static_assert(alignof(FVAL_RenderLegsPreviewParameters) == 0x000008, "Wrong alignment on FVAL_RenderLegsPreviewParameters");
static_assert(sizeof(FVAL_RenderLegsPreviewParameters) == 0x000900, "Wrong size on FVAL_RenderLegsPreviewParameters");

// ScriptStruct Palia.VAL_RenderFullBodyPreviewParameters
// 0x0000 (0x0900 - 0x0900)
struct FVAL_RenderFullBodyPreviewParameters final : public FVAL_RenderPreviewParametersBase
{
};
static_assert(alignof(FVAL_RenderFullBodyPreviewParameters) == 0x000008, "Wrong alignment on FVAL_RenderFullBodyPreviewParameters");
static_assert(sizeof(FVAL_RenderFullBodyPreviewParameters) == 0x000900, "Wrong size on FVAL_RenderFullBodyPreviewParameters");

// ScriptStruct Palia.VAL_ChatCommandInfo
// 0x0088 (0x0088 - 0x0000)
struct FVAL_ChatCommandInfo final
{
public:
	class FText                                   CommandString;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CommandSuggestionText;                             // 0x0018(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   CommandHintText;                                   // 0x0030(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ErrorText;                                         // 0x0048(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   CommandModalDialogueClass;                         // 0x0060(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_ChatCommandInfo) == 0x000008, "Wrong alignment on FVAL_ChatCommandInfo");
static_assert(sizeof(FVAL_ChatCommandInfo) == 0x000088, "Wrong size on FVAL_ChatCommandInfo");
static_assert(offsetof(FVAL_ChatCommandInfo, CommandString) == 0x000000, "Member 'FVAL_ChatCommandInfo::CommandString' has a wrong offset!");
static_assert(offsetof(FVAL_ChatCommandInfo, CommandSuggestionText) == 0x000018, "Member 'FVAL_ChatCommandInfo::CommandSuggestionText' has a wrong offset!");
static_assert(offsetof(FVAL_ChatCommandInfo, CommandHintText) == 0x000030, "Member 'FVAL_ChatCommandInfo::CommandHintText' has a wrong offset!");
static_assert(offsetof(FVAL_ChatCommandInfo, ErrorText) == 0x000048, "Member 'FVAL_ChatCommandInfo::ErrorText' has a wrong offset!");
static_assert(offsetof(FVAL_ChatCommandInfo, CommandModalDialogueClass) == 0x000060, "Member 'FVAL_ChatCommandInfo::CommandModalDialogueClass' has a wrong offset!");

// ScriptStruct Palia.VAL_PersistDataApplication
// 0x0001 (0x0001 - 0x0000)
struct FVAL_PersistDataApplication final
{
public:
	uint8                                         Pad_236A[0x1];                                     // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_PersistDataApplication) == 0x000001, "Wrong alignment on FVAL_PersistDataApplication");
static_assert(sizeof(FVAL_PersistDataApplication) == 0x000001, "Wrong size on FVAL_PersistDataApplication");

// ScriptStruct Palia.VAL_PlayerDataIntervention
// 0x0020 (0x0020 - 0x0000)
struct FVAL_PlayerDataIntervention final
{
public:
	TArray<struct FVAL_PersistDataCondition>      Conditions;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVAL_PersistDataApplication>    Applications;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerDataIntervention) == 0x000008, "Wrong alignment on FVAL_PlayerDataIntervention");
static_assert(sizeof(FVAL_PlayerDataIntervention) == 0x000020, "Wrong size on FVAL_PlayerDataIntervention");
static_assert(offsetof(FVAL_PlayerDataIntervention, Conditions) == 0x000000, "Member 'FVAL_PlayerDataIntervention::Conditions' has a wrong offset!");
static_assert(offsetof(FVAL_PlayerDataIntervention, Applications) == 0x000010, "Member 'FVAL_PlayerDataIntervention::Applications' has a wrong offset!");

// ScriptStruct Palia.VAL_EmergencyContentKillSwitchCache
// 0x0190 (0x0190 - 0x0000)
struct FVAL_EmergencyContentKillSwitchCache final
{
public:
	TSet<int32>                                   DisabledDialogues;                                 // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<int32>                                   DisabledMailMessages;                              // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<int32>                                   DisabledQuests;                                    // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<struct FGuid>                            DisabledVisits;                                    // 0x00F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<int32>                                   DisabledContentBatches;                            // 0x0140(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_EmergencyContentKillSwitchCache) == 0x000008, "Wrong alignment on FVAL_EmergencyContentKillSwitchCache");
static_assert(sizeof(FVAL_EmergencyContentKillSwitchCache) == 0x000190, "Wrong size on FVAL_EmergencyContentKillSwitchCache");
static_assert(offsetof(FVAL_EmergencyContentKillSwitchCache, DisabledDialogues) == 0x000000, "Member 'FVAL_EmergencyContentKillSwitchCache::DisabledDialogues' has a wrong offset!");
static_assert(offsetof(FVAL_EmergencyContentKillSwitchCache, DisabledMailMessages) == 0x000050, "Member 'FVAL_EmergencyContentKillSwitchCache::DisabledMailMessages' has a wrong offset!");
static_assert(offsetof(FVAL_EmergencyContentKillSwitchCache, DisabledQuests) == 0x0000A0, "Member 'FVAL_EmergencyContentKillSwitchCache::DisabledQuests' has a wrong offset!");
static_assert(offsetof(FVAL_EmergencyContentKillSwitchCache, DisabledVisits) == 0x0000F0, "Member 'FVAL_EmergencyContentKillSwitchCache::DisabledVisits' has a wrong offset!");
static_assert(offsetof(FVAL_EmergencyContentKillSwitchCache, DisabledContentBatches) == 0x000140, "Member 'FVAL_EmergencyContentKillSwitchCache::DisabledContentBatches' has a wrong offset!");

// ScriptStruct Palia.VAL_EntitlementItemEntry
// 0x0010 (0x001C - 0x000C)
struct FVAL_EntitlementItemEntry final : public FFastArraySerializerItem
{
public:
	struct FGuid                                  EntitlementId;                                     // 0x000C(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_EntitlementItemEntry) == 0x000004, "Wrong alignment on FVAL_EntitlementItemEntry");
static_assert(sizeof(FVAL_EntitlementItemEntry) == 0x00001C, "Wrong size on FVAL_EntitlementItemEntry");
static_assert(offsetof(FVAL_EntitlementItemEntry, EntitlementId) == 0x00000C, "Member 'FVAL_EntitlementItemEntry::EntitlementId' has a wrong offset!");

// ScriptStruct Palia.VAL_EntitlementCollection
// 0x0010 (0x0118 - 0x0108)
struct FVAL_EntitlementCollection final : public FFastArraySerializer
{
public:
	TArray<struct FVAL_EntitlementItemEntry>      Entitlements;                                      // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_EntitlementCollection) == 0x000008, "Wrong alignment on FVAL_EntitlementCollection");
static_assert(sizeof(FVAL_EntitlementCollection) == 0x000118, "Wrong size on FVAL_EntitlementCollection");
static_assert(offsetof(FVAL_EntitlementCollection, Entitlements) == 0x000108, "Member 'FVAL_EntitlementCollection::Entitlements' has a wrong offset!");

// ScriptStruct Palia.VAL_DirectionalLighting
// 0x0038 (0x0038 - 0x0000)
struct FVAL_DirectionalLighting final
{
public:
	bool                                          bOverride_DirectionalLightIntensity;               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalLightIntensity;                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DirectionalLightColor;                   // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 DirectionalLightColor;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SourceAngle;                             // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceAngle;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SoftSourceAngle;                         // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236E[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoftSourceAngle;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DirectionalIndirectLightingIntensity;    // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236F[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalIndirectLightingIntensity;              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_DirectionalVolumetricScatteringIntensity; // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2370[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionalVolumetricScatteringIntensity;          // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_ShadowAmount;                            // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2371[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShadowAmount;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_DirectionalLighting) == 0x000004, "Wrong alignment on FVAL_DirectionalLighting");
static_assert(sizeof(FVAL_DirectionalLighting) == 0x000038, "Wrong size on FVAL_DirectionalLighting");
static_assert(offsetof(FVAL_DirectionalLighting, bOverride_DirectionalLightIntensity) == 0x000000, "Member 'FVAL_DirectionalLighting::bOverride_DirectionalLightIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, DirectionalLightIntensity) == 0x000004, "Member 'FVAL_DirectionalLighting::DirectionalLightIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, bOverride_DirectionalLightColor) == 0x000008, "Member 'FVAL_DirectionalLighting::bOverride_DirectionalLightColor' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, DirectionalLightColor) == 0x00000C, "Member 'FVAL_DirectionalLighting::DirectionalLightColor' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, bOverride_SourceAngle) == 0x000010, "Member 'FVAL_DirectionalLighting::bOverride_SourceAngle' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, SourceAngle) == 0x000014, "Member 'FVAL_DirectionalLighting::SourceAngle' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, bOverride_SoftSourceAngle) == 0x000018, "Member 'FVAL_DirectionalLighting::bOverride_SoftSourceAngle' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, SoftSourceAngle) == 0x00001C, "Member 'FVAL_DirectionalLighting::SoftSourceAngle' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, bOverride_DirectionalIndirectLightingIntensity) == 0x000020, "Member 'FVAL_DirectionalLighting::bOverride_DirectionalIndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, DirectionalIndirectLightingIntensity) == 0x000024, "Member 'FVAL_DirectionalLighting::DirectionalIndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, bOverride_DirectionalVolumetricScatteringIntensity) == 0x000028, "Member 'FVAL_DirectionalLighting::bOverride_DirectionalVolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, DirectionalVolumetricScatteringIntensity) == 0x00002C, "Member 'FVAL_DirectionalLighting::DirectionalVolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, bOverride_ShadowAmount) == 0x000030, "Member 'FVAL_DirectionalLighting::bOverride_ShadowAmount' has a wrong offset!");
static_assert(offsetof(FVAL_DirectionalLighting, ShadowAmount) == 0x000034, "Member 'FVAL_DirectionalLighting::ShadowAmount' has a wrong offset!");

// ScriptStruct Palia.VAL_Skylight
// 0x0034 (0x0034 - 0x0000)
struct FVAL_Skylight final
{
public:
	bool                                          bOverride_SkyLightIntensity;                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2372[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkyLightIntensity;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkyLightColor;                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2373[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 SkyLightColor;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkyLightLowerHemisphereColor;            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2374[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SkyLightLowerHemisphereColor;                      // 0x0014(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkyIndirectLightingIntensity;            // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2375[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkyIndirectLightingIntensity;                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SkyVolumetricScatteringIntensity;        // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2376[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkyVolumetricScatteringIntensity;                  // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_Skylight) == 0x000004, "Wrong alignment on FVAL_Skylight");
static_assert(sizeof(FVAL_Skylight) == 0x000034, "Wrong size on FVAL_Skylight");
static_assert(offsetof(FVAL_Skylight, bOverride_SkyLightIntensity) == 0x000000, "Member 'FVAL_Skylight::bOverride_SkyLightIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_Skylight, SkyLightIntensity) == 0x000004, "Member 'FVAL_Skylight::SkyLightIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_Skylight, bOverride_SkyLightColor) == 0x000008, "Member 'FVAL_Skylight::bOverride_SkyLightColor' has a wrong offset!");
static_assert(offsetof(FVAL_Skylight, SkyLightColor) == 0x00000C, "Member 'FVAL_Skylight::SkyLightColor' has a wrong offset!");
static_assert(offsetof(FVAL_Skylight, bOverride_SkyLightLowerHemisphereColor) == 0x000010, "Member 'FVAL_Skylight::bOverride_SkyLightLowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FVAL_Skylight, SkyLightLowerHemisphereColor) == 0x000014, "Member 'FVAL_Skylight::SkyLightLowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FVAL_Skylight, bOverride_SkyIndirectLightingIntensity) == 0x000024, "Member 'FVAL_Skylight::bOverride_SkyIndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_Skylight, SkyIndirectLightingIntensity) == 0x000028, "Member 'FVAL_Skylight::SkyIndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_Skylight, bOverride_SkyVolumetricScatteringIntensity) == 0x00002C, "Member 'FVAL_Skylight::bOverride_SkyVolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FVAL_Skylight, SkyVolumetricScatteringIntensity) == 0x000030, "Member 'FVAL_Skylight::SkyVolumetricScatteringIntensity' has a wrong offset!");

// ScriptStruct Palia.VAL_FogProfile
// 0x004C (0x004C - 0x0000)
struct FVAL_FogProfile final
{
public:
	bool                                          bOverride_FogDensity;                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2377[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrimaryFogDensity;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogHeightFalloff;                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2378[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrimaryFogHeightFalloff;                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_SecondFogData;                           // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2379[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogInscatteringColor;                    // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237A[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FogInscatteringColor;                              // 0x0024(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogMaxOpacity;                           // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237B[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogMaxOpacity;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_StartDistance;                           // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237C[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartDistance;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride_FogCutoffDistance;                       // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237D[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogCutoffDistance;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_FogProfile) == 0x000004, "Wrong alignment on FVAL_FogProfile");
static_assert(sizeof(FVAL_FogProfile) == 0x00004C, "Wrong size on FVAL_FogProfile");
static_assert(offsetof(FVAL_FogProfile, bOverride_FogDensity) == 0x000000, "Member 'FVAL_FogProfile::bOverride_FogDensity' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, PrimaryFogDensity) == 0x000004, "Member 'FVAL_FogProfile::PrimaryFogDensity' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, bOverride_FogHeightFalloff) == 0x000008, "Member 'FVAL_FogProfile::bOverride_FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, PrimaryFogHeightFalloff) == 0x00000C, "Member 'FVAL_FogProfile::PrimaryFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, bOverride_SecondFogData) == 0x000010, "Member 'FVAL_FogProfile::bOverride_SecondFogData' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, SecondFogData) == 0x000014, "Member 'FVAL_FogProfile::SecondFogData' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, bOverride_FogInscatteringColor) == 0x000020, "Member 'FVAL_FogProfile::bOverride_FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, FogInscatteringColor) == 0x000024, "Member 'FVAL_FogProfile::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, bOverride_FogMaxOpacity) == 0x000034, "Member 'FVAL_FogProfile::bOverride_FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, FogMaxOpacity) == 0x000038, "Member 'FVAL_FogProfile::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, bOverride_StartDistance) == 0x00003C, "Member 'FVAL_FogProfile::bOverride_StartDistance' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, StartDistance) == 0x000040, "Member 'FVAL_FogProfile::StartDistance' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, bOverride_FogCutoffDistance) == 0x000044, "Member 'FVAL_FogProfile::bOverride_FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(FVAL_FogProfile, FogCutoffDistance) == 0x000048, "Member 'FVAL_FogProfile::FogCutoffDistance' has a wrong offset!");

// ScriptStruct Palia.VAL_NewsInboxData
// 0x0020 (0x0020 - 0x0000)
struct FVAL_NewsInboxData final
{
public:
	TArray<struct FVAL_NewsMessage>               PendingMessages;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FVAL_NewsMessage>               ClaimedMessages;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_NewsInboxData) == 0x000008, "Wrong alignment on FVAL_NewsInboxData");
static_assert(sizeof(FVAL_NewsInboxData) == 0x000020, "Wrong size on FVAL_NewsInboxData");
static_assert(offsetof(FVAL_NewsInboxData, PendingMessages) == 0x000000, "Member 'FVAL_NewsInboxData::PendingMessages' has a wrong offset!");
static_assert(offsetof(FVAL_NewsInboxData, ClaimedMessages) == 0x000010, "Member 'FVAL_NewsInboxData::ClaimedMessages' has a wrong offset!");

// ScriptStruct Palia.ValeriaDataTableValidationInfo
// 0x0010 (0x0010 - 0x0000)
struct FValeriaDataTableValidationInfo final
{
public:
	TArray<class FString>                         Errors;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FValeriaDataTableValidationInfo) == 0x000008, "Wrong alignment on FValeriaDataTableValidationInfo");
static_assert(sizeof(FValeriaDataTableValidationInfo) == 0x000010, "Wrong size on FValeriaDataTableValidationInfo");
static_assert(offsetof(FValeriaDataTableValidationInfo, Errors) == 0x000000, "Member 'FValeriaDataTableValidationInfo::Errors' has a wrong offset!");

// ScriptStruct Palia.VAL_PlayerGuildStatics_SortSettings
// 0x0001 (0x0001 - 0x0000)
struct FVAL_PlayerGuildStatics_SortSettings final
{
public:
	EVAL_PlayerGuildQuest_SortType                SortType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_PlayerGuildStatics_SortSettings) == 0x000001, "Wrong alignment on FVAL_PlayerGuildStatics_SortSettings");
static_assert(sizeof(FVAL_PlayerGuildStatics_SortSettings) == 0x000001, "Wrong size on FVAL_PlayerGuildStatics_SortSettings");
static_assert(offsetof(FVAL_PlayerGuildStatics_SortSettings, SortType) == 0x000000, "Member 'FVAL_PlayerGuildStatics_SortSettings::SortType' has a wrong offset!");

// ScriptStruct Palia.ScoreStruct
// 0x0008 (0x0008 - 0x0000)
struct FScoreStruct final
{
public:
	int32                                         ScorePersistId;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreValue;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScoreStruct) == 0x000004, "Wrong alignment on FScoreStruct");
static_assert(sizeof(FScoreStruct) == 0x000008, "Wrong size on FScoreStruct");
static_assert(offsetof(FScoreStruct, ScorePersistId) == 0x000000, "Member 'FScoreStruct::ScorePersistId' has a wrong offset!");
static_assert(offsetof(FScoreStruct, ScoreValue) == 0x000004, "Member 'FScoreStruct::ScoreValue' has a wrong offset!");

// ScriptStruct Palia.VAL_AsyncServerReserveRequest
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FVAL_AsyncServerReserveRequest final
{
public:
	uint8                                         Pad_237E[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_AsyncServerReserveRequest) == 0x000008, "Wrong alignment on FVAL_AsyncServerReserveRequest");
static_assert(sizeof(FVAL_AsyncServerReserveRequest) == 0x000018, "Wrong size on FVAL_AsyncServerReserveRequest");

// ScriptStruct Palia.VAL_AsyncServerRegistrationRequest
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FVAL_AsyncServerRegistrationRequest final
{
public:
	uint8                                         Pad_237F[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_AsyncServerRegistrationRequest) == 0x000008, "Wrong alignment on FVAL_AsyncServerRegistrationRequest");
static_assert(sizeof(FVAL_AsyncServerRegistrationRequest) == 0x000010, "Wrong size on FVAL_AsyncServerRegistrationRequest");

// ScriptStruct Palia.VAL_SprayData
// 0x0038 (0x0038 - 0x0000)
struct FVAL_SprayData final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DecalSize;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_SprayData) == 0x000008, "Wrong alignment on FVAL_SprayData");
static_assert(sizeof(FVAL_SprayData) == 0x000038, "Wrong size on FVAL_SprayData");
static_assert(offsetof(FVAL_SprayData, Texture) == 0x000000, "Member 'FVAL_SprayData::Texture' has a wrong offset!");
static_assert(offsetof(FVAL_SprayData, DecalSize) == 0x000028, "Member 'FVAL_SprayData::DecalSize' has a wrong offset!");

// ScriptStruct Palia.VAL_TimerStateStruct
// 0x0030 (0x0030 - 0x0000)
struct FVAL_TimerStateStruct final
{
public:
	class UVAL_TimerDefinition*                   SourceDefinition;                                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVAL_TimerComponent*                    OwningTimerComponent;                              // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPaused;                                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasStarted;                                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasStopped;                                       // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2380[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CachedExpirationTimestamp;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InitialMsOnTimer;                                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         StoredMs;                                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVAL_TimerStateStruct) == 0x000008, "Wrong alignment on FVAL_TimerStateStruct");
static_assert(sizeof(FVAL_TimerStateStruct) == 0x000030, "Wrong size on FVAL_TimerStateStruct");
static_assert(offsetof(FVAL_TimerStateStruct, SourceDefinition) == 0x000000, "Member 'FVAL_TimerStateStruct::SourceDefinition' has a wrong offset!");
static_assert(offsetof(FVAL_TimerStateStruct, OwningTimerComponent) == 0x000008, "Member 'FVAL_TimerStateStruct::OwningTimerComponent' has a wrong offset!");
static_assert(offsetof(FVAL_TimerStateStruct, bIsPaused) == 0x000010, "Member 'FVAL_TimerStateStruct::bIsPaused' has a wrong offset!");
static_assert(offsetof(FVAL_TimerStateStruct, bHasStarted) == 0x000011, "Member 'FVAL_TimerStateStruct::bHasStarted' has a wrong offset!");
static_assert(offsetof(FVAL_TimerStateStruct, bHasStopped) == 0x000012, "Member 'FVAL_TimerStateStruct::bHasStopped' has a wrong offset!");
static_assert(offsetof(FVAL_TimerStateStruct, CachedExpirationTimestamp) == 0x000018, "Member 'FVAL_TimerStateStruct::CachedExpirationTimestamp' has a wrong offset!");
static_assert(offsetof(FVAL_TimerStateStruct, InitialMsOnTimer) == 0x000020, "Member 'FVAL_TimerStateStruct::InitialMsOnTimer' has a wrong offset!");
static_assert(offsetof(FVAL_TimerStateStruct, StoredMs) == 0x000028, "Member 'FVAL_TimerStateStruct::StoredMs' has a wrong offset!");

// ScriptStruct Palia.VAL_TimerHandle
// 0x0008 (0x0008 - 0x0000)
struct FVAL_TimerHandle final
{
public:
	uint64                                        Handle;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FVAL_TimerHandle) == 0x000008, "Wrong alignment on FVAL_TimerHandle");
static_assert(sizeof(FVAL_TimerHandle) == 0x000008, "Wrong size on FVAL_TimerHandle");
static_assert(offsetof(FVAL_TimerHandle, Handle) == 0x000000, "Member 'FVAL_TimerHandle::Handle' has a wrong offset!");

// ScriptStruct Palia.TimerParams
// 0x0018 (0x0018 - 0x0000)
struct FTimerParams final
{
public:
	uint8                                         Pad_2381[0x10];                                    // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ExpireTime;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimerParams) == 0x000008, "Wrong alignment on FTimerParams");
static_assert(sizeof(FTimerParams) == 0x000018, "Wrong size on FTimerParams");
static_assert(offsetof(FTimerParams, ExpireTime) == 0x000010, "Member 'FTimerParams::ExpireTime' has a wrong offset!");

// ScriptStruct Palia.VAL_ValeriaBaseAnimInstanceProxy
// 0x0050 (0x0750 - 0x0700)
struct FVAL_ValeriaBaseAnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	TMap<EVAL_CharacterCustomization_MeshType, bool> RigidBodyPhysicState;                              // 0x06F8(0x0050)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2382[0x8];                                     // 0x0748(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVAL_ValeriaBaseAnimInstanceProxy) == 0x000010, "Wrong alignment on FVAL_ValeriaBaseAnimInstanceProxy");
static_assert(sizeof(FVAL_ValeriaBaseAnimInstanceProxy) == 0x000750, "Wrong size on FVAL_ValeriaBaseAnimInstanceProxy");
static_assert(offsetof(FVAL_ValeriaBaseAnimInstanceProxy, RigidBodyPhysicState) == 0x0006F8, "Member 'FVAL_ValeriaBaseAnimInstanceProxy::RigidBodyPhysicState' has a wrong offset!");

// ScriptStruct Palia.PrivateSpaceVillagerSpawnInfo
// 0x0038 (0x0038 - 0x0000)
struct FPrivateSpaceVillagerSpawnInfo final
{
public:
	struct FDataTableRowHandle                    Villager;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVillagerSpawnParams                   SpawnParams;                                       // 0x0010(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrivateSpaceVillagerSpawnInfo) == 0x000008, "Wrong alignment on FPrivateSpaceVillagerSpawnInfo");
static_assert(sizeof(FPrivateSpaceVillagerSpawnInfo) == 0x000038, "Wrong size on FPrivateSpaceVillagerSpawnInfo");
static_assert(offsetof(FPrivateSpaceVillagerSpawnInfo, Villager) == 0x000000, "Member 'FPrivateSpaceVillagerSpawnInfo::Villager' has a wrong offset!");
static_assert(offsetof(FPrivateSpaceVillagerSpawnInfo, SpawnParams) == 0x000010, "Member 'FPrivateSpaceVillagerSpawnInfo::SpawnParams' has a wrong offset!");

// ScriptStruct Palia.PrivateSpaceScheduledVillagerDialogueRoomSpawnInfo
// 0x0070 (0x0070 - 0x0000)
struct FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo final
{
public:
	int32                                         VillagerId;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2383[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   VillagerName;                                      // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   VillagerClass;                                     // 0x0020(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVillagerSpawnParams                   SpawnParams;                                       // 0x0048(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo) == 0x000008, "Wrong alignment on FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo");
static_assert(sizeof(FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo) == 0x000070, "Wrong size on FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo");
static_assert(offsetof(FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo, VillagerId) == 0x000000, "Member 'FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo::VillagerId' has a wrong offset!");
static_assert(offsetof(FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo, VillagerName) == 0x000008, "Member 'FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo::VillagerName' has a wrong offset!");
static_assert(offsetof(FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo, VillagerClass) == 0x000020, "Member 'FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo::VillagerClass' has a wrong offset!");
static_assert(offsetof(FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo, SpawnParams) == 0x000048, "Member 'FPrivateSpaceScheduledVillagerDialogueRoomSpawnInfo::SpawnParams' has a wrong offset!");

// ScriptStruct Palia.VillagerGiftPreferenceMetaConfig
// 0x0060 (0x0068 - 0x0008)
struct FVillagerGiftPreferenceMetaConfig final : public FTableRowBase
{
public:
	int32                                         PersistId;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Villager;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2384[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVillagerGiftRewardLevel, int32>         NumberOfConfigsPerLevel;                           // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerGiftPreferenceMetaConfig) == 0x000008, "Wrong alignment on FVillagerGiftPreferenceMetaConfig");
static_assert(sizeof(FVillagerGiftPreferenceMetaConfig) == 0x000068, "Wrong size on FVillagerGiftPreferenceMetaConfig");
static_assert(offsetof(FVillagerGiftPreferenceMetaConfig, PersistId) == 0x000008, "Member 'FVillagerGiftPreferenceMetaConfig::PersistId' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceMetaConfig, Villager) == 0x00000C, "Member 'FVillagerGiftPreferenceMetaConfig::Villager' has a wrong offset!");
static_assert(offsetof(FVillagerGiftPreferenceMetaConfig, NumberOfConfigsPerLevel) == 0x000018, "Member 'FVillagerGiftPreferenceMetaConfig::NumberOfConfigsPerLevel' has a wrong offset!");

// ScriptStruct Palia.VillagerQuestItemGiven
// 0x0030 (0x0030 - 0x0000)
struct FVillagerQuestItemGiven final
{
public:
	TSoftObjectPtr<class UVAL_ItemTypeDefinitionAsset> ItemType;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2385[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVillagerQuestItemGiven) == 0x000008, "Wrong alignment on FVillagerQuestItemGiven");
static_assert(sizeof(FVillagerQuestItemGiven) == 0x000030, "Wrong size on FVillagerQuestItemGiven");
static_assert(offsetof(FVillagerQuestItemGiven, ItemType) == 0x000000, "Member 'FVillagerQuestItemGiven::ItemType' has a wrong offset!");
static_assert(offsetof(FVillagerQuestItemGiven, Amount) == 0x000028, "Member 'FVillagerQuestItemGiven::Amount' has a wrong offset!");

// ScriptStruct Palia.VillagerRelationshipIntervalReward
// 0x0018 (0x0018 - 0x0000)
struct FVillagerRelationshipIntervalReward final
{
public:
	float                                         ProgressThreshold;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2386[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FQuestRewardConfig>             Rewards;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVillagerRelationshipIntervalReward) == 0x000008, "Wrong alignment on FVillagerRelationshipIntervalReward");
static_assert(sizeof(FVillagerRelationshipIntervalReward) == 0x000018, "Wrong size on FVillagerRelationshipIntervalReward");
static_assert(offsetof(FVillagerRelationshipIntervalReward, ProgressThreshold) == 0x000000, "Member 'FVillagerRelationshipIntervalReward::ProgressThreshold' has a wrong offset!");
static_assert(offsetof(FVillagerRelationshipIntervalReward, Rewards) == 0x000008, "Member 'FVillagerRelationshipIntervalReward::Rewards' has a wrong offset!");

// ScriptStruct Palia.ClientStoreInfo
// 0x0050 (0x0050 - 0x0000)
struct FClientStoreInfo final
{
public:
	bool                                          bStoreIsAllowed;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2387[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   StoreName;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FNotification                          FailMessage;                                       // 0x0020(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientStoreInfo) == 0x000008, "Wrong alignment on FClientStoreInfo");
static_assert(sizeof(FClientStoreInfo) == 0x000050, "Wrong size on FClientStoreInfo");
static_assert(offsetof(FClientStoreInfo, bStoreIsAllowed) == 0x000000, "Member 'FClientStoreInfo::bStoreIsAllowed' has a wrong offset!");
static_assert(offsetof(FClientStoreInfo, StoreName) == 0x000008, "Member 'FClientStoreInfo::StoreName' has a wrong offset!");
static_assert(offsetof(FClientStoreInfo, FailMessage) == 0x000020, "Member 'FClientStoreInfo::FailMessage' has a wrong offset!");

// ScriptStruct Palia.StoreItemConfig
// 0x0118 (0x0118 - 0x0000)
struct FStoreItemConfig final
{
public:
	class UVAL_ItemTypeDefinitionAsset*           ItemType;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitedStock;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2388[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLootRequirements                      Requirements;                                      // 0x0010(0x00D8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         QualityStars;                                      // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QualityStarsChance;                                // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShopCostScalingInfo                   CostAmountScaling;                                 // 0x00F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FQuestRewardConfig>             BuyRewards;                                        // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreItemConfig) == 0x000008, "Wrong alignment on FStoreItemConfig");
static_assert(sizeof(FStoreItemConfig) == 0x000118, "Wrong size on FStoreItemConfig");
static_assert(offsetof(FStoreItemConfig, ItemType) == 0x000000, "Member 'FStoreItemConfig::ItemType' has a wrong offset!");
static_assert(offsetof(FStoreItemConfig, LimitedStock) == 0x000008, "Member 'FStoreItemConfig::LimitedStock' has a wrong offset!");
static_assert(offsetof(FStoreItemConfig, Requirements) == 0x000010, "Member 'FStoreItemConfig::Requirements' has a wrong offset!");
static_assert(offsetof(FStoreItemConfig, QualityStars) == 0x0000E8, "Member 'FStoreItemConfig::QualityStars' has a wrong offset!");
static_assert(offsetof(FStoreItemConfig, QualityStarsChance) == 0x0000EC, "Member 'FStoreItemConfig::QualityStarsChance' has a wrong offset!");
static_assert(offsetof(FStoreItemConfig, CostAmountScaling) == 0x0000F0, "Member 'FStoreItemConfig::CostAmountScaling' has a wrong offset!");
static_assert(offsetof(FStoreItemConfig, BuyRewards) == 0x000108, "Member 'FStoreItemConfig::BuyRewards' has a wrong offset!");

// ScriptStruct Palia.PersistPlacementRegionMeshGroup
// 0x0028 (0x0028 - 0x0000)
struct FPersistPlacementRegionMeshGroup final
{
public:
	TArray<class FString>                         PlacementRegionComponent;                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlacementRegionTag;                                // 0x0010(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MeshComponent;                                     // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersistPlacementRegionMeshGroup) == 0x000008, "Wrong alignment on FPersistPlacementRegionMeshGroup");
static_assert(sizeof(FPersistPlacementRegionMeshGroup) == 0x000028, "Wrong size on FPersistPlacementRegionMeshGroup");
static_assert(offsetof(FPersistPlacementRegionMeshGroup, PlacementRegionComponent) == 0x000000, "Member 'FPersistPlacementRegionMeshGroup::PlacementRegionComponent' has a wrong offset!");
static_assert(offsetof(FPersistPlacementRegionMeshGroup, PlacementRegionTag) == 0x000010, "Member 'FPersistPlacementRegionMeshGroup::PlacementRegionTag' has a wrong offset!");
static_assert(offsetof(FPersistPlacementRegionMeshGroup, MeshComponent) == 0x000018, "Member 'FPersistPlacementRegionMeshGroup::MeshComponent' has a wrong offset!");

// ScriptStruct Palia.WaterForRewardsReplicatedData
// 0x0020 (0x0020 - 0x0000)
struct FWaterForRewardsReplicatedData final
{
public:
	int64                                         ValeriaTimeRewardCollectedAt;                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimesWatered;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2389[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ValeriaTimeWateredAt;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimesCollected;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238A[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaterForRewardsReplicatedData) == 0x000008, "Wrong alignment on FWaterForRewardsReplicatedData");
static_assert(sizeof(FWaterForRewardsReplicatedData) == 0x000020, "Wrong size on FWaterForRewardsReplicatedData");
static_assert(offsetof(FWaterForRewardsReplicatedData, ValeriaTimeRewardCollectedAt) == 0x000000, "Member 'FWaterForRewardsReplicatedData::ValeriaTimeRewardCollectedAt' has a wrong offset!");
static_assert(offsetof(FWaterForRewardsReplicatedData, TimesWatered) == 0x000008, "Member 'FWaterForRewardsReplicatedData::TimesWatered' has a wrong offset!");
static_assert(offsetof(FWaterForRewardsReplicatedData, ValeriaTimeWateredAt) == 0x000010, "Member 'FWaterForRewardsReplicatedData::ValeriaTimeWateredAt' has a wrong offset!");
static_assert(offsetof(FWaterForRewardsReplicatedData, TimesCollected) == 0x000018, "Member 'FWaterForRewardsReplicatedData::TimesCollected' has a wrong offset!");

}

