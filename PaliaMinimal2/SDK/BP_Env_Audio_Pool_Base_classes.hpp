#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Env_Audio_Pool_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Struct_PoolAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Env_Audio_Pool_Base.BP_Env_Audio_Pool_Base_C
// 0x0088 (0x0330 - 0x02A8)
class ABP_Env_Audio_Pool_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          StaticLoop;                                        // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAkAudioEvent*                          OneShot;                                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAkAudioEvent*                          RandomLoop;                                        // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         RandomLoopChance;                                  // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_45F2[0x4];                                     // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_PoolAudio                      AudioEvents;                                       // 0x02E0(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          EditorToolManaged;                                 // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShowBillboard;                                     // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CanPlayInsect;                                     // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingInsect;                                   // 0x0323(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45F3[0x4];                                     // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AudioPool_StaticLoop_C*             AudioEmitter;                                      // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Env_Audio_Pool_Base(int32 EntryPoint, bool CallFunc_IsValid_ReturnValue);
	void ReceiveDestroyed();
	void SetBillboardVisibility(bool Visible);
	void SetRadiusToAttenuation(double AkInstectMaxAtten, double AkCritterMaxAtten, double AkLoopMaxAtten, double CallFunc_FMax_ReturnValue, double CallFunc_FMax_ReturnValue_1, double CallFunc_Add_DoubleDouble_ReturnValue, float CallFunc_GetMaxAttenuationRadius_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetMaxAttenuationRadius_ReturnValue_1, float CallFunc_GetMaxAttenuationRadius_ReturnValue_2, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_2, float CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast, double K2Node_VariableSet_AkInstectMaxAtten_ImplicitCast, double K2Node_VariableSet_AkCritterMaxAtten_ImplicitCast, double K2Node_VariableSet_AkLoopMaxAtten_ImplicitCast);
	void UserConstructionScript(bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int32 CallFunc_RandomInteger_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, const struct FStruct_PoolAudio& K2Node_MakeStruct_Struct_PoolAudio);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Env_Audio_Pool_Base_C">();
	}
	static class ABP_Env_Audio_Pool_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Env_Audio_Pool_Base_C>();
	}
};
static_assert(alignof(ABP_Env_Audio_Pool_Base_C) == 0x000008, "Wrong alignment on ABP_Env_Audio_Pool_Base_C");
static_assert(sizeof(ABP_Env_Audio_Pool_Base_C) == 0x000330, "Wrong size on ABP_Env_Audio_Pool_Base_C");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_Env_Audio_Pool_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, Billboard) == 0x0002B0, "Member 'ABP_Env_Audio_Pool_Base_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, Sphere) == 0x0002B8, "Member 'ABP_Env_Audio_Pool_Base_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, StaticLoop) == 0x0002C0, "Member 'ABP_Env_Audio_Pool_Base_C::StaticLoop' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, OneShot) == 0x0002C8, "Member 'ABP_Env_Audio_Pool_Base_C::OneShot' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, RandomLoop) == 0x0002D0, "Member 'ABP_Env_Audio_Pool_Base_C::RandomLoop' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, RandomLoopChance) == 0x0002D8, "Member 'ABP_Env_Audio_Pool_Base_C::RandomLoopChance' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, AudioEvents) == 0x0002E0, "Member 'ABP_Env_Audio_Pool_Base_C::AudioEvents' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, EditorToolManaged) == 0x000320, "Member 'ABP_Env_Audio_Pool_Base_C::EditorToolManaged' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, ShowBillboard) == 0x000321, "Member 'ABP_Env_Audio_Pool_Base_C::ShowBillboard' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, CanPlayInsect) == 0x000322, "Member 'ABP_Env_Audio_Pool_Base_C::CanPlayInsect' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, IsPlayingInsect) == 0x000323, "Member 'ABP_Env_Audio_Pool_Base_C::IsPlayingInsect' has a wrong offset!");
static_assert(offsetof(ABP_Env_Audio_Pool_Base_C, AudioEmitter) == 0x000328, "Member 'ABP_Env_Audio_Pool_Base_C::AudioEmitter' has a wrong offset!");

}

