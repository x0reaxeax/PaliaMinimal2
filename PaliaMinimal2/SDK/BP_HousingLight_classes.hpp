#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HousingLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HousingLight.BP_HousingLight_C
// 0x0088 (0x0330 - 0x02A8)
class ABP_HousingLight_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight_DrawDistance;                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_DrawDistance;                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightCard;                                         // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLightCard;                                      // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSpotlight;                                      // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5645[0x6];                                     // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightCardMaterial;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity;                                    // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5646[0x4];                                     // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AttenuationRadius_Point;                           // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AttenuationRadius_Spot;                            // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CardScale;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CardEmissiveMultiplier;                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StoreState_Card;                                   // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StoreState_Point;                                  // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StoreState_Spot;                                   // 0x032A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LightsAreOff;                                      // 0x032B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDrawDistance;                                   // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ToggleVisibility();
	void ToggleMaxDistance();
	void StoreLightState(bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1);
	void SetupSpotlight(float CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast);
	void SetupPointlight(float CallFunc_SetAttenuationRadius_NewRadius_ImplicitCast);
	void SetupLightCard(const struct FVector& CallFunc_MakeVector_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue, double CallFunc_Multiply_DoubleDouble_ReturnValue, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, double CallFunc_Divide_DoubleDouble_A_ImplicitCast, float CallFunc_SetScalarParameterValue_Value_ImplicitCast);
	void SetToLight();
	void SetToCard();
	void ExecuteUbergraph_BP_HousingLight(int32 EntryPoint, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_Variable_1, bool CallFunc_Not_PreBool_ReturnValue_1);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HousingLight_C">();
	}
	static class ABP_HousingLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HousingLight_C>();
	}
};
static_assert(alignof(ABP_HousingLight_C) == 0x000008, "Wrong alignment on ABP_HousingLight_C");
static_assert(sizeof(ABP_HousingLight_C) == 0x000330, "Wrong size on ABP_HousingLight_C");
static_assert(offsetof(ABP_HousingLight_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_HousingLight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, PointLight_DrawDistance) == 0x0002B0, "Member 'ABP_HousingLight_C::PointLight_DrawDistance' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, SpotLight_DrawDistance) == 0x0002B8, "Member 'ABP_HousingLight_C::SpotLight_DrawDistance' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, PointLight) == 0x0002C0, "Member 'ABP_HousingLight_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, SpotLight) == 0x0002C8, "Member 'ABP_HousingLight_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, LightCard) == 0x0002D0, "Member 'ABP_HousingLight_C::LightCard' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_HousingLight_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, UseLightCard) == 0x0002E0, "Member 'ABP_HousingLight_C::UseLightCard' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, UseSpotlight) == 0x0002E1, "Member 'ABP_HousingLight_C::UseSpotlight' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, LightCardMaterial) == 0x0002E8, "Member 'ABP_HousingLight_C::LightCardMaterial' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, LightColor) == 0x0002F0, "Member 'ABP_HousingLight_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, LightIntensity) == 0x000300, "Member 'ABP_HousingLight_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, AttenuationRadius_Point) == 0x000308, "Member 'ABP_HousingLight_C::AttenuationRadius_Point' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, AttenuationRadius_Spot) == 0x000310, "Member 'ABP_HousingLight_C::AttenuationRadius_Spot' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, CardScale) == 0x000318, "Member 'ABP_HousingLight_C::CardScale' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, CardEmissiveMultiplier) == 0x000320, "Member 'ABP_HousingLight_C::CardEmissiveMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, StoreState_Card) == 0x000328, "Member 'ABP_HousingLight_C::StoreState_Card' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, StoreState_Point) == 0x000329, "Member 'ABP_HousingLight_C::StoreState_Point' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, StoreState_Spot) == 0x00032A, "Member 'ABP_HousingLight_C::StoreState_Spot' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, LightsAreOff) == 0x00032B, "Member 'ABP_HousingLight_C::LightsAreOff' has a wrong offset!");
static_assert(offsetof(ABP_HousingLight_C, UseDrawDistance) == 0x00032C, "Member 'ABP_HousingLight_C::UseDrawDistance' has a wrong offset!");

}

