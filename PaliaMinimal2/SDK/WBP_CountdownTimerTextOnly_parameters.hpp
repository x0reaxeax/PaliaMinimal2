#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CountdownTimerTextOnly

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Palia_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_CountdownTimerTextOnly.WBP_CountdownTimerTextOnly_C.ExecuteUbergraph_WBP_CountdownTimerTextOnly
// 0x0058 (0x0058 - 0x0000)
struct WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInt64Split                            K2Node_CustomEvent_EndValeriaTimeMs;               // 0x0040(0x0008)(NoDestructor)
	bool                                          K2Node_CustomEvent_DisplayAsFreshness;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C98[0x5];                                     // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              K2Node_CustomEvent_EndDateTime;                    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly) == 0x000008, "Wrong alignment on WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly");
static_assert(sizeof(WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly) == 0x000058, "Wrong size on WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly, EntryPoint) == 0x000000, "Member 'WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly, K2Node_CustomEvent_EndValeriaTimeMs) == 0x000040, "Member 'WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly::K2Node_CustomEvent_EndValeriaTimeMs' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly, K2Node_CustomEvent_DisplayAsFreshness) == 0x000048, "Member 'WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly::K2Node_CustomEvent_DisplayAsFreshness' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly, K2Node_Event_IsDesignTime) == 0x000049, "Member 'WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly, CallFunc_IsValid_ReturnValue) == 0x00004A, "Member 'WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly, K2Node_CustomEvent_EndDateTime) == 0x000050, "Member 'WBP_CountdownTimerTextOnly_C_ExecuteUbergraph_WBP_CountdownTimerTextOnly::K2Node_CustomEvent_EndDateTime' has a wrong offset!");

// Function WBP_CountdownTimerTextOnly.WBP_CountdownTimerTextOnly_C.FormatTime
// 0x0168 (0x0168 - 0x0000)
struct WBP_CountdownTimerTextOnly_C_FormatTime final
{
public:
	int32                                         TimeSeconds;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C99[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FormattedTime;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Hours;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Minutes;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seconds;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9A[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FormattedString;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9B[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9C[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_2;                            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_1;             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9D[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9E[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_1;                           // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_FormatDuration_ReturnValue;               // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimerTextOnly_C_FormatTime) == 0x000008, "Wrong alignment on WBP_CountdownTimerTextOnly_C_FormatTime");
static_assert(sizeof(WBP_CountdownTimerTextOnly_C_FormatTime) == 0x000168, "Wrong size on WBP_CountdownTimerTextOnly_C_FormatTime");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, TimeSeconds) == 0x000000, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::TimeSeconds' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, FormattedTime) == 0x000008, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::FormattedTime' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, Hours) == 0x000018, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::Hours' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, Minutes) == 0x00001C, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::Minutes' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, Seconds) == 0x000020, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::Seconds' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, FormattedString) == 0x000028, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::FormattedString' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, Temp_bool_Variable) == 0x000038, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, Temp_string_Variable) == 0x000040, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, Temp_string_Variable_1) == 0x000050, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, Temp_bool_Variable_1) == 0x000060, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, Temp_string_Variable_2) == 0x000068, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, Temp_string_Variable_3) == 0x000078, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Percent_IntInt_ReturnValue) == 0x000088, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Percent_IntInt_ReturnValue_1) == 0x00008C, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Percent_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Divide_IntInt_ReturnValue) == 0x000090, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000094, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000098, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Conv_IntToString_ReturnValue) == 0x0000A0, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, K2Node_Select_Default) == 0x0000B0, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0000C0, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000C8, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, K2Node_Select_Default_1) == 0x0000D8, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0000E8, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Concat_StrStr_ReturnValue) == 0x0000F8, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_FormatDuration_ReturnValue) == 0x000108, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_FormatDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000118, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000128, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000138, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000148, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_FormatTime, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000158, "Member 'WBP_CountdownTimerTextOnly_C_FormatTime::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");

// Function WBP_CountdownTimerTextOnly.WBP_CountdownTimerTextOnly_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_CountdownTimerTextOnly_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimerTextOnly_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_CountdownTimerTextOnly_C_PreConstruct");
static_assert(sizeof(WBP_CountdownTimerTextOnly_C_PreConstruct) == 0x000001, "Wrong size on WBP_CountdownTimerTextOnly_C_PreConstruct");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_CountdownTimerTextOnly_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_CountdownTimerTextOnly.WBP_CountdownTimerTextOnly_C.SetCountdownTimer
// 0x000C (0x000C - 0x0000)
struct WBP_CountdownTimerTextOnly_C_SetCountdownTimer final
{
public:
	struct FInt64Split                            Param_EndValeriaTimeMs;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          DisplayAsFreshness;                                // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimerTextOnly_C_SetCountdownTimer) == 0x000004, "Wrong alignment on WBP_CountdownTimerTextOnly_C_SetCountdownTimer");
static_assert(sizeof(WBP_CountdownTimerTextOnly_C_SetCountdownTimer) == 0x00000C, "Wrong size on WBP_CountdownTimerTextOnly_C_SetCountdownTimer");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_SetCountdownTimer, Param_EndValeriaTimeMs) == 0x000000, "Member 'WBP_CountdownTimerTextOnly_C_SetCountdownTimer::Param_EndValeriaTimeMs' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_SetCountdownTimer, DisplayAsFreshness) == 0x000008, "Member 'WBP_CountdownTimerTextOnly_C_SetCountdownTimer::DisplayAsFreshness' has a wrong offset!");

// Function WBP_CountdownTimerTextOnly.WBP_CountdownTimerTextOnly_C.SetCountdownTimerInDateTime
// 0x0008 (0x0008 - 0x0000)
struct WBP_CountdownTimerTextOnly_C_SetCountdownTimerInDateTime final
{
public:
	struct FDateTime                              Param_EndDateTime;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimerTextOnly_C_SetCountdownTimerInDateTime) == 0x000008, "Wrong alignment on WBP_CountdownTimerTextOnly_C_SetCountdownTimerInDateTime");
static_assert(sizeof(WBP_CountdownTimerTextOnly_C_SetCountdownTimerInDateTime) == 0x000008, "Wrong size on WBP_CountdownTimerTextOnly_C_SetCountdownTimerInDateTime");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_SetCountdownTimerInDateTime, Param_EndDateTime) == 0x000000, "Member 'WBP_CountdownTimerTextOnly_C_SetCountdownTimerInDateTime::Param_EndDateTime' has a wrong offset!");

// Function WBP_CountdownTimerTextOnly.WBP_CountdownTimerTextOnly_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_CountdownTimerTextOnly_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimerTextOnly_C_Tick) == 0x000004, "Wrong alignment on WBP_CountdownTimerTextOnly_C_Tick");
static_assert(sizeof(WBP_CountdownTimerTextOnly_C_Tick) == 0x00003C, "Wrong size on WBP_CountdownTimerTextOnly_C_Tick");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_CountdownTimerTextOnly_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_CountdownTimerTextOnly_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_CountdownTimerTextOnly.WBP_CountdownTimerTextOnly_C.UpdateUI
// 0x0060 (0x0060 - 0x0000)
struct WBP_CountdownTimerTextOnly_C_UpdateUI final
{
public:
	int32                                         TimeRemainSecs_Curr;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_FormatTime_FormattedTime;                 // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0018(0x0018)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA0[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt64Split                            CallFunc_CastInt32ToInt64_ReturnValue;             // 0x0034(0x0008)(NoDestructor)
	int32                                         CallFunc_CompareInt64_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA1[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt64Split                            CallFunc_GetValeriaTimestampMs_ReturnValue;        // 0x0044(0x0008)(NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA2[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt64Split                            CallFunc_SubtractInt64_ReturnValue;                // 0x0050(0x0008)(NoDestructor)
	int32                                         CallFunc_ConvertToSecs_ReturnValue;                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimerTextOnly_C_UpdateUI) == 0x000008, "Wrong alignment on WBP_CountdownTimerTextOnly_C_UpdateUI");
static_assert(sizeof(WBP_CountdownTimerTextOnly_C_UpdateUI) == 0x000060, "Wrong size on WBP_CountdownTimerTextOnly_C_UpdateUI");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, TimeRemainSecs_Curr) == 0x000000, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::TimeRemainSecs_Curr' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_FormatTime_FormattedTime) == 0x000008, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_FormatTime_FormattedTime' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_Conv_StringToText_ReturnValue) == 0x000018, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_CastInt32ToInt64_ReturnValue) == 0x000034, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_CastInt32ToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_CompareInt64_ReturnValue) == 0x00003C, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_CompareInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_Greater_IntInt_ReturnValue) == 0x000040, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_GetValeriaTimestampMs_ReturnValue) == 0x000044, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_GetValeriaTimestampMs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00004C, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_SubtractInt64_ReturnValue) == 0x000050, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_SubtractInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_ConvertToSecs_ReturnValue) == 0x000058, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_ConvertToSecs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUI, CallFunc_Max_ReturnValue) == 0x00005C, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUI::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function WBP_CountdownTimerTextOnly.WBP_CountdownTimerTextOnly_C.UpdateUIWithDateTime
// 0x0188 (0x0188 - 0x0000)
struct WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime final
{
public:
	class FString                                 FormattedString;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA3[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_1;                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_2;                            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_TimespanZeroValue_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetValeriaTimestampDateTime_ReturnValue;  // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA4[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_GetDateDifferenceInTimespan_OutTimespan;  // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_TimespanTimespan_ReturnValue;     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA5[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan2_Days;                      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan2_Hours;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan2_Minutes;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan2_Seconds;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan2_FractionNano;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_FormatDuration_ReturnValue;               // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA6[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA7[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default_1;                           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0128(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_FTrunc_A_ImplicitCast;                    // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime) == 0x000008, "Wrong alignment on WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime");
static_assert(sizeof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime) == 0x000188, "Wrong size on WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, FormattedString) == 0x000000, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::FormattedString' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, Temp_string_Variable) == 0x000010, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, Temp_bool_Variable) == 0x000020, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, Temp_string_Variable_1) == 0x000028, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, Temp_string_Variable_2) == 0x000038, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, Temp_string_Variable_3) == 0x000048, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_TimespanZeroValue_ReturnValue) == 0x000058, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_TimespanZeroValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_GetValeriaTimestampDateTime_ReturnValue) == 0x000060, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_GetValeriaTimestampDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, Temp_bool_Variable_1) == 0x000068, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_GetDateDifferenceInTimespan_OutTimespan) == 0x000070, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_GetDateDifferenceInTimespan_OutTimespan' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Greater_TimespanTimespan_ReturnValue) == 0x000078, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Greater_TimespanTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_GetTotalSeconds_ReturnValue) == 0x00007C, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_FTrunc_ReturnValue) == 0x000080, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_BreakTimespan2_Days) == 0x000084, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_BreakTimespan2_Days' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_BreakTimespan2_Hours) == 0x000088, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_BreakTimespan2_Hours' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_BreakTimespan2_Minutes) == 0x00008C, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_BreakTimespan2_Minutes' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_BreakTimespan2_Seconds) == 0x000090, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_BreakTimespan2_Seconds' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_BreakTimespan2_FractionNano) == 0x000094, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_BreakTimespan2_FractionNano' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_FormatDuration_ReturnValue) == 0x000098, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_FormatDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Conv_IntToString_ReturnValue) == 0x0000A8, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000B8, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000C0, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0000D0, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, K2Node_Select_Default) == 0x0000D8, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0000E8, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, K2Node_Select_Default_1) == 0x0000F8, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Concat_StrStr_ReturnValue) == 0x000108, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000118, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Conv_StringToText_ReturnValue) == 0x000128, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000140, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000150, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000160, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000170, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime, CallFunc_FTrunc_A_ImplicitCast) == 0x000180, "Member 'WBP_CountdownTimerTextOnly_C_UpdateUIWithDateTime::CallFunc_FTrunc_A_ImplicitCast' has a wrong offset!");

}

