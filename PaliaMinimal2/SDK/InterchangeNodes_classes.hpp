#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InterchangeNodes

#include "Basic.hpp"

#include "InterchangeCore_classes.hpp"
#include "InterchangeNodes_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class InterchangeNodes.InterchangeAnimationTrackSetNode
// 0x0030 (0x0090 - 0x0060)
class UInterchangeAnimationTrackSetNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3B88[0x30];                                    // 0x0060(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddCustomAnimationTrackUid(const class FString& AnimationTrackUid);
	bool RemoveCustomAnimationTrackUid(const class FString& AnimationTrackUid);
	bool SetCustomFrameRate(float& AttributeValue);

	void GetCustomAnimationTrackUid(int32 Param_Index, class FString* OutAnimationTrackUid) const;
	int32 GetCustomAnimationTrackUidCount() const;
	void GetCustomAnimationTrackUids(TArray<class FString>* OutAnimationTrackUids) const;
	bool GetCustomFrameRate(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeAnimationTrackSetNode">();
	}
	static class UInterchangeAnimationTrackSetNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeAnimationTrackSetNode>();
	}
};
static_assert(alignof(UInterchangeAnimationTrackSetNode) == 0x000008, "Wrong alignment on UInterchangeAnimationTrackSetNode");
static_assert(sizeof(UInterchangeAnimationTrackSetNode) == 0x000090, "Wrong size on UInterchangeAnimationTrackSetNode");

// Class InterchangeNodes.InterchangeAnimationTrackBaseNode
// 0x0010 (0x0070 - 0x0060)
class UInterchangeAnimationTrackBaseNode : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3B8E[0x10];                                    // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomCompletionMode(int32& AttributeValue);

	bool GetCustomCompletionMode(int32* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeAnimationTrackBaseNode">();
	}
	static class UInterchangeAnimationTrackBaseNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeAnimationTrackBaseNode>();
	}
};
static_assert(alignof(UInterchangeAnimationTrackBaseNode) == 0x000008, "Wrong alignment on UInterchangeAnimationTrackBaseNode");
static_assert(sizeof(UInterchangeAnimationTrackBaseNode) == 0x000070, "Wrong size on UInterchangeAnimationTrackBaseNode");

// Class InterchangeNodes.InterchangeAnimationTrackSetInstanceNode
// 0x0040 (0x00B0 - 0x0070)
class UInterchangeAnimationTrackSetInstanceNode final : public UInterchangeAnimationTrackBaseNode
{
public:
	uint8                                         Pad_3B91[0x40];                                    // 0x0070(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomDuration(int32& AttributeValue);
	bool SetCustomStartFrame(int32& AttributeValue);
	bool SetCustomTimeScale(float& AttributeValue);
	bool SetCustomTrackSetDependencyUid(const class FString& AttributeValue);

	bool GetCustomDuration(int32* AttributeValue) const;
	bool GetCustomStartFrame(int32* AttributeValue) const;
	bool GetCustomTimeScale(float* AttributeValue) const;
	bool GetCustomTrackSetDependencyUid(class FString* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeAnimationTrackSetInstanceNode">();
	}
	static class UInterchangeAnimationTrackSetInstanceNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeAnimationTrackSetInstanceNode>();
	}
};
static_assert(alignof(UInterchangeAnimationTrackSetInstanceNode) == 0x000008, "Wrong alignment on UInterchangeAnimationTrackSetInstanceNode");
static_assert(sizeof(UInterchangeAnimationTrackSetInstanceNode) == 0x0000B0, "Wrong size on UInterchangeAnimationTrackSetInstanceNode");

// Class InterchangeNodes.InterchangeAnimationTrackNode
// 0x0050 (0x00C0 - 0x0070)
class UInterchangeAnimationTrackNode : public UInterchangeAnimationTrackBaseNode
{
public:
	uint8                                         Pad_3B9A[0x50];                                    // 0x0070(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomActorDependencyUid(const class FString& DependencyUid);
	bool SetCustomAnimationPayloadKey(const class FString& InUniqueId, EInterchangeAnimationPayLoadType& InType);
	bool SetCustomFrameCount(int32& AttributeValue);
	bool SetCustomTargetedProperty(int32& TargetedProperty);

	bool GetCustomActorDependencyUid(class FString* DependencyUid) const;
	bool GetCustomAnimationPayloadKey(struct FInterchangeAnimationPayLoadKey* AnimationPayLoadKey) const;
	bool GetCustomFrameCount(int32* AttributeValue) const;
	bool GetCustomTargetedProperty(int32* TargetedProperty) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeAnimationTrackNode">();
	}
	static class UInterchangeAnimationTrackNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeAnimationTrackNode>();
	}
};
static_assert(alignof(UInterchangeAnimationTrackNode) == 0x000008, "Wrong alignment on UInterchangeAnimationTrackNode");
static_assert(sizeof(UInterchangeAnimationTrackNode) == 0x0000C0, "Wrong size on UInterchangeAnimationTrackNode");

// Class InterchangeNodes.InterchangeTransformAnimationTrackNode
// 0x0010 (0x00D0 - 0x00C0)
class UInterchangeTransformAnimationTrackNode final : public UInterchangeAnimationTrackNode
{
public:
	uint8                                         Pad_3BA3[0x10];                                    // 0x00C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomUsedChannels(int32& AttributeValue);

	bool GetCustomUsedChannels(int32* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTransformAnimationTrackNode">();
	}
	static class UInterchangeTransformAnimationTrackNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTransformAnimationTrackNode>();
	}
};
static_assert(alignof(UInterchangeTransformAnimationTrackNode) == 0x000008, "Wrong alignment on UInterchangeTransformAnimationTrackNode");
static_assert(sizeof(UInterchangeTransformAnimationTrackNode) == 0x0000D0, "Wrong size on UInterchangeTransformAnimationTrackNode");

// Class InterchangeNodes.InterchangeSkeletalAnimationTrackNode
// 0x0220 (0x0290 - 0x0070)
class UInterchangeSkeletalAnimationTrackNode final : public UInterchangeAnimationTrackBaseNode
{
public:
	uint8                                         Pad_3BA6[0x220];                                   // 0x0070(0x0220)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetAnimationPayloadKeyForMorphTargetNodeUid(const class FString& MorphTargetNodeUid, const class FString& InUniqueId, EInterchangeAnimationPayLoadType& InType);
	bool SetAnimationPayloadKeyForSceneNodeUid(const class FString& SceneNodeUid, const class FString& InUniqueId, EInterchangeAnimationPayLoadType& InType);
	bool SetCustomAnimationSampleRate(double& SampleRate);
	bool SetCustomAnimationStartTime(double& StartTime);
	bool SetCustomAnimationStopTime(double& StopTime);
	bool SetCustomSkeletonNodeUid(const class FString& AttributeValue);

	bool GetCustomAnimationSampleRate(double* SampleRate) const;
	bool GetCustomAnimationStartTime(double* StartTime) const;
	bool GetCustomAnimationStopTime(double* StopTime) const;
	bool GetCustomSkeletonNodeUid(class FString* AttributeValue) const;
	void GetMorphTargetNodeAnimationPayloadKeys(TMap<class FString, class FString>* OutMorphTargetNodeAnimationPayloadKeyUids, TMap<class FString, uint8>* OutMorphTargetNodeAnimationPayloadKeyTypes) const;
	void GetSceneNodeAnimationPayloadKeys(TMap<class FString, class FString>* OutSceneNodeAnimationPayloadKeyUids, TMap<class FString, uint8>* OutSceneNodeAnimationPayloadKeyTypes) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeSkeletalAnimationTrackNode">();
	}
	static class UInterchangeSkeletalAnimationTrackNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSkeletalAnimationTrackNode>();
	}
};
static_assert(alignof(UInterchangeSkeletalAnimationTrackNode) == 0x000008, "Wrong alignment on UInterchangeSkeletalAnimationTrackNode");
static_assert(sizeof(UInterchangeSkeletalAnimationTrackNode) == 0x000290, "Wrong size on UInterchangeSkeletalAnimationTrackNode");

// Class InterchangeNodes.InterchangePhysicalCameraNode
// 0x0040 (0x00A0 - 0x0060)
class UInterchangePhysicalCameraNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3BB1[0x40];                                    // 0x0060(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomEnableDepthOfField(bool& AttributeValue);
	bool SetCustomFocalLength(float& AttributeValue);
	bool SetCustomSensorHeight(float& AttributeValue);
	bool SetCustomSensorWidth(float& AttributeValue);

	bool GetCustomEnableDepthOfField(bool* AttributeValue) const;
	bool GetCustomFocalLength(float* AttributeValue) const;
	bool GetCustomSensorHeight(float* AttributeValue) const;
	bool GetCustomSensorWidth(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangePhysicalCameraNode">();
	}
	static class UInterchangePhysicalCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangePhysicalCameraNode>();
	}
};
static_assert(alignof(UInterchangePhysicalCameraNode) == 0x000008, "Wrong alignment on UInterchangePhysicalCameraNode");
static_assert(sizeof(UInterchangePhysicalCameraNode) == 0x0000A0, "Wrong size on UInterchangePhysicalCameraNode");

// Class InterchangeNodes.InterchangeStandardCameraNode
// 0x0060 (0x00C0 - 0x0060)
class UInterchangeStandardCameraNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3BB8[0x60];                                    // 0x0060(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomAspectRatio(float& AttributeValue);
	bool SetCustomFarClipPlane(float& AttributeValue);
	bool SetCustomFieldOfView(float& AttributeValue);
	bool SetCustomNearClipPlane(float& AttributeValue);
	bool SetCustomProjectionMode(EInterchangeCameraProjectionType& AttributeValue);
	bool SetCustomWidth(float& AttributeValue);

	bool GetCustomAspectRatio(float* AttributeValue) const;
	bool GetCustomFarClipPlane(float* AttributeValue) const;
	bool GetCustomFieldOfView(float* AttributeValue) const;
	bool GetCustomNearClipPlane(float* AttributeValue) const;
	bool GetCustomProjectionMode(EInterchangeCameraProjectionType* AttributeValue) const;
	bool GetCustomWidth(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeStandardCameraNode">();
	}
	static class UInterchangeStandardCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeStandardCameraNode>();
	}
};
static_assert(alignof(UInterchangeStandardCameraNode) == 0x000008, "Wrong alignment on UInterchangeStandardCameraNode");
static_assert(sizeof(UInterchangeStandardCameraNode) == 0x0000C0, "Wrong size on UInterchangeStandardCameraNode");

// Class InterchangeNodes.InterchangeBaseLightNode
// 0x0040 (0x00A0 - 0x0060)
class UInterchangeBaseLightNode : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3BC3[0x40];                                    // 0x0060(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomIntensity(float AttributeValue);
	bool SetCustomLightColor(struct FLinearColor& AttributeValue);
	bool SetCustomTemperature(float AttributeValue);
	bool SetCustomUseTemperature(bool AttributeValue);

	bool GetCustomIntensity(float* AttributeValue) const;
	bool GetCustomLightColor(struct FLinearColor* AttributeValue) const;
	bool GetCustomTemperature(float* AttributeValue) const;
	bool GetCustomUseTemperature(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeBaseLightNode">();
	}
	static class UInterchangeBaseLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeBaseLightNode>();
	}
};
static_assert(alignof(UInterchangeBaseLightNode) == 0x000008, "Wrong alignment on UInterchangeBaseLightNode");
static_assert(sizeof(UInterchangeBaseLightNode) == 0x0000A0, "Wrong size on UInterchangeBaseLightNode");

// Class InterchangeNodes.InterchangeLightNode
// 0x0030 (0x00D0 - 0x00A0)
class UInterchangeLightNode : public UInterchangeBaseLightNode
{
public:
	uint8                                         Pad_3BCA[0x30];                                    // 0x00A0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomAttenuationRadius(float AttributeValue);
	bool SetCustomIESTexture(const class FString& AttributeValue);
	bool SetCustomIntensityUnits(EInterchangeLightUnits& AttributeValue);

	bool GetCustomAttenuationRadius(float* AttributeValue) const;
	bool GetCustomIESTexture(class FString* AttributeValue) const;
	bool GetCustomIntensityUnits(EInterchangeLightUnits* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeLightNode">();
	}
	static class UInterchangeLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeLightNode>();
	}
};
static_assert(alignof(UInterchangeLightNode) == 0x000008, "Wrong alignment on UInterchangeLightNode");
static_assert(sizeof(UInterchangeLightNode) == 0x0000D0, "Wrong size on UInterchangeLightNode");

// Class InterchangeNodes.InterchangePointLightNode
// 0x0020 (0x00F0 - 0x00D0)
class UInterchangePointLightNode : public UInterchangeLightNode
{
public:
	uint8                                         Pad_3BCF[0x20];                                    // 0x00D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomLightFalloffExponent(float AttributeValue);
	bool SetCustomUseInverseSquaredFalloff(bool AttributeValue);

	bool GetCustomLightFalloffExponent(float* AttributeValue) const;
	bool GetCustomUseInverseSquaredFalloff(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangePointLightNode">();
	}
	static class UInterchangePointLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangePointLightNode>();
	}
};
static_assert(alignof(UInterchangePointLightNode) == 0x000008, "Wrong alignment on UInterchangePointLightNode");
static_assert(sizeof(UInterchangePointLightNode) == 0x0000F0, "Wrong size on UInterchangePointLightNode");

// Class InterchangeNodes.InterchangeSpotLightNode
// 0x0020 (0x0110 - 0x00F0)
class UInterchangeSpotLightNode final : public UInterchangePointLightNode
{
public:
	uint8                                         Pad_3BD2[0x20];                                    // 0x00F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomInnerConeAngle(float AttributeValue);
	bool SetCustomOuterConeAngle(float AttributeValue);

	bool GetCustomInnerConeAngle(float* AttributeValue) const;
	bool GetCustomOuterConeAngle(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeSpotLightNode">();
	}
	static class UInterchangeSpotLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSpotLightNode>();
	}
};
static_assert(alignof(UInterchangeSpotLightNode) == 0x000008, "Wrong alignment on UInterchangeSpotLightNode");
static_assert(sizeof(UInterchangeSpotLightNode) == 0x000110, "Wrong size on UInterchangeSpotLightNode");

// Class InterchangeNodes.InterchangeRectLightNode
// 0x0020 (0x00F0 - 0x00D0)
class UInterchangeRectLightNode final : public UInterchangeLightNode
{
public:
	uint8                                         Pad_3BD7[0x20];                                    // 0x00D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomSourceHeight(float AttributeValue);
	bool SetCustomSourceWidth(float AttributeValue);

	bool GetCustomSourceHeight(float* AttributeValue) const;
	bool GetCustomSourceWidth(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeRectLightNode">();
	}
	static class UInterchangeRectLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeRectLightNode>();
	}
};
static_assert(alignof(UInterchangeRectLightNode) == 0x000008, "Wrong alignment on UInterchangeRectLightNode");
static_assert(sizeof(UInterchangeRectLightNode) == 0x0000F0, "Wrong size on UInterchangeRectLightNode");

// Class InterchangeNodes.InterchangeDirectionalLightNode
// 0x0000 (0x00A0 - 0x00A0)
class UInterchangeDirectionalLightNode final : public UInterchangeBaseLightNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeDirectionalLightNode">();
	}
	static class UInterchangeDirectionalLightNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeDirectionalLightNode>();
	}
};
static_assert(alignof(UInterchangeDirectionalLightNode) == 0x000008, "Wrong alignment on UInterchangeDirectionalLightNode");
static_assert(sizeof(UInterchangeDirectionalLightNode) == 0x0000A0, "Wrong size on UInterchangeDirectionalLightNode");

// Class InterchangeNodes.InterchangeTextureNode
// 0x0030 (0x0090 - 0x0060)
class UInterchangeTextureNode : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3BDC[0x30];                                    // 0x0060(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustombFlipGreenChannel(bool& AttributeValue);
	bool SetCustomFilter(EInterchangeTextureFilterMode& AttributeValue);
	bool SetCustomSRGB(bool& AttributeValue);
	void SetPayLoadKey(const class FString& PayloadKey);

	bool GetCustombFlipGreenChannel(bool* AttributeValue) const;
	bool GetCustomFilter(EInterchangeTextureFilterMode* AttributeValue) const;
	bool GetCustomSRGB(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTextureNode">();
	}
	static class UInterchangeTextureNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureNode>();
	}
};
static_assert(alignof(UInterchangeTextureNode) == 0x000008, "Wrong alignment on UInterchangeTextureNode");
static_assert(sizeof(UInterchangeTextureNode) == 0x000090, "Wrong size on UInterchangeTextureNode");

// Class InterchangeNodes.InterchangeTexture2DArrayNode
// 0x0000 (0x0090 - 0x0090)
class UInterchangeTexture2DArrayNode final : public UInterchangeTextureNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTexture2DArrayNode">();
	}
	static class UInterchangeTexture2DArrayNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTexture2DArrayNode>();
	}
};
static_assert(alignof(UInterchangeTexture2DArrayNode) == 0x000008, "Wrong alignment on UInterchangeTexture2DArrayNode");
static_assert(sizeof(UInterchangeTexture2DArrayNode) == 0x000090, "Wrong size on UInterchangeTexture2DArrayNode");

// Class InterchangeNodes.InterchangeTextureCubeArrayNode
// 0x0000 (0x0090 - 0x0090)
class UInterchangeTextureCubeArrayNode final : public UInterchangeTextureNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTextureCubeArrayNode">();
	}
	static class UInterchangeTextureCubeArrayNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureCubeArrayNode>();
	}
};
static_assert(alignof(UInterchangeTextureCubeArrayNode) == 0x000008, "Wrong alignment on UInterchangeTextureCubeArrayNode");
static_assert(sizeof(UInterchangeTextureCubeArrayNode) == 0x000090, "Wrong size on UInterchangeTextureCubeArrayNode");

// Class InterchangeNodes.InterchangeTextureCubeNode
// 0x0000 (0x0090 - 0x0090)
class UInterchangeTextureCubeNode final : public UInterchangeTextureNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTextureCubeNode">();
	}
	static class UInterchangeTextureCubeNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureCubeNode>();
	}
};
static_assert(alignof(UInterchangeTextureCubeNode) == 0x000008, "Wrong alignment on UInterchangeTextureCubeNode");
static_assert(sizeof(UInterchangeTextureCubeNode) == 0x000090, "Wrong size on UInterchangeTextureCubeNode");

// Class InterchangeNodes.InterchangeTextureLightProfileNode
// 0x0000 (0x0090 - 0x0090)
class UInterchangeTextureLightProfileNode final : public UInterchangeTextureNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTextureLightProfileNode">();
	}
	static class UInterchangeTextureLightProfileNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureLightProfileNode>();
	}
};
static_assert(alignof(UInterchangeTextureLightProfileNode) == 0x000008, "Wrong alignment on UInterchangeTextureLightProfileNode");
static_assert(sizeof(UInterchangeTextureLightProfileNode) == 0x000090, "Wrong size on UInterchangeTextureLightProfileNode");

// Class InterchangeNodes.InterchangeVariantSetNode
// 0x0040 (0x00A0 - 0x0060)
class UInterchangeVariantSetNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3BDD[0x40];                                    // 0x0060(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddCustomDependencyUid(const class FString& DependencyUid);
	bool RemoveCustomDependencyUid(const class FString& DependencyUid);
	bool SetCustomDisplayText(const class FString& AttributeValue);
	bool SetCustomVariantsPayloadKey(const class FString& PayloadKey);

	void GetCustomDependencyUid(int32 Param_Index, class FString* OutDependencyUid) const;
	int32 GetCustomDependencyUidCount() const;
	void GetCustomDependencyUids(TArray<class FString>* OutDependencyUids) const;
	bool GetCustomDisplayText(class FString* AttributeValue) const;
	bool GetCustomVariantsPayloadKey(class FString* PayloadKey) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeVariantSetNode">();
	}
	static class UInterchangeVariantSetNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeVariantSetNode>();
	}
};
static_assert(alignof(UInterchangeVariantSetNode) == 0x000008, "Wrong alignment on UInterchangeVariantSetNode");
static_assert(sizeof(UInterchangeVariantSetNode) == 0x0000A0, "Wrong size on UInterchangeVariantSetNode");

// Class InterchangeNodes.InterchangeSceneVariantSetsNode
// 0x0020 (0x0080 - 0x0060)
class UInterchangeSceneVariantSetsNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3BE5[0x20];                                    // 0x0060(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddCustomVariantSetUid(const class FString& VariantUid);
	bool RemoveCustomVariantSetUid(const class FString& VariantUid);

	void GetCustomVariantSetUid(int32 Param_Index, class FString* OutVariantUid) const;
	int32 GetCustomVariantSetUidCount() const;
	void GetCustomVariantSetUids(TArray<class FString>* OutVariantUids) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeSceneVariantSetsNode">();
	}
	static class UInterchangeSceneVariantSetsNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSceneVariantSetsNode>();
	}
};
static_assert(alignof(UInterchangeSceneVariantSetsNode) == 0x000008, "Wrong alignment on UInterchangeSceneVariantSetsNode");
static_assert(sizeof(UInterchangeSceneVariantSetsNode) == 0x000080, "Wrong size on UInterchangeSceneVariantSetsNode");

// Class InterchangeNodes.InterchangeVolumeTextureNode
// 0x0000 (0x0090 - 0x0090)
class UInterchangeVolumeTextureNode final : public UInterchangeTextureNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeVolumeTextureNode">();
	}
	static class UInterchangeVolumeTextureNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeVolumeTextureNode>();
	}
};
static_assert(alignof(UInterchangeVolumeTextureNode) == 0x000008, "Wrong alignment on UInterchangeVolumeTextureNode");
static_assert(sizeof(UInterchangeVolumeTextureNode) == 0x000090, "Wrong size on UInterchangeVolumeTextureNode");

// Class InterchangeNodes.InterchangeMaterialInstanceNode
// 0x0010 (0x0070 - 0x0060)
class UInterchangeMaterialInstanceNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3BE9[0x10];                                    // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddScalarParameterValue(const class FString& ParameterName, float AttributeValue);
	bool AddStaticSwitchParameterValue(const class FString& ParameterName, bool AttributeValue);
	bool AddTextureParameterValue(const class FString& ParameterName, const class FString& AttributeValue);
	bool AddVectorParameterValue(const class FString& ParameterName, struct FLinearColor& AttributeValue);

	bool GetCustomParent(class FString* AttributeValue) const;
	bool GetScalarParameterValue(const class FString& ParameterName, float* AttributeValue) const;
	bool GetStaticSwitchParameterValue(const class FString& ParameterName, bool* AttributeValue) const;
	bool GetTextureParameterValue(const class FString& ParameterName, class FString* AttributeValue) const;
	bool GetVectorParameterValue(const class FString& ParameterName, struct FLinearColor* AttributeValue) const;
	bool SetCustomParent(const class FString& AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeMaterialInstanceNode">();
	}
	static class UInterchangeMaterialInstanceNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMaterialInstanceNode>();
	}
};
static_assert(alignof(UInterchangeMaterialInstanceNode) == 0x000008, "Wrong alignment on UInterchangeMaterialInstanceNode");
static_assert(sizeof(UInterchangeMaterialInstanceNode) == 0x000070, "Wrong size on UInterchangeMaterialInstanceNode");

// Class InterchangeNodes.InterchangeMeshNode
// 0x0188 (0x01E8 - 0x0060)
class UInterchangeMeshNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3BF4[0x188];                                   // 0x0060(0x0188)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool RemoveMorphTargetDependencyUid(const class FString& DependencyUid);
	bool RemoveSceneInstanceUid(const class FString& DependencyUid);
	bool RemoveSkeletonDependencyUid(const class FString& DependencyUid);
	bool RemoveSlotMaterialDependencyUid(const class FString& SlotName);
	bool SetCustomBoundingBox(struct FBox& AttributeValue);
	bool SetCustomHasSmoothGroup(bool& AttributeValue);
	bool SetCustomHasVertexBinormal(bool& AttributeValue);
	bool SetCustomHasVertexColor(bool& AttributeValue);
	bool SetCustomHasVertexNormal(bool& AttributeValue);
	bool SetCustomHasVertexTangent(bool& AttributeValue);
	bool SetCustomPolygonCount(int32& AttributeValue);
	bool SetCustomUVCount(int32& AttributeValue);
	bool SetCustomVertexCount(int32& AttributeValue);
	bool SetMorphTarget(bool bIsMorphTarget);
	bool SetMorphTargetDependencyUid(const class FString& DependencyUid);
	bool SetMorphTargetName(const class FString& MorphTargetName);
	void SetPayLoadKey(const class FString& PayloadKey, EInterchangeMeshPayLoadType& PayloadType);
	bool SetSceneInstanceUid(const class FString& DependencyUid);
	bool SetSkeletonDependencyUid(const class FString& DependencyUid);
	bool SetSkinnedMesh(bool bIsSkinnedMesh);
	bool SetSlotMaterialDependencyUid(const class FString& SlotName, const class FString& MaterialDependencyUid);

	bool GetCustomBoundingBox(struct FBox* AttributeValue) const;
	bool GetCustomHasSmoothGroup(bool* AttributeValue) const;
	bool GetCustomHasVertexBinormal(bool* AttributeValue) const;
	bool GetCustomHasVertexColor(bool* AttributeValue) const;
	bool GetCustomHasVertexNormal(bool* AttributeValue) const;
	bool GetCustomHasVertexTangent(bool* AttributeValue) const;
	bool GetCustomPolygonCount(int32* AttributeValue) const;
	bool GetCustomUVCount(int32* AttributeValue) const;
	bool GetCustomVertexCount(int32* AttributeValue) const;
	int32 GetMorphTargetDependeciesCount() const;
	void GetMorphTargetDependencies(TArray<class FString>* OutDependencies) const;
	void GetMorphTargetDependency(int32 Param_Index, class FString* OutDependency) const;
	bool GetMorphTargetName(class FString* OutMorphTargetName) const;
	void GetSceneInstanceUid(int32 Param_Index, class FString* OutDependency) const;
	void GetSceneInstanceUids(TArray<class FString>* OutDependencies) const;
	int32 GetSceneInstanceUidsCount() const;
	int32 GetSkeletonDependeciesCount() const;
	void GetSkeletonDependencies(TArray<class FString>* OutDependencies) const;
	void GetSkeletonDependency(int32 Param_Index, class FString* OutDependency) const;
	void GetSlotMaterialDependencies(TMap<class FString, class FString>* OutMaterialDependencies) const;
	bool GetSlotMaterialDependencyUid(const class FString& SlotName, class FString* OutMaterialDependency) const;
	bool IsMorphTarget() const;
	bool IsSkinnedMesh() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeMeshNode">();
	}
	static class UInterchangeMeshNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMeshNode>();
	}
};
static_assert(alignof(UInterchangeMeshNode) == 0x000008, "Wrong alignment on UInterchangeMeshNode");
static_assert(sizeof(UInterchangeMeshNode) == 0x0001E8, "Wrong size on UInterchangeMeshNode");

// Class InterchangeNodes.InterchangeSceneNode
// 0x02C0 (0x0320 - 0x0060)
class UInterchangeSceneNode final : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3C0C[0x2C0];                                   // 0x0060(0x02C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddSpecializedType(const class FString& SpecializedType);
	bool RemoveSlotMaterialDependencyUid(const class FString& SlotName);
	bool RemoveSpecializedType(const class FString& SpecializedType);
	bool SetCustomAnimationAssetUidToPlay(const class FString& AttributeValue);
	bool SetCustomAssetInstanceUid(const class FString& AttributeValue);
	bool SetCustomBindPoseLocalTransform(class UInterchangeBaseNodeContainer* BaseNodeContainer, struct FTransform& AttributeValue, bool bResetCache);
	bool SetCustomGeometricTransform(struct FTransform& AttributeValue);
	bool SetCustomLocalTransform(class UInterchangeBaseNodeContainer* BaseNodeContainer, struct FTransform& AttributeValue, bool bResetCache);
	bool SetCustomTimeZeroLocalTransform(class UInterchangeBaseNodeContainer* BaseNodeContainer, struct FTransform& AttributeValue, bool bResetCache);
	bool SetMorphTargetCurveWeight(const class FString& MorphTargetName, float& Weight);
	bool SetSlotMaterialDependencyUid(const class FString& SlotName, const class FString& MaterialDependencyUid);

	bool GetCustomAnimationAssetUidToPlay(class FString* AttributeValue) const;
	bool GetCustomAssetInstanceUid(class FString* AttributeValue) const;
	bool GetCustomBindPoseGlobalTransform(class UInterchangeBaseNodeContainer* BaseNodeContainer, struct FTransform& GlobalOffsetTransform, struct FTransform* AttributeValue, bool bForceRecache) const;
	bool GetCustomBindPoseLocalTransform(struct FTransform* AttributeValue) const;
	bool GetCustomGeometricTransform(struct FTransform* AttributeValue) const;
	bool GetCustomGlobalTransform(class UInterchangeBaseNodeContainer* BaseNodeContainer, struct FTransform& GlobalOffsetTransform, struct FTransform* AttributeValue, bool bForceRecache) const;
	bool GetCustomLocalTransform(struct FTransform* AttributeValue) const;
	bool GetCustomTimeZeroGlobalTransform(class UInterchangeBaseNodeContainer* BaseNodeContainer, struct FTransform& GlobalOffsetTransform, struct FTransform* AttributeValue, bool bForceRecache) const;
	bool GetCustomTimeZeroLocalTransform(struct FTransform* AttributeValue) const;
	void GetMorphTargetCurveWeights(TMap<class FString, float>* OutMorphTargetCurveWeights) const;
	void GetSlotMaterialDependencies(TMap<class FString, class FString>* OutMaterialDependencies) const;
	bool GetSlotMaterialDependencyUid(const class FString& SlotName, class FString* OutMaterialDependency) const;
	void GetSpecializedType(int32 Param_Index, class FString* OutSpecializedType) const;
	int32 GetSpecializedTypeCount() const;
	void GetSpecializedTypes(TArray<class FString>* OutSpecializedTypes) const;
	bool IsSpecializedTypeContains(const class FString& SpecializedType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeSceneNode">();
	}
	static class UInterchangeSceneNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSceneNode>();
	}
};
static_assert(alignof(UInterchangeSceneNode) == 0x000008, "Wrong alignment on UInterchangeSceneNode");
static_assert(sizeof(UInterchangeSceneNode) == 0x000320, "Wrong size on UInterchangeSceneNode");

// Class InterchangeNodes.InterchangeShaderPortsAPI
// 0x0000 (0x0028 - 0x0028)
class UInterchangeShaderPortsAPI final : public UObject
{
public:
	static bool ConnectDefaultOuputToInput(class UInterchangeBaseNode* InterchangeNode, const class FString& InputName, const class FString& ExpressionUid);
	static bool ConnectOuputToInputByIndex(class UInterchangeBaseNode* InterchangeNode, const class FString& InputName, const class FString& ExpressionUid, int32 OutputIndex);
	static bool ConnectOuputToInputByName(class UInterchangeBaseNode* InterchangeNode, const class FString& InputName, const class FString& ExpressionUid, const class FString& OutputName);
	static void GatherInputs(class UInterchangeBaseNode* InterchangeNode, TArray<class FString>* OutInputNames);
	static bool GetInputConnection(class UInterchangeBaseNode* InterchangeNode, const class FString& InputName, class FString* OutExpressionUid, class FString* OutputName);
	static bool HasInput(class UInterchangeBaseNode* InterchangeNode, class FName& InInputName);
	static bool IsAnInput(const class FString& AttributeKey);
	static class FString MakeInputConnectionKey(const class FString& InputName);
	static class FString MakeInputName(const class FString& InputKey);
	static class FString MakeInputValueKey(const class FString& InputName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeShaderPortsAPI">();
	}
	static class UInterchangeShaderPortsAPI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeShaderPortsAPI>();
	}
};
static_assert(alignof(UInterchangeShaderPortsAPI) == 0x000008, "Wrong alignment on UInterchangeShaderPortsAPI");
static_assert(sizeof(UInterchangeShaderPortsAPI) == 0x000028, "Wrong size on UInterchangeShaderPortsAPI");

// Class InterchangeNodes.InterchangeShaderNode
// 0x0010 (0x0070 - 0x0060)
class UInterchangeShaderNode : public UInterchangeBaseNode
{
public:
	uint8                                         Pad_3C30[0x10];                                    // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomShaderType(const class FString& AttributeValue);

	bool GetCustomShaderType(class FString* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeShaderNode">();
	}
	static class UInterchangeShaderNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeShaderNode>();
	}
};
static_assert(alignof(UInterchangeShaderNode) == 0x000008, "Wrong alignment on UInterchangeShaderNode");
static_assert(sizeof(UInterchangeShaderNode) == 0x000070, "Wrong size on UInterchangeShaderNode");

// Class InterchangeNodes.InterchangeFunctionCallShaderNode
// 0x0010 (0x0080 - 0x0070)
class UInterchangeFunctionCallShaderNode final : public UInterchangeShaderNode
{
public:
	uint8                                         Pad_3C33[0x10];                                    // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomMaterialFunction(const class FString& AttributeValue);

	bool GetCustomMaterialFunction(class FString* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeFunctionCallShaderNode">();
	}
	static class UInterchangeFunctionCallShaderNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeFunctionCallShaderNode>();
	}
};
static_assert(alignof(UInterchangeFunctionCallShaderNode) == 0x000008, "Wrong alignment on UInterchangeFunctionCallShaderNode");
static_assert(sizeof(UInterchangeFunctionCallShaderNode) == 0x000080, "Wrong size on UInterchangeFunctionCallShaderNode");

// Class InterchangeNodes.InterchangeShaderGraphNode
// 0x0050 (0x00C0 - 0x0070)
class UInterchangeShaderGraphNode final : public UInterchangeShaderNode
{
public:
	uint8                                         Pad_3C36[0x50];                                    // 0x0070(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomIsAShaderFunction(bool& AttributeValue);
	bool SetCustomOpacityMaskClipValue(float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomScreenSpaceReflections(bool& AttributeValue);
	bool SetCustomTwoSided(bool& AttributeValue);
	bool SetCustomTwoSidedTransmission(bool& AttributeValue);

	bool GetCustomIsAShaderFunction(bool* AttributeValue) const;
	bool GetCustomOpacityMaskClipValue(float* AttributeValue) const;
	bool GetCustomScreenSpaceReflections(bool* AttributeValue) const;
	bool GetCustomTwoSided(bool* AttributeValue) const;
	bool GetCustomTwoSidedTransmission(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeShaderGraphNode">();
	}
	static class UInterchangeShaderGraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeShaderGraphNode>();
	}
};
static_assert(alignof(UInterchangeShaderGraphNode) == 0x000008, "Wrong alignment on UInterchangeShaderGraphNode");
static_assert(sizeof(UInterchangeShaderGraphNode) == 0x0000C0, "Wrong size on UInterchangeShaderGraphNode");

// Class InterchangeNodes.InterchangeTexture2DNode
// 0x0098 (0x0128 - 0x0090)
class UInterchangeTexture2DNode : public UInterchangeTextureNode
{
public:
	uint8                                         Pad_3C39[0x98];                                    // 0x0090(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomWrapU(EInterchangeTextureWrapMode& AttributeValue);
	bool SetCustomWrapV(EInterchangeTextureWrapMode& AttributeValue);

	bool GetCustomWrapU(EInterchangeTextureWrapMode* AttributeValue) const;
	bool GetCustomWrapV(EInterchangeTextureWrapMode* AttributeValue) const;
	TMap<int32, class FString> GetSourceBlocks() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTexture2DNode">();
	}
	static class UInterchangeTexture2DNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTexture2DNode>();
	}
};
static_assert(alignof(UInterchangeTexture2DNode) == 0x000008, "Wrong alignment on UInterchangeTexture2DNode");
static_assert(sizeof(UInterchangeTexture2DNode) == 0x000128, "Wrong size on UInterchangeTexture2DNode");

// Class InterchangeNodes.InterchangeTextureBlurNode
// 0x0000 (0x0128 - 0x0128)
class UInterchangeTextureBlurNode final : public UInterchangeTexture2DNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTextureBlurNode">();
	}
	static class UInterchangeTextureBlurNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureBlurNode>();
	}
};
static_assert(alignof(UInterchangeTextureBlurNode) == 0x000008, "Wrong alignment on UInterchangeTextureBlurNode");
static_assert(sizeof(UInterchangeTextureBlurNode) == 0x000128, "Wrong size on UInterchangeTextureBlurNode");

}

