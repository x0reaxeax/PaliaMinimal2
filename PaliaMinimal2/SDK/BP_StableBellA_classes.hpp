#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StableBellA

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S6Core_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StableBellA.BP_StableBellA_C
// 0x00B0 (0x0358 - 0x02A8)
class ABP_StableBellA_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        AudioLocation;                                     // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube_contraint;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Bell_Body;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Bell_Ringer;                                    // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Dur_Gust_Cycle;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Gust_Current;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Gust_Previous;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_2Force;                                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FRotator                               bellRot_rest;                                      // 0x0300(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Set_Previous_Location;                             // 0x0318(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VRtpc;                                             // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotThreshold;                                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerBell01;                                     // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerBell02;                                     // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4713[0x6];                                     // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           GustTimer;                                         // 0x0348(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LowEndMaxTickrate;                                 // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Event_bellWindControl();
	void Event_Setup();
	void ExecuteUbergraph_BP_StableBellA(int32 EntryPoint, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, bool Temp_bool_Variable_1, bool Temp_bool_Variable_2, bool Temp_bool_Variable_3, bool Temp_bool_Variable_4, bool Temp_bool_Variable_5, bool Temp_bool_Has_Been_Initd_Variable, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, bool Temp_bool_Variable_6, float CallFunc_GetScalarParameterValue_ReturnValue, const struct FLinearColor& CallFunc_GetVectorParameterValue_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool Temp_bool_IsClosed_Variable, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_1, bool Temp_bool_Variable_7, bool CallFunc_WasRecentlyRendered_ReturnValue, const struct FRotator& CallFunc_K2_GetComponentRotation_ReturnValue, bool Temp_bool_Variable_8, ERedirectsPlatform Temp_byte_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, double CallFunc_Abs_ReturnValue, bool CallFunc_Greater_DoubleDouble_ReturnValue, bool CallFunc_Greater_DoubleDouble_ReturnValue_1, float K2Node_CustomEvent_DeltaTime, double CallFunc_RandomFloatInRange_ReturnValue, class UValeriaWeather* CallFunc_GetWorldSubsystem_ReturnValue, ERedirectsPlatform CallFunc_GetPlatformType_ReturnValue, class AValEnvironmentManager* CallFunc_GetCurrentEnvManager_ReturnValue, float CallFunc_GetWindIntensityAtPos_ReturnValue, bool K2Node_Select_Default, const struct FLinearColor& CallFunc_Multiply_LinearColorFloat_ReturnValue, const struct FVector& CallFunc_Conv_LinearColorToVector_ReturnValue, double CallFunc_FClamp_ReturnValue, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, class UAkComponent* CallFunc_SpawnAkComponentAtLocation_ReturnValue, int32 CallFunc_AkEventComponent_ReturnValue, double CallFunc_Subtract_DoubleDouble_ReturnValue, const struct FVector& CallFunc_Ak_Object_Velocity_Set_Previous_Location, double CallFunc_Ak_Object_Velocity_VectorLength, double CallFunc_Ak_Object_Velocity_VectorLengthClamped, double CallFunc_Abs_ReturnValue_1, bool CallFunc_Greater_DoubleDouble_ReturnValue_2, class UValeriaWeather* CallFunc_GetWorldSubsystem_ReturnValue_1, class AValEnvironmentManager* CallFunc_GetCurrentEnvManager_ReturnValue_1, float CallFunc_GetWindIntensityAtPos_ReturnValue_1, double CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, double CallFunc_Lerp_ReturnValue, double CallFunc_Greater_DoubleDouble_A_ImplicitCast, double CallFunc_Abs_A_ImplicitCast, double CallFunc_Ak_Object_Velocity_Delta_Time_ImplicitCast, float CallFunc_UpdateAudioBell_DeltaTime_ImplicitCast, float CallFunc_Delay_Duration_ImplicitCast, double K2Node_VariableSet_Gust_Current_ImplicitCast, float CallFunc_Multiply_LinearColorFloat_B_ImplicitCast, float CallFunc_K2_SetTimerDelegate_Time_ImplicitCast, float CallFunc_SetRTPCValue_Value_ImplicitCast, double CallFunc_MultiplyMultiply_FloatFloat_Base_ImplicitCast);
	void ReceiveBeginPlay();
	void Update_pushMyBell();
	void Update_wind2Bell();
	void UpdateAudioBell(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StableBellA_C">();
	}
	static class ABP_StableBellA_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_StableBellA_C>();
	}
};
static_assert(alignof(ABP_StableBellA_C) == 0x000008, "Wrong alignment on ABP_StableBellA_C");
static_assert(sizeof(ABP_StableBellA_C) == 0x000358, "Wrong size on ABP_StableBellA_C");
static_assert(offsetof(ABP_StableBellA_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_StableBellA_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, AudioLocation) == 0x0002B0, "Member 'ABP_StableBellA_C::AudioLocation' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, Cube_contraint) == 0x0002B8, "Member 'ABP_StableBellA_C::Cube_contraint' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, SM_Bell_Body) == 0x0002C0, "Member 'ABP_StableBellA_C::SM_Bell_Body' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, PhysicsConstraint) == 0x0002C8, "Member 'ABP_StableBellA_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, SM_Bell_Ringer) == 0x0002D0, "Member 'ABP_StableBellA_C::SM_Bell_Ringer' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_StableBellA_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, Dur_Gust_Cycle) == 0x0002E0, "Member 'ABP_StableBellA_C::Dur_Gust_Cycle' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, Gust_Current) == 0x0002E8, "Member 'ABP_StableBellA_C::Gust_Current' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, Gust_Previous) == 0x0002F0, "Member 'ABP_StableBellA_C::Gust_Previous' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, Wind_2Force) == 0x0002F8, "Member 'ABP_StableBellA_C::Wind_2Force' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, bellRot_rest) == 0x000300, "Member 'ABP_StableBellA_C::bellRot_rest' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, Set_Previous_Location) == 0x000318, "Member 'ABP_StableBellA_C::Set_Previous_Location' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, VRtpc) == 0x000330, "Member 'ABP_StableBellA_C::VRtpc' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, RotThreshold) == 0x000338, "Member 'ABP_StableBellA_C::RotThreshold' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, TriggerBell01) == 0x000340, "Member 'ABP_StableBellA_C::TriggerBell01' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, TriggerBell02) == 0x000341, "Member 'ABP_StableBellA_C::TriggerBell02' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, GustTimer) == 0x000348, "Member 'ABP_StableBellA_C::GustTimer' has a wrong offset!");
static_assert(offsetof(ABP_StableBellA_C, LowEndMaxTickrate) == 0x000350, "Member 'ABP_StableBellA_C::LowEndMaxTickrate' has a wrong offset!");

}

