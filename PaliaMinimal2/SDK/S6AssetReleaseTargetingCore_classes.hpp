#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S6AssetReleaseTargetingCore

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "S6AssetReleaseTargetingCore_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class S6AssetReleaseTargetingCore.S6ReleaseVersioningSettings
// 0x0050 (0x0088 - 0x0038)
class US6ReleaseVersioningSettings final : public UDeveloperSettings
{
public:
	TSet<struct FS6ReleaseVersionSpecification>   KnownReleaseVersions;                              // 0x0038(0x0050)(Edit, Config, NativeAccessSpecifierPublic)

public:
	void SanitizeReleaseVersions();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6ReleaseVersioningSettings">();
	}
	static class US6ReleaseVersioningSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6ReleaseVersioningSettings>();
	}
};
static_assert(alignof(US6ReleaseVersioningSettings) == 0x000008, "Wrong alignment on US6ReleaseVersioningSettings");
static_assert(sizeof(US6ReleaseVersioningSettings) == 0x000088, "Wrong size on US6ReleaseVersioningSettings");
static_assert(offsetof(US6ReleaseVersioningSettings, KnownReleaseVersions) == 0x000038, "Member 'US6ReleaseVersioningSettings::KnownReleaseVersions' has a wrong offset!");

// Class S6AssetReleaseTargetingCore.S6ReleaseVersioningLibrary
// 0x0000 (0x0028 - 0x0028)
class US6ReleaseVersioningLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool EqualEqual(const struct FS6ReleaseVersionSpecification& A, const struct FS6ReleaseVersionSpecification& B);
	static struct FS6ReleaseVersionSpecification GetCurrentReleaseVersionSpec();
	static struct FS6ReleaseVersionSpecification GetFutureReleaseVersionSpec();
	static struct FS6ReleaseVersionSpecification GetUnspecifiedReleaseVersionSpec();
	static bool Greater(const struct FS6ReleaseVersionSpecification& A, const struct FS6ReleaseVersionSpecification& B);
	static bool GreaterEqual(const struct FS6ReleaseVersionSpecification& A, const struct FS6ReleaseVersionSpecification& B);
	static bool IsValid(struct FS6ReleaseVersionSpecification& Value);
	static bool Less(const struct FS6ReleaseVersionSpecification& A, const struct FS6ReleaseVersionSpecification& B);
	static bool LessEqual(const struct FS6ReleaseVersionSpecification& A, const struct FS6ReleaseVersionSpecification& B);
	static struct FS6ReleaseVersionSpecification Max(const struct FS6ReleaseVersionSpecification& A, const struct FS6ReleaseVersionSpecification& B);
	static struct FS6ReleaseVersionSpecification Min(const struct FS6ReleaseVersionSpecification& A, const struct FS6ReleaseVersionSpecification& B);
	static bool NotEqual(const struct FS6ReleaseVersionSpecification& A, const struct FS6ReleaseVersionSpecification& B);
	static class FString ToString(struct FS6ReleaseVersionSpecification& Value);
	static bool TryParse(const class FString& VersionString, struct FS6ReleaseVersionSpecification* OutReleaseVersion);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"S6ReleaseVersioningLibrary">();
	}
	static class US6ReleaseVersioningLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<US6ReleaseVersioningLibrary>();
	}
};
static_assert(alignof(US6ReleaseVersioningLibrary) == 0x000008, "Wrong alignment on US6ReleaseVersioningLibrary");
static_assert(sizeof(US6ReleaseVersioningLibrary) == 0x000028, "Wrong size on US6ReleaseVersioningLibrary");

}

