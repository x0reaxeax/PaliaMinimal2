#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Time_Of_Day_Audio

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Palia_structs.hpp"
#include "Palia_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Time_Of_Day_Audio.BP_Time_Of_Day_Audio_C
// 0x0018 (0x02D0 - 0x02B8)
class ABP_Time_Of_Day_Audio_C final : public ATimeOfDayAudioActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimeOfDayPeriod                              TimeOfDayPeriod;                                   // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D89[0x3];                                     // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviousMinute;                                    // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckTime();
	bool DoesTimeMatchCurrentTime(int32 Hour, int32 Minutes, int32 CallFunc_Get_Hours_and_Minutes_ClockHour, int32 CallFunc_Get_Hours_and_Minutes_ClockMinute, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue);
	void ExecuteUbergraph_BP_Time_Of_Day_Audio(int32 EntryPoint, ETimeOfDayPeriod K2Node_CustomEvent_period, bool CallFunc_IsUsingCustomTime_True, bool CallFunc_IsDedicatedServer_ReturnValue, int32 CallFunc_Get_Hours_and_Minutes_ClockHour, int32 CallFunc_Get_Hours_and_Minutes_ClockMinute, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, class UValeriaWeather* CallFunc_GetWorldSubsystem_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, class AValEnvironmentManager* CallFunc_GetCurrentEnvManager_ReturnValue, TDelegate<void(ETimeOfDayPeriod Period)> K2Node_CreateDelegate_OutputDelegate_1);
	void Get_Hours_and_Minutes(int32* ClockHour, int32* ClockMinute, class UValeriaTimeManager* CallFunc_GetGameInstanceSubsystem_ReturnValue, const struct FClockTimeInValeria& CallFunc_GetClockTime_ReturnValue);
	void IsOnHousingPlot(bool* IsOnPlot, class AHousingPlotActor** HousingPlot, class APlayerController* CallFunc_GetPlayerController_ReturnValue, class AValeriaPlayerController* K2Node_DynamicCast_AsValeria_Player_Controller, bool K2Node_DynamicCast_bSuccess, class AHousingPlotActor* CallFunc_GetCurrentHousingPlot_ReturnValue, bool CallFunc_IsValid_ReturnValue);
	void IsUsingCustomTime(bool* TURR, bool UsingCustomTime, bool Temp_bool_True_if_break_was_hit_Variable, int32 Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, const struct FTimeOfDayAudio& CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1);
	void OnTimeOfDayChangeEvent(ETimeOfDayPeriod Period);
	void PlayTimeOfDayAudio(const struct FVector& RefLocation, const struct FTimeOfDayAudioSettings& Settings, class UAkAudioEvent* AudioToPlay, int32 Temp_int_Array_Index_Variable, class APawn* CallFunc_GetPlayerPawn_ReturnValue, bool CallFunc_IsOnHousingPlot_IsOnPlot, class AHousingPlotActor* CallFunc_IsOnHousingPlot_HousingPlot, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_1, bool Temp_bool_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, double CallFunc_Conv_IntToDouble_ReturnValue, double CallFunc_DegreesToRadians_ReturnValue, double CallFunc_Sin_ReturnValue, double CallFunc_Cos_ReturnValue, double CallFunc_RandomFloatInRange_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FVector& CallFunc_Multiply_VectorFloat_ReturnValue, const struct FTimeOfDayAudio& CallFunc_Array_Get_Item, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_DoesTimeMatchCurrentTime_ReturnValue, class UAkComponent* CallFunc_AkEventLocation_AkComponent, int32 CallFunc_AkEventLocation_Playing_ID, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue_1, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, class APawn* CallFunc_GetPlayerPawn_ReturnValue_1, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_2, const struct FVector& CallFunc_RandomUnitVector_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const struct FVector& K2Node_MathExpression_ReturnValue, class UAkComponent* CallFunc_AkEventLocation_AkComponent_1, int32 CallFunc_AkEventLocation_Playing_ID_1, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue_3, bool CallFunc_IsOnHousingPlot_IsOnPlot_1, class AHousingPlotActor* CallFunc_IsOnHousingPlot_HousingPlot_1, class UAkComponent* CallFunc_AkEventLocation_AkComponent_2, int32 CallFunc_AkEventLocation_Playing_ID_2, const struct FTimeOfDayAudioSettings& K2Node_Select_Default, double CallFunc_Multiply_VectorFloat_B_ImplicitCast, double CallFunc_RandomFloatInRange_Min_ImplicitCast, double CallFunc_RandomFloatInRange_Max_ImplicitCast);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Time_Of_Day_Audio_C">();
	}
	static class ABP_Time_Of_Day_Audio_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Time_Of_Day_Audio_C>();
	}
};
static_assert(alignof(ABP_Time_Of_Day_Audio_C) == 0x000008, "Wrong alignment on ABP_Time_Of_Day_Audio_C");
static_assert(sizeof(ABP_Time_Of_Day_Audio_C) == 0x0002D0, "Wrong size on ABP_Time_Of_Day_Audio_C");
static_assert(offsetof(ABP_Time_Of_Day_Audio_C, UberGraphFrame) == 0x0002B8, "Member 'ABP_Time_Of_Day_Audio_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Time_Of_Day_Audio_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_Time_Of_Day_Audio_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Time_Of_Day_Audio_C, TimeOfDayPeriod) == 0x0002C8, "Member 'ABP_Time_Of_Day_Audio_C::TimeOfDayPeriod' has a wrong offset!");
static_assert(offsetof(ABP_Time_Of_Day_Audio_C, PreviousMinute) == 0x0002CC, "Member 'ABP_Time_Of_Day_Audio_C::PreviousMinute' has a wrong offset!");

}

