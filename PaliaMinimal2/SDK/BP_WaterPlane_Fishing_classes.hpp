#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WaterPlane_Fishing

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S6Core_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WaterPlane_Fishing.BP_WaterPlane_Fishing_C
// 0x0030 (0x02D8 - 0x02A8)
class ABP_WaterPlane_Fishing_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Physmat_Water;                                     // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavModifierComponent*                  NavModifier;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UValeriaWaterBodyComponent*             WaterBody;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_WaterPlane_Fishing(int32 EntryPoint, ERedirectsPlatform CallFunc_GetPlatformType_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, class AActor* K2Node_Event_OtherActor, class AValeriaProjectile* K2Node_DynamicCast_AsValeria_Projectile, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsServer_ReturnValue);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WaterPlane_Fishing_C">();
	}
	static class ABP_WaterPlane_Fishing_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WaterPlane_Fishing_C>();
	}
};
static_assert(alignof(ABP_WaterPlane_Fishing_C) == 0x000008, "Wrong alignment on ABP_WaterPlane_Fishing_C");
static_assert(sizeof(ABP_WaterPlane_Fishing_C) == 0x0002D8, "Wrong size on ABP_WaterPlane_Fishing_C");
static_assert(offsetof(ABP_WaterPlane_Fishing_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_WaterPlane_Fishing_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WaterPlane_Fishing_C, Physmat_Water) == 0x0002B0, "Member 'ABP_WaterPlane_Fishing_C::Physmat_Water' has a wrong offset!");
static_assert(offsetof(ABP_WaterPlane_Fishing_C, NavModifier) == 0x0002B8, "Member 'ABP_WaterPlane_Fishing_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_WaterPlane_Fishing_C, WaterBody) == 0x0002C0, "Member 'ABP_WaterPlane_Fishing_C::WaterBody' has a wrong offset!");
static_assert(offsetof(ABP_WaterPlane_Fishing_C, Plane) == 0x0002C8, "Member 'ABP_WaterPlane_Fishing_C::Plane' has a wrong offset!");
static_assert(offsetof(ABP_WaterPlane_Fishing_C, DefaultSceneRoot) == 0x0002D0, "Member 'ABP_WaterPlane_Fishing_C::DefaultSceneRoot' has a wrong offset!");

}

