#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_AkEventActor_LoopingInstrument

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function GC_AkEventActor_LoopingInstrument.GC_AkEventActor_LoopingInstrument_C.ExecuteUbergraph_GC_AkEventActor_LoopingInstrument
// 0x0008 (0x0008 - 0x0000)
struct GC_AkEventActor_LoopingInstrument_C_ExecuteUbergraph_GC_AkEventActor_LoopingInstrument final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_AkEventActor_LoopingInstrument_C_ExecuteUbergraph_GC_AkEventActor_LoopingInstrument) == 0x000004, "Wrong alignment on GC_AkEventActor_LoopingInstrument_C_ExecuteUbergraph_GC_AkEventActor_LoopingInstrument");
static_assert(sizeof(GC_AkEventActor_LoopingInstrument_C_ExecuteUbergraph_GC_AkEventActor_LoopingInstrument) == 0x000008, "Wrong size on GC_AkEventActor_LoopingInstrument_C_ExecuteUbergraph_GC_AkEventActor_LoopingInstrument");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_ExecuteUbergraph_GC_AkEventActor_LoopingInstrument, EntryPoint) == 0x000000, "Member 'GC_AkEventActor_LoopingInstrument_C_ExecuteUbergraph_GC_AkEventActor_LoopingInstrument::EntryPoint' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_ExecuteUbergraph_GC_AkEventActor_LoopingInstrument, K2Node_Event_EndPlayReason) == 0x000004, "Member 'GC_AkEventActor_LoopingInstrument_C_ExecuteUbergraph_GC_AkEventActor_LoopingInstrument::K2Node_Event_EndPlayReason' has a wrong offset!");

// Function GC_AkEventActor_LoopingInstrument.GC_AkEventActor_LoopingInstrument_C.OnActive
// 0x01D0 (0x01D0 - 0x0000)
struct GC_AkEventActor_LoopingInstrument_C_OnActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnActive_ReturnValue;                     // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3058[0x2];                                     // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakGameplayCueParameters_NormalizedMagnitude; // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakGameplayCueParameters_RawMagnitude;  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3059[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           CallFunc_BreakGameplayCueParameters_EffectContext; // 0x00F0(0x0018)()
	struct FGameplayTag                           CallFunc_BreakGameplayCueParameters_MatchedTagName; // 0x0108(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_BreakGameplayCueParameters_OriginalTag;   // 0x0110(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_BreakGameplayCueParameters_AggregatedSourceTags; // 0x0118(0x0020)()
	struct FGameplayTagContainer                  CallFunc_BreakGameplayCueParameters_AggregatedTargetTags; // 0x0138(0x0020)()
	struct FVector                                CallFunc_BreakGameplayCueParameters_Location;      // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakGameplayCueParameters_Normal;        // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakGameplayCueParameters_Instigator;    // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakGameplayCueParameters_EffectCauser;  // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_BreakGameplayCueParameters_SourceObject;  // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakGameplayCueParameters_PhysicalMaterial; // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakGameplayCueParameters_GameplayEffectLevel; // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakGameplayCueParameters_AbilityLevel;  // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_BreakGameplayCueParameters_TargetAttachComponent; // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakGameplayCueParameters_bReplicateLocationWhenUsingMinimalRepProxy; // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_305A[0x6];                                     // 0x01BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          K2Node_DynamicCast_AsAk_Audio_Event;               // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_AkEventActor_LoopingInstrument_C_OnActive) == 0x000008, "Wrong alignment on GC_AkEventActor_LoopingInstrument_C_OnActive");
static_assert(sizeof(GC_AkEventActor_LoopingInstrument_C_OnActive) == 0x0001D0, "Wrong size on GC_AkEventActor_LoopingInstrument_C_OnActive");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, MyTarget) == 0x000000, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, Parameters) == 0x000008, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::Parameters' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, ReturnValue) == 0x0000E0, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_OnActive_ReturnValue) == 0x0000E1, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_OnActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_NormalizedMagnitude) == 0x0000E4, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_NormalizedMagnitude' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_RawMagnitude) == 0x0000E8, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_RawMagnitude' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_EffectContext) == 0x0000F0, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_EffectContext' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_MatchedTagName) == 0x000108, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_MatchedTagName' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_OriginalTag) == 0x000110, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_OriginalTag' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_AggregatedSourceTags) == 0x000118, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_AggregatedSourceTags' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_AggregatedTargetTags) == 0x000138, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_AggregatedTargetTags' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_Location) == 0x000158, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_Location' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_Normal) == 0x000170, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_Normal' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_Instigator) == 0x000188, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_Instigator' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_EffectCauser) == 0x000190, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_EffectCauser' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_SourceObject) == 0x000198, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_SourceObject' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_PhysicalMaterial) == 0x0001A0, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_GameplayEffectLevel) == 0x0001A8, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_AbilityLevel) == 0x0001AC, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_AbilityLevel' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_TargetAttachComponent) == 0x0001B0, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_TargetAttachComponent' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_BreakGameplayCueParameters_bReplicateLocationWhenUsingMinimalRepProxy) == 0x0001B8, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_BreakGameplayCueParameters_bReplicateLocationWhenUsingMinimalRepProxy' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, CallFunc_IsValid_ReturnValue) == 0x0001B9, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, K2Node_DynamicCast_AsAk_Audio_Event) == 0x0001C0, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::K2Node_DynamicCast_AsAk_Audio_Event' has a wrong offset!");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_OnActive, K2Node_DynamicCast_bSuccess) == 0x0001C8, "Member 'GC_AkEventActor_LoopingInstrument_C_OnActive::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GC_AkEventActor_LoopingInstrument.GC_AkEventActor_LoopingInstrument_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct GC_AkEventActor_LoopingInstrument_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_AkEventActor_LoopingInstrument_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on GC_AkEventActor_LoopingInstrument_C_ReceiveEndPlay");
static_assert(sizeof(GC_AkEventActor_LoopingInstrument_C_ReceiveEndPlay) == 0x000001, "Wrong size on GC_AkEventActor_LoopingInstrument_C_ReceiveEndPlay");
static_assert(offsetof(GC_AkEventActor_LoopingInstrument_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'GC_AkEventActor_LoopingInstrument_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

}

