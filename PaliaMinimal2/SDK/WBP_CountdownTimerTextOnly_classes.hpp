#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CountdownTimerTextOnly

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Palia_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CountdownTimerTextOnly.WBP_CountdownTimerTextOnly_C
// 0x0038 (0x02F8 - 0x02C0)
class UWBP_CountdownTimerTextOnly_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVALUI_TextBlock_Styled*                TimerText;                                         // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FInt64Split                            EndValeriaTimeMs;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         TimeRemainingSecs_Prev;                            // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldDisplayAsFreshness;                         // 0x02DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseClockFormat;                                   // 0x02DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C97[0x2];                                     // 0x02DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UVALUI_TextBlockStyle*                  TimerTextStyle;                                    // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              EndDateTime;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsEndTimeSet;                                     // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseDateTime;                                      // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_WBP_CountdownTimerTextOnly(int32 EntryPoint, const struct FGeometry& K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, const struct FInt64Split& K2Node_CustomEvent_EndValeriaTimeMs, bool K2Node_CustomEvent_DisplayAsFreshness, bool K2Node_Event_IsDesignTime, bool CallFunc_IsValid_ReturnValue, const struct FDateTime& K2Node_CustomEvent_EndDateTime);
	void FormatTime(int32 TimeSeconds, class FString* FormattedTime, int32 Hours, int32 Minutes, int32 Seconds, const class FString& FormattedString, bool Temp_bool_Variable, const class FString& Temp_string_Variable, const class FString& Temp_string_Variable_1, bool Temp_bool_Variable_1, const class FString& Temp_string_Variable_2, const class FString& Temp_string_Variable_3, int32 CallFunc_Percent_IntInt_ReturnValue, int32 CallFunc_Percent_IntInt_ReturnValue_1, int32 CallFunc_Divide_IntInt_ReturnValue, int32 CallFunc_Divide_IntInt_ReturnValue_1, bool CallFunc_GreaterEqual_IntInt_ReturnValue, const class FString& CallFunc_Conv_IntToString_ReturnValue, const class FString& K2Node_Select_Default, bool CallFunc_GreaterEqual_IntInt_ReturnValue_1, const class FString& CallFunc_Conv_IntToString_ReturnValue_1, const class FString& K2Node_Select_Default_1, const class FString& CallFunc_Conv_IntToString_ReturnValue_2, const class FString& CallFunc_Concat_StrStr_ReturnValue, const class FString& CallFunc_FormatDuration_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue_1, const class FString& CallFunc_Concat_StrStr_ReturnValue_2, const class FString& CallFunc_Concat_StrStr_ReturnValue_3, const class FString& CallFunc_Concat_StrStr_ReturnValue_4, const class FString& CallFunc_Concat_StrStr_ReturnValue_5);
	void PreConstruct(bool IsDesignTime);
	void SetCountdownTimer(const struct FInt64Split& Param_EndValeriaTimeMs, bool DisplayAsFreshness);
	void SetCountdownTimerInDateTime(const struct FDateTime& Param_EndDateTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateUI(int32 TimeRemainSecs_Curr, const class FString& CallFunc_FormatTime_FormattedTime, class FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, const struct FInt64Split& CallFunc_CastInt32ToInt64_ReturnValue, int32 CallFunc_CompareInt64_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, const struct FInt64Split& CallFunc_GetValeriaTimestampMs_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, const struct FInt64Split& CallFunc_SubtractInt64_ReturnValue, int32 CallFunc_ConvertToSecs_ReturnValue, int32 CallFunc_Max_ReturnValue);
	void UpdateUIWithDateTime(const class FString& FormattedString, const class FString& Temp_string_Variable, bool Temp_bool_Variable, const class FString& Temp_string_Variable_1, const class FString& Temp_string_Variable_2, const class FString& Temp_string_Variable_3, const struct FTimespan& CallFunc_TimespanZeroValue_ReturnValue, const struct FDateTime& CallFunc_GetValeriaTimestampDateTime_ReturnValue, bool Temp_bool_Variable_1, const struct FTimespan& CallFunc_GetDateDifferenceInTimespan_OutTimespan, bool CallFunc_Greater_TimespanTimespan_ReturnValue, float CallFunc_GetTotalSeconds_ReturnValue, int32 CallFunc_FTrunc_ReturnValue, int32 CallFunc_BreakTimespan2_Days, int32 CallFunc_BreakTimespan2_Hours, int32 CallFunc_BreakTimespan2_Minutes, int32 CallFunc_BreakTimespan2_Seconds, int32 CallFunc_BreakTimespan2_FractionNano, const class FString& CallFunc_FormatDuration_ReturnValue, const class FString& CallFunc_Conv_IntToString_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, const class FString& CallFunc_Conv_IntToString_ReturnValue_1, bool CallFunc_GreaterEqual_IntInt_ReturnValue_1, const class FString& K2Node_Select_Default, const class FString& CallFunc_Conv_IntToString_ReturnValue_2, const class FString& K2Node_Select_Default_1, const class FString& CallFunc_Concat_StrStr_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue_1, class FText CallFunc_Conv_StringToText_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue_2, const class FString& CallFunc_Concat_StrStr_ReturnValue_3, const class FString& CallFunc_Concat_StrStr_ReturnValue_4, const class FString& CallFunc_Concat_StrStr_ReturnValue_5, double CallFunc_FTrunc_A_ImplicitCast);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CountdownTimerTextOnly_C">();
	}
	static class UWBP_CountdownTimerTextOnly_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CountdownTimerTextOnly_C>();
	}
};
static_assert(alignof(UWBP_CountdownTimerTextOnly_C) == 0x000008, "Wrong alignment on UWBP_CountdownTimerTextOnly_C");
static_assert(sizeof(UWBP_CountdownTimerTextOnly_C) == 0x0002F8, "Wrong size on UWBP_CountdownTimerTextOnly_C");
static_assert(offsetof(UWBP_CountdownTimerTextOnly_C, UberGraphFrame) == 0x0002C0, "Member 'UWBP_CountdownTimerTextOnly_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CountdownTimerTextOnly_C, TimerText) == 0x0002C8, "Member 'UWBP_CountdownTimerTextOnly_C::TimerText' has a wrong offset!");
static_assert(offsetof(UWBP_CountdownTimerTextOnly_C, EndValeriaTimeMs) == 0x0002D0, "Member 'UWBP_CountdownTimerTextOnly_C::EndValeriaTimeMs' has a wrong offset!");
static_assert(offsetof(UWBP_CountdownTimerTextOnly_C, TimeRemainingSecs_Prev) == 0x0002D8, "Member 'UWBP_CountdownTimerTextOnly_C::TimeRemainingSecs_Prev' has a wrong offset!");
static_assert(offsetof(UWBP_CountdownTimerTextOnly_C, bShouldDisplayAsFreshness) == 0x0002DC, "Member 'UWBP_CountdownTimerTextOnly_C::bShouldDisplayAsFreshness' has a wrong offset!");
static_assert(offsetof(UWBP_CountdownTimerTextOnly_C, bUseClockFormat) == 0x0002DD, "Member 'UWBP_CountdownTimerTextOnly_C::bUseClockFormat' has a wrong offset!");
static_assert(offsetof(UWBP_CountdownTimerTextOnly_C, TimerTextStyle) == 0x0002E0, "Member 'UWBP_CountdownTimerTextOnly_C::TimerTextStyle' has a wrong offset!");
static_assert(offsetof(UWBP_CountdownTimerTextOnly_C, EndDateTime) == 0x0002E8, "Member 'UWBP_CountdownTimerTextOnly_C::EndDateTime' has a wrong offset!");
static_assert(offsetof(UWBP_CountdownTimerTextOnly_C, bIsEndTimeSet) == 0x0002F0, "Member 'UWBP_CountdownTimerTextOnly_C::bIsEndTimeSet' has a wrong offset!");
static_assert(offsetof(UWBP_CountdownTimerTextOnly_C, bUseDateTime) == 0x0002F1, "Member 'UWBP_CountdownTimerTextOnly_C::bUseDateTime' has a wrong offset!");

}

