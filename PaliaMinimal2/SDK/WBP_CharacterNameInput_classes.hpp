#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CharacterNameInput

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ValeriaUI_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CharacterNameInput.WBP_CharacterNameInput_C
// 0x00F0 (0x03B0 - 0x02C0)
class UWBP_CharacterNameInput_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVALUI_EditableTextBox_Styled*          EditableTextBox_Name;                              // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Error;                                       // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMenuAnchor*                            MenuAnchor;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVALUI_TextBlock_Styled*                Text_Main;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVALUI_TextBlock_Styled*                Text_Secondary;                                    // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVALUI_EditableTextBoxStyle*            EditableTextStyle_Valid;                           // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UVALUI_EditableTextBoxStyle*            EditableTextStyle_Invalid;                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxTextLength;                                     // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5340[0x4];                                     // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnNameChanged;                                     // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EVAL_CharacterNameType                        NameType;                                          // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_5341[0x7];                                     // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MainText;                                          // 0x0320(0x0018)(Edit, BlueprintVisible)
	class FText                                   SecondaryText;                                     // 0x0338(0x0018)(Edit, BlueprintVisible)
	class FText                                   HintText;                                          // 0x0350(0x0018)(Edit, BlueprintVisible)
	bool                                          Is_Valid;                                          // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5342[0x7];                                     // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   PrevText;                                          // 0x0370(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FText>                           SanitizedErrors;                                   // 0x0388(0x0010)(Edit, BlueprintVisible)
	bool                                          FoundSameError;                                    // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5343[0x7];                                     // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           ErrorTexts;                                        // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BndEvt__WBP_CharacterNameInput_EditableTextBox_Name_K2Node_ComponentBoundEvent_0_OnEditableTextBoxChangedEvent__DelegateSignature(class FText& Text);
	void BndEvt__WBP_CharacterNameInput_EditableTextBox_Name_K2Node_ComponentBoundEvent_1_OnEditableTextBoxCommittedEvent__DelegateSignature(class FText& Text, ETextCommit CommitMethod);
	void ExecuteUbergraph_WBP_CharacterNameInput(int32 EntryPoint, bool K2Node_Event_IsDesignTime, class FText K2Node_ComponentBoundEvent_Text, ETextCommit K2Node_ComponentBoundEvent_CommitMethod, class FText K2Node_ComponentBoundEvent_Text_1, const struct FGeometry& K2Node_Event_MyGeometry, struct FPointerEvent& K2Node_Event_MouseEvent_1, struct FPointerEvent& K2Node_Event_MouseEvent);
	void HandleOnTextChanged(class FText InputText, bool bIsCommit, class FText NewText, const class FString& CallFunc_Conv_TextToString_ReturnValue, const class FString& CallFunc_Conv_TextToString_ReturnValue_1, int32 CallFunc_Len_ReturnValue, int32 CallFunc_Len_ReturnValue_1, int32 CallFunc_AkEventGlobal_ReturnValue, const class FString& CallFunc_Conv_TextToString_ReturnValue_2, const class FString& CallFunc_Conv_TextToString_ReturnValue_3, bool CallFunc_EndsWith_ReturnValue, int32 CallFunc_Len_ReturnValue_2, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int32 CallFunc_AkEventGlobal_ReturnValue_1, int32 CallFunc_AkEventGlobal_ReturnValue_2, class FText CallFunc_GetText_ReturnValue, class FText CallFunc_GetText_ReturnValue_1, bool CallFunc_Greater_IntInt_ReturnValue_1, const class FString& CallFunc_Left_ReturnValue, class FText CallFunc_Conv_StringToText_ReturnValue);
	class UUserWidget* OnGetUserMenuContent(int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 Temp_int_Array_Index_Variable, bool CallFunc_Array_IsNotEmpty_ReturnValue, TArray<class FText>& K2Node_MakeArray_Array, class APlayerController* CallFunc_GetOwningPlayer_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, class UWBP_NamingErrorTooltip_C* CallFunc_Create_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int32 Temp_int_Array_Index_Variable_1, class FText CallFunc_Array_Get_Item, const class FString& CallFunc_Conv_TextToString_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue_1, int32 Temp_int_Loop_Counter_Variable_1, class FText CallFunc_Array_Get_Item_1, int32 CallFunc_Array_Length_ReturnValue_1, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const class FString& CallFunc_Conv_TextToString_ReturnValue_1, bool CallFunc_EqualEqual_StriStri_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_1, bool CallFunc_Not_PreBool_ReturnValue_2, bool CallFunc_BooleanAND_ReturnValue_1);
	void OnMouseEnter(const struct FGeometry& MyGeometry, struct FPointerEvent& MouseEvent);
	void OnMouseLeave(struct FPointerEvent& MouseEvent);
	void OnNameChanged__DelegateSignature(class FText Text, EVAL_CharacterNameType Type, bool IsCommit);
	void PreConstruct(bool IsDesignTime);
	void SetValidState(bool IsValid, TArray<class FText>& Param_ErrorTexts, bool Temp_bool_Variable, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool Temp_bool_Variable_1, ESlateVisibility K2Node_Select_Default, class UVALUI_EditableTextBoxStyle* K2Node_Select_Default_1);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CharacterNameInput_C">();
	}
	static class UWBP_CharacterNameInput_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CharacterNameInput_C>();
	}
};
static_assert(alignof(UWBP_CharacterNameInput_C) == 0x000008, "Wrong alignment on UWBP_CharacterNameInput_C");
static_assert(sizeof(UWBP_CharacterNameInput_C) == 0x0003B0, "Wrong size on UWBP_CharacterNameInput_C");
static_assert(offsetof(UWBP_CharacterNameInput_C, UberGraphFrame) == 0x0002C0, "Member 'UWBP_CharacterNameInput_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, EditableTextBox_Name) == 0x0002C8, "Member 'UWBP_CharacterNameInput_C::EditableTextBox_Name' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, Image_Error) == 0x0002D0, "Member 'UWBP_CharacterNameInput_C::Image_Error' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, MenuAnchor) == 0x0002D8, "Member 'UWBP_CharacterNameInput_C::MenuAnchor' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, Text_Main) == 0x0002E0, "Member 'UWBP_CharacterNameInput_C::Text_Main' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, Text_Secondary) == 0x0002E8, "Member 'UWBP_CharacterNameInput_C::Text_Secondary' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, EditableTextStyle_Valid) == 0x0002F0, "Member 'UWBP_CharacterNameInput_C::EditableTextStyle_Valid' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, EditableTextStyle_Invalid) == 0x0002F8, "Member 'UWBP_CharacterNameInput_C::EditableTextStyle_Invalid' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, MaxTextLength) == 0x000300, "Member 'UWBP_CharacterNameInput_C::MaxTextLength' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, OnNameChanged) == 0x000308, "Member 'UWBP_CharacterNameInput_C::OnNameChanged' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, NameType) == 0x000318, "Member 'UWBP_CharacterNameInput_C::NameType' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, MainText) == 0x000320, "Member 'UWBP_CharacterNameInput_C::MainText' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, SecondaryText) == 0x000338, "Member 'UWBP_CharacterNameInput_C::SecondaryText' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, HintText) == 0x000350, "Member 'UWBP_CharacterNameInput_C::HintText' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, Is_Valid) == 0x000368, "Member 'UWBP_CharacterNameInput_C::Is_Valid' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, PrevText) == 0x000370, "Member 'UWBP_CharacterNameInput_C::PrevText' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, SanitizedErrors) == 0x000388, "Member 'UWBP_CharacterNameInput_C::SanitizedErrors' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, FoundSameError) == 0x000398, "Member 'UWBP_CharacterNameInput_C::FoundSameError' has a wrong offset!");
static_assert(offsetof(UWBP_CharacterNameInput_C, ErrorTexts) == 0x0003A0, "Member 'UWBP_CharacterNameInput_C::ErrorTexts' has a wrong offset!");

}

