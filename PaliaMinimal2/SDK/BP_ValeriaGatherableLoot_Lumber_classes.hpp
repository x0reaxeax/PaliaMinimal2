#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ValeriaGatherableLoot_Lumber

#include "Basic.hpp"

#include "Enum_vfx_treeSize_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_vfx_branchTypeSetA_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_vfx_leafTypeSetA_structs.hpp"
#include "BP_ValeriaGatherableLoot_classes.hpp"
#include "Struct_PoolAudio_structs.hpp"
#include "Enum_vfx_creatureRarity_structs.hpp"
#include "Palia_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ValeriaGatherableLoot_Lumber.BP_ValeriaGatherableLoot_Lumber_C
// 0x02B8 (0x0600 - 0x0348)
class ABP_ValeriaGatherableLoot_Lumber_C : public ABP_ValeriaGatherableLoot_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ValeriaGatherableLoot_Lumber_C;  // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAkCulledComponent*                     AkCulled;                                          // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_treeCoop_healChopA;                             // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_treeCoop_idleA;                                 // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        CutTrace_end;                                      // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        CutTrace_start;                                    // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AudioDefaultLocation;                              // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AudioShakeLocation;                                // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Root_cut;                                          // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Debug_negYDirection;                               // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MySM_Plant;                                        // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Root_plant;                                        // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Root_visuals;                                      // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticipationTrackingComponent*        ParticipationTracking;                             // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TL_decalGo_width_C706416B4B89F1ABB5EF13B14425BDAA; // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TL_decalGo_height_C706416B4B89F1ABB5EF13B14425BDAA; // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_decalGo__Direction_C706416B4B89F1ABB5EF13B14425BDAA; // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_477D[0x7];                                     // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_decalGo;                                        // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         TL_shakeTree_noise_804134E645E2B6BE41097892BAC66166; // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_shakeTree__Direction_804134E645E2B6BE41097892BAC66166; // 0x03D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_477E[0x3];                                     // 0x03D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_shakeTree;                                      // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            SM_Plant;                                          // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IAmCoop;                                           // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          OverWrite_material;                                // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_477F[0x6];                                     // 0x03EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Mat_plant;                                         // 0x03F0(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FVector                                Plant_LocationOffset;                              // 0x0400(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                Plant_scale;                                       // 0x0418(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Plant_hardness;                                    // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	Enum_vfx_leafTypeSetA                         Leaf_type;                                         // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4780[0x3];                                     // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Leaf_tint;                                         // 0x043C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4781[0x4];                                     // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Leaf_size;                                         // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              Leaf_sizeRatio;                                    // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAkAudioEvent*                          Ak_Tree_Start_Crack;                               // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Ak_Tree_Falling;                                   // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Ak_Tree_Land;                                      // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Ak_Tree_Despawn;                                   // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Ak_Tree_Leaf_Shake;                                // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            SM_ReferencePlant;                                 // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Leaf_spawnAmount;                                  // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust_size;                                         // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Dust_spawnAmount;                                  // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_vfx_branchTypeSetA                       branch_type;                                       // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4782[0x7];                                     // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        branch_size;                                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        branch_spawnAmount;                                // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Trunk_spawnAmount;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                Trunk_size;                                        // 0x04D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Hit_power;                                         // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Decal_Material;                                    // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          DecalMePlease;                                     // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4783[0x7];                                     // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkStaticLoop;                                      // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkOneShot;                                         // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AkWindComponent;                                   // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          AudioWindActive;                                   // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4784[0x7];                                     // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_PoolAudio                      AmbientSounds;                                     // 0x0520(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	Enum_vfx_treeSize                             Tree_size;                                         // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	Enum_vfx_creatureRarity                       Tree_rarity;                                       // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4785[0x6];                                     // 0x0562(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkRandomLoop;                                      // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomLoopChance;                                  // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4786[0x4];                                     // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Env_Audio_Pool_Foliage_C*           AudioFoliage;                                      // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         MI_trunk_ID;                                       // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4787[0x4];                                     // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MI_trunk;                                          // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Decal_MaxSize;                                     // 0x0590(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal_chop;                                        // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Chop_amount;                                       // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVitalsComponent*                       MyVital;                                           // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Decal_lifeSpan;                                    // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Heal_radius;                                       // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Heal_height;                                       // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Heal_offset;                                       // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        SecondsBeforeShowingISM;                           // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ShowISMTimer;                                      // 0x05E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 FlowClass;                                         // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableAmbientAudio;                               // 0x05F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyConversion(EActorConversionType ConversionType);
	void Destroyed(class AActor* DestroyedActor);
	void Event_BessonShakeItBaby(class AActor* Param_Instigator);
	void Event_debugMe();
	void Event_decalMe();
	void Event_findMeReferenceSize();
	void Event_hitMe(const struct FRotator& Rot_decal, double Height_decal);
	void Event_Setup();
	void Event_setupCoop();
	void Event_setupMyMat();
	void Event_shakeLeaves(class AActor* Param_Instigator);
	void ExecuteUbergraph_BP_ValeriaGatherableLoot_Lumber(int32 EntryPoint, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, class UAkComponent* CallFunc_AkEventLocation_AkComponent, int32 CallFunc_AkEventLocation_Playing_ID, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, const struct FVector& CallFunc_GetComponentBounds_Origin, const struct FVector& CallFunc_GetComponentBounds_BoxExtent, float CallFunc_GetComponentBounds_SphereRadius, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, double CallFunc_Multiply_DoubleDouble_ReturnValue, const struct FBoxSphereBounds& CallFunc_GetBounds_ReturnValue, double CallFunc_Multiply_DoubleDouble_ReturnValue_1, const struct FVector& CallFunc_BreakBoxSphereBounds_Origin, const struct FVector& CallFunc_BreakBoxSphereBounds_BoxExtent, float CallFunc_BreakBoxSphereBounds_SphereRadius, double CallFunc_BreakVector_X_1, double CallFunc_BreakVector_Y_1, double CallFunc_BreakVector_Z_1, double CallFunc_Multiply_DoubleDouble_ReturnValue_2, double CallFunc_Multiply_DoubleDouble_ReturnValue_3, double CallFunc_Divide_DoubleDouble_ReturnValue, bool CallFunc_IsValid_ReturnValue, double CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, double CallFunc_FClamp_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_BooleanAND_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, class AActor* K2Node_CustomEvent_instigator, double CallFunc_Fn_BessonAxeStrength_axe_power, const struct FVector& CallFunc_Fn_BessonHitPos_pos_OuchThisHurts, const struct FRotator& CallFunc_Fn_BessonHitPos_rot_decalHere, double CallFunc_Fn_BessonHitPos_height_decalHere, double CallFunc_Divide_DoubleDouble_ReturnValue_1, double CallFunc_RandomFloatInRange_ReturnValue, const struct FRotator& CallFunc_MakeRotator_ReturnValue, class AActor* K2Node_CustomEvent_instigator_1, double CallFunc_Fn_BessonAxeStrength_axe_power_1, double CallFunc_Multiply_DoubleDouble_ReturnValue_4, const struct FRotator& K2Node_CustomEvent_rot_decal, double K2Node_CustomEvent_height_decal, const struct FHitResult& CallFunc_K2_SetWorldRotation_SweepHitResult, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_1, const struct FTransform& CallFunc_K2_GetComponentToWorld_ReturnValue, class AActor* K2Node_CustomEvent_DestroyedActor, class AActor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_IsValid_ReturnValue_2, class ABP_Env_Audio_Pool_Foliage_C* CallFunc_FinishSpawningActor_ReturnValue, class UNiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, class AActor* K2Node_Event_Instigator_1, bool CallFunc_IsValid_ReturnValue_3, bool CallFunc_IsValid_ReturnValue_4, TArray<class FName>& CallFunc_GetMaterialSlotNames_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, class UMaterialInterface* CallFunc_GetMaterial_ReturnValue, double CallFunc_Lerp_ReturnValue, class UMaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue_5, class AActor* K2Node_Event_Instigator, class UVitalsComponent* K2Node_Event_vital, EActorConversionType K2Node_Event_ConversionType, int32 CallFunc_GetVitalMax_ReturnValue, int32 CallFunc_GetVital_ReturnValue, double CallFunc_Conv_IntToDouble_ReturnValue, double CallFunc_Conv_IntToDouble_ReturnValue_1, double CallFunc_Divide_DoubleDouble_ReturnValue_2, double CallFunc_FClamp_ReturnValue_1, bool CallFunc_IsValid_ReturnValue_6, double CallFunc_Subtract_DoubleDouble_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_1, double CallFunc_BreakVector_X_2, double CallFunc_BreakVector_Y_2, double CallFunc_BreakVector_Z_2, TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate, double CallFunc_Add_DoubleDouble_ReturnValue, double CallFunc_FMax_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FHitResult& CallFunc_K2_SetRelativeLocation_SweepHitResult, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_2, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_3, const struct FVector& CallFunc_K2_LineTraceComponent_HitLocation, const struct FVector& CallFunc_K2_LineTraceComponent_HitNormal, class FName CallFunc_K2_LineTraceComponent_BoneName, const struct FHitResult& CallFunc_K2_LineTraceComponent_OutHit, bool CallFunc_K2_LineTraceComponent_ReturnValue, double CallFunc_BreakVector_X_3, double CallFunc_BreakVector_Y_3, double CallFunc_BreakVector_Z_3, double CallFunc_Divide_DoubleDouble_ReturnValue_3, const struct FRotator& CallFunc_Conv_VectorToRotator_ReturnValue, const struct FVector& CallFunc_MakeVector_ReturnValue_1, class UNiagaraComponent* CallFunc_SpawnSystemAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue_7, double CallFunc_Lerp_ReturnValue_1, double CallFunc_Lerp_ReturnValue_2, double CallFunc_Multiply_DoubleDouble_ReturnValue_5, double CallFunc_Multiply_DoubleDouble_ReturnValue_6, const struct FVector& CallFunc_MakeVector_ReturnValue_2, bool CallFunc_Less_DoubleDouble_ReturnValue, bool CallFunc_BooleanAND_ReturnValue_2, float K2Node_Event_DeltaSeconds, bool CallFunc_IsServer_ReturnValue, class UVitalsComponent* CallFunc_GetVitals_ReturnValue, int32 CallFunc_GetVital_ReturnValue_1, int32 CallFunc_GetVitalMax_ReturnValue_1, double CallFunc_Conv_IntToDouble_ReturnValue_2, double CallFunc_Conv_IntToDouble_ReturnValue_3, bool CallFunc_Greater_IntInt_ReturnValue, double CallFunc_Divide_DoubleDouble_ReturnValue_4, double CallFunc_FClamp_ReturnValue_2, double CallFunc_Subtract_DoubleDouble_ReturnValue_1, double CallFunc_Divide_DoubleDouble_ReturnValue_5, bool CallFunc_IsServer_ReturnValue_1, double CallFunc_Subtract_DoubleDouble_ReturnValue_2, double Temp_real_Variable, double Temp_real_Variable_1, class UDecalComponent* CallFunc_SpawnDecalAttached_ReturnValue, bool CallFunc_IsValid_ReturnValue_8, const struct FVector& CallFunc_K2_GetComponentScale_ReturnValue, double CallFunc_BreakVector_X_4, double CallFunc_BreakVector_Y_4, double CallFunc_BreakVector_Z_4, double CallFunc_Lerp_ReturnValue_3, double CallFunc_Lerp_ReturnValue_4, const struct FVector& CallFunc_MakeVector_ReturnValue_3, double CallFunc_Divide_DoubleDouble_ReturnValue_6, double Temp_real_Variable_2, const struct FVector& CallFunc_MakeVector_ReturnValue_4, const struct FHitResult& CallFunc_K2_SetRelativeLocation_SweepHitResult_1, double Temp_real_Variable_3, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_4, Enum_vfx_treeSize Temp_byte_Variable, class UAkComponent* CallFunc_AkEventLocation_AkComponent_1, int32 CallFunc_AkEventLocation_Playing_ID_1, int32 Temp_int_Array_Index_Variable, double K2Node_Select_Default, class FName CallFunc_Array_Get_Item, double CallFunc_Multiply_DoubleDouble_ReturnValue_7, bool CallFunc_EqualEqual_NameName_ReturnValue, double CallFunc_FClamp_ReturnValue_3, bool CallFunc_IsServer_ReturnValue_2, bool CallFunc_IsServer_ReturnValue_3, EEndPlayReason K2Node_Event_EndPlayReason, float CallFunc_MakeRotator_Roll_ImplicitCast, float CallFunc_SetFloatParameter_Param_ImplicitCast, float CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast, double CallFunc_Lerp_Alpha_ImplicitCast, double CallFunc_Lerp_Alpha_ImplicitCast_1, double CallFunc_Lerp_Alpha_ImplicitCast_2, float CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_1, float CallFunc_SetFloatParameter_Param_ImplicitCast_1, float CallFunc_SetNiagaraVariableFloat_InValue_ImplicitCast, float CallFunc_SetRtpc_Value_ImplicitCast, float CallFunc_SetFloatParameter_Param_ImplicitCast_2, float CallFunc_SetFloatParameter_Param_ImplicitCast_3, float CallFunc_SpawnDecalAttached_LifeSpan_ImplicitCast, float CallFunc_SetFadeOut_StartDelay_ImplicitCast, float CallFunc_SetPlayRate_NewRate_ImplicitCast);
	void Fn_BessonAxeStrength(class AActor* Param_Instigator, double* Axe_power, double MyPower, class AValeriaCharacter* K2Node_DynamicCast_AsValeria_Character, bool K2Node_DynamicCast_bSuccess, class UEquipmentComponent* CallFunc_GetEquipment_ReturnValue, const struct FEquipmentItem& CallFunc_GetEquippedItem_ReturnValue, class AEquipViewActor* CallFunc_Array_Get_Item, class ABP_Axe_EquipView_C* K2Node_DynamicCast_AsBP_Axe_Equip_View, bool K2Node_DynamicCast_bSuccess_1);
	void Fn_BessonHitPos(class AActor* Param_Instigator, struct FVector* Pos_OuchThisHurts, struct FRotator* Rot_decalHere, double* Height_decalHere, class AValeriaCharacter* K2Node_DynamicCast_AsValeria_Character, bool K2Node_DynamicCast_bSuccess, class UEquipmentComponent* CallFunc_GetEquipment_ReturnValue, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, const struct FEquipmentItem& CallFunc_GetEquippedItem_ReturnValue, const struct FVector& CallFunc_GetActorForwardVector_ReturnValue, const struct FVector& CallFunc_Cross_VectorVector_ReturnValue, class AEquipViewActor* CallFunc_Array_Get_Item, const struct FRotator& CallFunc_MakeRotFromX_ReturnValue, class ABP_Axe_EquipView_C* K2Node_DynamicCast_AsBP_Axe_Equip_View, bool K2Node_DynamicCast_bSuccess_1, const struct FRotator& CallFunc_ComposeRotators_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, double CallFunc_BreakVector_X_1, double CallFunc_BreakVector_Y_1, double CallFunc_BreakVector_Z_1, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_1, const struct FVector& CallFunc_Subtract_VectorVector_ReturnValue, double CallFunc_BreakVector_X_2, double CallFunc_BreakVector_Y_2, double CallFunc_BreakVector_Z_2, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue_2, double CallFunc_Subtract_DoubleDouble_ReturnValue, double CallFunc_BreakVector_X_3, double CallFunc_BreakVector_Y_3, double CallFunc_BreakVector_Z_3, const struct FVector& CallFunc_MakeVector_ReturnValue_1, const struct FVector& CallFunc_MakeVector_ReturnValue_2, const struct FHitResult& CallFunc_K2_SetRelativeLocation_SweepHitResult, const struct FVector& CallFunc_Add_VectorVector_ReturnValue, const struct FVector& CallFunc_Divide_VectorFloat_ReturnValue);
	void Fn_treeFallHitLocation(struct FVector* Hit_location, class APlayerController* CallFunc_GetPlayerController_ReturnValue, class APawn* CallFunc_K2_GetPawn_ReturnValue, class AValeriaCharacter* K2Node_DynamicCast_AsValeria_Character, bool K2Node_DynamicCast_bSuccess, class UEquipmentComponent* CallFunc_GetEquipment_ReturnValue, const struct FEquipmentItem& CallFunc_GetEquippedItem_ReturnValue, class AEquipViewActor* CallFunc_Array_Get_Item, class ABP_Axe_EquipView_C* K2Node_DynamicCast_AsBP_Axe_Equip_View, bool K2Node_DynamicCast_bSuccess_1, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue);
	void Fn_treeFallRotation(struct FVector* Fall_axis, struct FRotator* break_rotation, class APlayerController* CallFunc_GetPlayerController_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, double CallFunc_BreakVector_X_1, double CallFunc_BreakVector_Y_1, double CallFunc_BreakVector_Z_1, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FVector& CallFunc_GetDirectionUnitVector_ReturnValue, const struct FRotator& CallFunc_MakeRotFromX_ReturnValue, const struct FVector& CallFunc_RotateAngleAxis_ReturnValue, const struct FRotator& CallFunc_ComposeRotators_ReturnValue);
	void HideISM(bool CallFunc_ShouldUseISM_ShouldUseISM, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, TDelegate<void()> K2Node_CreateDelegate_OutputDelegate, const struct FTimerHandle& CallFunc_K2_SetTimerDelegate_ReturnValue, float CallFunc_K2_SetTimerDelegate_Time_ImplicitCast);
	void OnGatherableDestroyed(class AActor* Param_Instigator);
	void OnGatherableHit(class AActor* Param_Instigator, class UVitalsComponent* Vital);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ShouldUseISM(bool* Param_ShouldUseISM, bool CallFunc_IsServer_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);
	void ShowISM(bool CallFunc_ShouldUseISM_ShouldUseISM, const struct FVector& CallFunc_K2_GetComponentScale_ReturnValue, const struct FRotator& CallFunc_K2_GetComponentRotation_ReturnValue, const struct FVector& CallFunc_K2_GetComponentLocation_ReturnValue, bool CallFunc_AddInstanceOfStaticMeshToISM_Success);
	void ShowStaticMesh();
	void TL_decalGo__FinishedFunc();
	void TL_decalGo__UpdateFunc();
	void TL_shakeTree__FinishedFunc();
	void TL_shakeTree__UpdateFunc();
	void Update_healing();
	void UserConstructionScript(int32 Temp_int_Array_Index_Variable, const struct FVector& CallFunc_MakeVector_ReturnValue, const struct FHitResult& CallFunc_K2_SetRelativeLocation_SweepHitResult, int32 Temp_int_Loop_Counter_Variable, class UMaterialInterface* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const struct FHitResult& CallFunc_K2_SetRelativeLocation_SweepHitResult_1, bool CallFunc_SetStaticMesh_ReturnValue);
	void VFX_OnHit(bool CanDamage, class AActor* Param_Instigator, class ABP_Axe_EquipView_C* MyBP_axe, class AValeriaCharacter* K2Node_DynamicCast_AsValeria_Character, bool K2Node_DynamicCast_bSuccess, class UEquipmentComponent* CallFunc_GetEquipment_ReturnValue, int32 CallFunc_Conv_ByteToInt_ReturnValue, const struct FEquipmentItem& CallFunc_GetEquippedItem_ReturnValue, class AEquipViewActor* CallFunc_Array_Get_Item, class ABP_Axe_EquipView_C* K2Node_DynamicCast_AsBP_Axe_Equip_View, bool K2Node_DynamicCast_bSuccess_1, class UNiagaraComponent* CallFunc_SpawnSystemAttached_ReturnValue, bool CallFunc_IsValid_ReturnValue);

	bool CanConvert(EActorConversionType ConversionType, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_IsValidClass_ReturnValue) const;
	class UClass* GetClassForConversion(EActorConversionType ConversionType, bool K2Node_SwitchEnum_CmpSuccess) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ValeriaGatherableLoot_Lumber_C">();
	}
	static class ABP_ValeriaGatherableLoot_Lumber_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ValeriaGatherableLoot_Lumber_C>();
	}
};
static_assert(alignof(ABP_ValeriaGatherableLoot_Lumber_C) == 0x000008, "Wrong alignment on ABP_ValeriaGatherableLoot_Lumber_C");
static_assert(sizeof(ABP_ValeriaGatherableLoot_Lumber_C) == 0x000600, "Wrong size on ABP_ValeriaGatherableLoot_Lumber_C");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, UberGraphFrame_BP_ValeriaGatherableLoot_Lumber_C) == 0x000348, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::UberGraphFrame_BP_ValeriaGatherableLoot_Lumber_C' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, AkCulled) == 0x000350, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::AkCulled' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, NS_treeCoop_healChopA) == 0x000358, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::NS_treeCoop_healChopA' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, NS_treeCoop_idleA) == 0x000360, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::NS_treeCoop_idleA' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, CutTrace_end) == 0x000368, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::CutTrace_end' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, CutTrace_start) == 0x000370, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::CutTrace_start' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, AudioDefaultLocation) == 0x000378, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::AudioDefaultLocation' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, AudioShakeLocation) == 0x000380, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::AudioShakeLocation' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Root_cut) == 0x000388, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Root_cut' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Debug_negYDirection) == 0x000390, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Debug_negYDirection' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, MySM_Plant) == 0x000398, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::MySM_Plant' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Root_plant) == 0x0003A0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Root_plant' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Root_visuals) == 0x0003A8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Root_visuals' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, ParticipationTracking) == 0x0003B0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::ParticipationTracking' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, TL_decalGo_width_C706416B4B89F1ABB5EF13B14425BDAA) == 0x0003B8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::TL_decalGo_width_C706416B4B89F1ABB5EF13B14425BDAA' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, TL_decalGo_height_C706416B4B89F1ABB5EF13B14425BDAA) == 0x0003BC, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::TL_decalGo_height_C706416B4B89F1ABB5EF13B14425BDAA' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, TL_decalGo__Direction_C706416B4B89F1ABB5EF13B14425BDAA) == 0x0003C0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::TL_decalGo__Direction_C706416B4B89F1ABB5EF13B14425BDAA' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, TL_decalGo) == 0x0003C8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::TL_decalGo' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, TL_shakeTree_noise_804134E645E2B6BE41097892BAC66166) == 0x0003D0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::TL_shakeTree_noise_804134E645E2B6BE41097892BAC66166' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, TL_shakeTree__Direction_804134E645E2B6BE41097892BAC66166) == 0x0003D4, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::TL_shakeTree__Direction_804134E645E2B6BE41097892BAC66166' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, TL_shakeTree) == 0x0003D8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::TL_shakeTree' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, SM_Plant) == 0x0003E0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::SM_Plant' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, IAmCoop) == 0x0003E8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::IAmCoop' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, OverWrite_material) == 0x0003E9, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::OverWrite_material' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Mat_plant) == 0x0003F0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Mat_plant' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Plant_LocationOffset) == 0x000400, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Plant_LocationOffset' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Plant_scale) == 0x000418, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Plant_scale' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Plant_hardness) == 0x000430, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Plant_hardness' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Leaf_type) == 0x000438, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Leaf_type' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Leaf_tint) == 0x00043C, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Leaf_tint' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Leaf_size) == 0x000450, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Leaf_size' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Leaf_sizeRatio) == 0x000458, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Leaf_sizeRatio' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Ak_Tree_Start_Crack) == 0x000468, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Ak_Tree_Start_Crack' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Ak_Tree_Falling) == 0x000470, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Ak_Tree_Falling' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Ak_Tree_Land) == 0x000478, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Ak_Tree_Land' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Ak_Tree_Despawn) == 0x000480, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Ak_Tree_Despawn' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Ak_Tree_Leaf_Shake) == 0x000488, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Ak_Tree_Leaf_Shake' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, SM_ReferencePlant) == 0x000490, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::SM_ReferencePlant' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Leaf_spawnAmount) == 0x000498, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Leaf_spawnAmount' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Dust_size) == 0x0004A0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Dust_size' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Dust_spawnAmount) == 0x0004A8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Dust_spawnAmount' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, branch_type) == 0x0004B0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::branch_type' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, branch_size) == 0x0004B8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::branch_size' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, branch_spawnAmount) == 0x0004C0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::branch_spawnAmount' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Trunk_spawnAmount) == 0x0004C8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Trunk_spawnAmount' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Trunk_size) == 0x0004D0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Trunk_size' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Hit_power) == 0x0004E8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Hit_power' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Decal_Material) == 0x0004F0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Decal_Material' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, DecalMePlease) == 0x0004F8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::DecalMePlease' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, AkStaticLoop) == 0x000500, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::AkStaticLoop' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, AkOneShot) == 0x000508, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::AkOneShot' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, AkWindComponent) == 0x000510, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::AkWindComponent' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, AudioWindActive) == 0x000518, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::AudioWindActive' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, AmbientSounds) == 0x000520, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::AmbientSounds' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Tree_size) == 0x000560, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Tree_size' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Tree_rarity) == 0x000561, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Tree_rarity' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, AkRandomLoop) == 0x000568, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::AkRandomLoop' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, RandomLoopChance) == 0x000570, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::RandomLoopChance' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, AudioFoliage) == 0x000578, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::AudioFoliage' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, MI_trunk_ID) == 0x000580, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::MI_trunk_ID' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, MI_trunk) == 0x000588, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::MI_trunk' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Decal_MaxSize) == 0x000590, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Decal_MaxSize' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Decal_chop) == 0x0005A8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Decal_chop' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Chop_amount) == 0x0005B0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Chop_amount' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, MyVital) == 0x0005B8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::MyVital' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Decal_lifeSpan) == 0x0005C0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Decal_lifeSpan' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Heal_radius) == 0x0005C8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Heal_radius' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Heal_height) == 0x0005D0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Heal_height' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, Heal_offset) == 0x0005D8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::Heal_offset' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, SecondsBeforeShowingISM) == 0x0005E0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::SecondsBeforeShowingISM' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, ShowISMTimer) == 0x0005E8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::ShowISMTimer' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, FlowClass) == 0x0005F0, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::FlowClass' has a wrong offset!");
static_assert(offsetof(ABP_ValeriaGatherableLoot_Lumber_C, DisableAmbientAudio) == 0x0005F8, "Member 'ABP_ValeriaGatherableLoot_Lumber_C::DisableAmbientAudio' has a wrong offset!");

}

