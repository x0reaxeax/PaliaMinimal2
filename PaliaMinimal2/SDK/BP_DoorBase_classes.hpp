#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DoorBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DoorBase.BP_DoorBase_C
// 0x0100 (0x03A8 - 0x02A8)
class ABP_DoorBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DoorSideB;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DoorSideA;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkPortalComponent*                     AkPortal;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AudioPortal;                                       // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PivotPoint;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionToOpen;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurveProgress;                                     // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class AActor*>                           ActorsInsideDoorArea;                              // 0x0300(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Speed;                                             // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldOpen;                                        // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB3[0x7];                                     // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           DoorLocationCurve;                                 // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           DoorRotationCurve;                                 // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FlipDirection;                                     // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB4[0x7];                                     // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          OnDoorOpen;                                        // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          OnDoorCloseStart;                                  // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          OnDoorCloseImpact;                                 // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         DoorOpenID;                                        // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DoorCloseID;                                       // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CloseImpactOffset;                                 // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsAudioPortal;                                  // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CanActorOpenDoor_(class AActor* Actor, bool* CanOpen, class AValeriaVillagerCharacter* K2Node_DynamicCast_AsValeria_Villager_Character, bool K2Node_DynamicCast_bSuccess, class AValeriaCharacter* K2Node_DynamicCast_AsValeria_Character, bool K2Node_DynamicCast_bSuccess_1);
	void CloseAudioPortal();
	void ExecuteUbergraph_BP_DoorBase(int32 EntryPoint, struct FTransform& CallFunc_GetTransform_ReturnValue, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent_1, class AActor* K2Node_ComponentBoundEvent_OtherActor_1, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp_1, int32 K2Node_ComponentBoundEvent_OtherBodyIndex_1, bool K2Node_ComponentBoundEvent_bFromSweep, struct FHitResult& K2Node_ComponentBoundEvent_SweepResult, bool CallFunc_CanActorOpenDoor__CanOpen, const struct FVector& CallFunc_K2_GetActorLocation_ReturnValue, const struct FVector& CallFunc_InverseTransformLocation_ReturnValue, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, class AActor* K2Node_ComponentBoundEvent_OtherActor, class UPrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int32 K2Node_ComponentBoundEvent_OtherBodyIndex, double CallFunc_BreakVector_X, double CallFunc_BreakVector_Y, double CallFunc_BreakVector_Z, bool CallFunc_CanActorOpenDoor__CanOpen_1, bool CallFunc_Greater_DoubleDouble_ReturnValue, bool CallFunc_Set_Remove_ReturnValue, int32 CallFunc_Set_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue_1, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsServer_ReturnValue, float K2Node_Event_DeltaSeconds, double CallFunc_Multiply_DoubleDouble_ReturnValue, float CallFunc_MoveTowards_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue_2, bool Temp_bool_Has_Been_Initd_Variable, double Temp_real_Variable, bool CallFunc_AkGetComponent_ComponentCreated, class UAkComponent* CallFunc_AkGetComponent_AkComponent, int32 CallFunc_AkEventComponent_ReturnValue, bool CallFunc_AkGetComponent_ComponentCreated_1, class UAkComponent* CallFunc_AkGetComponent_AkComponent_1, double Temp_real_Variable_1, int32 CallFunc_AkEventComponent_ReturnValue_1, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue_1, double Temp_real_Variable_2, EAkAcousticPortalState CallFunc_GetCurrentState_ReturnValue, bool Temp_bool_Variable, bool K2Node_SwitchEnum_CmpSuccess, bool Temp_bool_IsClosed_Variable, EAkAcousticPortalState CallFunc_GetCurrentState_ReturnValue_1, bool K2Node_SwitchEnum_CmpSuccess_1, bool CallFunc_EqualEqual_DoubleDouble_ReturnValue, bool Temp_bool_Variable_1, bool CallFunc_IsValid_ReturnValue_2, bool CallFunc_NotEqual_IntInt_ReturnValue_2, bool CallFunc_AkGetComponent_ComponentCreated_2, class UAkComponent* CallFunc_AkGetComponent_AkComponent_2, bool CallFunc_AkGetComponent_ComponentCreated_3, class UAkComponent* CallFunc_AkGetComponent_AkComponent_3, int32 CallFunc_AkEventComponent_ReturnValue_2, bool CallFunc_IsValid_ReturnValue_3, int32 CallFunc_AkEventComponent_ReturnValue_3, double K2Node_Select_Default, double CallFunc_Multiply_DoubleDouble_ReturnValue_1, const struct FVector& CallFunc_GetVectorValue_ReturnValue, double Temp_real_Variable_3, double CallFunc_BreakVector_X_1, double CallFunc_BreakVector_Y_1, double CallFunc_BreakVector_Z_1, const struct FRotator& CallFunc_MakeRotator_ReturnValue, double Temp_real_Variable_4, const struct FHitResult& CallFunc_K2_SetRelativeRotation_SweepHitResult, bool CallFunc_PortalPlacementValid_ReturnValue, double CallFunc_Abs_ReturnValue, bool Temp_bool_Variable_2, double CallFunc_FClamp_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue_3, double K2Node_Select_Default_1, double CallFunc_Multiply_DoubleDouble_ReturnValue_2, const struct FVector& CallFunc_GetVectorValue_ReturnValue_1, const struct FHitResult& CallFunc_K2_SetRelativeLocation_SweepHitResult, double Temp_real_Variable_5, double K2Node_Select_Default_2, float CallFunc_MoveTowards_value_ImplicitCast, float CallFunc_MoveTowards_target_ImplicitCast, double CallFunc_Multiply_DoubleDouble_A_ImplicitCast, float CallFunc_MoveTowards_delta_ImplicitCast, double K2Node_VariableSet_CurveProgress_ImplicitCast, float CallFunc_GetVectorValue_InTime_ImplicitCast, float CallFunc_MakeRotator_Roll_ImplicitCast, float CallFunc_MakeRotator_Pitch_ImplicitCast, float CallFunc_MakeRotator_Yaw_ImplicitCast, float CallFunc_GetVectorValue_InTime_ImplicitCast_1);
	void OpenAudioPortal();
	void PlayDoorCloseImpactSound();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DoorBase_C">();
	}
	static class ABP_DoorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DoorBase_C>();
	}
};
static_assert(alignof(ABP_DoorBase_C) == 0x000008, "Wrong alignment on ABP_DoorBase_C");
static_assert(sizeof(ABP_DoorBase_C) == 0x0003A8, "Wrong size on ABP_DoorBase_C");
static_assert(offsetof(ABP_DoorBase_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_DoorBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorSideB) == 0x0002B0, "Member 'ABP_DoorBase_C::DoorSideB' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorSideA) == 0x0002B8, "Member 'ABP_DoorBase_C::DoorSideA' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, AkPortal) == 0x0002C0, "Member 'ABP_DoorBase_C::AkPortal' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, AudioPortal) == 0x0002C8, "Member 'ABP_DoorBase_C::AudioPortal' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Box) == 0x0002D0, "Member 'ABP_DoorBase_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, StaticMesh) == 0x0002D8, "Member 'ABP_DoorBase_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, PivotPoint) == 0x0002E0, "Member 'ABP_DoorBase_C::PivotPoint' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABP_DoorBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DirectionToOpen) == 0x0002F0, "Member 'ABP_DoorBase_C::DirectionToOpen' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, CurveProgress) == 0x0002F8, "Member 'ABP_DoorBase_C::CurveProgress' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, ActorsInsideDoorArea) == 0x000300, "Member 'ABP_DoorBase_C::ActorsInsideDoorArea' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, Speed) == 0x000350, "Member 'ABP_DoorBase_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, ShouldOpen) == 0x000358, "Member 'ABP_DoorBase_C::ShouldOpen' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorLocationCurve) == 0x000360, "Member 'ABP_DoorBase_C::DoorLocationCurve' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorRotationCurve) == 0x000368, "Member 'ABP_DoorBase_C::DoorRotationCurve' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, FlipDirection) == 0x000370, "Member 'ABP_DoorBase_C::FlipDirection' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, OnDoorOpen) == 0x000378, "Member 'ABP_DoorBase_C::OnDoorOpen' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, OnDoorCloseStart) == 0x000380, "Member 'ABP_DoorBase_C::OnDoorCloseStart' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, OnDoorCloseImpact) == 0x000388, "Member 'ABP_DoorBase_C::OnDoorCloseImpact' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorOpenID) == 0x000390, "Member 'ABP_DoorBase_C::DoorOpenID' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, DoorCloseID) == 0x000394, "Member 'ABP_DoorBase_C::DoorCloseID' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, CloseImpactOffset) == 0x000398, "Member 'ABP_DoorBase_C::CloseImpactOffset' has a wrong offset!");
static_assert(offsetof(ABP_DoorBase_C, NeedsAudioPortal) == 0x0003A0, "Member 'ABP_DoorBase_C::NeedsAudioPortal' has a wrong offset!");

}

