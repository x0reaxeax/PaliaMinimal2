#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Inventory_CM

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ValeriaUI_structs.hpp"
#include "CommonUI_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Inventory_CM.WBP_Inventory_CM_C
// 0x0378 (0x0660 - 0x02E8)
class UWBP_Inventory_CM_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_GoldCapWarning_C*                  GoldCapWarning_Single;                             // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_GoldCapWarning_C*                  GoldCapWarning_Stack;                              // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 GoldCapWarningImage;                               // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 GoldCapWarningImage_Stack;                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class US6UI_CustomNavigationGroup*            NavGroup_Ammo;                                     // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class US6UI_CustomNavigationGroup*            NavGroup_Main;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class US6UI_CustomNavigationGroup*            NavGroup_Other;                                    // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class US6UI_CustomNavigationGroup*            NavGroup_Quest;                                    // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         SellBox;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         SellSingleBox;                                     // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         SellStackBox;                                      // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVALUI_TextBlock_Styled*                SingleItemValue;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVALUI_TextBlock_Styled*                StackItemValue;                                    // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Template_ButtonTab_Secondary_02_CM_C* TabSelector_CM;                                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_AmmoBags;                              // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_MainBags;                              // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_OtherBags;                             // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_QuestBags;                             // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_55;                                 // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInventoryComponent*                    Inventory;                                         // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TSet<struct FGameplayTag>                     IncludedBagTypes;                                  // 0x0390(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	FMulticastInlineDelegateProperty_             OnSlotLeftClicked;                                 // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSlotRightClicked;                                // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSlotItemDropped;                                 // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 SlotType;                                          // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EHorizontalAlignment                          TabHorizontalAlignment;                            // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bSlotsDraggable;                                   // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bShowLockedBags;                                   // 0x041A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_589C[0x1];                                     // 0x041B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxSlotsPerRow;                                    // 0x041C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FMargin                                Slot_Padding;                                      // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	FMulticastInlineDelegateProperty_             OnSlotItemChanged;                                 // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FGameplayTag>                   OrderedIncludedBagTypes;                           // 0x0440(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	TMap<int32, class UWBP_InventoryBag_CM_C*>    FirstInventoryBags;                                // 0x0450(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         FocusSlotIndex;                                    // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FocusBagIndex;                                     // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_InventorySlot_CM_C*                DefultFocusWidget;                                 // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnInventoryGamepadSelect;                          // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnInventoryGamepadCancel;                          // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnInventoryOpenActionMenu;                         // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnInventorySlotFocused;                            // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsUseLargerLineSpacing;                           // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_589D[0x7];                                     // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 LastUsedMainBagIndices;                            // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 LastUsedAmmoBagIndices;                            // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 LastUsedQuestBagIndices;                           // 0x0518(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 LastUsedOtherBagIndices;                           // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UVerticalBox*                           CurrentVerticalBox;                                // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnInventoryTabChanged;                             // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HideActionBarIndex;                                // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVALUI_UISize                                 UiSize;                                            // 0x0551(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_589E[0x6];                                     // 0x0552(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EVALUI_UISize, struct FMargin>           LockedRowPaddingMap;                               // 0x0558(0x0050)(Edit, BlueprintVisible)
	TMap<EVALUI_UISize, struct FMargin>           UnlockedRowPaddingMap;                             // 0x05A8(0x0050)(Edit, BlueprintVisible)
	TMap<EVALUI_UISize, struct FVector2D>         LockedRowBackgroundImageSize;                      // 0x05F8(0x0050)(Edit, BlueprintVisible)
	FMulticastInlineDelegateProperty_             OnInventoryChanged;                                // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bHideBagTabSelector;                               // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void CreateBagsForBagTypes(TArray<struct FGameplayTag>& BagTypes, class UVerticalBox* BagsVerticalBox, TArray<int32>& LastUsedBagIndicesRef, int32 BagIndex, const TArray<class UWBP_InventorySlot_CM_C*>& InventorySlots, class UWBP_InventoryBag_CM_C* FirstInventoryBag, int32 Temp_int_Array_Index_Variable, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_GetMaxNumBagsAllowedForBagTypes_ReturnValue, int32 Temp_int_Variable, int32 CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, const struct FVector2D& CallFunc_GetLockedRowBackgroundImageSize_ImageSize, const struct FMargin& CallFunc_GetUnlockedRowPadding_Padding, const struct FMargin& CallFunc_GetLockedRowPadding_Padding, class US6UI_CustomNavigationGroup* CallFunc_GetNavGroupForIndex_NavGroup, TArray<class UWidget*>& CallFunc_GetAllChildren_ReturnValue, class UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue_1, class UWBP_InventoryBag_CM_C* K2Node_DynamicCast_AsWBP_Inventory_Bag_CM, bool K2Node_DynamicCast_bSuccess, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetAllSlots_Slots, int32 Temp_int_Array_Index_Variable_1, bool CallFunc_IsValid_ReturnValue, TDelegate<void(class UWidget* Widget)> K2Node_CreateDelegate_OutputDelegate, TDelegate<void(class UWBP_InventorySlot_CM_C* Slot)> K2Node_CreateDelegate_OutputDelegate_1, TDelegate<void(class UWBP_InventorySlot_CM_C* Slot, class UWBP_InventoryBag_CM_C* Bag)> K2Node_CreateDelegate_OutputDelegate_2, TDelegate<void(class UWBP_InventorySlot_CM_C* Slot, class UWBP_InventoryBag_CM_C* Bag)> K2Node_CreateDelegate_OutputDelegate_3, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Subtract_IntInt_ReturnValue_1, TArray<int32>& CallFunc_GetBagIndicesMatchingBagTypes_ReturnValue, int32 CallFunc_Array_Get_Item_1, int32 CallFunc_Array_Length_ReturnValue_2, int32 CallFunc_Subtract_IntInt_ReturnValue_2, bool CallFunc_Array_Identical_ReturnValue, int32 CallFunc_Max_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, int32 Temp_int_Loop_Counter_Variable_1, class UWBP_LockedRow_C* CallFunc_Create_ReturnValue, class UVerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_1, class UWBP_InventoryBag_CM_C* CallFunc_Create_ReturnValue_1, class UVerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue_1, TDelegate<void(class UWBP_InventoryBag_CM_C* Bag, class UWBP_InventorySlot_CM_C* Slot)> K2Node_CreateDelegate_OutputDelegate_4, TDelegate<void(class UWBP_InventoryBag_CM_C* Bag, class UWBP_InventorySlot_CM_C* Slot)> K2Node_CreateDelegate_OutputDelegate_5);
	void Destruct();
	void ExecuteUbergraph_WBP_Inventory_CM(int32 EntryPoint, TDelegate<void(class UInventoryComponent* Inventory)> K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, class UInventoryComponent* K2Node_CustomEvent_Inventory, class UWBP_InventoryBag_CM_C* K2Node_CustomEvent_Bag_2, class UWBP_InventorySlot_CM_C* K2Node_CustomEvent_Slot_4, class UWBP_InventorySlot_CM_C* K2Node_CustomEvent_Slot_3, class UWBP_InventoryBag_CM_C* K2Node_CustomEvent_Bag_1, class UWBP_InventorySlot_CM_C* K2Node_CustomEvent_Slot_2, class UWBP_InventoryBag_CM_C* K2Node_CustomEvent_Bag, class UWBP_InventorySlot_CM_C* K2Node_CustomEvent_Slot_1, class UWBP_InventorySlot_CM_C* K2Node_CustomEvent_Slot, bool CallFunc_IsValid_ReturnValue_2, class UWBP_InventoryBag_CM_C* K2Node_CustomEvent_Bag_3, class UWBP_InventorySlot_CM_C* K2Node_CustomEvent_Slot_5, TDelegate<void(class UInventoryComponent* Inventory)> K2Node_CreateDelegate_OutputDelegate_1, bool K2Node_Event_IsDesignTime, TDelegate<void(int32 Tab_Selection)> K2Node_CreateDelegate_OutputDelegate_2, int32 K2Node_CustomEvent_Tab_Selection, class UVerticalBox* CallFunc_GetVerticalBoxByIndex_VBox, TDelegate<void(int32 Tab_Selection)> K2Node_CreateDelegate_OutputDelegate_3, class UWBP_InventoryBag_CM_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue_3, class UWBP_InventorySlot_CM_C* CallFunc_GetFirstInventorySlot_FirstSlot, bool CallFunc_IsValid_ReturnValue_4, TDelegate<void(const struct FValeriaItem& Item)> K2Node_CreateDelegate_OutputDelegate_4, const struct FValeriaItem& K2Node_CustomEvent_Item, class UObject* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, bool CallFunc_HasMainBag_bMainBag, class UVAL_ItemTypeDefinitionAsset* K2Node_DynamicCast_AsItem_Type_Definition, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue_5, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_HasQuestBag_bQuestBag, bool CallFunc_HasAmmoBag_bAmmoBag, class UWBP_InventorySlot_CM_C* CallFunc_Initialize_Inventory_Focus_Output);
	void Get_Best_Default_Bag_Widget_Switcher_Index(int32* WidgetSwitcherIndex, bool CallFunc_HasOtherBag_OtherBag, bool CallFunc_HasQuestBag_bQuestBag, bool CallFunc_HasAmmoBag_bAmmoBag, bool CallFunc_HasMainBag_bMainBag);
	void GetActiveInventoryDefaultSlot(class UWBP_InventorySlot_CM_C** ActiveInventoryDefaultSlot, int32 CallFunc_GetActiveWidgetIndex_ReturnValue, class UWBP_InventoryBag_CM_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, class UWBP_InventorySlot_CM_C* CallFunc_GetFirstInventorySlot_FirstSlot);
	void GetAllBagVerticalBoxes(TArray<class UVerticalBox*>* AllBagVerticalBoxes, const TArray<class UVerticalBox*>& NewBagVerticalBoxes, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue_1, int32 CallFunc_Array_Add_ReturnValue_2, int32 CallFunc_Array_Add_ReturnValue_3);
	void GetAllNavGroups(TArray<class US6UI_CustomNavigationGroup*>* AllNavGroups, const TArray<class US6UI_CustomNavigationGroup*>& NavGroups, int32 CallFunc_Array_Add_ReturnValue, int32 CallFunc_Array_Add_ReturnValue_1, int32 CallFunc_Array_Add_ReturnValue_2, int32 CallFunc_Array_Add_ReturnValue_3);
	void GetAllSlots(TArray<class UWBP_InventorySlot_CM_C*>* Slots, const TArray<class UWBP_InventorySlot_CM_C*>& Result, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Array_Index_Variable_1, int32 Temp_int_Loop_Counter_Variable_1, int32 CallFunc_Add_IntInt_ReturnValue_1, TArray<class UVerticalBox*>& CallFunc_GetAllBagVerticalBoxes_AllBagVerticalBoxes, class UVerticalBox* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, TArray<class UWidget*>& CallFunc_GetAllChildren_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, class UWidget* CallFunc_Array_Get_Item_1, class UWBP_InventoryBag_CM_C* K2Node_DynamicCast_AsWBP_Inventory_Bag_CM, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Array_Length_ReturnValue_1, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetAllSlots_Slots, bool CallFunc_Less_IntInt_ReturnValue_1);
	void GetAllSlotsForBorderNavigationType(EUINavigation Param_Navigation, TArray<class UWBP_InventorySlot_CM_C*>* InventorySlots, const TArray<class UWBP_InventorySlot_CM_C*>& ValidInventorySlots, int32 Temp_int_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetSlotsForBorderNavigationTypeAtBagIndex_InventorySlots, bool CallFunc_LessEqual_IntInt_ReturnValue);
	void GetBagsToDisplay(TArray<int32>* BagIndices, const struct FGameplayTag& CurrentBagType, const TArray<int32>& Result, int32 Temp_int_Loop_Counter_Variable, int32 Temp_int_Array_Index_Variable, int32 CallFunc_Add_IntInt_ReturnValue, int32 Temp_int_Array_Index_Variable_1, int32 Temp_int_Loop_Counter_Variable_1, int32 CallFunc_Add_IntInt_ReturnValue_1, int32 Temp_int_Array_Index_Variable_2, int32 CallFunc_Array_Add_ReturnValue, const struct FGameplayTag& CallFunc_GetBagTypeForBagIndex_ReturnValue, bool CallFunc_EqualEqual_GameplayTag_ReturnValue, int32 Temp_int_Loop_Counter_Variable_2, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_2, bool CallFunc_Less_IntInt_ReturnValue, const struct FGameplayTag& CallFunc_Array_Get_Item, bool CallFunc_Array_IsEmpty_ReturnValue, bool CallFunc_Set_Contains_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, bool CallFunc_Less_IntInt_ReturnValue_1, int32 CallFunc_Array_Add_ReturnValue_1, const struct FGameplayTag& CallFunc_GetBagTypeForBagIndex_ReturnValue_1, bool CallFunc_Set_Contains_ReturnValue_1, int32 CallFunc_Array_Length_ReturnValue_2, bool CallFunc_Less_IntInt_ReturnValue_2);
	void GetCurrentBagIndex(int32* Param_Index, int32 CallFunc_GetActiveWidgetIndex_ReturnValue);
	void GetLockedRowBackgroundImageSize(struct FVector2D* ImageSize, const struct FVector2D& CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
	void GetLockedRowPadding(struct FMargin* Param_Padding, const struct FMargin& CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
	void GetNavGroupForIndex(int32 Param_Index, class US6UI_CustomNavigationGroup** NavGroup, class US6UI_CustomNavigationGroup* SelectedNavGroup, bool K2Node_SwitchInteger_CmpSuccess);
	void GetNumCoreBags(int32* NumCoreBags, int32 LocalNumCoreBags, int32 Temp_int_Variable, int32 Temp_int_Variable_1, int32 Temp_int_Variable_2, bool CallFunc_HasQuestBag_bQuestBag, bool CallFunc_HasAmmoBag_bAmmoBag, bool CallFunc_HasMainBag_bMainBag, int32 CallFunc_Add_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_1, int32 CallFunc_Add_IntInt_ReturnValue_2);
	void GetOtherBagTypes(TArray<struct FGameplayTag>* OtherBagTypes, const TArray<struct FGameplayTag>& NewOtherBagTypes, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<struct FGameplayTag>& CallFunc_Set_ToArray_Result, int32 CallFunc_Array_Length_ReturnValue, const struct FGameplayTag& CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_GameplayTag_ReturnValue, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_1, bool CallFunc_EqualEqual_GameplayTag_ReturnValue_2, int32 CallFunc_Array_Add_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue_1, bool CallFunc_Not_PreBool_ReturnValue);
	void GetSlotsForBagIndex(int32 Param_Index, TArray<class UWBP_InventorySlot_CM_C*>* Slots, class UVerticalBox* RelevantVerticalBox, const TArray<class UWBP_InventorySlot_CM_C*>& Result, bool K2Node_SwitchInteger_CmpSuccess, int32 Temp_int_Array_Index_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<class UWidget*>& CallFunc_GetAllChildren_ReturnValue, class UWidget* CallFunc_Array_Get_Item, int32 CallFunc_Array_Length_ReturnValue, class UWBP_InventoryBag_CM_C* K2Node_DynamicCast_AsWBP_Inventory_Bag_CM, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetAllSlots_Slots);
	void GetSlotsForBorderNavigationTypeAtBagIndex(EUINavigation Param_Navigation, int32 BagIndex, TArray<class UWBP_InventorySlot_CM_C*>* InventorySlots, const TArray<class UWBP_InventorySlot_CM_C*>& CorrelatedInventorySlots, int32 NumBags, class UVerticalBox* CallFunc_GetVerticalBoxByIndex_VBox, bool CallFunc_IsValid_ReturnValue, TArray<class UWidget*>& CallFunc_GetAllChildren_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Array_Length_ReturnValue_1, int32 CallFunc_Subtract_IntInt_ReturnValue, int32 Temp_int_Array_Index_Variable, class UWidget* CallFunc_Array_Get_Item, bool CallFunc_EqualEqual_IntInt_ReturnValue, class UWBP_InventoryBag_CM_C* K2Node_DynamicCast_AsWBP_Inventory_Bag_CM, bool K2Node_DynamicCast_bSuccess, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetSlotsForBorderNavigationType_InventorySlots, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetSlotsForBorderNavigationType_InventorySlots_1, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetSlotsForBorderNavigationType_InventorySlots_2, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetSlotsForBorderNavigationType_InventorySlots_3, bool CallFunc_EqualEqual_IntInt_ReturnValue_1, int32 Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);
	void GetUnlockedRowPadding(struct FMargin* Param_Padding, const struct FMargin& CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);
	void GetVerticalBoxByIndex(int32 Param_Index, class UVerticalBox** VBox, bool K2Node_SwitchInteger_CmpSuccess);
	void Handle_Slot_Focused(class UWidget* Widget);
	void HandleInventoryOpenActionMenu(class UWBP_InventorySlot_CM_C* Param_Slot);
	void HandleInventorySlotFocus(class UWBP_InventorySlot_CM_C* Param_Slot);
	void HandleOnItemReceived(const struct FValeriaItem& Item);
	void HandleSlotGamepadCancel(class UWBP_InventorySlot_CM_C* Param_Slot, class UWBP_InventoryBag_CM_C* Bag);
	void HandleSlotGamepadSelect(class UWBP_InventorySlot_CM_C* Param_Slot, class UWBP_InventoryBag_CM_C* Bag);
	void HandleSlotLeftClicked(class UWBP_InventoryBag_CM_C* Bag, class UWBP_InventorySlot_CM_C* Param_Slot);
	void HandleSlotRightClicked(class UWBP_InventoryBag_CM_C* Bag, class UWBP_InventorySlot_CM_C* Param_Slot);
	void HasAmmoBag(bool* bAmmoBag, struct FGameplayTag& Temp_struct_Variable, bool CallFunc_GetConsoleVariableBoolValue_ReturnValue, bool CallFunc_Set_Contains_ReturnValue);
	void HasMainBag(bool* bMainBag, struct FGameplayTag& Temp_struct_Variable, bool CallFunc_Set_Contains_ReturnValue);
	void HasOtherBag(bool* OtherBag, struct FGameplayTag& Temp_struct_Variable, struct FGameplayTag& Temp_struct_Variable_1, bool CallFunc_Set_Contains_ReturnValue, bool CallFunc_Set_Contains_ReturnValue_1, bool CallFunc_BooleanOR_ReturnValue);
	void HasQuestBag(bool* bQuestBag, struct FGameplayTag& Temp_struct_Variable, bool CallFunc_Set_Contains_ReturnValue);
	void Initialize_Inventory_Focus(class UWBP_InventorySlot_CM_C** Output, class UWidget* BagWidget, class UWBP_InventoryBag_CM_C* K2Node_DynamicCast_AsWBP_Inventory_Bag_CM, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetAllSlots_Slots, class UWidget* CallFunc_GetChildAt_ReturnValue, class UWBP_InventorySlot_CM_C* CallFunc_Array_Get_Item);
	void NavigateInventoryTab(bool bForward);
	void On_Tab_Selection_Changed(int32 Tab_Selection);
	void OnInventoryChanged__DelegateSignature();
	void OnInventoryGamepadCancel__DelegateSignature(class UWBP_Inventory_CM_C* Param_Inventory, class UWBP_InventoryBag_CM_C* Bag, class UWBP_InventorySlot_CM_C* Param_Slot);
	void OnInventoryGamepadSelect__DelegateSignature(class UWBP_Inventory_CM_C* Param_Inventory, class UWBP_InventoryBag_CM_C* Bag, class UWBP_InventorySlot_CM_C* Param_Slot);
	void OnInventoryOpenActionMenu__DelegateSignature(class UWBP_InventorySlot_CM_C* Param_Slot);
	void OnInventorySlotFocused__DelegateSignature(class UWidget* Widget);
	void OnInventoryTabChanged__DelegateSignature();
	void OnSlotItemChanged__DelegateSignature();
	void OnSlotItemDropped__DelegateSignature(class UWBP_Inventory_CM_C* Param_Inventory, class UWBP_InventoryBag_CM_C* Bag, class UWBP_InventorySlot_CM_C* Param_Slot, class UVALUI_ItemDragDrop* Operation);
	void OnSlotLeftClicked__DelegateSignature(class UWBP_Inventory_CM_C* Param_Inventory, class UWBP_InventoryBag_CM_C* Bag, class UWBP_InventorySlot_CM_C* Param_Slot);
	void OnSlotRightClicked__DelegateSignature(class UWBP_Inventory_CM_C* Param_Inventory, class UWBP_InventoryBag_CM_C* Bag, class UWBP_InventorySlot_CM_C* Param_Slot);
	void PreConstruct(bool IsDesignTime);
	void RecreateBags(class UInventoryComponent* Param_Inventory, int32 CreatedStorageBagCount, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue_1, class UWBP_InventorySlot_CM_C* CallFunc_Initialize_Inventory_Focus_Output, TArray<struct FGameplayTag>& CallFunc_GetOtherBagTypes_OtherBagTypes, TArray<struct FGameplayTag>& K2Node_MakeArray_Array, int32 CallFunc_Array_Length_ReturnValue, TArray<struct FGameplayTag>& K2Node_MakeArray_Array_1, bool CallFunc_Greater_IntInt_ReturnValue, TArray<struct FGameplayTag>& K2Node_MakeArray_Array_2, bool CallFunc_HasQuestBag_bQuestBag, bool CallFunc_HasAmmoBag_bAmmoBag, bool CallFunc_HasMainBag_bMainBag);
	void SelectBestDefaultBag(bool SetSelected, const class FString& CallFunc_GetObjectName_ReturnValue, const class FString& CallFunc_Concat_StrStr_ReturnValue, int32 CallFunc_Get_Best_Default_Bag_Widget_Switcher_Index_WidgetSwitcherIndex, bool CallFunc_GreaterEqual_IntInt_ReturnValue, class UVerticalBox* CallFunc_GetVerticalBoxByIndex_VBox);
	void SetCustomLeftNavigation(class UWidget* InWidget, int32 Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue, TArray<class UVerticalBox*>& CallFunc_GetAllBagVerticalBoxes_AllBagVerticalBoxes, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Array_Length_ReturnValue, int32 CallFunc_Add_IntInt_ReturnValue_1, bool CallFunc_Less_IntInt_ReturnValue, int32 Temp_int_Array_Index_Variable, class UVerticalBox* CallFunc_Array_Get_Item, class UWidget* CallFunc_GetChildAt_ReturnValue, int32 CallFunc_GetChildrenCount_ReturnValue, class UWBP_InventoryBag_CM_C* K2Node_DynamicCast_AsWBP_Inventory_Bag_CM, bool K2Node_DynamicCast_bSuccess, int32 CallFunc_Subtract_IntInt_ReturnValue, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetAllSlots_Slots, bool CallFunc_LessEqual_IntInt_ReturnValue, class UWBP_InventorySlot_CM_C* CallFunc_Array_Get_Item_1, int32 CallFunc_Subtract_IntInt_ReturnValue_1);
	void SetCustomUpNavigation(int32 Param_Index, class UWidget* InWidget, bool IsResetToEscape, bool CallFunc_IsValid_ReturnValue, int32 Temp_int_Array_Index_Variable, EUINavigationRule Temp_byte_Variable, int32 Temp_int_Loop_Counter_Variable, int32 CallFunc_Add_IntInt_ReturnValue, TArray<class UVerticalBox*>& CallFunc_GetAllBagVerticalBoxes_AllBagVerticalBoxes, EUINavigationRule Temp_byte_Variable_1, class UVerticalBox* CallFunc_Array_Get_Item, int32 CallFunc_GetChildrenCount_ReturnValue, int32 CallFunc_Array_Length_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Less_IntInt_ReturnValue, EUINavigationRule K2Node_Select_Default, int32 CallFunc_Subtract_IntInt_ReturnValue, class UWidget* CallFunc_GetChildAt_ReturnValue, class UWBP_InventoryBag_CM_C* K2Node_DynamicCast_AsWBP_Inventory_Bag_CM, bool K2Node_DynamicCast_bSuccess, TArray<class UWBP_InventorySlot_CM_C*>& CallFunc_GetAllSlots_Slots, class UWBP_InventorySlot_CM_C* CallFunc_Array_Get_Item_1);
	void SetIncludedBagTypes(const TSet<struct FGameplayTag>& Param_IncludedBagTypes);
	void SetInventory(class UInventoryComponent* Param_Inventory);
	void UpdateSellIcon(class UTexture2D* SellIcon);
	void UpdateSellText(int32 Item_Value, int32 Stack_Value, bool Temp_bool_Variable, bool CallFunc_Greater_IntInt_ReturnValue, ESlateVisibility Temp_byte_Variable, ESlateVisibility Temp_byte_Variable_1, bool CallFunc_UpdateVisibility_IsVisible, bool CallFunc_UpdateVisibility_IsVisible_1, class FText CallFunc_Conv_IntToText_ReturnValue, class FText CallFunc_Conv_IntToText_ReturnValue_1, bool CallFunc_EqualEqual_IntInt_ReturnValue, ESlateVisibility K2Node_Select_Default);
	void UpdateTabSelector(class UVerticalBoxSlot* CallFunc_SlotAsVerticalBoxSlot_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasQuestBag_bQuestBag, bool CallFunc_HasAmmoBag_bAmmoBag, bool CallFunc_HasMainBag_bMainBag, int32 CallFunc_GetNumCoreBags_NumCoreBags, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Inventory_CM_C">();
	}
	static class UWBP_Inventory_CM_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Inventory_CM_C>();
	}
};
static_assert(alignof(UWBP_Inventory_CM_C) == 0x000008, "Wrong alignment on UWBP_Inventory_CM_C");
static_assert(sizeof(UWBP_Inventory_CM_C) == 0x000660, "Wrong size on UWBP_Inventory_CM_C");
static_assert(offsetof(UWBP_Inventory_CM_C, UberGraphFrame) == 0x0002E8, "Member 'UWBP_Inventory_CM_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, GoldCapWarning_Single) == 0x0002F0, "Member 'UWBP_Inventory_CM_C::GoldCapWarning_Single' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, GoldCapWarning_Stack) == 0x0002F8, "Member 'UWBP_Inventory_CM_C::GoldCapWarning_Stack' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, GoldCapWarningImage) == 0x000300, "Member 'UWBP_Inventory_CM_C::GoldCapWarningImage' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, GoldCapWarningImage_Stack) == 0x000308, "Member 'UWBP_Inventory_CM_C::GoldCapWarningImage_Stack' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, NavGroup_Ammo) == 0x000310, "Member 'UWBP_Inventory_CM_C::NavGroup_Ammo' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, NavGroup_Main) == 0x000318, "Member 'UWBP_Inventory_CM_C::NavGroup_Main' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, NavGroup_Other) == 0x000320, "Member 'UWBP_Inventory_CM_C::NavGroup_Other' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, NavGroup_Quest) == 0x000328, "Member 'UWBP_Inventory_CM_C::NavGroup_Quest' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, SellBox) == 0x000330, "Member 'UWBP_Inventory_CM_C::SellBox' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, SellSingleBox) == 0x000338, "Member 'UWBP_Inventory_CM_C::SellSingleBox' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, SellStackBox) == 0x000340, "Member 'UWBP_Inventory_CM_C::SellStackBox' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, SingleItemValue) == 0x000348, "Member 'UWBP_Inventory_CM_C::SingleItemValue' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, StackItemValue) == 0x000350, "Member 'UWBP_Inventory_CM_C::StackItemValue' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, TabSelector_CM) == 0x000358, "Member 'UWBP_Inventory_CM_C::TabSelector_CM' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, VerticalBox_AmmoBags) == 0x000360, "Member 'UWBP_Inventory_CM_C::VerticalBox_AmmoBags' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, VerticalBox_MainBags) == 0x000368, "Member 'UWBP_Inventory_CM_C::VerticalBox_MainBags' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, VerticalBox_OtherBags) == 0x000370, "Member 'UWBP_Inventory_CM_C::VerticalBox_OtherBags' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, VerticalBox_QuestBags) == 0x000378, "Member 'UWBP_Inventory_CM_C::VerticalBox_QuestBags' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, WidgetSwitcher_55) == 0x000380, "Member 'UWBP_Inventory_CM_C::WidgetSwitcher_55' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, Inventory) == 0x000388, "Member 'UWBP_Inventory_CM_C::Inventory' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, IncludedBagTypes) == 0x000390, "Member 'UWBP_Inventory_CM_C::IncludedBagTypes' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OnSlotLeftClicked) == 0x0003E0, "Member 'UWBP_Inventory_CM_C::OnSlotLeftClicked' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OnSlotRightClicked) == 0x0003F0, "Member 'UWBP_Inventory_CM_C::OnSlotRightClicked' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OnSlotItemDropped) == 0x000400, "Member 'UWBP_Inventory_CM_C::OnSlotItemDropped' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, SlotType) == 0x000410, "Member 'UWBP_Inventory_CM_C::SlotType' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, TabHorizontalAlignment) == 0x000418, "Member 'UWBP_Inventory_CM_C::TabHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, bSlotsDraggable) == 0x000419, "Member 'UWBP_Inventory_CM_C::bSlotsDraggable' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, bShowLockedBags) == 0x00041A, "Member 'UWBP_Inventory_CM_C::bShowLockedBags' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, MaxSlotsPerRow) == 0x00041C, "Member 'UWBP_Inventory_CM_C::MaxSlotsPerRow' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, Slot_Padding) == 0x000420, "Member 'UWBP_Inventory_CM_C::Slot_Padding' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OnSlotItemChanged) == 0x000430, "Member 'UWBP_Inventory_CM_C::OnSlotItemChanged' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OrderedIncludedBagTypes) == 0x000440, "Member 'UWBP_Inventory_CM_C::OrderedIncludedBagTypes' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, FirstInventoryBags) == 0x000450, "Member 'UWBP_Inventory_CM_C::FirstInventoryBags' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, FocusSlotIndex) == 0x0004A0, "Member 'UWBP_Inventory_CM_C::FocusSlotIndex' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, FocusBagIndex) == 0x0004A4, "Member 'UWBP_Inventory_CM_C::FocusBagIndex' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, DefultFocusWidget) == 0x0004A8, "Member 'UWBP_Inventory_CM_C::DefultFocusWidget' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OnInventoryGamepadSelect) == 0x0004B0, "Member 'UWBP_Inventory_CM_C::OnInventoryGamepadSelect' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OnInventoryGamepadCancel) == 0x0004C0, "Member 'UWBP_Inventory_CM_C::OnInventoryGamepadCancel' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OnInventoryOpenActionMenu) == 0x0004D0, "Member 'UWBP_Inventory_CM_C::OnInventoryOpenActionMenu' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OnInventorySlotFocused) == 0x0004E0, "Member 'UWBP_Inventory_CM_C::OnInventorySlotFocused' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, bIsUseLargerLineSpacing) == 0x0004F0, "Member 'UWBP_Inventory_CM_C::bIsUseLargerLineSpacing' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, LastUsedMainBagIndices) == 0x0004F8, "Member 'UWBP_Inventory_CM_C::LastUsedMainBagIndices' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, LastUsedAmmoBagIndices) == 0x000508, "Member 'UWBP_Inventory_CM_C::LastUsedAmmoBagIndices' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, LastUsedQuestBagIndices) == 0x000518, "Member 'UWBP_Inventory_CM_C::LastUsedQuestBagIndices' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, LastUsedOtherBagIndices) == 0x000528, "Member 'UWBP_Inventory_CM_C::LastUsedOtherBagIndices' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, CurrentVerticalBox) == 0x000538, "Member 'UWBP_Inventory_CM_C::CurrentVerticalBox' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OnInventoryTabChanged) == 0x000540, "Member 'UWBP_Inventory_CM_C::OnInventoryTabChanged' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, HideActionBarIndex) == 0x000550, "Member 'UWBP_Inventory_CM_C::HideActionBarIndex' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, UiSize) == 0x000551, "Member 'UWBP_Inventory_CM_C::UiSize' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, LockedRowPaddingMap) == 0x000558, "Member 'UWBP_Inventory_CM_C::LockedRowPaddingMap' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, UnlockedRowPaddingMap) == 0x0005A8, "Member 'UWBP_Inventory_CM_C::UnlockedRowPaddingMap' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, LockedRowBackgroundImageSize) == 0x0005F8, "Member 'UWBP_Inventory_CM_C::LockedRowBackgroundImageSize' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, OnInventoryChanged) == 0x000648, "Member 'UWBP_Inventory_CM_C::OnInventoryChanged' has a wrong offset!");
static_assert(offsetof(UWBP_Inventory_CM_C, bHideBagTabSelector) == 0x000658, "Member 'UWBP_Inventory_CM_C::bHideBagTabSelector' has a wrong offset!");

}

