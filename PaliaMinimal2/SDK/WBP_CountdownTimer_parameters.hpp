#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CountdownTimer

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_CountdownTimer.WBP_CountdownTimer_C.ExecuteUbergraph_WBP_CountdownTimer
// 0x005C (0x005C - 0x0000)
struct WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StartValeriaTimeSecs;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_EndValeriaTimeSecs;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_ShouldBeReverse;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6187[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0018(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetValeriaTimestampSecs_ReturnValue;      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer) == 0x000004, "Wrong alignment on WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer");
static_assert(sizeof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer) == 0x00005C, "Wrong size on WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer");
static_assert(offsetof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer, EntryPoint) == 0x000000, "Member 'WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000008, "Member 'WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer, K2Node_CustomEvent_StartValeriaTimeSecs) == 0x00000C, "Member 'WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer::K2Node_CustomEvent_StartValeriaTimeSecs' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer, K2Node_CustomEvent_EndValeriaTimeSecs) == 0x000010, "Member 'WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer::K2Node_CustomEvent_EndValeriaTimeSecs' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer, K2Node_CustomEvent_ShouldBeReverse) == 0x000014, "Member 'WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer::K2Node_CustomEvent_ShouldBeReverse' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer, K2Node_Event_MyGeometry) == 0x000018, "Member 'WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer, K2Node_Event_InDeltaTime) == 0x000050, "Member 'WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer, CallFunc_GetValeriaTimestampSecs_ReturnValue) == 0x000054, "Member 'WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer::CallFunc_GetValeriaTimestampSecs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000058, "Member 'WBP_CountdownTimer_C_ExecuteUbergraph_WBP_CountdownTimer::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_CountdownTimer.WBP_CountdownTimer_C.SetCountdownTimer
// 0x000C (0x000C - 0x0000)
struct WBP_CountdownTimer_C_SetCountdownTimer final
{
public:
	int32                                         Param_StartValeriaTimeSecs;                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_EndValeriaTimeSecs;                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldBeReverse;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimer_C_SetCountdownTimer) == 0x000004, "Wrong alignment on WBP_CountdownTimer_C_SetCountdownTimer");
static_assert(sizeof(WBP_CountdownTimer_C_SetCountdownTimer) == 0x00000C, "Wrong size on WBP_CountdownTimer_C_SetCountdownTimer");
static_assert(offsetof(WBP_CountdownTimer_C_SetCountdownTimer, Param_StartValeriaTimeSecs) == 0x000000, "Member 'WBP_CountdownTimer_C_SetCountdownTimer::Param_StartValeriaTimeSecs' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_SetCountdownTimer, Param_EndValeriaTimeSecs) == 0x000004, "Member 'WBP_CountdownTimer_C_SetCountdownTimer::Param_EndValeriaTimeSecs' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_SetCountdownTimer, ShouldBeReverse) == 0x000008, "Member 'WBP_CountdownTimer_C_SetCountdownTimer::ShouldBeReverse' has a wrong offset!");

// Function WBP_CountdownTimer.WBP_CountdownTimer_C.SetTimerTextVisible
// 0x0001 (0x0001 - 0x0000)
struct WBP_CountdownTimer_C_SetTimerTextVisible final
{
public:
	ESlateVisibility                              Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimer_C_SetTimerTextVisible) == 0x000001, "Wrong alignment on WBP_CountdownTimer_C_SetTimerTextVisible");
static_assert(sizeof(WBP_CountdownTimer_C_SetTimerTextVisible) == 0x000001, "Wrong size on WBP_CountdownTimer_C_SetTimerTextVisible");
static_assert(offsetof(WBP_CountdownTimer_C_SetTimerTextVisible, Visible) == 0x000000, "Member 'WBP_CountdownTimer_C_SetTimerTextVisible::Visible' has a wrong offset!");

// Function WBP_CountdownTimer.WBP_CountdownTimer_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_CountdownTimer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimer_C_Tick) == 0x000004, "Wrong alignment on WBP_CountdownTimer_C_Tick");
static_assert(sizeof(WBP_CountdownTimer_C_Tick) == 0x00003C, "Wrong size on WBP_CountdownTimer_C_Tick");
static_assert(offsetof(WBP_CountdownTimer_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_CountdownTimer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_CountdownTimer_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_CountdownTimer.WBP_CountdownTimer_C.UpdateUI
// 0x0070 (0x0070 - 0x0000)
struct WBP_CountdownTimer_C_UpdateUI final
{
public:
	int32                                         TimePassed;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_FormatDuration_ReturnValue;               // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0050(0x0018)()
	float                                         CallFunc_SetPercent_InPercent_ImplicitCast;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CountdownTimer_C_UpdateUI) == 0x000008, "Wrong alignment on WBP_CountdownTimer_C_UpdateUI");
static_assert(sizeof(WBP_CountdownTimer_C_UpdateUI) == 0x000070, "Wrong size on WBP_CountdownTimer_C_UpdateUI");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, TimePassed) == 0x000000, "Member 'WBP_CountdownTimer_C_UpdateUI::TimePassed' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, TotalTime) == 0x000004, "Member 'WBP_CountdownTimer_C_UpdateUI::TotalTime' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, Alpha) == 0x000008, "Member 'WBP_CountdownTimer_C_UpdateUI::Alpha' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'WBP_CountdownTimer_C_UpdateUI::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000018, "Member 'WBP_CountdownTimer_C_UpdateUI::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000020, "Member 'WBP_CountdownTimer_C_UpdateUI::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, CallFunc_FMax_ReturnValue) == 0x000028, "Member 'WBP_CountdownTimer_C_UpdateUI::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'WBP_CountdownTimer_C_UpdateUI::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, CallFunc_Subtract_IntInt_ReturnValue) == 0x000038, "Member 'WBP_CountdownTimer_C_UpdateUI::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, CallFunc_Max_ReturnValue) == 0x00003C, "Member 'WBP_CountdownTimer_C_UpdateUI::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, CallFunc_FormatDuration_ReturnValue) == 0x000040, "Member 'WBP_CountdownTimer_C_UpdateUI::CallFunc_FormatDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, CallFunc_Conv_StringToText_ReturnValue) == 0x000050, "Member 'WBP_CountdownTimer_C_UpdateUI::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CountdownTimer_C_UpdateUI, CallFunc_SetPercent_InPercent_ImplicitCast) == 0x000068, "Member 'WBP_CountdownTimer_C_UpdateUI::CallFunc_SetPercent_InPercent_ImplicitCast' has a wrong offset!");

}

