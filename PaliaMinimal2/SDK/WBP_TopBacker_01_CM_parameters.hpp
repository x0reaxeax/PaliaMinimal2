#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_TopBacker_01_CM

#include "Basic.hpp"

#include "BP_TopBackerSettings_CloseButton_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_TopBacker_01_CM.WBP_TopBacker_01_CM_C.ApplyBackerSettings
// 0x00D8 (0x00D8 - 0x0000)
struct WBP_TopBacker_01_CM_C_ApplyBackerSettings final
{
public:
	struct FBP_TopBackerSettings_CloseButton      Settings;                                          // 0x0000(0x00A0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_515B[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_515C[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_2;          // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopBacker_01_CM_C_ApplyBackerSettings) == 0x000008, "Wrong alignment on WBP_TopBacker_01_CM_C_ApplyBackerSettings");
static_assert(sizeof(WBP_TopBacker_01_CM_C_ApplyBackerSettings) == 0x0000D8, "Wrong size on WBP_TopBacker_01_CM_C_ApplyBackerSettings");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ApplyBackerSettings, Settings) == 0x000000, "Member 'WBP_TopBacker_01_CM_C_ApplyBackerSettings::Settings' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ApplyBackerSettings, Temp_byte_Variable) == 0x0000A0, "Member 'WBP_TopBacker_01_CM_C_ApplyBackerSettings::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ApplyBackerSettings, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x0000A8, "Member 'WBP_TopBacker_01_CM_C_ApplyBackerSettings::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ApplyBackerSettings, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x0000B0, "Member 'WBP_TopBacker_01_CM_C_ApplyBackerSettings::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ApplyBackerSettings, Temp_byte_Variable_1) == 0x0000B8, "Member 'WBP_TopBacker_01_CM_C_ApplyBackerSettings::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ApplyBackerSettings, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x0000C0, "Member 'WBP_TopBacker_01_CM_C_ApplyBackerSettings::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ApplyBackerSettings, CallFunc_SlotAsOverlaySlot_ReturnValue_2) == 0x0000C8, "Member 'WBP_TopBacker_01_CM_C_ApplyBackerSettings::CallFunc_SlotAsOverlaySlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ApplyBackerSettings, Temp_bool_Variable) == 0x0000D0, "Member 'WBP_TopBacker_01_CM_C_ApplyBackerSettings::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ApplyBackerSettings, K2Node_Select_Default) == 0x0000D1, "Member 'WBP_TopBacker_01_CM_C_ApplyBackerSettings::K2Node_Select_Default' has a wrong offset!");

// Function WBP_TopBacker_01_CM.WBP_TopBacker_01_CM_C.ExecuteUbergraph_WBP_TopBacker_01_CM
// 0x000C (0x000C - 0x0000)
struct WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Is_Visible;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM) == 0x000004, "Wrong alignment on WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM");
static_assert(sizeof(WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM) == 0x00000C, "Wrong size on WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM, EntryPoint) == 0x000000, "Member 'WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM, Temp_bool_Variable) == 0x000004, "Member 'WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM, Temp_byte_Variable) == 0x000005, "Member 'WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM, K2Node_Event_IsDesignTime) == 0x000007, "Member 'WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM, K2Node_CustomEvent_Is_Visible) == 0x000008, "Member 'WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM::K2Node_CustomEvent_Is_Visible' has a wrong offset!");
static_assert(offsetof(WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM, K2Node_Select_Default) == 0x000009, "Member 'WBP_TopBacker_01_CM_C_ExecuteUbergraph_WBP_TopBacker_01_CM::K2Node_Select_Default' has a wrong offset!");

// Function WBP_TopBacker_01_CM.WBP_TopBacker_01_CM_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_TopBacker_01_CM_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopBacker_01_CM_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_TopBacker_01_CM_C_PreConstruct");
static_assert(sizeof(WBP_TopBacker_01_CM_C_PreConstruct) == 0x000001, "Wrong size on WBP_TopBacker_01_CM_C_PreConstruct");
static_assert(offsetof(WBP_TopBacker_01_CM_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_TopBacker_01_CM_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_TopBacker_01_CM.WBP_TopBacker_01_CM_C.Set Close Button Visibility
// 0x0001 (0x0001 - 0x0000)
struct WBP_TopBacker_01_CM_C_Set_Close_Button_Visibility final
{
public:
	bool                                          Is_Visible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_TopBacker_01_CM_C_Set_Close_Button_Visibility) == 0x000001, "Wrong alignment on WBP_TopBacker_01_CM_C_Set_Close_Button_Visibility");
static_assert(sizeof(WBP_TopBacker_01_CM_C_Set_Close_Button_Visibility) == 0x000001, "Wrong size on WBP_TopBacker_01_CM_C_Set_Close_Button_Visibility");
static_assert(offsetof(WBP_TopBacker_01_CM_C_Set_Close_Button_Visibility, Is_Visible) == 0x000000, "Member 'WBP_TopBacker_01_CM_C_Set_Close_Button_Visibility::Is_Visible' has a wrong offset!");

// Function WBP_TopBacker_01_CM.WBP_TopBacker_01_CM_C.SetHeaderText
// 0x0018 (0x0018 - 0x0000)
struct WBP_TopBacker_01_CM_C_SetHeaderText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_TopBacker_01_CM_C_SetHeaderText) == 0x000008, "Wrong alignment on WBP_TopBacker_01_CM_C_SetHeaderText");
static_assert(sizeof(WBP_TopBacker_01_CM_C_SetHeaderText) == 0x000018, "Wrong size on WBP_TopBacker_01_CM_C_SetHeaderText");
static_assert(offsetof(WBP_TopBacker_01_CM_C_SetHeaderText, Text) == 0x000000, "Member 'WBP_TopBacker_01_CM_C_SetHeaderText::Text' has a wrong offset!");

}

