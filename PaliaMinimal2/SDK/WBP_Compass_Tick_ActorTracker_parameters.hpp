#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Compass_Tick_ActorTracker

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Palia_structs.hpp"


namespace SDK::Params
{

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.BindVillagerActivityUpdated
// 0x0008 (0x0008 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_BindVillagerActivityUpdated final
{
public:
	class AActor*                                 NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_BindVillagerActivityUpdated) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_BindVillagerActivityUpdated");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_BindVillagerActivityUpdated) == 0x000008, "Wrong size on WBP_Compass_Tick_ActorTracker_C_BindVillagerActivityUpdated");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_BindVillagerActivityUpdated, NewParam) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_BindVillagerActivityUpdated::NewParam' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.CanHitTarget
// 0x0230 (0x0230 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_CanHitTarget final
{
public:
	bool                                          CanHit;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F35[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F36[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0068(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F37[0x1];                                     // 0x0153(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F38[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F39[0x4];                                     // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_CanHitTarget");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget) == 0x000230, "Wrong size on WBP_Compass_Tick_ActorTracker_C_CanHitTarget");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CanHit) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CanHit' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, Temp_object_Variable) == 0x000008, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, K2Node_MakeArray_Array) == 0x000018, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000028, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000048, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000068, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000150, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_bBlockingHit) == 0x000151, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_bInitialOverlap) == 0x000152, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_Time) == 0x000154, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_Distance) == 0x000158, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_Location) == 0x000160, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_ImpactPoint) == 0x000178, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_Normal) == 0x000190, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A8, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_PhysMat) == 0x0001C0, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_HitActor) == 0x0001C8, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_HitComponent) == 0x0001D0, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_HitBoneName) == 0x0001D8, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_BoneName) == 0x0001E0, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_HitItem) == 0x0001E8, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_ElementIndex) == 0x0001EC, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_FaceIndex) == 0x0001F0, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_TraceStart) == 0x0001F8, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_BreakHitResult_TraceEnd) == 0x000210, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_CanHitTarget, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000228, "Member 'WBP_Compass_Tick_ActorTracker_C_CanHitTarget::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.ChooseSecondaryIcon
// 0x0030 (0x0030 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_ChooseSecondaryIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              Param_Icon;                                        // 0x0000(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_ChooseSecondaryIcon) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_ChooseSecondaryIcon");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_ChooseSecondaryIcon) == 0x000030, "Wrong size on WBP_Compass_Tick_ActorTracker_C_ChooseSecondaryIcon");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ChooseSecondaryIcon, Param_Icon) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_ChooseSecondaryIcon::Param_Icon' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ChooseSecondaryIcon, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000028, "Member 'WBP_Compass_Tick_ActorTracker_C_ChooseSecondaryIcon::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.Compute_VerticalIndicator_MinVerticalDistanceToDraw
// 0x0050 (0x0050 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw final
{
public:
	struct FVector                                Param_TargetToActorVector;                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaZ;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanHitTarget_CanHit;                      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw) == 0x000050, "Wrong size on WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, Param_TargetToActorVector) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::Param_TargetToActorVector' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, Value) == 0x000018, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::Value' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, DeltaZ) == 0x000020, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::DeltaZ' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, CallFunc_BreakVector_X) == 0x000028, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, CallFunc_BreakVector_Y) == 0x000030, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, CallFunc_BreakVector_Z) == 0x000038, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, CallFunc_Abs_ReturnValue) == 0x000040, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000048, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000049, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, CallFunc_CanHitTarget_CanHit) == 0x00004A, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::CallFunc_CanHitTarget_CanHit' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw, CallFunc_BooleanAND_ReturnValue) == 0x00004B, "Member 'WBP_Compass_Tick_ActorTracker_C_Compute_VerticalIndicator_MinVerticalDistanceToDraw::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.ExecuteUbergraph_WBP_Compass_Tick_ActorTracker
// 0x00F0 (0x00F0 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F3A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_NewParam_1;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AValeriaVillagerCharacter*              K2Node_DynamicCast_AsValeria_Villager_Character;   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F3B[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AValeriaVillagerCharacter*              K2Node_CustomEvent_Villager;                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVillagerActionInfo                    K2Node_CustomEvent_actionInfo;                     // 0x0028(0x0070)()
	TDelegate<void(class AValeriaVillagerCharacter* Villager, const struct FVillagerActionInfo& ActionInfo)> K2Node_CreateDelegate_OutputDelegate;              // 0x0098(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AValeriaVillagerCharacter* Villager, const struct FVillagerActionInfo& ActionInfo)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x00A8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsFocused;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F3C[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_NewParam;                       // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AValeriaVillagerCharacter*              K2Node_DynamicCast_AsValeria_Villager_Character_1; // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F3D[0x6];                                     // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker) == 0x0000F0, "Wrong size on WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, EntryPoint) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_CustomEvent_NewParam_1) == 0x000008, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_CustomEvent_NewParam_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_DynamicCast_AsValeria_Villager_Character) == 0x000010, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_DynamicCast_AsValeria_Villager_Character' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_CustomEvent_Villager) == 0x000020, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_CustomEvent_Villager' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_CustomEvent_actionInfo) == 0x000028, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_CustomEvent_actionInfo' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_CreateDelegate_OutputDelegate) == 0x000098, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000A8, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_CustomEvent_IsFocused) == 0x0000B8, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_CustomEvent_IsFocused' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_CustomEvent_NewParam) == 0x0000C0, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_CustomEvent_NewParam' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_DynamicCast_AsValeria_Villager_Character_1) == 0x0000C8, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_DynamicCast_AsValeria_Villager_Character_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_DynamicCast_bSuccess_1) == 0x0000D0, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0000D1, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, CallFunc_FClamp_ReturnValue) == 0x0000E0, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, CallFunc_IsValid_ReturnValue) == 0x0000E8, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_SwitchEnum_CmpSuccess) == 0x0000E9, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, CallFunc_IsValid_ReturnValue_1) == 0x0000EA, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker, K2Node_Event_IsDesignTime) == 0x0000EB, "Member 'WBP_Compass_Tick_ActorTracker_C_ExecuteUbergraph_WBP_Compass_Tick_ActorTracker::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.GetIsFocused
// 0x0006 (0x0006 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_GetIsFocused final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue_1;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_GetIsFocused) == 0x000001, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_GetIsFocused");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_GetIsFocused) == 0x000006, "Wrong size on WBP_Compass_Tick_ActorTracker_C_GetIsFocused");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_GetIsFocused, IsFocused) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_GetIsFocused::IsFocused' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_GetIsFocused, CallFunc_GetVisibility_ReturnValue) == 0x000001, "Member 'WBP_Compass_Tick_ActorTracker_C_GetIsFocused::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_GetIsFocused, CallFunc_GetVisibility_ReturnValue_1) == 0x000002, "Member 'WBP_Compass_Tick_ActorTracker_C_GetIsFocused::CallFunc_GetVisibility_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_GetIsFocused, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'WBP_Compass_Tick_ActorTracker_C_GetIsFocused::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_GetIsFocused, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'WBP_Compass_Tick_ActorTracker_C_GetIsFocused::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_GetIsFocused, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'WBP_Compass_Tick_ActorTracker_C_GetIsFocused::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_PreConstruct");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_PreConstruct) == 0x000001, "Wrong size on WBP_Compass_Tick_ActorTracker_C_PreConstruct");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.SetIcon
// 0x0040 (0x0040 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_SetIcon final
{
public:
	class UImage*                                 Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BackerWidget;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Param_Icon;                                        // 0x0010(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	ESlateVisibility                              IconVisibility;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_SetIcon) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_SetIcon");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_SetIcon) == 0x000040, "Wrong size on WBP_Compass_Tick_ActorTracker_C_SetIcon");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetIcon, Widget) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_SetIcon::Widget' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetIcon, BackerWidget) == 0x000008, "Member 'WBP_Compass_Tick_ActorTracker_C_SetIcon::BackerWidget' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetIcon, Param_Icon) == 0x000010, "Member 'WBP_Compass_Tick_ActorTracker_C_SetIcon::Param_Icon' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetIcon, IconVisibility) == 0x000038, "Member 'WBP_Compass_Tick_ActorTracker_C_SetIcon::IconVisibility' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetIcon, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000039, "Member 'WBP_Compass_Tick_ActorTracker_C_SetIcon::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetIcon, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'WBP_Compass_Tick_ActorTracker_C_SetIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.SetShowDistanceIndicator
// 0x0005 (0x0005 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator) == 0x000001, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator) == 0x000005, "Wrong size on WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator, bShow) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator::bShow' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator, Temp_bool_Variable) == 0x000001, "Member 'WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator, Temp_byte_Variable) == 0x000002, "Member 'WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator, K2Node_Select_Default) == 0x000004, "Member 'WBP_Compass_Tick_ActorTracker_C_SetShowDistanceIndicator::K2Node_Select_Default' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.UnbindVillagerActivityUpdated
// 0x0008 (0x0008 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_UnbindVillagerActivityUpdated final
{
public:
	class AActor*                                 NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_UnbindVillagerActivityUpdated) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_UnbindVillagerActivityUpdated");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_UnbindVillagerActivityUpdated) == 0x000008, "Wrong size on WBP_Compass_Tick_ActorTracker_C_UnbindVillagerActivityUpdated");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UnbindVillagerActivityUpdated, NewParam) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_UnbindVillagerActivityUpdated::NewParam' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.UpdateDistanceText
// 0x00A0 (0x00A0 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText final
{
public:
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Round64_ReturnValue;                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_Int64ToInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F3E[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0088(0x0018)()
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText) == 0x0000A0, "Wrong size on WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText, CallFunc_VSize_ReturnValue) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText, CallFunc_Round64_ReturnValue) == 0x000010, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText::CallFunc_Round64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText, CallFunc_Conv_Int64ToInt_ReturnValue) == 0x000018, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText::CallFunc_Conv_Int64ToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000020, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText, K2Node_MakeArray_Array) == 0x000078, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText, CallFunc_Format_ReturnValue) == 0x000088, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateDistanceText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.UpdateFocusedBacker
// 0x0001 (0x0001 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_UpdateFocusedBacker final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_UpdateFocusedBacker) == 0x000001, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_UpdateFocusedBacker");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_UpdateFocusedBacker) == 0x000001, "Wrong size on WBP_Compass_Tick_ActorTracker_C_UpdateFocusedBacker");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateFocusedBacker, IsFocused) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateFocusedBacker::IsFocused' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.UpdateFromItemInfo
// 0x0008 (0x0008 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo final
{
public:
	ESlateVisibility                              QuestIconVisibility;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_SoftObjectReference_ReturnValue; // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_TextText_ReturnValue;            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo) == 0x000001, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo) == 0x000008, "Wrong size on WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo, QuestIconVisibility) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo::QuestIconVisibility' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo, Temp_byte_Variable) == 0x000001, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo, Temp_bool_Variable) == 0x000003, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo, K2Node_Select_Default) == 0x000004, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo, CallFunc_NotEqual_SoftObjectReference_ReturnValue) == 0x000005, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo::CallFunc_NotEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000006, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo, CallFunc_NotEqual_TextText_ReturnValue) == 0x000007, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateFromItemInfo::CallFunc_NotEqual_TextText_ReturnValue' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.UpdatePositionInformation
// 0x0070 (0x0070 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F3F[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F40[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation) == 0x000070, "Wrong size on WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation, Pawn) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation::Pawn' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000028, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation, CallFunc_IsValid_ReturnValue_1) == 0x000040, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000048, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000060, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation, CallFunc_VSize_ReturnValue) == 0x000068, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdatePositionInformation::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.UpdateVerticalIndicators
// 0x0108 (0x0108 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators final
{
public:
	double                                        InDeltaTime;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DistanceCulled;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F41[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceMeters;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VerticalIndicator_MinVerticalDistanceToDraw;       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_VerticalIndicator_HorizontalDistance_FadeRange; // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDrawDown;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDrawUp;                                      // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDrawVerticalMarkersBasedOnDistance;          // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F42[0x5];                                     // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_3;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F43[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F44[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Compute_VerticalIndicator_MinVerticalDistanceToDraw_Value; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize2D_ReturnValue;                      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F45[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F46[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_2;                  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_3;                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetOpacity_InOpacity_ImplicitCast;        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetOpacity_InOpacity_ImplicitCast_1;      // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators) == 0x000108, "Wrong size on WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, InDeltaTime) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, DistanceCulled) == 0x000008, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::DistanceCulled' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, DistanceMeters) == 0x000010, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::DistanceMeters' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, VerticalIndicator_MinVerticalDistanceToDraw) == 0x000018, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::VerticalIndicator_MinVerticalDistanceToDraw' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, Param_VerticalIndicator_HorizontalDistance_FadeRange) == 0x000020, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::Param_VerticalIndicator_HorizontalDistance_FadeRange' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, ShouldDrawDown) == 0x000028, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::ShouldDrawDown' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, ShouldDrawUp) == 0x000029, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::ShouldDrawUp' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, ShouldDrawVerticalMarkersBasedOnDistance) == 0x00002A, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::ShouldDrawVerticalMarkersBasedOnDistance' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_SelectFloat_ReturnValue) == 0x000030, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_SelectFloat_ReturnValue_1) == 0x000038, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_SelectFloat_ReturnValue_2) == 0x000040, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_FInterpTo_ReturnValue) == 0x000048, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_SelectFloat_ReturnValue_3) == 0x000050, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_FInterpTo_ReturnValue_1) == 0x000058, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000060, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000068, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000070, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000078, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Compute_VerticalIndicator_MinVerticalDistanceToDraw_Value) == 0x000088, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Compute_VerticalIndicator_MinVerticalDistanceToDraw_Value' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_VSize2D_ReturnValue) == 0x000090, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000098, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_BooleanOR_ReturnValue) == 0x000099, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_BreakVector_X) == 0x0000A0, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_BreakVector_Y) == 0x0000A8, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_BreakVector_Z) == 0x0000B0, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000B8, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0000B9, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_BooleanAND_ReturnValue) == 0x0000BA, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_BooleanAND_ReturnValue_1) == 0x0000BB, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_FClamp_ReturnValue) == 0x0000D0, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000D8, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000E0, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000E8, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_FInterpTo_ReturnValue_2) == 0x0000F0, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_FInterpTo_ReturnValue_3) == 0x0000F8, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_FInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_SetOpacity_InOpacity_ImplicitCast) == 0x000100, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_SetOpacity_InOpacity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators, CallFunc_SetOpacity_InOpacity_ImplicitCast_1) == 0x000104, "Member 'WBP_Compass_Tick_ActorTracker_C_UpdateVerticalIndicators::CallFunc_SetOpacity_InOpacity_ImplicitCast_1' has a wrong offset!");

// Function WBP_Compass_Tick_ActorTracker.WBP_Compass_Tick_ActorTracker_C.VillagerActionChanged
// 0x0078 (0x0078 - 0x0000)
struct WBP_Compass_Tick_ActorTracker_C_VillagerActionChanged final
{
public:
	class AValeriaVillagerCharacter*              Villager;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVillagerActionInfo                    ActionInfo;                                        // 0x0008(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_Compass_Tick_ActorTracker_C_VillagerActionChanged) == 0x000008, "Wrong alignment on WBP_Compass_Tick_ActorTracker_C_VillagerActionChanged");
static_assert(sizeof(WBP_Compass_Tick_ActorTracker_C_VillagerActionChanged) == 0x000078, "Wrong size on WBP_Compass_Tick_ActorTracker_C_VillagerActionChanged");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_VillagerActionChanged, Villager) == 0x000000, "Member 'WBP_Compass_Tick_ActorTracker_C_VillagerActionChanged::Villager' has a wrong offset!");
static_assert(offsetof(WBP_Compass_Tick_ActorTracker_C_VillagerActionChanged, ActionInfo) == 0x000008, "Member 'WBP_Compass_Tick_ActorTracker_C_VillagerActionChanged::ActionInfo' has a wrong offset!");

}

