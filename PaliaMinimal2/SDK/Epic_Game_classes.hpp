#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Epic_Game

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_classes.hpp"


namespace SDK
{

// Class Epic_Game.AbilityTask_AnimInstancePlayMontageAndWait
// 0x00C0 (0x0140 - 0x0080)
class UAbilityTask_AnimInstancePlayMontageAndWait final : public UAbilityTask
{
public:
	FMulticastInlineDelegateProperty_             OnCompleted;                                       // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBlendOut;                                        // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInterrupted;                                     // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCancelled;                                       // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventReceived;                                     // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C79[0x8];                                     // 0x00D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           MontageToPlay;                                     // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  EventTags;                                         // 0x00E0(0x0020)(NativeAccessSpecifierPrivate)
	float                                         Rate;                                              // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartSection;                                      // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bStopWhenAbilityEnds;                              // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C7A[0x33];                                    // 0x010D(0x0033)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_AnimInstancePlayMontageAndWait* AnimInstancePlayMontageAndWaitForEvent(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UAnimInstance* InAnimInstance, class UAnimMontage* Param_MontageToPlay, const struct FGameplayTagContainer& Param_EventTags, float Param_Rate, class FName Param_StartSection, bool Param_bStopWhenAbilityEnds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_AnimInstancePlayMontageAndWait">();
	}
	static class UAbilityTask_AnimInstancePlayMontageAndWait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_AnimInstancePlayMontageAndWait>();
	}
};
static_assert(alignof(UAbilityTask_AnimInstancePlayMontageAndWait) == 0x000008, "Wrong alignment on UAbilityTask_AnimInstancePlayMontageAndWait");
static_assert(sizeof(UAbilityTask_AnimInstancePlayMontageAndWait) == 0x000140, "Wrong size on UAbilityTask_AnimInstancePlayMontageAndWait");
static_assert(offsetof(UAbilityTask_AnimInstancePlayMontageAndWait, OnCompleted) == 0x000080, "Member 'UAbilityTask_AnimInstancePlayMontageAndWait::OnCompleted' has a wrong offset!");
static_assert(offsetof(UAbilityTask_AnimInstancePlayMontageAndWait, OnBlendOut) == 0x000090, "Member 'UAbilityTask_AnimInstancePlayMontageAndWait::OnBlendOut' has a wrong offset!");
static_assert(offsetof(UAbilityTask_AnimInstancePlayMontageAndWait, OnInterrupted) == 0x0000A0, "Member 'UAbilityTask_AnimInstancePlayMontageAndWait::OnInterrupted' has a wrong offset!");
static_assert(offsetof(UAbilityTask_AnimInstancePlayMontageAndWait, OnCancelled) == 0x0000B0, "Member 'UAbilityTask_AnimInstancePlayMontageAndWait::OnCancelled' has a wrong offset!");
static_assert(offsetof(UAbilityTask_AnimInstancePlayMontageAndWait, EventReceived) == 0x0000C0, "Member 'UAbilityTask_AnimInstancePlayMontageAndWait::EventReceived' has a wrong offset!");
static_assert(offsetof(UAbilityTask_AnimInstancePlayMontageAndWait, MontageToPlay) == 0x0000D8, "Member 'UAbilityTask_AnimInstancePlayMontageAndWait::MontageToPlay' has a wrong offset!");
static_assert(offsetof(UAbilityTask_AnimInstancePlayMontageAndWait, EventTags) == 0x0000E0, "Member 'UAbilityTask_AnimInstancePlayMontageAndWait::EventTags' has a wrong offset!");
static_assert(offsetof(UAbilityTask_AnimInstancePlayMontageAndWait, Rate) == 0x000100, "Member 'UAbilityTask_AnimInstancePlayMontageAndWait::Rate' has a wrong offset!");
static_assert(offsetof(UAbilityTask_AnimInstancePlayMontageAndWait, StartSection) == 0x000104, "Member 'UAbilityTask_AnimInstancePlayMontageAndWait::StartSection' has a wrong offset!");
static_assert(offsetof(UAbilityTask_AnimInstancePlayMontageAndWait, bStopWhenAbilityEnds) == 0x00010C, "Member 'UAbilityTask_AnimInstancePlayMontageAndWait::bStopWhenAbilityEnds' has a wrong offset!");

// Class Epic_Game.RPGAbilityTask_PlayMontageAndWaitForEvent
// 0x00C0 (0x0140 - 0x0080)
class URPGAbilityTask_PlayMontageAndWaitForEvent final : public UAbilityTask
{
public:
	FMulticastInlineDelegateProperty_             OnCompleted;                                       // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBlendOut;                                        // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnInterrupted;                                     // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCancelled;                                       // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EventReceived;                                     // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  EventTags;                                         // 0x00D8(0x0020)(NativeAccessSpecifierPrivate)
	float                                         Rate;                                              // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartSection;                                      // 0x00FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnimRootMotionTranslationScale;                    // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bStopWhenAbilityEnds;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C7C[0x37];                                    // 0x0109(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URPGAbilityTask_PlayMontageAndWaitForEvent* PlayMontageAndWaitForEvent(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UAnimMontage* Param_MontageToPlay, const struct FGameplayTagContainer& Param_EventTags, float Param_Rate, class FName Param_StartSection, bool Param_bStopWhenAbilityEnds, float Param_AnimRootMotionTranslationScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RPGAbilityTask_PlayMontageAndWaitForEvent">();
	}
	static class URPGAbilityTask_PlayMontageAndWaitForEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URPGAbilityTask_PlayMontageAndWaitForEvent>();
	}
};
static_assert(alignof(URPGAbilityTask_PlayMontageAndWaitForEvent) == 0x000008, "Wrong alignment on URPGAbilityTask_PlayMontageAndWaitForEvent");
static_assert(sizeof(URPGAbilityTask_PlayMontageAndWaitForEvent) == 0x000140, "Wrong size on URPGAbilityTask_PlayMontageAndWaitForEvent");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, OnCompleted) == 0x000080, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::OnCompleted' has a wrong offset!");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, OnBlendOut) == 0x000090, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::OnBlendOut' has a wrong offset!");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, OnInterrupted) == 0x0000A0, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::OnInterrupted' has a wrong offset!");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, OnCancelled) == 0x0000B0, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::OnCancelled' has a wrong offset!");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, EventReceived) == 0x0000C0, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::EventReceived' has a wrong offset!");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, MontageToPlay) == 0x0000D0, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::MontageToPlay' has a wrong offset!");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, EventTags) == 0x0000D8, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::EventTags' has a wrong offset!");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, Rate) == 0x0000F8, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::Rate' has a wrong offset!");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, StartSection) == 0x0000FC, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::StartSection' has a wrong offset!");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, AnimRootMotionTranslationScale) == 0x000104, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(URPGAbilityTask_PlayMontageAndWaitForEvent, bStopWhenAbilityEnds) == 0x000108, "Member 'URPGAbilityTask_PlayMontageAndWaitForEvent::bStopWhenAbilityEnds' has a wrong offset!");

}

